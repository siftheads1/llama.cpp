	.text
	.file	"ggml-cpu.c"
	.globl	ggml_get_type_traits_cpu        // -- Begin function ggml_get_type_traits_cpu
	.p2align	4
	.type	ggml_get_type_traits_cpu,@function
ggml_get_type_traits_cpu:               // @ggml_get_type_traits_cpu
	.cfi_startproc
// %bb.0:
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	mov	w9, w0
	add	x0, x8, x9, lsl #5
	ret
.Lfunc_end0:
	.size	ggml_get_type_traits_cpu, .Lfunc_end0-ggml_get_type_traits_cpu
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_vec_dot_f32
	.type	ggml_vec_dot_f32,@function
ggml_vec_dot_f32:                       // @ggml_vec_dot_f32
	.cfi_startproc
// %bb.0:
	cmp	w0, #1
	b.lt	.LBB1_3
// %bb.1:                               // %.lr.ph.preheader
	mov	w8, w0
	cmp	w0, #1
	b.ne	.LBB1_4
// %bb.2:
	fmov	d0, xzr
	mov	x9, xzr
	b	.LBB1_7
.LBB1_3:
	fmov	s0, wzr
	str	s0, [x1]
	ret
.LBB1_4:                                // %vector.ph
	fmov	d0, xzr
	and	x9, x8, #0x7ffffffe
	add	x10, x3, #4
	add	x11, x5, #4
	mov	x12, x9
	.p2align	5, , 16
.LBB1_5:                                // %vector.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	s1, s2, [x10, #-4]
	add	x10, x10, #8
	ldp	s3, s4, [x11, #-4]
	add	x11, x11, #8
	subs	x12, x12, #2
	fmul	s2, s2, s4
	fmul	s1, s1, s3
	fcvt	d2, s2
	fcvt	d1, s1
	nop
	nop
	b.ne	.LBB1_5
// %bb.6:                               // %middle.block
	cmp	x9, x8
	b.eq	.LBB1_13
.LBB1_7:                                // %.lr.ph.preheader17
	tbnz	w8, #0, .LBB1_9
// %bb.8:
	mov	x10, x9
	b	.LBB1_10
.LBB1_9:                                // %.lr.ph.prol
	ldr	s1, [x3, x9, lsl #2]
	orr	x10, x9, #0x1
	ldr	s2, [x5, x9, lsl #2]
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
.LBB1_10:                               // %.lr.ph.prol.loopexit
	sub	x11, x8, #1
	cmp	x9, x11
	b.eq	.LBB1_13
// %bb.11:                              // %.lr.ph.preheader22
	lsl	x9, x10, #2
	sub	x8, x8, x10
	add	x10, x9, #4
	add	x9, x5, x10
	add	x10, x3, x10
	.p2align	5, , 16
.LBB1_12:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	ldp	s1, s2, [x10, #-4]
	subs	x8, x8, #2
	ldp	s3, s4, [x9, #-4]
	add	x9, x9, #8
	add	x10, x10, #8
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB1_12
.LBB1_13:                               // %._crit_edge.loopexit
	fcvt	s0, d0
	str	s0, [x1]
	ret
.Lfunc_end1:
	.size	ggml_vec_dot_f32, .Lfunc_end1-ggml_vec_dot_f32
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_vec_dot_f16
	.type	ggml_vec_dot_f16,@function
ggml_vec_dot_f16:                       // @ggml_vec_dot_f16
	.cfi_startproc
// %bb.0:
	cmp	w0, #1
	b.lt	.LBB2_4
// %bb.1:                               // %.lr.ph.preheader
	adrp	x9, :got:ggml_table_f32_f16
	fmov	d0, xzr
	mov	w8, w0
	ldr	x9, [x9, :got_lo12:ggml_table_f32_f16]
	.p2align	5, , 16
.LBB2_2:                                // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	//APP
	// loop body
	//NO_APP
	ldrh	w10, [x3], #2
	subs	x8, x8, #1
	ldr	s1, [x9, x10, lsl #2]
	ldrh	w10, [x5], #2
	ldr	s2, [x9, x10, lsl #2]
	//APP
	// loop body end
	//NO_APP
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB2_2
// %bb.3:                               // %._crit_edge.loopexit
	fcvt	s0, d0
	str	s0, [x1]
	ret
.LBB2_4:
	fmov	s0, wzr
	str	s0, [x1]
	ret
.Lfunc_end2:
	.size	ggml_vec_dot_f16, .Lfunc_end2-ggml_vec_dot_f16
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_vec_dot_bf16
	.type	ggml_vec_dot_bf16,@function
ggml_vec_dot_bf16:                      // @ggml_vec_dot_bf16
	.cfi_startproc
// %bb.0:
	cmp	w0, #1
	b.lt	.LBB3_3
// %bb.1:                               // %.lr.ph.preheader
	mov	w8, w0
	cmp	w0, #1
	b.ne	.LBB3_4
// %bb.2:
	mov	x9, xzr
	fmov	d0, xzr
	b	.LBB3_7
.LBB3_3:
	fmov	s0, wzr
	str	s0, [x1]
	ret
.LBB3_4:                                // %vector.ph
	fmov	d0, xzr
	and	x9, x8, #0x7ffffffe
	add	x10, x3, #2
	add	x11, x5, #2
	mov	x12, x9
	.p2align	5, , 16
.LBB3_5:                                // %vector.body
                                        // =>This Inner Loop Header: Depth=1
	ldurh	w13, [x10, #-2]
	subs	x12, x12, #2
	lsl	w13, w13, #16
	ldrh	w14, [x10], #4
	lsl	w14, w14, #16
	fmov	s1, w13
	ldurh	w13, [x11, #-2]
	fmov	s2, w14
	ldrh	w14, [x11], #4
	lsl	w13, w13, #16
	lsl	w14, w14, #16
	fmov	s3, w13
	fmov	s4, w14
	fmul	s1, s1, s3
	fmul	s2, s2, s4
	fcvt	d1, s1
	fcvt	d2, s2
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB3_5
// %bb.6:                               // %middle.block
	cmp	x9, x8
	b.eq	.LBB3_9
.LBB3_7:                                // %.lr.ph.preheader22
	add	x10, x5, x9, lsl #1
	sub	x8, x8, x9
	add	x9, x3, x9, lsl #1
	.p2align	5, , 16
.LBB3_8:                                // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	ldrh	w11, [x9], #2
	subs	x8, x8, #1
	lsl	w11, w11, #16
	fmov	s1, w11
	ldrh	w11, [x10], #2
	lsl	w11, w11, #16
	fmov	s2, w11
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB3_8
.LBB3_9:                                // %._crit_edge.loopexit
	fcvt	s0, d0
	str	s0, [x1]
	ret
.Lfunc_end3:
	.size	ggml_vec_dot_bf16, .Lfunc_end3-ggml_vec_dot_bf16
	.cfi_endproc
                                        // -- End function
	.globl	ggml_barrier                    // -- Begin function ggml_barrier
	.p2align	4
	.type	ggml_barrier,@function
ggml_barrier:                           // @ggml_barrier
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	mov	x19, x0
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	bl	__kmpc_global_thread_num
	ldr	w8, [x19, #284]
	cmp	w8, #1
	b.ne	.LBB4_2
// %bb.1:
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB4_2:
	.cfi_restore_state
	mov	w1, w0
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	b	__kmpc_barrier
.Lfunc_end4:
	.size	ggml_barrier, .Lfunc_end4-ggml_barrier
	.cfi_endproc
                                        // -- End function
	.globl	ggml_numa_init                  // -- Begin function ggml_numa_init
	.p2align	4
	.type	ggml_numa_init,@function
ggml_numa_init:                         // @ggml_numa_init
	.cfi_startproc
// %bb.0:
	ret
.Lfunc_end5:
	.size	ggml_numa_init, .Lfunc_end5-ggml_numa_init
	.cfi_endproc
                                        // -- End function
	.globl	ggml_is_numa                    // -- Begin function ggml_is_numa
	.p2align	4
	.type	ggml_is_numa,@function
ggml_is_numa:                           // @ggml_is_numa
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end6:
	.size	ggml_is_numa, .Lfunc_end6-ggml_is_numa
	.cfi_endproc
                                        // -- End function
	.globl	ggml_new_i32                    // -- Begin function ggml_new_i32
	.p2align	4
	.type	ggml_new_i32,@function
ggml_new_i32:                           // @ggml_new_i32
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	mov	w19, w1
	mov	x20, x0
	bl	ggml_get_no_alloc
	tbnz	w0, #0, .LBB7_2
// %bb.1:
	mov	x0, x20
	mov	w1, #26                         // =0x1a
	mov	w2, #1                          // =0x1
	bl	ggml_new_tensor_1d
	mov	w1, w19
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	ggml_set_i32
.LBB7_2:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.3
	add	x3, x3, :lo12:.L.str.3
	mov	w1, #2703                       // =0xa8f
	bl	ggml_abort
.Lfunc_end7:
	.size	ggml_new_i32, .Lfunc_end7-ggml_new_i32
	.cfi_endproc
                                        // -- End function
	.globl	ggml_set_i32                    // -- Begin function ggml_set_i32
	.p2align	4
	.type	ggml_set_i32,@function
ggml_set_i32:                           // @ggml_set_i32
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 96
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	mov	w20, w1
	mov	x19, x0
	bl	ggml_nrows
	ldr	x22, [x19, #16]
	ldr	x23, [x19, #56]
	ldr	x24, [x19, #248]
	ldr	w8, [x19]
	cmp	w8, #24
	b.gt	.LBB8_10
// %bb.1:
	cbz	w8, .LBB8_58
// %bb.2:
	cmp	w8, #1
	b.eq	.LBB8_28
// %bb.3:
	cmp	w8, #24
	b.ne	.LBB8_93
// %bb.4:                               // %.preheader
	cmp	w0, #1
	b.lt	.LBB8_88
// %bb.5:                               // %.lr.ph102
	and	x8, x0, #0x7fffffff
	and	x25, x0, #0x1
	cmp	x8, #1
	b.ne	.LBB8_89
// %bb.6:
	mov	x26, xzr
.LBB8_7:                                // %.loopexit.loopexit.unr-lcssa
	cbz	x25, .LBB8_88
// %bb.8:                               // %.loopexit.loopexit.unr-lcssa
	cmp	w22, #1
	b.lt	.LBB8_88
// %bb.9:                               // %.lr.ph.preheader.i.epil
	madd	x0, x23, x26, x24
	and	x2, x22, #0x7fffffff
	mov	w1, w20
	bl	memset
	b	.LBB8_88
.LBB8_10:
	cmp	w8, #25
	b.eq	.LBB8_73
// %bb.11:
	cmp	w8, #26
	b.eq	.LBB8_43
// %bb.12:
	cmp	w8, #30
	b.ne	.LBB8_93
// %bb.13:                              // %.preheader88
	cmp	w0, #1
	b.lt	.LBB8_88
// %bb.14:                              // %.lr.ph94
	scvtf	s0, w20
	mov	w12, #32767                     // =0x7fff
	mov	w14, #2139095040                // =0x7f800000
	and	x9, x22, #0x7fffffff
	and	x11, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	fmov	w13, s0
	ubfx	w15, w13, #16, #1
	add	w15, w13, w15
	add	w12, w15, w12
	and	w15, w13, #0x7fffffff
	lsr	w13, w13, #16
	orr	w13, w13, #0x40
	cmp	w15, w14
	lsr	w12, w12, #16
	add	x14, x24, #2
	add	x15, x24, #14
	csel	w12, w13, w12, hi
	sub	x13, x9, x11
	b	.LBB8_16
	.p2align	5, , 16
.LBB8_15:                               // %ggml_vec_set_bf16.exit
                                        //   in Loop: Header=BB8_16 Depth=1
	add	x8, x8, #1
	add	x14, x14, x23
	add	x24, x24, x23
	add	x15, x15, x23
	cmp	x8, x10
	b.eq	.LBB8_88
.LBB8_16:                               // %ggml_compute_fp32_to_bf16.exit
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_20 Depth 2
                                        //     Child Loop BB8_24 Depth 2
                                        //     Child Loop BB8_27 Depth 2
	cmp	w22, #1
	b.lt	.LBB8_15
// %bb.17:                              // %.lr.ph.i72.preheader
                                        //   in Loop: Header=BB8_16 Depth=1
	cmp	x9, #2
	b.hs	.LBB8_19
// %bb.18:                              //   in Loop: Header=BB8_16 Depth=1
	mov	x16, xzr
	b	.LBB8_22
	.p2align	5, , 16
.LBB8_19:                               // %vector.body151.preheader
                                        //   in Loop: Header=BB8_16 Depth=1
	mov	x16, x13
	mov	x17, x14
	.p2align	5, , 16
.LBB8_20:                               // %vector.body151
                                        //   Parent Loop BB8_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sturh	w12, [x17, #-2]
	subs	x16, x16, #2
	strh	w12, [x17], #4
	b.ne	.LBB8_20
// %bb.21:                              // %middle.block144
                                        //   in Loop: Header=BB8_16 Depth=1
	mov	x16, x13
	cbz	x11, .LBB8_15
.LBB8_22:                               // %.lr.ph.i72.preheader194
                                        //   in Loop: Header=BB8_16 Depth=1
	sub	w17, w22, w16
	ands	x0, x17, #0x7
	mov	x17, x16
	b.eq	.LBB8_25
// %bb.23:                              // %.lr.ph.i72.prol.preheader
                                        //   in Loop: Header=BB8_16 Depth=1
	mov	x17, x16
	.p2align	5, , 16
.LBB8_24:                               // %.lr.ph.i72.prol
                                        //   Parent Loop BB8_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	strh	w12, [x24, x17, lsl #1]
	add	x17, x17, #1
	subs	x0, x0, #1
	b.ne	.LBB8_24
.LBB8_25:                               // %.lr.ph.i72.prol.loopexit
                                        //   in Loop: Header=BB8_16 Depth=1
	sub	x16, x16, x9
	cmn	x16, #8
	b.hi	.LBB8_15
// %bb.26:                              // %.lr.ph.i72.preheader194.new
                                        //   in Loop: Header=BB8_16 Depth=1
	sub	x16, x9, x17
	lsl	x17, x17, #1
	mov	x0, x15
	.p2align	5, , 16
.LBB8_27:                               // %.lr.ph.i72
                                        //   Parent Loop BB8_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x1, x0, x17
	subs	x16, x16, #8
	sturh	w12, [x1, #-14]
	add	x0, x0, #16
	sturh	w12, [x1, #-12]
	sturh	w12, [x1, #-10]
	sturh	w12, [x1, #-8]
	sturh	w12, [x1, #-6]
	sturh	w12, [x1, #-4]
	sturh	w12, [x1, #-2]
	strh	w12, [x1]
	b.ne	.LBB8_27
	b	.LBB8_15
.LBB8_28:                               // %.preheader86
	cmp	w0, #1
	b.lt	.LBB8_88
// %bb.29:                              // %.lr.ph96
	scvtf	s0, w20
	mov	w9, #2004877312                 // =0x77800000
	fmov	s2, w9
	mov	w9, #142606336                  // =0x8800000
	mov	w10, #125829120                 // =0x7800000
	mov	w13, #1073741824                // =0x40000000
	mov	w14, #32256                     // =0x7e00
	mov	x8, xzr
	add	x15, x24, #14
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w9
	fmov	w9, s0
	and	w11, w9, #0x7f800000
	ubfx	w12, w9, #23, #8
	fmul	s0, s1, s2
	add	w10, w11, w10
	cmp	w12, #113
	mov	w11, #-16777216                 // =0xff000000
	csel	w10, w13, w10, lo
	lsl	w13, w9, #1
	lsr	w9, w9, #31
	fmov	s1, w10
	cmp	w13, w11
	and	x11, x0, #0x7fffffff
	fadd	s0, s0, s1
	fmov	w10, s0
	lsr	w12, w10, #13
	and	w10, w10, #0xfff
	and	w12, w12, #0x7c00
	add	w10, w12, w10
	and	x12, x22, #0x1
	csel	w10, w14, w10, hi
	add	x14, x24, #2
	orr	w9, w10, w9, lsl #15
	and	x10, x22, #0x7fffffff
	sub	x13, x10, x12
	b	.LBB8_31
	.p2align	5, , 16
.LBB8_30:                               // %ggml_vec_set_f16.exit
                                        //   in Loop: Header=BB8_31 Depth=1
	add	x8, x8, #1
	add	x14, x14, x23
	add	x24, x24, x23
	add	x15, x15, x23
	cmp	x8, x11
	b.eq	.LBB8_88
.LBB8_31:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_35 Depth 2
                                        //     Child Loop BB8_39 Depth 2
                                        //     Child Loop BB8_42 Depth 2
	cmp	w22, #1
	b.lt	.LBB8_30
// %bb.32:                              // %.lr.ph.i65.preheader
                                        //   in Loop: Header=BB8_31 Depth=1
	cmp	x10, #2
	b.hs	.LBB8_34
// %bb.33:                              //   in Loop: Header=BB8_31 Depth=1
	mov	x16, xzr
	b	.LBB8_37
	.p2align	5, , 16
.LBB8_34:                               // %vector.body162.preheader
                                        //   in Loop: Header=BB8_31 Depth=1
	mov	x16, x13
	mov	x17, x14
	.p2align	5, , 16
.LBB8_35:                               // %vector.body162
                                        //   Parent Loop BB8_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sturh	w9, [x17, #-2]
	subs	x16, x16, #2
	strh	w9, [x17], #4
	b.ne	.LBB8_35
// %bb.36:                              // %middle.block155
                                        //   in Loop: Header=BB8_31 Depth=1
	mov	x16, x13
	cbz	x12, .LBB8_30
.LBB8_37:                               // %.lr.ph.i65.preheader192
                                        //   in Loop: Header=BB8_31 Depth=1
	sub	w17, w22, w16
	ands	x0, x17, #0x7
	mov	x17, x16
	b.eq	.LBB8_40
// %bb.38:                              // %.lr.ph.i65.prol.preheader
                                        //   in Loop: Header=BB8_31 Depth=1
	mov	x17, x16
	.p2align	5, , 16
.LBB8_39:                               // %.lr.ph.i65.prol
                                        //   Parent Loop BB8_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	strh	w9, [x24, x17, lsl #1]
	add	x17, x17, #1
	subs	x0, x0, #1
	b.ne	.LBB8_39
.LBB8_40:                               // %.lr.ph.i65.prol.loopexit
                                        //   in Loop: Header=BB8_31 Depth=1
	sub	x16, x16, x10
	cmn	x16, #8
	b.hi	.LBB8_30
// %bb.41:                              // %.lr.ph.i65.preheader192.new
                                        //   in Loop: Header=BB8_31 Depth=1
	sub	x16, x10, x17
	lsl	x17, x17, #1
	mov	x0, x15
	.p2align	5, , 16
.LBB8_42:                               // %.lr.ph.i65
                                        //   Parent Loop BB8_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x1, x0, x17
	subs	x16, x16, #8
	sturh	w9, [x1, #-14]
	add	x0, x0, #16
	sturh	w9, [x1, #-12]
	sturh	w9, [x1, #-10]
	sturh	w9, [x1, #-8]
	sturh	w9, [x1, #-6]
	sturh	w9, [x1, #-4]
	sturh	w9, [x1, #-2]
	strh	w9, [x1]
	b.ne	.LBB8_42
	b	.LBB8_30
.LBB8_43:                               // %.preheader84
	cmp	w0, #1
	b.lt	.LBB8_88
// %bb.44:                              // %.lr.ph98
	and	x9, x22, #0x7fffffff
	and	x11, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	sub	x12, x9, x11
	add	x13, x24, #4
	add	x14, x24, #28
	b	.LBB8_46
	.p2align	5, , 16
.LBB8_45:                               // %ggml_vec_set_i32.exit
                                        //   in Loop: Header=BB8_46 Depth=1
	add	x8, x8, #1
	add	x13, x13, x23
	add	x24, x24, x23
	add	x14, x14, x23
	cmp	x8, x10
	b.eq	.LBB8_88
.LBB8_46:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_50 Depth 2
                                        //     Child Loop BB8_54 Depth 2
                                        //     Child Loop BB8_57 Depth 2
	cmp	w22, #1
	b.lt	.LBB8_45
// %bb.47:                              // %.lr.ph.i61.preheader
                                        //   in Loop: Header=BB8_46 Depth=1
	cmp	x9, #2
	b.hs	.LBB8_49
// %bb.48:                              //   in Loop: Header=BB8_46 Depth=1
	mov	x15, xzr
	b	.LBB8_52
	.p2align	5, , 16
.LBB8_49:                               // %vector.body173.preheader
                                        //   in Loop: Header=BB8_46 Depth=1
	mov	x15, x12
	mov	x16, x13
	.p2align	5, , 16
.LBB8_50:                               // %vector.body173
                                        //   Parent Loop BB8_46 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	stp	w20, w20, [x16, #-4]
	add	x16, x16, #8
	subs	x15, x15, #2
	b.ne	.LBB8_50
// %bb.51:                              // %middle.block166
                                        //   in Loop: Header=BB8_46 Depth=1
	mov	x15, x12
	cbz	x11, .LBB8_45
.LBB8_52:                               // %.lr.ph.i61.preheader190
                                        //   in Loop: Header=BB8_46 Depth=1
	sub	w16, w22, w15
	ands	x17, x16, #0x7
	mov	x16, x15
	b.eq	.LBB8_55
// %bb.53:                              // %.lr.ph.i61.prol.preheader
                                        //   in Loop: Header=BB8_46 Depth=1
	mov	x16, x15
	.p2align	5, , 16
.LBB8_54:                               // %.lr.ph.i61.prol
                                        //   Parent Loop BB8_46 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	w20, [x24, x16, lsl #2]
	add	x16, x16, #1
	subs	x17, x17, #1
	b.ne	.LBB8_54
.LBB8_55:                               // %.lr.ph.i61.prol.loopexit
                                        //   in Loop: Header=BB8_46 Depth=1
	sub	x15, x15, x9
	cmn	x15, #8
	b.hi	.LBB8_45
// %bb.56:                              // %.lr.ph.i61.preheader190.new
                                        //   in Loop: Header=BB8_46 Depth=1
	sub	x15, x9, x16
	lsl	x16, x16, #2
	mov	x17, x14
	.p2align	5, , 16
.LBB8_57:                               // %.lr.ph.i61
                                        //   Parent Loop BB8_46 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x0, x17, x16
	subs	x15, x15, #8
	stp	w20, w20, [x0, #-28]
	add	x17, x17, #32
	stp	w20, w20, [x0, #-20]
	stp	w20, w20, [x0, #-12]
	stp	w20, w20, [x0, #-4]
	b.ne	.LBB8_57
	b	.LBB8_45
.LBB8_58:                               // %.preheader90
	cmp	w0, #1
	b.lt	.LBB8_88
// %bb.59:                              // %.lr.ph
	scvtf	s0, w20
	and	x9, x22, #0x7fffffff
	and	x11, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	sub	x12, x9, x11
	add	x13, x24, #4
	add	x14, x24, #28
	b	.LBB8_61
	.p2align	5, , 16
.LBB8_60:                               // %ggml_vec_set_f32.exit
                                        //   in Loop: Header=BB8_61 Depth=1
	add	x8, x8, #1
	add	x13, x13, x23
	add	x24, x24, x23
	add	x14, x14, x23
	cmp	x8, x10
	b.eq	.LBB8_88
.LBB8_61:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_65 Depth 2
                                        //     Child Loop BB8_69 Depth 2
                                        //     Child Loop BB8_72 Depth 2
	cmp	w22, #1
	b.lt	.LBB8_60
// %bb.62:                              // %.lr.ph.i78.preheader
                                        //   in Loop: Header=BB8_61 Depth=1
	cmp	x9, #2
	b.hs	.LBB8_64
// %bb.63:                              //   in Loop: Header=BB8_61 Depth=1
	mov	x15, xzr
	b	.LBB8_67
	.p2align	5, , 16
.LBB8_64:                               // %vector.body.preheader
                                        //   in Loop: Header=BB8_61 Depth=1
	mov	x15, x12
	mov	x16, x13
	.p2align	5, , 16
.LBB8_65:                               // %vector.body
                                        //   Parent Loop BB8_61 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	stp	s0, s0, [x16, #-4]
	add	x16, x16, #8
	subs	x15, x15, #2
	b.ne	.LBB8_65
// %bb.66:                              // %middle.block
                                        //   in Loop: Header=BB8_61 Depth=1
	mov	x15, x12
	cbz	x11, .LBB8_60
.LBB8_67:                               // %.lr.ph.i78.preheader196
                                        //   in Loop: Header=BB8_61 Depth=1
	sub	w16, w22, w15
	ands	x17, x16, #0x7
	mov	x16, x15
	b.eq	.LBB8_70
// %bb.68:                              // %.lr.ph.i78.prol.preheader
                                        //   in Loop: Header=BB8_61 Depth=1
	mov	x16, x15
	.p2align	5, , 16
.LBB8_69:                               // %.lr.ph.i78.prol
                                        //   Parent Loop BB8_61 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	s0, [x24, x16, lsl #2]
	add	x16, x16, #1
	subs	x17, x17, #1
	b.ne	.LBB8_69
.LBB8_70:                               // %.lr.ph.i78.prol.loopexit
                                        //   in Loop: Header=BB8_61 Depth=1
	sub	x15, x15, x9
	cmn	x15, #8
	b.hi	.LBB8_60
// %bb.71:                              // %.lr.ph.i78.preheader196.new
                                        //   in Loop: Header=BB8_61 Depth=1
	sub	x15, x9, x16
	lsl	x16, x16, #2
	mov	x17, x14
	.p2align	5, , 16
.LBB8_72:                               // %.lr.ph.i78
                                        //   Parent Loop BB8_61 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x0, x17, x16
	subs	x15, x15, #8
	stp	s0, s0, [x0, #-28]
	add	x17, x17, #32
	stp	s0, s0, [x0, #-20]
	stp	s0, s0, [x0, #-12]
	stp	s0, s0, [x0, #-4]
	b.ne	.LBB8_72
	b	.LBB8_60
.LBB8_73:                               // %.preheader82
	cmp	w0, #1
	b.lt	.LBB8_88
// %bb.74:                              // %.lr.ph100
	and	x9, x22, #0x7fffffff
	and	x11, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	sub	x12, x9, x11
	add	x13, x24, #2
	add	x14, x24, #14
	b	.LBB8_76
	.p2align	5, , 16
.LBB8_75:                               // %ggml_vec_set_i16.exit
                                        //   in Loop: Header=BB8_76 Depth=1
	add	x8, x8, #1
	add	x13, x13, x23
	add	x24, x24, x23
	add	x14, x14, x23
	cmp	x8, x10
	b.eq	.LBB8_88
.LBB8_76:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_80 Depth 2
                                        //     Child Loop BB8_84 Depth 2
                                        //     Child Loop BB8_87 Depth 2
	cmp	w22, #1
	b.lt	.LBB8_75
// %bb.77:                              // %.lr.ph.i.preheader
                                        //   in Loop: Header=BB8_76 Depth=1
	cmp	x9, #2
	b.hs	.LBB8_79
// %bb.78:                              //   in Loop: Header=BB8_76 Depth=1
	mov	x15, xzr
	b	.LBB8_82
	.p2align	5, , 16
.LBB8_79:                               // %vector.body184.preheader
                                        //   in Loop: Header=BB8_76 Depth=1
	mov	x15, x12
	mov	x16, x13
	.p2align	5, , 16
.LBB8_80:                               // %vector.body184
                                        //   Parent Loop BB8_76 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sturh	w20, [x16, #-2]
	subs	x15, x15, #2
	strh	w20, [x16], #4
	b.ne	.LBB8_80
// %bb.81:                              // %middle.block177
                                        //   in Loop: Header=BB8_76 Depth=1
	mov	x15, x12
	cbz	x11, .LBB8_75
.LBB8_82:                               // %.lr.ph.i.preheader188
                                        //   in Loop: Header=BB8_76 Depth=1
	sub	w16, w22, w15
	ands	x17, x16, #0x7
	mov	x16, x15
	b.eq	.LBB8_85
// %bb.83:                              // %.lr.ph.i.prol.preheader
                                        //   in Loop: Header=BB8_76 Depth=1
	mov	x16, x15
	.p2align	5, , 16
.LBB8_84:                               // %.lr.ph.i.prol
                                        //   Parent Loop BB8_76 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	strh	w20, [x24, x16, lsl #1]
	add	x16, x16, #1
	subs	x17, x17, #1
	b.ne	.LBB8_84
.LBB8_85:                               // %.lr.ph.i.prol.loopexit
                                        //   in Loop: Header=BB8_76 Depth=1
	sub	x15, x15, x9
	cmn	x15, #8
	b.hi	.LBB8_75
// %bb.86:                              // %.lr.ph.i.preheader188.new
                                        //   in Loop: Header=BB8_76 Depth=1
	sub	x15, x9, x16
	lsl	x16, x16, #1
	mov	x17, x14
	.p2align	5, , 16
.LBB8_87:                               // %.lr.ph.i
                                        //   Parent Loop BB8_76 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x0, x17, x16
	subs	x15, x15, #8
	sturh	w20, [x0, #-14]
	add	x17, x17, #16
	sturh	w20, [x0, #-12]
	sturh	w20, [x0, #-10]
	sturh	w20, [x0, #-8]
	sturh	w20, [x0, #-6]
	sturh	w20, [x0, #-4]
	sturh	w20, [x0, #-2]
	strh	w20, [x0]
	b.ne	.LBB8_87
	b	.LBB8_75
.LBB8_88:                               // %.loopexit
	mov	x0, x19
	.cfi_def_cfa wsp, 96
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB8_89:                               // %.lr.ph102.new
	.cfi_restore_state
	mov	x26, xzr
	sub	x27, x8, x25
	lsl	x28, x23, #1
	mov	x21, x24
	b	.LBB8_91
	.p2align	5, , 16
.LBB8_90:                               // %ggml_vec_set_i8.exit.1
                                        //   in Loop: Header=BB8_91 Depth=1
	add	x26, x26, #2
	add	x21, x21, x28
	cmp	x27, x26
	b.eq	.LBB8_7
.LBB8_91:                               // =>This Inner Loop Header: Depth=1
	cmp	w22, #1
	b.lt	.LBB8_90
// %bb.92:                              // %.lr.ph.preheader.i
                                        //   in Loop: Header=BB8_91 Depth=1
	and	x2, x22, #0x7fffffff
	mov	x0, x21
	mov	w1, w20
	bl	memset
	add	x0, x21, x23
	and	x2, x22, #0x7fffffff
	mov	w1, w20
	bl	memset
	b	.LBB8_90
.LBB8_93:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2774                       // =0xad6
	bl	ggml_abort
.Lfunc_end8:
	.size	ggml_set_i32, .Lfunc_end8-ggml_set_i32
	.cfi_endproc
                                        // -- End function
	.globl	ggml_new_f32                    // -- Begin function ggml_new_f32
	.p2align	4
	.type	ggml_new_f32,@function
ggml_new_f32:                           // @ggml_new_f32
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #8]              // 16-byte Folded Spill
	str	x19, [sp, #24]                  // 8-byte Folded Spill
	add	x29, sp, #8
	.cfi_def_cfa w29, 24
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	.cfi_offset w29, -24
	.cfi_offset b8, -32
	.cfi_remember_state
	fmov	s8, s0
	mov	x19, x0
	bl	ggml_get_no_alloc
	tbnz	w0, #0, .LBB9_2
// %bb.1:
	mov	x0, x19
	mov	w1, wzr
	mov	w2, #1                          // =0x1
	bl	ggml_new_tensor_1d
	fmov	s0, s8
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #24]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #8]              // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	b	ggml_set_f32
.LBB9_2:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.3
	add	x3, x3, :lo12:.L.str.3
	mov	w1, #2713                       // =0xa99
	bl	ggml_abort
.Lfunc_end9:
	.size	ggml_new_f32, .Lfunc_end9-ggml_new_f32
	.cfi_endproc
                                        // -- End function
	.globl	ggml_set_f32                    // -- Begin function ggml_set_f32
	.p2align	4
	.type	ggml_set_f32,@function
ggml_set_f32:                           // @ggml_set_f32
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-112]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	fmov	s8, s0
	mov	x19, x0
	bl	ggml_nrows
	ldr	x22, [x19, #16]
	ldr	x23, [x19, #56]
	ldr	x24, [x19, #248]
	ldr	w8, [x19]
	cmp	w8, #24
	b.gt	.LBB10_10
// %bb.1:
	cbz	w8, .LBB10_58
// %bb.2:
	cmp	w8, #1
	b.eq	.LBB10_28
// %bb.3:
	cmp	w8, #24
	b.ne	.LBB10_93
// %bb.4:                               // %.preheader
	cmp	w0, #1
	b.lt	.LBB10_88
// %bb.5:                               // %.lr.ph102
	fcvtzs	w20, s8
	and	x8, x0, #0x7fffffff
	and	x25, x0, #0x1
	cmp	x8, #1
	b.ne	.LBB10_89
// %bb.6:
	mov	x26, xzr
.LBB10_7:                               // %.loopexit.loopexit.unr-lcssa
	cbz	x25, .LBB10_88
// %bb.8:                               // %.loopexit.loopexit.unr-lcssa
	cmp	w22, #1
	b.lt	.LBB10_88
// %bb.9:                               // %.lr.ph.preheader.i.epil
	madd	x0, x23, x26, x24
	and	x2, x22, #0x7fffffff
	mov	w1, w20
	bl	memset
	b	.LBB10_88
.LBB10_10:
	cmp	w8, #25
	b.eq	.LBB10_73
// %bb.11:
	cmp	w8, #26
	b.eq	.LBB10_43
// %bb.12:
	cmp	w8, #30
	b.ne	.LBB10_93
// %bb.13:                              // %.preheader88
	cmp	w0, #1
	b.lt	.LBB10_88
// %bb.14:                              // %.lr.ph94
	fmov	w9, s8
	mov	w10, #32767                     // =0x7fff
	mov	w14, #2139095040                // =0x7f800000
	mov	x8, xzr
	add	x15, x24, #14
	ubfx	w13, w9, #16, #1
	and	w11, w9, #0x7fffffff
	lsr	w12, w9, #16
	add	w9, w9, w13
	orr	w12, w12, #0x40
	cmp	w11, w14
	add	x14, x24, #2
	add	w9, w9, w10
	and	x10, x0, #0x7fffffff
	lsr	w13, w9, #16
	and	x9, x22, #0x7fffffff
	csel	w11, w12, w13, hi
	and	x12, x22, #0x1
	sub	x13, x9, x12
	b	.LBB10_16
	.p2align	5, , 16
.LBB10_15:                              // %ggml_vec_set_bf16.exit
                                        //   in Loop: Header=BB10_16 Depth=1
	add	x8, x8, #1
	add	x14, x14, x23
	add	x24, x24, x23
	add	x15, x15, x23
	cmp	x8, x10
	b.eq	.LBB10_88
.LBB10_16:                              // %ggml_compute_fp32_to_bf16.exit
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_20 Depth 2
                                        //     Child Loop BB10_24 Depth 2
                                        //     Child Loop BB10_27 Depth 2
	cmp	w22, #1
	b.lt	.LBB10_15
// %bb.17:                              // %.lr.ph.i72.preheader
                                        //   in Loop: Header=BB10_16 Depth=1
	cmp	x9, #2
	b.hs	.LBB10_19
// %bb.18:                              //   in Loop: Header=BB10_16 Depth=1
	mov	x16, xzr
	b	.LBB10_22
	.p2align	5, , 16
.LBB10_19:                              // %vector.body151.preheader
                                        //   in Loop: Header=BB10_16 Depth=1
	mov	x16, x13
	mov	x17, x14
	.p2align	5, , 16
.LBB10_20:                              // %vector.body151
                                        //   Parent Loop BB10_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sturh	w11, [x17, #-2]
	subs	x16, x16, #2
	strh	w11, [x17], #4
	b.ne	.LBB10_20
// %bb.21:                              // %middle.block144
                                        //   in Loop: Header=BB10_16 Depth=1
	mov	x16, x13
	cbz	x12, .LBB10_15
.LBB10_22:                              // %.lr.ph.i72.preheader194
                                        //   in Loop: Header=BB10_16 Depth=1
	sub	w17, w22, w16
	ands	x0, x17, #0x7
	mov	x17, x16
	b.eq	.LBB10_25
// %bb.23:                              // %.lr.ph.i72.prol.preheader
                                        //   in Loop: Header=BB10_16 Depth=1
	mov	x17, x16
	.p2align	5, , 16
.LBB10_24:                              // %.lr.ph.i72.prol
                                        //   Parent Loop BB10_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	strh	w11, [x24, x17, lsl #1]
	add	x17, x17, #1
	subs	x0, x0, #1
	b.ne	.LBB10_24
.LBB10_25:                              // %.lr.ph.i72.prol.loopexit
                                        //   in Loop: Header=BB10_16 Depth=1
	sub	x16, x16, x9
	cmn	x16, #8
	b.hi	.LBB10_15
// %bb.26:                              // %.lr.ph.i72.preheader194.new
                                        //   in Loop: Header=BB10_16 Depth=1
	sub	x16, x9, x17
	lsl	x17, x17, #1
	mov	x0, x15
	.p2align	5, , 16
.LBB10_27:                              // %.lr.ph.i72
                                        //   Parent Loop BB10_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x1, x0, x17
	subs	x16, x16, #8
	sturh	w11, [x1, #-14]
	add	x0, x0, #16
	sturh	w11, [x1, #-12]
	sturh	w11, [x1, #-10]
	sturh	w11, [x1, #-8]
	sturh	w11, [x1, #-6]
	sturh	w11, [x1, #-4]
	sturh	w11, [x1, #-2]
	strh	w11, [x1]
	b.ne	.LBB10_27
	b	.LBB10_15
.LBB10_28:                              // %.preheader86
	cmp	w0, #1
	b.lt	.LBB10_88
// %bb.29:                              // %.lr.ph96
	mov	w9, #2004877312                 // =0x77800000
	fabs	s0, s8
	mov	w10, #125829120                 // =0x7800000
	fmov	s1, w9
	mov	w9, #142606336                  // =0x8800000
	mov	w13, #1073741824                // =0x40000000
	mov	w14, #32256                     // =0x7e00
	mov	x8, xzr
	fmul	s0, s0, s1
	fmov	s1, w9
	fmov	w9, s8
	add	x15, x24, #14
	and	w11, w9, #0x7f800000
	ubfx	w12, w9, #23, #8
	fmul	s0, s0, s1
	add	w10, w11, w10
	cmp	w12, #113
	mov	w11, #-16777216                 // =0xff000000
	csel	w10, w13, w10, lo
	lsl	w13, w9, #1
	lsr	w9, w9, #31
	fmov	s1, w10
	cmp	w13, w11
	and	x11, x0, #0x7fffffff
	fadd	s0, s0, s1
	fmov	w10, s0
	lsr	w12, w10, #13
	and	w10, w10, #0xfff
	and	w12, w12, #0x7c00
	add	w10, w12, w10
	and	x12, x22, #0x1
	csel	w10, w14, w10, hi
	add	x14, x24, #2
	orr	w9, w10, w9, lsl #15
	and	x10, x22, #0x7fffffff
	sub	x13, x10, x12
	b	.LBB10_31
	.p2align	5, , 16
.LBB10_30:                              // %ggml_vec_set_f16.exit
                                        //   in Loop: Header=BB10_31 Depth=1
	add	x8, x8, #1
	add	x14, x14, x23
	add	x24, x24, x23
	add	x15, x15, x23
	cmp	x8, x11
	b.eq	.LBB10_88
.LBB10_31:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_35 Depth 2
                                        //     Child Loop BB10_39 Depth 2
                                        //     Child Loop BB10_42 Depth 2
	cmp	w22, #1
	b.lt	.LBB10_30
// %bb.32:                              // %.lr.ph.i65.preheader
                                        //   in Loop: Header=BB10_31 Depth=1
	cmp	x10, #2
	b.hs	.LBB10_34
// %bb.33:                              //   in Loop: Header=BB10_31 Depth=1
	mov	x16, xzr
	b	.LBB10_37
	.p2align	5, , 16
.LBB10_34:                              // %vector.body162.preheader
                                        //   in Loop: Header=BB10_31 Depth=1
	mov	x16, x13
	mov	x17, x14
	.p2align	5, , 16
.LBB10_35:                              // %vector.body162
                                        //   Parent Loop BB10_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sturh	w9, [x17, #-2]
	subs	x16, x16, #2
	strh	w9, [x17], #4
	b.ne	.LBB10_35
// %bb.36:                              // %middle.block155
                                        //   in Loop: Header=BB10_31 Depth=1
	mov	x16, x13
	cbz	x12, .LBB10_30
.LBB10_37:                              // %.lr.ph.i65.preheader192
                                        //   in Loop: Header=BB10_31 Depth=1
	sub	w17, w22, w16
	ands	x0, x17, #0x7
	mov	x17, x16
	b.eq	.LBB10_40
// %bb.38:                              // %.lr.ph.i65.prol.preheader
                                        //   in Loop: Header=BB10_31 Depth=1
	mov	x17, x16
	.p2align	5, , 16
.LBB10_39:                              // %.lr.ph.i65.prol
                                        //   Parent Loop BB10_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	strh	w9, [x24, x17, lsl #1]
	add	x17, x17, #1
	subs	x0, x0, #1
	b.ne	.LBB10_39
.LBB10_40:                              // %.lr.ph.i65.prol.loopexit
                                        //   in Loop: Header=BB10_31 Depth=1
	sub	x16, x16, x10
	cmn	x16, #8
	b.hi	.LBB10_30
// %bb.41:                              // %.lr.ph.i65.preheader192.new
                                        //   in Loop: Header=BB10_31 Depth=1
	sub	x16, x10, x17
	lsl	x17, x17, #1
	mov	x0, x15
	.p2align	5, , 16
.LBB10_42:                              // %.lr.ph.i65
                                        //   Parent Loop BB10_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x1, x0, x17
	subs	x16, x16, #8
	sturh	w9, [x1, #-14]
	add	x0, x0, #16
	sturh	w9, [x1, #-12]
	sturh	w9, [x1, #-10]
	sturh	w9, [x1, #-8]
	sturh	w9, [x1, #-6]
	sturh	w9, [x1, #-4]
	sturh	w9, [x1, #-2]
	strh	w9, [x1]
	b.ne	.LBB10_42
	b	.LBB10_30
.LBB10_43:                              // %.preheader84
	cmp	w0, #1
	b.lt	.LBB10_88
// %bb.44:                              // %.lr.ph98
	fcvtzs	w11, s8
	and	x9, x22, #0x7fffffff
	and	x12, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	sub	x13, x9, x12
	add	x14, x24, #4
	add	x15, x24, #28
	b	.LBB10_46
	.p2align	5, , 16
.LBB10_45:                              // %ggml_vec_set_i32.exit
                                        //   in Loop: Header=BB10_46 Depth=1
	add	x8, x8, #1
	add	x14, x14, x23
	add	x24, x24, x23
	add	x15, x15, x23
	cmp	x8, x10
	b.eq	.LBB10_88
.LBB10_46:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_50 Depth 2
                                        //     Child Loop BB10_54 Depth 2
                                        //     Child Loop BB10_57 Depth 2
	cmp	w22, #1
	b.lt	.LBB10_45
// %bb.47:                              // %.lr.ph.i61.preheader
                                        //   in Loop: Header=BB10_46 Depth=1
	cmp	x9, #2
	b.hs	.LBB10_49
// %bb.48:                              //   in Loop: Header=BB10_46 Depth=1
	mov	x16, xzr
	b	.LBB10_52
	.p2align	5, , 16
.LBB10_49:                              // %vector.body173.preheader
                                        //   in Loop: Header=BB10_46 Depth=1
	mov	x16, x13
	mov	x17, x14
	.p2align	5, , 16
.LBB10_50:                              // %vector.body173
                                        //   Parent Loop BB10_46 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	stp	w11, w11, [x17, #-4]
	add	x17, x17, #8
	subs	x16, x16, #2
	b.ne	.LBB10_50
// %bb.51:                              // %middle.block166
                                        //   in Loop: Header=BB10_46 Depth=1
	mov	x16, x13
	cbz	x12, .LBB10_45
.LBB10_52:                              // %.lr.ph.i61.preheader190
                                        //   in Loop: Header=BB10_46 Depth=1
	sub	w17, w22, w16
	ands	x0, x17, #0x7
	mov	x17, x16
	b.eq	.LBB10_55
// %bb.53:                              // %.lr.ph.i61.prol.preheader
                                        //   in Loop: Header=BB10_46 Depth=1
	mov	x17, x16
	.p2align	5, , 16
.LBB10_54:                              // %.lr.ph.i61.prol
                                        //   Parent Loop BB10_46 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	w11, [x24, x17, lsl #2]
	add	x17, x17, #1
	subs	x0, x0, #1
	b.ne	.LBB10_54
.LBB10_55:                              // %.lr.ph.i61.prol.loopexit
                                        //   in Loop: Header=BB10_46 Depth=1
	sub	x16, x16, x9
	cmn	x16, #8
	b.hi	.LBB10_45
// %bb.56:                              // %.lr.ph.i61.preheader190.new
                                        //   in Loop: Header=BB10_46 Depth=1
	sub	x16, x9, x17
	lsl	x17, x17, #2
	mov	x0, x15
	.p2align	5, , 16
.LBB10_57:                              // %.lr.ph.i61
                                        //   Parent Loop BB10_46 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x1, x0, x17
	subs	x16, x16, #8
	stp	w11, w11, [x1, #-28]
	add	x0, x0, #32
	stp	w11, w11, [x1, #-20]
	stp	w11, w11, [x1, #-12]
	stp	w11, w11, [x1, #-4]
	b.ne	.LBB10_57
	b	.LBB10_45
.LBB10_58:                              // %.preheader90
	cmp	w0, #1
	b.lt	.LBB10_88
// %bb.59:                              // %.lr.ph
	and	x9, x22, #0x7fffffff
	and	x11, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	sub	x12, x9, x11
	add	x13, x24, #4
	add	x14, x24, #28
	b	.LBB10_61
	.p2align	5, , 16
.LBB10_60:                              // %ggml_vec_set_f32.exit
                                        //   in Loop: Header=BB10_61 Depth=1
	add	x8, x8, #1
	add	x13, x13, x23
	add	x24, x24, x23
	add	x14, x14, x23
	cmp	x8, x10
	b.eq	.LBB10_88
.LBB10_61:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_65 Depth 2
                                        //     Child Loop BB10_69 Depth 2
                                        //     Child Loop BB10_72 Depth 2
	cmp	w22, #1
	b.lt	.LBB10_60
// %bb.62:                              // %.lr.ph.i78.preheader
                                        //   in Loop: Header=BB10_61 Depth=1
	cmp	x9, #2
	b.hs	.LBB10_64
// %bb.63:                              //   in Loop: Header=BB10_61 Depth=1
	mov	x15, xzr
	b	.LBB10_67
	.p2align	5, , 16
.LBB10_64:                              // %vector.body.preheader
                                        //   in Loop: Header=BB10_61 Depth=1
	mov	x15, x12
	mov	x16, x13
	.p2align	5, , 16
.LBB10_65:                              // %vector.body
                                        //   Parent Loop BB10_61 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	stp	s8, s8, [x16, #-4]
	add	x16, x16, #8
	subs	x15, x15, #2
	b.ne	.LBB10_65
// %bb.66:                              // %middle.block
                                        //   in Loop: Header=BB10_61 Depth=1
	mov	x15, x12
	cbz	x11, .LBB10_60
.LBB10_67:                              // %.lr.ph.i78.preheader196
                                        //   in Loop: Header=BB10_61 Depth=1
	sub	w16, w22, w15
	ands	x17, x16, #0x7
	mov	x16, x15
	b.eq	.LBB10_70
// %bb.68:                              // %.lr.ph.i78.prol.preheader
                                        //   in Loop: Header=BB10_61 Depth=1
	mov	x16, x15
	.p2align	5, , 16
.LBB10_69:                              // %.lr.ph.i78.prol
                                        //   Parent Loop BB10_61 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	s8, [x24, x16, lsl #2]
	add	x16, x16, #1
	subs	x17, x17, #1
	b.ne	.LBB10_69
.LBB10_70:                              // %.lr.ph.i78.prol.loopexit
                                        //   in Loop: Header=BB10_61 Depth=1
	sub	x15, x15, x9
	cmn	x15, #8
	b.hi	.LBB10_60
// %bb.71:                              // %.lr.ph.i78.preheader196.new
                                        //   in Loop: Header=BB10_61 Depth=1
	sub	x15, x9, x16
	lsl	x16, x16, #2
	mov	x17, x14
	.p2align	5, , 16
.LBB10_72:                              // %.lr.ph.i78
                                        //   Parent Loop BB10_61 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x0, x17, x16
	subs	x15, x15, #8
	stp	s8, s8, [x0, #-28]
	add	x17, x17, #32
	stp	s8, s8, [x0, #-20]
	stp	s8, s8, [x0, #-12]
	stp	s8, s8, [x0, #-4]
	b.ne	.LBB10_72
	b	.LBB10_60
.LBB10_73:                              // %.preheader82
	cmp	w0, #1
	b.lt	.LBB10_88
// %bb.74:                              // %.lr.ph100
	fcvtzs	w11, s8
	and	x9, x22, #0x7fffffff
	and	x12, x22, #0x1
	mov	x8, xzr
	and	x10, x0, #0x7fffffff
	sub	x13, x9, x12
	add	x14, x24, #2
	add	x15, x24, #14
	b	.LBB10_76
	.p2align	5, , 16
.LBB10_75:                              // %ggml_vec_set_i16.exit
                                        //   in Loop: Header=BB10_76 Depth=1
	add	x8, x8, #1
	add	x14, x14, x23
	add	x24, x24, x23
	add	x15, x15, x23
	cmp	x8, x10
	b.eq	.LBB10_88
.LBB10_76:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_80 Depth 2
                                        //     Child Loop BB10_84 Depth 2
                                        //     Child Loop BB10_87 Depth 2
	cmp	w22, #1
	b.lt	.LBB10_75
// %bb.77:                              // %.lr.ph.i.preheader
                                        //   in Loop: Header=BB10_76 Depth=1
	cmp	x9, #2
	b.hs	.LBB10_79
// %bb.78:                              //   in Loop: Header=BB10_76 Depth=1
	mov	x16, xzr
	b	.LBB10_82
	.p2align	5, , 16
.LBB10_79:                              // %vector.body184.preheader
                                        //   in Loop: Header=BB10_76 Depth=1
	mov	x16, x13
	mov	x17, x14
	.p2align	5, , 16
.LBB10_80:                              // %vector.body184
                                        //   Parent Loop BB10_76 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sturh	w11, [x17, #-2]
	subs	x16, x16, #2
	strh	w11, [x17], #4
	b.ne	.LBB10_80
// %bb.81:                              // %middle.block177
                                        //   in Loop: Header=BB10_76 Depth=1
	mov	x16, x13
	cbz	x12, .LBB10_75
.LBB10_82:                              // %.lr.ph.i.preheader188
                                        //   in Loop: Header=BB10_76 Depth=1
	sub	w17, w22, w16
	ands	x0, x17, #0x7
	mov	x17, x16
	b.eq	.LBB10_85
// %bb.83:                              // %.lr.ph.i.prol.preheader
                                        //   in Loop: Header=BB10_76 Depth=1
	mov	x17, x16
	.p2align	5, , 16
.LBB10_84:                              // %.lr.ph.i.prol
                                        //   Parent Loop BB10_76 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	strh	w11, [x24, x17, lsl #1]
	add	x17, x17, #1
	subs	x0, x0, #1
	b.ne	.LBB10_84
.LBB10_85:                              // %.lr.ph.i.prol.loopexit
                                        //   in Loop: Header=BB10_76 Depth=1
	sub	x16, x16, x9
	cmn	x16, #8
	b.hi	.LBB10_75
// %bb.86:                              // %.lr.ph.i.preheader188.new
                                        //   in Loop: Header=BB10_76 Depth=1
	sub	x16, x9, x17
	lsl	x17, x17, #1
	mov	x0, x15
	.p2align	5, , 16
.LBB10_87:                              // %.lr.ph.i
                                        //   Parent Loop BB10_76 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x1, x0, x17
	subs	x16, x16, #8
	sturh	w11, [x1, #-14]
	add	x0, x0, #16
	sturh	w11, [x1, #-12]
	sturh	w11, [x1, #-10]
	sturh	w11, [x1, #-8]
	sturh	w11, [x1, #-6]
	sturh	w11, [x1, #-4]
	sturh	w11, [x1, #-2]
	strh	w11, [x1]
	b.ne	.LBB10_87
	b	.LBB10_75
.LBB10_88:                              // %.loopexit
	mov	x0, x19
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #112                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB10_89:                              // %.lr.ph102.new
	.cfi_restore_state
	mov	x26, xzr
	sub	x27, x8, x25
	lsl	x28, x23, #1
	mov	x21, x24
	b	.LBB10_91
	.p2align	5, , 16
.LBB10_90:                              // %ggml_vec_set_i8.exit.1
                                        //   in Loop: Header=BB10_91 Depth=1
	add	x26, x26, #2
	add	x21, x21, x28
	cmp	x27, x26
	b.eq	.LBB10_7
.LBB10_91:                              // =>This Inner Loop Header: Depth=1
	cmp	w22, #1
	b.lt	.LBB10_90
// %bb.92:                              // %.lr.ph.preheader.i
                                        //   in Loop: Header=BB10_91 Depth=1
	and	x2, x22, #0x7fffffff
	mov	x0, x21
	mov	w1, w20
	bl	memset
	add	x0, x21, x23
	and	x2, x22, #0x7fffffff
	mov	w1, w20
	bl	memset
	b	.LBB10_90
.LBB10_93:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2833                       // =0xb11
	bl	ggml_abort
.Lfunc_end10:
	.size	ggml_set_f32, .Lfunc_end10-ggml_set_f32
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          // -- Begin function ggml_get_i32_1d
.LCPI11_0:
	.xword	0x0000000000000000              // fp128 0
	.xword	0x0000000000000000
	.text
	.globl	ggml_get_i32_1d
	.p2align	4
	.type	ggml_get_i32_1d,@function
ggml_get_i32_1d:                        // @ggml_get_i32_1d
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	mov	w20, w1
	mov	x19, x0
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB11_7
// %bb.1:
	ldr	w8, [x19]
	cmp	w8, #24
	b.gt	.LBB11_12
// %bb.2:
	cbz	w8, .LBB11_29
// %bb.3:
	cmp	w8, #1
	b.eq	.LBB11_22
// %bb.4:
	cmp	w8, #24
	b.ne	.LBB11_42
// %bb.5:
	ldr	x8, [x19, #48]
	cmp	x8, #1
	b.ne	.LBB11_36
// %bb.6:
	ldr	x8, [x19, #248]
	ldrsb	w0, [x8, w20, sxtw]
	b	.LBB11_35
.LBB11_7:
	adrp	x8, .LCPI11_0
	sxtw	x1, w20
	ldr	q0, [x8, :lo12:.LCPI11_0]
	mov	x8, sp
	mov	x2, sp
	mov	x0, x19
	orr	x3, x8, #0x8
	add	x4, x8, #16
	add	x5, x8, #24
	stp	q0, q0, [sp]
	bl	ggml_unravel_index
	ldrsw	x8, [sp]
	ldr	x10, [x19, #248]
	ldrsw	x9, [sp, #8]
	ldp	x11, x12, [x19, #48]
	nop
	madd	x8, x11, x8, x10
	ldrsw	x10, [sp, #16]
	nop
	madd	x8, x12, x9, x8
	ldrsw	x11, [sp, #24]
	ldp	x9, x12, [x19, #64]
	nop
	madd	x8, x9, x10, x8
	mul	x9, x12, x11
	ldr	w10, [x19]
	cmp	w10, #24
	b.gt	.LBB11_17
// %bb.8:
	cbz	w10, .LBB11_31
// %bb.9:
	cmp	w10, #1
	b.eq	.LBB11_24
// %bb.10:
	cmp	w10, #24
	b.ne	.LBB11_43
// %bb.11:
	ldrsb	w0, [x8, x9]
	b	.LBB11_35
.LBB11_12:
	cmp	w8, #25
	b.eq	.LBB11_32
// %bb.13:
	cmp	w8, #26
	b.eq	.LBB11_26
// %bb.14:
	cmp	w8, #30
	b.ne	.LBB11_42
// %bb.15:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB11_37
// %bb.16:
	ldr	x8, [x19, #248]
	ldrh	w8, [x8, w20, sxtw #1]
	b	.LBB11_21
.LBB11_17:
	cmp	w10, #25
	b.eq	.LBB11_34
// %bb.18:
	cmp	w10, #26
	b.eq	.LBB11_28
// %bb.19:
	cmp	w10, #30
	b.ne	.LBB11_43
// %bb.20:
	ldrh	w8, [x8, x9]
.LBB11_21:
	lsl	w8, w8, #16
	fmov	s0, w8
	fcvtzs	w0, s0
	b	.LBB11_35
.LBB11_22:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB11_38
// %bb.23:
	ldr	x8, [x19, #248]
	ldrh	w8, [x8, w20, sxtw #1]
	b	.LBB11_25
.LBB11_24:
	ldrh	w8, [x8, x9]
.LBB11_25:
	adrp	x9, :got:ggml_table_f32_f16
	ldr	x9, [x9, :got_lo12:ggml_table_f32_f16]
	ldr	s0, [x9, x8, lsl #2]
	fcvtzs	w0, s0
	b	.LBB11_35
.LBB11_26:
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB11_39
// %bb.27:
	ldr	x8, [x19, #248]
	ldr	w0, [x8, w20, sxtw #2]
	b	.LBB11_35
.LBB11_28:
	ldr	w0, [x8, x9]
	b	.LBB11_35
.LBB11_29:
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB11_40
// %bb.30:
	ldr	x8, [x19, #248]
	ldr	s0, [x8, w20, sxtw #2]
	fcvtzs	w0, s0
	b	.LBB11_35
.LBB11_31:
	ldr	s0, [x8, x9]
	fcvtzs	w0, s0
	b	.LBB11_35
.LBB11_32:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB11_41
// %bb.33:
	ldr	x8, [x19, #248]
	ldrsh	w0, [x8, w20, sxtw #1]
	b	.LBB11_35
.LBB11_34:
	ldrsh	w0, [x8, x9]
.LBB11_35:
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB11_36:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.5
	add	x3, x3, :lo12:.L.str.5
	mov	w1, #2849                       // =0xb21
	bl	ggml_abort
.LBB11_37:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.9
	add	x3, x3, :lo12:.L.str.9
	mov	w1, #2869                       // =0xb35
	bl	ggml_abort
.LBB11_38:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.8
	add	x3, x3, :lo12:.L.str.8
	mov	w1, #2864                       // =0xb30
	bl	ggml_abort
.LBB11_39:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.7
	add	x3, x3, :lo12:.L.str.7
	mov	w1, #2859                       // =0xb2b
	bl	ggml_abort
.LBB11_40:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.10
	add	x3, x3, :lo12:.L.str.10
	mov	w1, #2874                       // =0xb3a
	bl	ggml_abort
.LBB11_41:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.6
	add	x3, x3, :lo12:.L.str.6
	mov	w1, #2854                       // =0xb26
	bl	ggml_abort
.LBB11_42:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2879                       // =0xb3f
	bl	ggml_abort
.LBB11_43:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2945                       // =0xb81
	bl	ggml_abort
.Lfunc_end11:
	.size	ggml_get_i32_1d, .Lfunc_end11-ggml_get_i32_1d
	.cfi_endproc
                                        // -- End function
	.globl	ggml_get_i32_nd                 // -- Begin function ggml_get_i32_nd
	.p2align	4
	.type	ggml_get_i32_nd,@function
ggml_get_i32_nd:                        // @ggml_get_i32_nd
	.cfi_startproc
// %bb.0:
	ldr	x8, [x0, #248]
                                        // kill: def $w1 killed $w1 def $x1
	sxtw	x9, w1
                                        // kill: def $w2 killed $w2 def $x2
                                        // kill: def $w3 killed $w3 def $x3
                                        // kill: def $w4 killed $w4 def $x4
	ldp	x10, x11, [x0, #48]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w2
	madd	x8, x11, x9, x8
	sxtw	x9, w3
	ldp	x10, x11, [x0, #64]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w4
	ldr	w10, [x0]
	mul	x9, x11, x9
	cmp	w10, #24
	b.gt	.LBB12_5
// %bb.1:
	cbz	w10, .LBB12_11
// %bb.2:
	cmp	w10, #1
	b.eq	.LBB12_9
// %bb.3:
	cmp	w10, #24
	b.ne	.LBB12_13
// %bb.4:
	ldrsb	w0, [x8, x9]
	ret
.LBB12_5:
	cmp	w10, #25
	b.eq	.LBB12_12
// %bb.6:
	cmp	w10, #26
	b.eq	.LBB12_10
// %bb.7:
	cmp	w10, #30
	b.ne	.LBB12_13
// %bb.8:
	ldrh	w8, [x8, x9]
	lsl	w8, w8, #16
	fmov	s0, w8
	fcvtzs	w0, s0
	ret
.LBB12_9:
	ldrh	w8, [x8, x9]
	adrp	x9, :got:ggml_table_f32_f16
	ldr	x9, [x9, :got_lo12:ggml_table_f32_f16]
	ldr	s0, [x9, x8, lsl #2]
	fcvtzs	w0, s0
	ret
.LBB12_10:
	ldr	w0, [x8, x9]
	ret
.LBB12_11:
	ldr	s0, [x8, x9]
	fcvtzs	w0, s0
	ret
.LBB12_12:
	ldrsh	w0, [x8, x9]
	ret
.LBB12_13:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2945                       // =0xb81
	bl	ggml_abort
.Lfunc_end12:
	.size	ggml_get_i32_nd, .Lfunc_end12-ggml_get_i32_nd
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          // -- Begin function ggml_set_i32_1d
.LCPI13_0:
	.xword	0x0000000000000000              // fp128 0
	.xword	0x0000000000000000
	.text
	.globl	ggml_set_i32_1d
	.p2align	4
	.type	ggml_set_i32_1d,@function
ggml_set_i32_1d:                        // @ggml_set_i32_1d
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x21, [sp, #48]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	mov	w21, w2
	mov	w19, w1
	mov	x20, x0
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB13_7
// %bb.1:
	ldr	w8, [x20]
	cmp	w8, #24
	b.gt	.LBB13_9
// %bb.2:
	cbz	w8, .LBB13_19
// %bb.3:
	cmp	w8, #1
	b.eq	.LBB13_15
// %bb.4:
	cmp	w8, #24
	b.ne	.LBB13_30
// %bb.5:
	ldr	x8, [x20, #48]
	cmp	x8, #1
	b.ne	.LBB13_24
// %bb.6:
	ldr	x8, [x20, #248]
	strb	w21, [x8, w19, sxtw]
	b	.LBB13_8
.LBB13_7:
	adrp	x8, .LCPI13_0
                                        // kill: def $w19 killed $w19 killed $x19 def $x19
	sxtw	x1, w19
	ldr	q0, [x8, :lo12:.LCPI13_0]
	mov	x8, sp
	mov	x2, sp
	mov	x0, x20
	orr	x3, x8, #0x8
	add	x4, x8, #16
	add	x5, x8, #24
	stp	q0, q0, [sp]
	bl	ggml_unravel_index
	ldr	w1, [sp]
	mov	x0, x20
	mov	w5, w21
	ldr	w2, [sp, #8]
	ldr	w3, [sp, #16]
	ldr	w4, [sp, #24]
	bl	ggml_set_i32_nd
.LBB13_8:
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x21, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB13_9:
	.cfi_restore_state
	cmp	w8, #25
	b.eq	.LBB13_21
// %bb.10:
	cmp	w8, #26
	b.eq	.LBB13_17
// %bb.11:
	cmp	w8, #30
	b.ne	.LBB13_30
// %bb.12:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB13_25
// %bb.13:
	scvtf	s0, w21
	mov	w11, #1                         // =0x1
	ldr	x8, [x20, #248]
	movk	w11, #32640, lsl #16
	fmov	w9, s0
	and	w10, w9, #0x7fffffff
	cmp	w10, w11
	b.lo	.LBB13_23
// %bb.14:
	lsr	w9, w9, #16
	orr	w9, w9, #0x40
	strh	w9, [x8, w19, sxtw #1]
	b	.LBB13_8
.LBB13_15:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB13_26
// %bb.16:
	scvtf	s0, w21
	mov	w8, #2004877312                 // =0x77800000
	fmov	s2, w8
	mov	w8, #142606336                  // =0x8800000
	mov	w11, #125829120                 // =0x7800000
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w8
	fmov	w8, s0
	and	w10, w8, #0x7f800000
	fmul	s1, s1, s2
	lsl	w9, w8, #1
	add	w10, w10, w11
	ubfx	w11, w8, #23, #8
	lsr	w8, w8, #31
	cmp	w11, #113
	mov	w11, #1073741824                // =0x40000000
	csel	w10, w11, w10, lo
	fmov	s0, w10
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	mov	w11, #-16777216                 // =0xff000000
	cmp	w9, w11
	mov	w9, #32256                      // =0x7e00
	csel	w9, w9, w10, hi
	orr	w8, w9, w8, lsl #15
	ldr	x9, [x20, #248]
	strh	w8, [x9, w19, sxtw #1]
	b	.LBB13_8
.LBB13_17:
	ldr	x8, [x20, #48]
	cmp	x8, #4
	b.ne	.LBB13_27
// %bb.18:
	ldr	x8, [x20, #248]
	str	w21, [x8, w19, sxtw #2]
	b	.LBB13_8
.LBB13_19:
	ldr	x8, [x20, #48]
	cmp	x8, #4
	b.ne	.LBB13_28
// %bb.20:
	scvtf	s0, w21
	ldr	x8, [x20, #248]
	str	s0, [x8, w19, sxtw #2]
	b	.LBB13_8
.LBB13_21:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB13_29
// %bb.22:
	ldr	x8, [x20, #248]
	strh	w21, [x8, w19, sxtw #1]
	b	.LBB13_8
.LBB13_23:
	mov	w11, #32767                     // =0x7fff
	ubfx	w10, w9, #16, #1
	add	w9, w9, w11
	add	w9, w9, w10
	lsr	w9, w9, #16
	strh	w9, [x8, w19, sxtw #1]
	b	.LBB13_8
.LBB13_24:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.5
	add	x3, x3, :lo12:.L.str.5
	mov	w1, #2894                       // =0xb4e
	bl	ggml_abort
.LBB13_25:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.9
	add	x3, x3, :lo12:.L.str.9
	mov	w1, #2914                       // =0xb62
	bl	ggml_abort
.LBB13_26:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.8
	add	x3, x3, :lo12:.L.str.8
	mov	w1, #2909                       // =0xb5d
	bl	ggml_abort
.LBB13_27:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.7
	add	x3, x3, :lo12:.L.str.7
	mov	w1, #2904                       // =0xb58
	bl	ggml_abort
.LBB13_28:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.10
	add	x3, x3, :lo12:.L.str.10
	mov	w1, #2919                       // =0xb67
	bl	ggml_abort
.LBB13_29:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.6
	add	x3, x3, :lo12:.L.str.6
	mov	w1, #2899                       // =0xb53
	bl	ggml_abort
.LBB13_30:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2924                       // =0xb6c
	bl	ggml_abort
.Lfunc_end13:
	.size	ggml_set_i32_1d, .Lfunc_end13-ggml_set_i32_1d
	.cfi_endproc
                                        // -- End function
	.globl	ggml_set_i32_nd                 // -- Begin function ggml_set_i32_nd
	.p2align	4
	.type	ggml_set_i32_nd,@function
ggml_set_i32_nd:                        // @ggml_set_i32_nd
	.cfi_startproc
// %bb.0:
	ldr	x8, [x0, #248]
                                        // kill: def $w1 killed $w1 def $x1
	sxtw	x9, w1
                                        // kill: def $w2 killed $w2 def $x2
                                        // kill: def $w3 killed $w3 def $x3
                                        // kill: def $w4 killed $w4 def $x4
	ldp	x10, x11, [x0, #48]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w2
	madd	x8, x11, x9, x8
	sxtw	x9, w3
	ldp	x10, x11, [x0, #64]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w4
	ldr	w10, [x0]
	mul	x9, x11, x9
	cmp	w10, #24
	b.gt	.LBB14_5
// %bb.1:
	cbz	w10, .LBB14_12
// %bb.2:
	cmp	w10, #1
	b.eq	.LBB14_10
// %bb.3:
	cmp	w10, #24
	b.ne	.LBB14_15
// %bb.4:
	strb	w5, [x8, x9]
	ret
.LBB14_5:
	cmp	w10, #25
	b.eq	.LBB14_13
// %bb.6:
	cmp	w10, #26
	b.eq	.LBB14_11
// %bb.7:
	cmp	w10, #30
	b.ne	.LBB14_15
// %bb.8:
	scvtf	s0, w5
	mov	w12, #1                         // =0x1
	movk	w12, #32640, lsl #16
	fmov	w10, s0
	and	w11, w10, #0x7fffffff
	cmp	w11, w12
	b.lo	.LBB14_14
// %bb.9:
	lsr	w10, w10, #16
	orr	w10, w10, #0x40
	strh	w10, [x8, x9]
	ret
.LBB14_10:
	scvtf	s0, w5
	mov	w10, #2004877312                // =0x77800000
	fmov	s2, w10
	mov	w10, #142606336                 // =0x8800000
	mov	w13, #125829120                 // =0x7800000
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w10
	fmov	w10, s0
	and	w12, w10, #0x7f800000
	fmul	s1, s1, s2
	lsl	w11, w10, #1
	add	w12, w12, w13
	ubfx	w13, w10, #23, #8
	lsr	w10, w10, #31
	cmp	w13, #113
	mov	w13, #1073741824                // =0x40000000
	csel	w12, w13, w12, lo
	fmov	s0, w12
	fadd	s0, s1, s0
	fmov	w12, s0
	lsr	w13, w12, #13
	and	w12, w12, #0xfff
	and	w13, w13, #0x7c00
	add	w12, w13, w12
	mov	w13, #-16777216                 // =0xff000000
	cmp	w11, w13
	mov	w11, #32256                     // =0x7e00
	csel	w11, w11, w12, hi
	orr	w10, w11, w10, lsl #15
	strh	w10, [x8, x9]
	ret
.LBB14_11:
	str	w5, [x8, x9]
	ret
.LBB14_12:
	scvtf	s0, w5
	str	s0, [x8, x9]
	ret
.LBB14_13:
	strh	w5, [x8, x9]
	ret
.LBB14_14:
	mov	w12, #32767                     // =0x7fff
	ubfx	w11, w10, #16, #1
	add	w10, w10, w12
	add	w10, w10, w11
	lsr	w10, w10, #16
	strh	w10, [x8, x9]
	ret
.LBB14_15:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #2978                       // =0xba2
	bl	ggml_abort
.Lfunc_end14:
	.size	ggml_set_i32_nd, .Lfunc_end14-ggml_set_i32_nd
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          // -- Begin function ggml_get_f32_1d
.LCPI15_0:
	.xword	0x0000000000000000              // fp128 0
	.xword	0x0000000000000000
	.text
	.globl	ggml_get_f32_1d
	.p2align	4
	.type	ggml_get_f32_1d,@function
ggml_get_f32_1d:                        // @ggml_get_f32_1d
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	mov	w20, w1
	mov	x19, x0
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB15_6
// %bb.1:
	ldr	w8, [x19]
	cmp	w8, #24
	b.gt	.LBB15_11
// %bb.2:
	cbz	w8, .LBB15_25
// %bb.3:
	cmp	w8, #1
	b.eq	.LBB15_20
// %bb.4:
	cmp	w8, #24
	b.ne	.LBB15_31
// %bb.5:
	ldr	x8, [x19, #248]
	ldrsb	w8, [x8, w20, sxtw]
	b	.LBB15_29
.LBB15_6:
	adrp	x8, .LCPI15_0
	sxtw	x1, w20
	ldr	q0, [x8, :lo12:.LCPI15_0]
	mov	x8, sp
	mov	x2, sp
	mov	x0, x19
	orr	x3, x8, #0x8
	add	x4, x8, #16
	add	x5, x8, #24
	stp	q0, q0, [sp]
	bl	ggml_unravel_index
	ldrsw	x8, [sp]
	ldr	x10, [x19, #248]
	ldrsw	x9, [sp, #8]
	ldp	x11, x12, [x19, #48]
	nop
	madd	x8, x11, x8, x10
	ldrsw	x10, [sp, #16]
	nop
	madd	x8, x12, x9, x8
	ldrsw	x11, [sp, #24]
	ldp	x9, x12, [x19, #64]
	nop
	madd	x8, x9, x10, x8
	mul	x9, x12, x11
	ldr	w10, [x19]
	cmp	w10, #24
	b.gt	.LBB15_15
// %bb.7:
	cbz	w10, .LBB15_26
// %bb.8:
	cmp	w10, #1
	b.eq	.LBB15_21
// %bb.9:
	cmp	w10, #24
	b.ne	.LBB15_32
// %bb.10:
	ldrsb	w8, [x8, x9]
	b	.LBB15_29
.LBB15_11:
	cmp	w8, #25
	b.eq	.LBB15_27
// %bb.12:
	cmp	w8, #26
	b.eq	.LBB15_23
// %bb.13:
	cmp	w8, #30
	b.ne	.LBB15_31
// %bb.14:
	ldr	x8, [x19, #248]
	ldrh	w8, [x8, w20, sxtw #1]
	b	.LBB15_19
.LBB15_15:
	cmp	w10, #25
	b.eq	.LBB15_28
// %bb.16:
	cmp	w10, #26
	b.eq	.LBB15_24
// %bb.17:
	cmp	w10, #30
	b.ne	.LBB15_32
// %bb.18:
	ldrh	w8, [x8, x9]
.LBB15_19:
	lsl	w8, w8, #16
	fmov	s0, w8
	b	.LBB15_30
.LBB15_20:
	ldr	x8, [x19, #248]
	ldrh	w8, [x8, w20, sxtw #1]
	b	.LBB15_22
.LBB15_21:
	ldrh	w8, [x8, x9]
.LBB15_22:
	adrp	x9, :got:ggml_table_f32_f16
	ldr	x9, [x9, :got_lo12:ggml_table_f32_f16]
	ldr	s0, [x9, x8, lsl #2]
	b	.LBB15_30
.LBB15_23:
	ldr	x8, [x19, #248]
	ldr	w8, [x8, w20, sxtw #2]
	b	.LBB15_29
.LBB15_24:
	ldr	w8, [x8, x9]
	b	.LBB15_29
.LBB15_25:
	ldr	x8, [x19, #248]
	ldr	s0, [x8, w20, sxtw #2]
	b	.LBB15_30
.LBB15_26:
	ldr	s0, [x8, x9]
	b	.LBB15_30
.LBB15_27:
	ldr	x8, [x19, #248]
	ldrsh	w8, [x8, w20, sxtw #1]
	b	.LBB15_29
.LBB15_28:
	ldrsh	w8, [x8, x9]
.LBB15_29:
	scvtf	s0, w8
.LBB15_30:
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB15_31:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3016                       // =0xbc8
	bl	ggml_abort
.LBB15_32:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3076                       // =0xc04
	bl	ggml_abort
.Lfunc_end15:
	.size	ggml_get_f32_1d, .Lfunc_end15-ggml_get_f32_1d
	.cfi_endproc
                                        // -- End function
	.globl	ggml_get_f32_nd                 // -- Begin function ggml_get_f32_nd
	.p2align	4
	.type	ggml_get_f32_nd,@function
ggml_get_f32_nd:                        // @ggml_get_f32_nd
	.cfi_startproc
// %bb.0:
	ldr	x8, [x0, #248]
                                        // kill: def $w1 killed $w1 def $x1
	sxtw	x9, w1
                                        // kill: def $w2 killed $w2 def $x2
                                        // kill: def $w3 killed $w3 def $x3
                                        // kill: def $w4 killed $w4 def $x4
	ldp	x10, x11, [x0, #48]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w2
	madd	x8, x11, x9, x8
	sxtw	x9, w3
	ldp	x10, x11, [x0, #64]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w4
	ldr	w10, [x0]
	mul	x9, x11, x9
	cmp	w10, #24
	b.gt	.LBB16_5
// %bb.1:
	cbz	w10, .LBB16_11
// %bb.2:
	cmp	w10, #1
	b.eq	.LBB16_9
// %bb.3:
	cmp	w10, #24
	b.ne	.LBB16_13
// %bb.4:
	ldrsb	w8, [x8, x9]
	scvtf	s0, w8
	ret
.LBB16_5:
	cmp	w10, #25
	b.eq	.LBB16_12
// %bb.6:
	cmp	w10, #26
	b.eq	.LBB16_10
// %bb.7:
	cmp	w10, #30
	b.ne	.LBB16_13
// %bb.8:
	ldrh	w8, [x8, x9]
	lsl	w8, w8, #16
	fmov	s0, w8
	ret
.LBB16_9:
	ldrh	w8, [x8, x9]
	adrp	x9, :got:ggml_table_f32_f16
	ldr	x9, [x9, :got_lo12:ggml_table_f32_f16]
	ldr	s0, [x9, x8, lsl #2]
	ret
.LBB16_10:
	ldr	w8, [x8, x9]
	scvtf	s0, w8
	ret
.LBB16_11:
	ldr	s0, [x8, x9]
	ret
.LBB16_12:
	ldrsh	w8, [x8, x9]
	scvtf	s0, w8
	ret
.LBB16_13:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3076                       // =0xc04
	bl	ggml_abort
.Lfunc_end16:
	.size	ggml_get_f32_nd, .Lfunc_end16-ggml_get_f32_nd
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          // -- Begin function ggml_set_f32_1d
.LCPI17_0:
	.xword	0x0000000000000000              // fp128 0
	.xword	0x0000000000000000
	.text
	.globl	ggml_set_f32_1d
	.p2align	4
	.type	ggml_set_f32_1d,@function
ggml_set_f32_1d:                        // @ggml_set_f32_1d
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_offset b8, -48
	.cfi_remember_state
	fmov	s8, s0
	mov	w19, w1
	mov	x20, x0
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB17_6
// %bb.1:
	ldr	w8, [x20]
	cmp	w8, #24
	b.gt	.LBB17_7
// %bb.2:
	cbz	w8, .LBB17_14
// %bb.3:
	cmp	w8, #1
	b.eq	.LBB17_12
// %bb.4:
	cmp	w8, #24
	b.ne	.LBB17_19
// %bb.5:
	fcvtzs	w8, s8
	ldr	x9, [x20, #248]
	strb	w8, [x9, w19, sxtw]
	b	.LBB17_17
.LBB17_6:
	adrp	x8, .LCPI17_0
                                        // kill: def $w19 killed $w19 killed $x19 def $x19
	sxtw	x1, w19
	ldr	q0, [x8, :lo12:.LCPI17_0]
	mov	x8, sp
	mov	x2, sp
	mov	x0, x20
	orr	x3, x8, #0x8
	add	x4, x8, #16
	add	x5, x8, #24
	stp	q0, q0, [sp]
	bl	ggml_unravel_index
	ldr	w1, [sp]
	fmov	s0, s8
	mov	x0, x20
	ldr	w2, [sp, #8]
	ldr	w3, [sp, #16]
	ldr	w4, [sp, #24]
	bl	ggml_set_f32_nd
	b	.LBB17_17
.LBB17_7:
	cmp	w8, #25
	b.eq	.LBB17_15
// %bb.8:
	cmp	w8, #26
	b.eq	.LBB17_13
// %bb.9:
	cmp	w8, #30
	b.ne	.LBB17_19
// %bb.10:
	fmov	w9, s8
	mov	w11, #1                         // =0x1
	movk	w11, #32640, lsl #16
	ldr	x8, [x20, #248]
	and	w10, w9, #0x7fffffff
	cmp	w10, w11
	b.lo	.LBB17_18
// %bb.11:
	lsr	w9, w9, #16
	orr	w9, w9, #0x40
	strh	w9, [x8, w19, sxtw #1]
	b	.LBB17_17
.LBB17_12:
	mov	w8, #2004877312                 // =0x77800000
	fabs	s0, s8
	mov	w11, #125829120                 // =0x7800000
	fmov	s1, w8
	mov	w8, #142606336                  // =0x8800000
	fmul	s0, s0, s1
	fmov	s1, w8
	fmov	w8, s8
	and	w10, w8, #0x7f800000
	fmul	s0, s0, s1
	lsl	w9, w8, #1
	add	w10, w10, w11
	ubfx	w11, w8, #23, #8
	lsr	w8, w8, #31
	cmp	w11, #113
	mov	w11, #1073741824                // =0x40000000
	csel	w10, w11, w10, lo
	fmov	s1, w10
	fadd	s0, s0, s1
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	mov	w11, #-16777216                 // =0xff000000
	cmp	w9, w11
	mov	w9, #32256                      // =0x7e00
	csel	w9, w9, w10, hi
	orr	w8, w9, w8, lsl #15
	b	.LBB17_16
.LBB17_13:
	fcvtzs	w8, s8
	ldr	x9, [x20, #248]
	str	w8, [x9, w19, sxtw #2]
	b	.LBB17_17
.LBB17_14:
	ldr	x8, [x20, #248]
	str	s8, [x8, w19, sxtw #2]
	b	.LBB17_17
.LBB17_15:
	fcvtzs	w8, s8
.LBB17_16:
	ldr	x9, [x20, #248]
	strh	w8, [x9, w19, sxtw #1]
.LBB17_17:
	.cfi_def_cfa wsp, 80
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB17_18:
	.cfi_restore_state
	ubfx	w10, w9, #16, #1
	add	w9, w9, w10
	mov	w10, #32767                     // =0x7fff
	add	w9, w9, w10
	lsr	w9, w9, #16
	strh	w9, [x8, w19, sxtw #1]
	b	.LBB17_17
.LBB17_19:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3055                       // =0xbef
	bl	ggml_abort
.Lfunc_end17:
	.size	ggml_set_f32_1d, .Lfunc_end17-ggml_set_f32_1d
	.cfi_endproc
                                        // -- End function
	.globl	ggml_set_f32_nd                 // -- Begin function ggml_set_f32_nd
	.p2align	4
	.type	ggml_set_f32_nd,@function
ggml_set_f32_nd:                        // @ggml_set_f32_nd
	.cfi_startproc
// %bb.0:
	ldr	x8, [x0, #248]
                                        // kill: def $w1 killed $w1 def $x1
	sxtw	x9, w1
                                        // kill: def $w2 killed $w2 def $x2
                                        // kill: def $w3 killed $w3 def $x3
                                        // kill: def $w4 killed $w4 def $x4
	ldp	x10, x11, [x0, #48]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w2
	madd	x8, x11, x9, x8
	sxtw	x9, w3
	ldp	x10, x11, [x0, #64]
	nop
	madd	x8, x10, x9, x8
	sxtw	x9, w4
	ldr	w10, [x0]
	mul	x9, x11, x9
	cmp	w10, #24
	b.gt	.LBB18_5
// %bb.1:
	cbz	w10, .LBB18_12
// %bb.2:
	cmp	w10, #1
	b.eq	.LBB18_10
// %bb.3:
	cmp	w10, #24
	b.ne	.LBB18_15
// %bb.4:
	fcvtzs	w10, s0
	strb	w10, [x8, x9]
	ret
.LBB18_5:
	cmp	w10, #25
	b.eq	.LBB18_13
// %bb.6:
	cmp	w10, #26
	b.eq	.LBB18_11
// %bb.7:
	cmp	w10, #30
	b.ne	.LBB18_15
// %bb.8:
	fmov	w10, s0
	mov	w12, #1                         // =0x1
	movk	w12, #32640, lsl #16
	and	w11, w10, #0x7fffffff
	cmp	w11, w12
	b.lo	.LBB18_14
// %bb.9:
	lsr	w10, w10, #16
	orr	w10, w10, #0x40
	strh	w10, [x8, x9]
	ret
.LBB18_10:
	mov	w10, #2004877312                // =0x77800000
	fabs	s1, s0
	mov	w13, #125829120                 // =0x7800000
	fmov	s2, w10
	mov	w10, #142606336                 // =0x8800000
	fmul	s1, s1, s2
	fmov	s2, w10
	fmov	w10, s0
	and	w12, w10, #0x7f800000
	fmul	s1, s1, s2
	lsl	w11, w10, #1
	add	w12, w12, w13
	ubfx	w13, w10, #23, #8
	lsr	w10, w10, #31
	cmp	w13, #113
	mov	w13, #1073741824                // =0x40000000
	csel	w12, w13, w12, lo
	fmov	s0, w12
	fadd	s0, s1, s0
	fmov	w12, s0
	lsr	w13, w12, #13
	and	w12, w12, #0xfff
	and	w13, w13, #0x7c00
	add	w12, w13, w12
	mov	w13, #-16777216                 // =0xff000000
	cmp	w11, w13
	mov	w11, #32256                     // =0x7e00
	csel	w11, w11, w12, hi
	orr	w10, w11, w10, lsl #15
	strh	w10, [x8, x9]
	ret
.LBB18_11:
	fcvtzs	w10, s0
	str	w10, [x8, x9]
	ret
.LBB18_12:
	str	s0, [x8, x9]
	ret
.LBB18_13:
	fcvtzs	w10, s0
	strh	w10, [x8, x9]
	ret
.LBB18_14:
	ubfx	w11, w10, #16, #1
	add	w10, w10, w11
	mov	w11, #32767                     // =0x7fff
	add	w10, w10, w11
	lsr	w10, w10, #16
	strh	w10, [x8, x9]
	ret
.LBB18_15:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3109                       // =0xc25
	bl	ggml_abort
.Lfunc_end18:
	.size	ggml_set_f32_nd, .Lfunc_end18-ggml_set_f32_nd
	.cfi_endproc
                                        // -- End function
	.globl	ggml_threadpool_free            // -- Begin function ggml_threadpool_free
	.p2align	4
	.type	ggml_threadpool_free,@function
ggml_threadpool_free:                   // @ggml_threadpool_free
	.cfi_startproc
// %bb.0:
	cbz	x0, .LBB19_2
// %bb.1:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldrsw	x8, [x0, #280]
	mov	x19, x0
	lsl	x1, x8, #4
	ldr	x8, [x0, #272]
	mov	x0, x8
	bl	ggml_aligned_free
	mov	x0, x19
	mov	w1, #320                        // =0x140
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	b	ggml_aligned_free
.LBB19_2:
	ret
.Lfunc_end19:
	.size	ggml_threadpool_free, .Lfunc_end19-ggml_threadpool_free
	.cfi_endproc
                                        // -- End function
	.globl	ggml_threadpool_pause           // -- Begin function ggml_threadpool_pause
	.p2align	4
	.type	ggml_threadpool_pause,@function
ggml_threadpool_pause:                  // @ggml_threadpool_pause
	.cfi_startproc
// %bb.0:
	ret
.Lfunc_end20:
	.size	ggml_threadpool_pause, .Lfunc_end20-ggml_threadpool_pause
	.cfi_endproc
                                        // -- End function
	.globl	ggml_threadpool_resume          // -- Begin function ggml_threadpool_resume
	.p2align	4
	.type	ggml_threadpool_resume,@function
ggml_threadpool_resume:                 // @ggml_threadpool_resume
	.cfi_startproc
// %bb.0:
	ret
.Lfunc_end21:
	.size	ggml_threadpool_resume, .Lfunc_end21-ggml_threadpool_resume
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          // -- Begin function ggml_graph_plan
.LCPI22_0:
	.xword	0x0000000000000000              // fp128 0
	.xword	0x0000000000000000
	.text
	.globl	ggml_graph_plan
	.p2align	4
	.type	ggml_graph_plan,@function
ggml_graph_plan:                        // @ggml_graph_plan
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	mov	x24, x2
	mov	w20, w1
	mov	x22, x0
	mov	x19, x8
	cmp	w1, #0
	b.gt	.LBB22_4
// %bb.1:
	cbz	x24, .LBB22_3
// %bb.2:
	ldr	w20, [x24, #280]
	b	.LBB22_4
.LBB22_3:
	mov	w20, #4                         // =0x4
.LBB22_4:
	adrp	x8, .LCPI22_0
	ldr	q0, [x8, :lo12:.LCPI22_0]
	ldr	w8, [x22, #4]
	stp	q0, q0, [x19, #16]
	cmp	w8, #1
	b.lt	.LBB22_62
// %bb.5:                               // %.lr.ph
	mov	x27, xzr
	mov	x25, xzr
	sxtw	x8, w20
	adrp	x28, .LJTI22_1
	add	x28, x28, :lo12:.LJTI22_1
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	mov	w26, #1                         // =0x1
	b	.LBB22_11
.LBB22_6:                               //   in Loop: Header=BB22_11 Depth=1
	mov	w0, wzr
	bl	ggml_type_size
	ldr	x8, [x23, #16]
.LBB22_7:                               // %.thread
                                        //   in Loop: Header=BB22_11 Depth=1
                                        // kill: def $w21 killed $w21 killed $x21 def $x21
.LBB22_8:                               // %.thread
                                        //   in Loop: Header=BB22_11 Depth=1
	sxtw	x9, w21
	mul	x9, x0, x9
	mul	x8, x9, x8
.LBB22_9:                               // %.thread
                                        //   in Loop: Header=BB22_11 Depth=1
	stur	x8, [x29, #-8]
.LBB22_10:                              // %.thread
                                        //   in Loop: Header=BB22_11 Depth=1
	ldur	x8, [x29, #-8]
	add	x27, x27, #1
	cmp	x25, x8
	csel	x25, x25, x8, hi
	ldrsw	x8, [x22, #4]
	cmp	x27, x8
	b.ge	.LBB22_61
.LBB22_11:                              // =>This Inner Loop Header: Depth=1
	ldr	x8, [x22, #16]
	ldr	x23, [x8, x27, lsl #3]
	mov	x0, x23
	bl	ggml_is_empty
	tbnz	w0, #0, .LBB22_14
// %bb.12:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w8, [x23, #80]
	cmp	w8, #85
	b.hi	.LBB22_64
// %bb.13:                              //   in Loop: Header=BB22_11 Depth=1
	adrp	x11, .LJTI22_0
	add	x11, x11, :lo12:.LJTI22_0
	adr	x9, .LBB22_14
	ldrh	w10, [x11, x8, lsl #1]
	add	x9, x9, x10, lsl #2
	mov	w21, w20
	br	x9
.LBB22_14:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w21, #1                         // =0x1
.LBB22_15:                              // %ggml_get_n_tasks.exit
                                        //   in Loop: Header=BB22_11 Depth=1
	cmp	w26, w21
	sub	x2, x29, #8
	stur	xzr, [x29, #-8]
	mov	w0, w20
	mov	x1, x23
	csel	w26, w26, w21, gt
	bl	ggml_cpu_extra_work_size
	tbnz	w0, #0, .LBB22_10
// %bb.16:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w8, [x23, #80]
	sub	w8, w8, #1
	cmp	w8, #84
	b.hi	.LBB22_10
// %bb.17:                              //   in Loop: Header=BB22_11 Depth=1
	adr	x9, .LBB22_6
	ldrh	w10, [x28, x8, lsl #1]
	add	x9, x9, x10, lsl #2
	br	x9
.LBB22_18:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x23, #152]
	ldr	w0, [x8]
	bl	ggml_is_quantized
	tbz	w0, #0, .LBB22_10
// %bb.19:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w0, wzr
	bl	ggml_type_size
	ldr	x8, [x23, #152]
	b	.LBB22_30
.LBB22_20:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w0, [x23]
	bl	ggml_is_quantized
	tbz	w0, #0, .LBB22_46
.LBB22_21:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w0, wzr
	bl	ggml_type_size
	ldr	x8, [x23, #16]
	b	.LBB22_8
.LBB22_22:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w0, [x23]
	bl	ggml_type_size
	ldr	x9, [x23, #152]
                                        // kill: def $w21 killed $w21 killed $x21 def $x21
	sxtw	x8, w21
	mul	x8, x0, x8
	ldr	x9, [x9, #16]
	nop
	madd	x8, x8, x9, x8
	b	.LBB22_9
.LBB22_23:                              //   in Loop: Header=BB22_11 Depth=1
	ldp	x8, x0, [x23, #152]
	adrp	x9, type_traits_cpu
	add	x9, x9, :lo12:type_traits_cpu
	ldr	w8, [x8]
	add	x8, x9, x8, lsl #5
	ldr	w23, [x8, #16]
	ldr	w8, [x0]
	cmp	w8, w23
	b.eq	.LBB22_10
// %bb.24:                              //   in Loop: Header=BB22_11 Depth=1
	bl	ggml_nelements
	mov	x1, x0
	mov	w0, w23
	bl	ggml_row_size
	stur	x0, [x29, #-8]
	b	.LBB22_10
.LBB22_25:                              //   in Loop: Header=BB22_11 Depth=1
	ldp	x9, x0, [x23, #152]
	adrp	x11, type_traits_cpu
	add	x11, x11, :lo12:type_traits_cpu
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x19, x28
	mov	x28, x24
	ldr	x21, [x23, #168]
	mov	x8, xzr
	stur	xzr, [x29, #-8]
	ldr	w10, [x9]
	ldr	x24, [x9, #32]
	ldr	w9, [x0]
	add	x10, x11, x10, lsl #5
	ldr	w23, [x10, #16]
	cmp	w9, w23
	b.eq	.LBB22_27
// %bb.26:                              //   in Loop: Header=BB22_11 Depth=1
	bl	ggml_nelements
	mov	x1, x0
	mov	w0, w23
	bl	ggml_row_size
	ldur	x8, [x29, #-8]
	add	x8, x0, x8
	add	x8, x8, #8
.LBB22_27:                              //   in Loop: Header=BB22_11 Depth=1
	sbfiz	x9, x24, #3, #32
	lsl	w10, w24, #6
	mov	x24, x28
	add	x8, x9, x8
	add	x8, x8, w10, sxtw
	mov	x28, x19
	ldp	x10, x11, [x21, #16]
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	mul	x9, x9, x10
	madd	x8, x9, x11, x8
	add	x8, x8, #80
	b	.LBB22_9
.LBB22_28:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x23, #152]
	ldr	w0, [x8]
	bl	ggml_is_quantized
	tbz	w0, #0, .LBB22_10
// %bb.29:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w0, wzr
	bl	ggml_type_size
	ldr	x8, [x23, #160]
.LBB22_30:                              // %.thread
                                        //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x8, #16]
	b	.LBB22_7
.LBB22_31:                              //   in Loop: Header=BB22_11 Depth=1
	ldp	x8, x9, [x23, #152]
	ldp	x10, x11, [x8, #16]
	mul	x10, x11, x10
	ldp	x12, x8, [x8, #32]
	mul	x10, x10, x12
	ldp	x13, x14, [x9, #16]
	mul	x11, x14, x13
	ldr	x9, [x9, #32]
	mul	x8, x10, x8
	ldur	x10, [x29, #-8]
	nop
	madd	x8, x11, x9, x8
	add	x8, x10, x8, lsl #1
	b	.LBB22_9
.LBB22_32:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w0, [x23]
	bl	ggml_type_size
                                        // kill: def $w21 killed $w21 killed $x21 def $x21
	sxtw	x8, w21
	mul	x8, x0, x8
	b	.LBB22_9
.LBB22_33:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x14, [x23, #152]
	ldr	x8, [x14, #40]
	cmp	x8, #1
	b.ne	.LBB22_70
// %bb.34:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x11, [x23, #160]
	ldr	x8, [x11, #32]
	cmp	x8, #1
	b.ne	.LBB22_71
// %bb.35:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x11, #40]
	cmp	x8, #1
	b.ne	.LBB22_72
// %bb.36:                              //   in Loop: Header=BB22_11 Depth=1
	ldp	x8, x9, [x14, #16]
	ldr	x12, [x14, #32]
	ldp	x10, x13, [x11, #16]
	ldr	w14, [x14]
	cbz	w14, .LBB22_53
// %bb.37:                              //   in Loop: Header=BB22_11 Depth=1
	cmp	w14, #30
	b.eq	.LBB22_39
// %bb.38:                              //   in Loop: Header=BB22_11 Depth=1
	cmp	w14, #1
	b.ne	.LBB22_68
.LBB22_39:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w11, [x11]
	cbnz	w11, .LBB22_68
// %bb.40:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w11, #1                         // =0x1
	b	.LBB22_55
.LBB22_41:                              //   in Loop: Header=BB22_11 Depth=1
	ldp	x8, x9, [x23, #160]
                                        // kill: def $w21 killed $w21 killed $x21 def $x21
	ldr	x9, [x9, #16]
	ldr	x8, [x8, #16]
	lsl	x9, x9, #3
	add	x8, x9, x8, lsl #2
	sxtw	x9, w21
	mul	x8, x8, x9
	b	.LBB22_9
.LBB22_42:                              //   in Loop: Header=BB22_11 Depth=1
	ldp	x8, x9, [x23, #152]
	ldr	w10, [x9, #24]
	ldr	x8, [x8, #16]
	ldr	w9, [x9]
	add	w10, w10, #3
	sxtw	x10, w10
	and	x10, x10, #0xfffffffffffffffc
	cmp	x8, x10
	csel	x8, x8, x10, gt
	cmp	w9, #30
	b.eq	.LBB22_45
// %bb.43:                              //   in Loop: Header=BB22_11 Depth=1
	cmp	w9, #1
	b.eq	.LBB22_45
// %bb.44:                              //   in Loop: Header=BB22_11 Depth=1
	cbnz	w9, .LBB22_10
.LBB22_45:                              //   in Loop: Header=BB22_11 Depth=1
                                        // kill: def $w21 killed $w21 killed $x21 def $x21
	sxtw	x9, w21
	mul	x8, x9, x8
	lsl	x8, x8, #4
	b	.LBB22_9
.LBB22_46:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x23, #152]
	ldr	w8, [x8]
	cmp	w8, #30
	b.eq	.LBB22_51
// %bb.47:                              //   in Loop: Header=BB22_11 Depth=1
	cmp	w8, #1
	b.ne	.LBB22_10
// %bb.48:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x23, #160]
	cbz	x8, .LBB22_10
// %bb.49:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w8, [x8]
	cmp	w8, #30
	b.ne	.LBB22_10
	b	.LBB22_21
.LBB22_50:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w8, [x23, #92]
	cmp	w8, w20
	csel	w9, w8, w20, lt
	cmn	w8, #1
	csel	w21, w20, w9, eq
	b	.LBB22_15
.LBB22_51:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x8, [x23, #160]
	cbz	x8, .LBB22_10
// %bb.52:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w8, [x8]
	cmp	w8, #1
	b.ne	.LBB22_10
	b	.LBB22_21
.LBB22_53:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	w11, [x11]
	cbnz	w11, .LBB22_68
// %bb.54:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w11, #2                         // =0x2
.LBB22_55:                              //   in Loop: Header=BB22_11 Depth=1
	mul	x9, x12, x9
	ldur	x14, [x29, #-8]
	mul	x8, x9, x8
	madd	x8, x13, x10, x8
	lsl	x8, x8, x11
	add	x8, x14, x8
	b	.LBB22_9
.LBB22_56:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x0, [x23, #152]
	bl	ggml_nrows
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	mov	w21, w20
	cmp	x0, x8
	b.gt	.LBB22_15
// %bb.57:                              //   in Loop: Header=BB22_11 Depth=1
	ldr	x0, [x23, #152]
	bl	ggml_nrows
	mov	w21, w0
	b	.LBB22_15
.LBB22_58:                              //   in Loop: Header=BB22_11 Depth=1
	mov	x0, x23
	bl	ggml_get_unary_op
	cmp	w0, #13
	b.hi	.LBB22_74
// %bb.59:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w8, #1                          // =0x1
	mov	w9, #14591                      // =0x38ff
	lsl	w8, w8, w0
	tst	w8, w9
	b.ne	.LBB22_14
// %bb.60:                              //   in Loop: Header=BB22_11 Depth=1
	mov	w21, w20
	b	.LBB22_15
.LBB22_61:                              // %._crit_edge
	lsl	w8, w20, #6
	cmp	x25, #0
	add	x8, x25, w8, sxtw
	csel	x8, xzr, x8, eq
	b	.LBB22_63
.LBB22_62:
	mov	x8, xzr
	mov	w26, #1                         // =0x1
.LBB22_63:                              // %._crit_edge.thread
	cmp	w26, w20
	str	x24, [x19, #24]
	csel	w9, w26, w20, lt
	str	w9, [x19, #16]
	stp	x8, xzr, [x19]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB22_64:
	.cfi_restore_state
	adrp	x19, :got:stderr
	adrp	x1, .L.str.14
	add	x1, x1, :lo12:.L.str.14
	ldr	x19, [x19, :got_lo12:stderr]
	adrp	x2, .L__func__.ggml_get_n_tasks
	add	x2, x2, :lo12:.L__func__.ggml_get_n_tasks
	ldr	x0, [x19]
	bl	fprintf
	ldr	w2, [x23, #80]
	ldr	x19, [x19]
	cmp	w2, #84
	b.hi	.LBB22_66
// %bb.65:
	mov	w0, w2
	bl	ggml_op_name
	mov	x2, x0
	adrp	x1, .L.str.15
	add	x1, x1, :lo12:.L.str.15
	mov	x0, x19
	bl	fprintf
	b	.LBB22_67
.LBB22_66:
	adrp	x1, .L.str.16
	add	x1, x1, :lo12:.L.str.16
	mov	x0, x19
	bl	fprintf
.LBB22_67:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #13029                      // =0x32e5
	bl	ggml_abort
.LBB22_68:                              // %.thread152
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #13424                      // =0x3470
	bl	ggml_abort
.LBB22_69:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #13471                      // =0x349f
	bl	ggml_abort
.LBB22_70:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.11
	add	x3, x3, :lo12:.L.str.11
	mov	w1, #13404                      // =0x345c
	bl	ggml_abort
.LBB22_71:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.12
	add	x3, x3, :lo12:.L.str.12
	mov	w1, #13405                      // =0x345d
	bl	ggml_abort
.LBB22_72:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.13
	add	x3, x3, :lo12:.L.str.13
	mov	w1, #13406                      // =0x345e
	bl	ggml_abort
.LBB22_73:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #13019                      // =0x32db
	bl	ggml_abort
.LBB22_74:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #12884                      // =0x3254
	bl	ggml_abort
.Lfunc_end22:
	.size	ggml_graph_plan, .Lfunc_end22-ggml_graph_plan
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	1, 0x0
.LJTI22_0:
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_56-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_58-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_14-.LBB22_14)>>2
	.hword	(.LBB22_50-.LBB22_14)>>2
	.hword	(.LBB22_50-.LBB22_14)>>2
	.hword	(.LBB22_50-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_15-.LBB22_14)>>2
	.hword	(.LBB22_73-.LBB22_14)>>2
	.p2align	1, 0x0
.LJTI22_1:
	.hword	(.LBB22_20-.LBB22_6)>>2
	.hword	(.LBB22_18-.LBB22_6)>>2
	.hword	(.LBB22_18-.LBB22_6)>>2
	.hword	(.LBB22_28-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_32-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_23-.LBB22_6)>>2
	.hword	(.LBB22_25-.LBB22_6)>>2
	.hword	(.LBB22_18-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_20-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_6-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_6-.LBB22_6)>>2
	.hword	(.LBB22_6-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_33-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_31-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_41-.LBB22_6)>>2
	.hword	(.LBB22_42-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_22-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_10-.LBB22_6)>>2
	.hword	(.LBB22_69-.LBB22_6)>>2
                                        // -- End function
	.text
	.globl	ggml_threadpool_new             // -- Begin function ggml_threadpool_new
	.p2align	4
	.type	ggml_threadpool_new,@function
ggml_threadpool_new:                    // @ggml_threadpool_new
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x21, x0
	mov	w0, #320                        // =0x140
	bl	ggml_aligned_malloc
	add	x8, x0, #104
	stp	xzr, xzr, [x0, #88]
	add	x9, x0, #128
	mov	x19, x0
	stlr	wzr, [x8]
	add	x8, x0, #192
	stlr	wzr, [x9]
	add	x9, x0, #256
	stlr	wzr, [x8]
	add	x8, x0, #260
	stlr	wzr, [x9]
	add	x9, x0, #261
	stlrb	wzr, [x8]
	ldrb	w8, [x21, #525]
	stlrb	w8, [x9]
	mov	w8, #-1                         // =0xffffffff
	add	x9, x0, #264
	stlr	w8, [x9]
	add	x9, x0, #284
	str	xzr, [x0, #272]
	ldrsw	x8, [x21, #512]
	str	w8, [x0, #280]
	stlr	w8, [x9]
	lsl	x22, x8, #4
	str	wzr, [x0, #296]
	ldr	w9, [x21, #520]
	str	w9, [x0, #292]
	ldr	w9, [x21, #516]
	str	w9, [x0, #288]
	mov	x0, x22
	bl	ggml_aligned_malloc
	mov	w1, wzr
	mov	x2, x22
	mov	x20, x0
	bl	memset
	ldr	w8, [x21, #512]
	cmp	w8, #1
	b.lt	.LBB23_12
// %bb.1:                               // %.lr.ph.preheader.i
	cmp	w8, #1
	b.ne	.LBB23_3
// %bb.2:
	mov	x9, xzr
	b	.LBB23_6
.LBB23_3:                               // %vector.ph
	mov	x10, xzr
	and	x9, x8, #0x7ffffffe
	add	x11, x20, #16
	.p2align	5, , 16
.LBB23_4:                               // %vector.body
                                        // =>This Inner Loop Header: Depth=1
	add	w12, w10, #1
	stur	x19, [x11, #-16]
	stur	w10, [x11, #-8]
	add	x10, x10, #2
	str	x19, [x11]
	str	w12, [x11, #8]
	add	x11, x11, #32
	cmp	x9, x10
	b.ne	.LBB23_4
// %bb.5:                               // %middle.block
	cmp	x9, x8
	b.eq	.LBB23_12
.LBB23_6:                               // %.lr.ph.i.preheader
	sub	w10, w8, w9
	ands	x11, x10, #0x3
	mov	x10, x9
	b.eq	.LBB23_9
// %bb.7:                               // %.lr.ph.i.prol.preheader
	add	x10, x20, x9, lsl #4
	add	x12, x10, #8
	mov	x10, x9
	.p2align	5, , 16
.LBB23_8:                               // %.lr.ph.i.prol
                                        // =>This Inner Loop Header: Depth=1
	str	w10, [x12]
	add	x10, x10, #1
	subs	x11, x11, #1
	stur	x19, [x12, #-8]
	add	x12, x12, #16
	b.ne	.LBB23_8
.LBB23_9:                               // %.lr.ph.i.prol.loopexit
	sub	x9, x9, x8
	cmn	x9, #4
	b.hi	.LBB23_12
// %bb.10:                              // %.lr.ph.i.preheader1
	add	x9, x20, x10, lsl #4
	add	x9, x9, #32
	.p2align	5, , 16
.LBB23_11:                              // %.lr.ph.i
                                        // =>This Inner Loop Header: Depth=1
	add	w11, w10, #1
	stur	x19, [x9, #-32]
	stur	w10, [x9, #-24]
	stur	w11, [x9, #-8]
	add	w11, w10, #2
	stur	x19, [x9, #-16]
	str	w11, [x9, #8]
	add	w11, w10, #3
	add	x10, x10, #4
	str	x19, [x9]
	str	x19, [x9, #16]
	str	w11, [x9, #24]
	add	x9, x9, #64
	cmp	x10, x8
	b.ne	.LBB23_11
.LBB23_12:                              // %ggml_threadpool_new_impl.exit
	str	x20, [x19, #272]
	mov	x0, x19
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end23:
	.size	ggml_threadpool_new, .Lfunc_end23-ggml_threadpool_new
	.cfi_endproc
                                        // -- End function
	.globl	ggml_graph_compute              // -- Begin function ggml_graph_compute
	.p2align	4
	.type	ggml_graph_compute,@function
ggml_graph_compute:                     // @ggml_graph_compute
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x28, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w28, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	sub	sp, sp, #544
	mov	x23, x0
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	mov	x22, x1
	bl	__kmpc_global_thread_num
	mov	w19, w0
	bl	ggml_cpu_init
	cbz	x22, .LBB24_23
// %bb.1:
	ldr	w20, [x22, #16]
	cmp	w20, #0
	b.le	.LBB24_24
// %bb.2:
	ldr	x8, [x22]
	cbz	x8, .LBB24_4
// %bb.3:
	ldr	x8, [x22, #8]
	cbz	x8, .LBB24_25
.LBB24_4:
	ldr	x24, [x22, #24]
	str	w20, [x29, #28]
	stur	x24, [x29, #-8]
	cbz	x24, .LBB24_7
// %bb.5:
	add	x8, x24, #256
	stp	x23, x22, [x24, #88]
	mov	w9, #-1                         // =0xffffffff
	mov	x21, x24
	stlr	wzr, [x8]
	add	x8, x24, #264
	stlr	w9, [x8]
	str	wzr, [x24, #296]
	cmp	w20, #1
	b.ne	.LBB24_20
.LBB24_6:
	mov	w8, #1                          // =0x1
	str	w8, [x21, #284]
	ldr	x0, [x21, #272]
	bl	ggml_graph_compute_thread
	ldr	w19, [x21, #296]
	cbnz	x24, .LBB24_22
	b	.LBB24_21
.LBB24_7:
	add	x8, sp, #8
	mov	w0, w20
	bl	ggml_threadpool_params_default
	mov	w0, #320                        // =0x140
	bl	ggml_aligned_malloc
	add	x8, x0, #104
	stp	x23, x22, [x0, #88]
	add	x9, x0, #128
	mov	x21, x0
	stlr	wzr, [x8]
	add	x8, x0, #192
	stlr	wzr, [x9]
	add	x9, x0, #256
	stlr	wzr, [x8]
	add	x8, x0, #260
	stlr	wzr, [x9]
	add	x9, x0, #261
	stlrb	wzr, [x8]
	ldrb	w8, [sp, #533]
	stlrb	w8, [x9]
	mov	w8, #-1                         // =0xffffffff
	add	x9, x0, #264
	stlr	w8, [x9]
	add	x9, x0, #284
	str	xzr, [x0, #272]
	ldrsw	x8, [sp, #520]
	str	w8, [x0, #280]
	stlr	w8, [x9]
	lsl	x23, x8, #4
	str	wzr, [x0, #296]
	ldr	w9, [sp, #528]
	str	w9, [x0, #292]
	ldr	w9, [sp, #524]
	str	w9, [x0, #288]
	mov	x0, x23
	bl	ggml_aligned_malloc
	mov	w1, wzr
	mov	x2, x23
	mov	x22, x0
	bl	memset
	ldr	w8, [sp, #520]
	cmp	w8, #1
	b.lt	.LBB24_19
// %bb.8:                               // %.lr.ph.preheader.i
	cmp	w8, #1
	b.ne	.LBB24_10
// %bb.9:
	mov	x9, xzr
	b	.LBB24_13
.LBB24_10:                              // %vector.ph
	mov	x10, xzr
	and	x9, x8, #0x7ffffffe
	add	x11, x22, #16
	.p2align	5, , 16
.LBB24_11:                              // %vector.body
                                        // =>This Inner Loop Header: Depth=1
	add	w12, w10, #1
	stur	x21, [x11, #-16]
	stur	w10, [x11, #-8]
	add	x10, x10, #2
	str	x21, [x11]
	str	w12, [x11, #8]
	add	x11, x11, #32
	cmp	x9, x10
	b.ne	.LBB24_11
// %bb.12:                              // %middle.block
	cmp	x9, x8
	b.eq	.LBB24_19
.LBB24_13:                              // %.lr.ph.i.preheader
	sub	w10, w8, w9
	ands	x11, x10, #0x3
	mov	x10, x9
	b.eq	.LBB24_16
// %bb.14:                              // %.lr.ph.i.prol.preheader
	add	x10, x22, x9, lsl #4
	add	x12, x10, #8
	mov	x10, x9
	.p2align	5, , 16
.LBB24_15:                              // %.lr.ph.i.prol
                                        // =>This Inner Loop Header: Depth=1
	str	w10, [x12]
	add	x10, x10, #1
	subs	x11, x11, #1
	stur	x21, [x12, #-8]
	add	x12, x12, #16
	b.ne	.LBB24_15
.LBB24_16:                              // %.lr.ph.i.prol.loopexit
	sub	x9, x9, x8
	cmn	x9, #4
	b.hi	.LBB24_19
// %bb.17:                              // %.lr.ph.i.preheader17
	add	x9, x22, x10, lsl #4
	add	x9, x9, #32
	.p2align	5, , 16
.LBB24_18:                              // %.lr.ph.i
                                        // =>This Inner Loop Header: Depth=1
	add	w11, w10, #1
	stur	x21, [x9, #-32]
	stur	w10, [x9, #-24]
	stur	w11, [x9, #-8]
	add	w11, w10, #2
	stur	x21, [x9, #-16]
	str	w11, [x9, #8]
	add	w11, w10, #3
	add	x10, x10, #4
	str	x21, [x9]
	str	x21, [x9, #16]
	str	w11, [x9, #24]
	add	x9, x9, #64
	cmp	x10, x8
	b.ne	.LBB24_18
.LBB24_19:                              // %ggml_threadpool_new_impl.exit
	str	x22, [x21, #272]
	stur	x21, [x29, #-8]
	cmp	w20, #1
	b.eq	.LBB24_6
.LBB24_20:
	adrp	x21, .L__unnamed_1
	add	x21, x21, :lo12:.L__unnamed_1
	mov	w1, w19
	mov	x0, x21
	mov	w2, w20
	bl	__kmpc_push_num_threads
	adrp	x2, ggml_graph_compute.omp_outlined
	add	x2, x2, :lo12:ggml_graph_compute.omp_outlined
	add	x3, x29, #28
	sub	x4, x29, #8
	mov	x0, x21
	mov	w1, #2                          // =0x2
	bl	__kmpc_fork_call
	ldur	x21, [x29, #-8]
	ldr	w19, [x21, #296]
	cbnz	x24, .LBB24_22
.LBB24_21:                              // %ggml_threadpool_free.exit
	ldrsw	x8, [x21, #280]
	lsl	x1, x8, #4
	ldr	x0, [x21, #272]
	bl	ggml_aligned_free
	mov	x0, x21
	mov	w1, #320                        // =0x140
	bl	ggml_aligned_free
.LBB24_22:
	mov	w0, w19
	add	sp, sp, #544
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x28, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB24_23:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.19
	add	x3, x3, :lo12:.L.str.19
	mov	w1, #13752                      // =0x35b8
	bl	ggml_abort
.LBB24_24:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.20
	add	x3, x3, :lo12:.L.str.20
	mov	w1, #13753                      // =0x35b9
	bl	ggml_abort
.LBB24_25:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.21
	add	x3, x3, :lo12:.L.str.21
	mov	w1, #13754                      // =0x35ba
	bl	ggml_abort
.Lfunc_end24:
	.size	ggml_graph_compute, .Lfunc_end24-ggml_graph_compute
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_init                   // -- Begin function ggml_cpu_init
	.p2align	4
	.type	ggml_cpu_init,@function
ggml_cpu_init:                          // @ggml_cpu_init
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	d15, d14, [sp, #32]             // 16-byte Folded Spill
	stp	d13, d12, [sp, #48]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #64]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #80]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	add	x0, sp, #8
	stp	xzr, xzr, [sp, #16]
	str	xzr, [sp, #8]
	bl	ggml_init
	bl	ggml_free
	bl	ggml_critical_section_start
	adrp	x20, ggml_cpu_init.is_first_call
	ldrb	w8, [x20, :lo12:ggml_cpu_init.is_first_call]
	tbnz	w8, #0, .LBB25_4
// %bb.1:
	bl	ggml_time_us
	mov	w8, #16938                      // =0x422a
	adrp	x21, :got:ggml_table_f32_f16
	fmov	s11, #1.00000000
	movk	w8, #16204, lsl #16
	ldr	x21, [x21, :got_lo12:ggml_table_f32_f16]
	mov	x19, xzr
	fmov	s8, w8
	mov	w8, #10003                      // =0x2713
	mov	w22, #125829120                 // =0x7800000
	movk	w8, #15671, lsl #16
	mov	w23, #1073741824                // =0x40000000
	fmov	s10, w8
	mov	w8, #2004877312                 // =0x77800000
	mov	w24, #-16777216                 // =0xff000000
	fmov	s12, w8
	mov	w8, #142606336                  // =0x8800000
	mov	w25, #32256                     // =0x7e00
	fmov	s13, w8
	mov	w8, #56099                      // =0xdb23
	adrp	x26, ggml_table_gelu_f16
	add	x26, x26, :lo12:ggml_table_gelu_f16
	movk	w8, #49113, lsl #16
	fmov	s14, w8
	adrp	x27, ggml_table_gelu_quick_f16
	add	x27, x27, :lo12:ggml_table_gelu_quick_f16
	.p2align	5, , 16
.LBB25_2:                               // =>This Inner Loop Header: Depth=1
	ldr	s15, [x21, x19, lsl #2]
	fmov	s0, #0.50000000
	fmul	s1, s15, s10
	fmul	s9, s15, s0
	fmul	s0, s15, s8
	fmadd	s1, s1, s15, s11
	fmul	s0, s0, s1
	bl	tanhf
	fadd	s0, s0, s11
	lsl	x28, x19, #1
	fmul	s0, s9, s0
	fabs	s1, s0
	fmov	w8, s0
	fmul	s1, s1, s12
	and	w10, w8, #0x7f800000
	ubfx	w11, w8, #23, #8
	lsl	w9, w8, #1
	lsr	w8, w8, #31
	add	w10, w10, w22
	cmp	w11, #113
	csel	w10, w23, w10, lo
	cmp	w9, w24
	fmul	s1, s1, s13
	fmov	s0, w10
	fadd	s0, s1, s0
	fmov	w10, s0
	fmul	s0, s15, s14
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	csel	w9, w25, w10, hi
	orr	w8, w9, w8, lsl #15
	strh	w8, [x26, x28]
	bl	expf
	fadd	s0, s0, s11
	add	x19, x19, #1
	fdiv	s0, s11, s0
	fmul	s0, s15, s0
	fabs	s1, s0
	fmov	w8, s0
	fmul	s1, s1, s12
	and	w9, w8, #0x7f800000
	ubfx	w10, w8, #23, #8
	lsl	w11, w8, #1
	lsr	w8, w8, #31
	add	w9, w9, w22
	cmp	w10, #113
	csel	w9, w23, w9, lo
	cmp	w11, w24
	fmul	s1, s1, s13
	fmov	s0, w9
	fadd	s0, s1, s0
	fmov	w9, s0
	lsr	w10, w9, #13
	and	w9, w9, #0xfff
	and	w10, w10, #0x7c00
	add	w9, w10, w9
	csel	w9, w25, w9, hi
	orr	w8, w9, w8, lsl #15
	strh	w8, [x27, x28]
	cmp	x19, #16, lsl #12               // =65536
	b.ne	.LBB25_2
// %bb.3:
	bl	ggml_time_us
	mov	w0, #16                         // =0x10
	bl	getauxval
	mov	x19, x0
	mov	w0, #26                         // =0x1a
	bl	getauxval
	adrp	x8, :got:ggml_arm_arch_features
	ubfx	w9, w19, #1, #1
	ldr	x8, [x8, :got_lo12:ggml_arm_arch_features]
	ubfx	w10, w19, #20, #1
	stp	w9, w10, [x8]
	ubfx	w9, w19, #22, #1
	ubfx	w10, w0, #13, #1
	stp	w10, w9, [x8, #8]
	ubfx	w9, w0, #23, #1
	str	w9, [x8, #20]
	mov	w8, #1                          // =0x1
	strb	w8, [x20, :lo12:ggml_cpu_init.is_first_call]
.LBB25_4:
	bl	ggml_critical_section_end
	.cfi_def_cfa wsp, 192
	ldp	d9, d8, [sp, #80]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #64]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #48]             // 16-byte Folded Reload
	ldp	d15, d14, [sp, #32]             // 16-byte Folded Reload
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.Lfunc_end25:
	.size	ggml_cpu_init, .Lfunc_end25-ggml_cpu_init
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_graph_compute.omp_outlined
	.type	ggml_graph_compute.omp_outlined,@function
ggml_graph_compute.omp_outlined:        // @ggml_graph_compute.omp_outlined
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldr	w20, [x0]
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	mov	x19, x3
	mov	x21, x2
	mov	w1, w20
	bl	__kmpc_single
	cbz	w0, .LBB26_2
// %bb.1:
	bl	omp_get_num_threads
	ldr	x8, [x19]
	str	w0, [x21]
	mov	w1, w20
	str	w0, [x8, #284]
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	bl	__kmpc_end_single
.LBB26_2:
	adrp	x0, .L__unnamed_3
	add	x0, x0, :lo12:.L__unnamed_3
	mov	w1, w20
	bl	__kmpc_barrier
	ldr	x8, [x19]
	ldr	x19, [x8, #272]
	bl	omp_get_thread_num
	add	x0, x19, w0, sxtw #4
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	b	ggml_graph_compute_thread
.Lfunc_end26:
	.size	ggml_graph_compute.omp_outlined, .Lfunc_end26-ggml_graph_compute.omp_outlined
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          // -- Begin function ggml_graph_compute_thread
.LCPI27_0:
	.xword	0x0000000000000000              // fp128 0
	.xword	0x0000000000000000
	.text
	.p2align	4
	.type	ggml_graph_compute_thread,@function
ggml_graph_compute_thread:              // @ggml_graph_compute_thread
	.cfi_startproc
// %bb.0:
	stp	d15, d14, [sp, #-160]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 160
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	.cfi_remember_state
	sub	sp, sp, #1344
	ldr	w8, [x0, #8]
	str	x0, [sp, #320]                  // 8-byte Folded Spill
	str	w8, [sp, #784]
	ldr	x9, [x0]
	ldp	x20, x10, [x9, #88]
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	ldr	w8, [x9, #284]
	str	x9, [sp, #288]                  // 8-byte Folded Spill
	str	x10, [sp, #264]                 // 8-byte Folded Spill
	str	w8, [sp, #788]
	ldr	x8, [x10]
	str	x8, [sp, #792]
	ldr	x8, [x10, #8]
	str	x9, [sp, #808]
	str	x8, [sp, #800]
	ldr	w19, [x20, #4]
	bl	__kmpc_global_thread_num
	mov	w1, w0
	cmp	w19, #1
	b.lt	.LBB27_2520
// %bb.1:                               // %.lr.ph
	add	x8, sp, #784
	add	x9, sp, #1072
	str	x20, [sp, #280]                 // 8-byte Folded Spill
	add	x8, x8, #16
	mov	x21, xzr
	str	x8, [sp, #168]                  // 8-byte Folded Spill
	add	x8, sp, #816
	add	x10, x8, #16
	add	x8, x9, #64
	str	x8, [sp, #504]                  // 8-byte Folded Spill
	str	x10, [sp, #464]                 // 8-byte Folded Spill
	b	.LBB27_3
	.p2align	5, , 16
.LBB27_2:                               // %ggml_barrier.exit33
                                        //   in Loop: Header=BB27_3 Depth=1
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	bl	__kmpc_global_thread_num
	mov	w1, w0
	cmp	x21, x19
	b.ge	.LBB27_2520
.LBB27_3:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB27_1736 Depth 2
                                        //       Child Loop BB27_1738 Depth 3
                                        //     Child Loop BB27_1683 Depth 2
                                        //       Child Loop BB27_1687 Depth 3
                                        //       Child Loop BB27_1690 Depth 3
                                        //       Child Loop BB27_1694 Depth 3
                                        //       Child Loop BB27_1697 Depth 3
                                        //       Child Loop BB27_1701 Depth 3
                                        //       Child Loop BB27_1705 Depth 3
                                        //       Child Loop BB27_1708 Depth 3
                                        //       Child Loop BB27_1712 Depth 3
                                        //       Child Loop BB27_1715 Depth 3
                                        //       Child Loop BB27_1719 Depth 3
                                        //       Child Loop BB27_1723 Depth 3
                                        //       Child Loop BB27_1726 Depth 3
                                        //     Child Loop BB27_1633 Depth 2
                                        //       Child Loop BB27_1637 Depth 3
                                        //       Child Loop BB27_1640 Depth 3
                                        //       Child Loop BB27_1644 Depth 3
                                        //       Child Loop BB27_1647 Depth 3
                                        //       Child Loop BB27_1651 Depth 3
                                        //       Child Loop BB27_1655 Depth 3
                                        //       Child Loop BB27_1658 Depth 3
                                        //       Child Loop BB27_1662 Depth 3
                                        //       Child Loop BB27_1665 Depth 3
                                        //       Child Loop BB27_1669 Depth 3
                                        //       Child Loop BB27_1672 Depth 3
                                        //     Child Loop BB27_2313 Depth 2
                                        //     Child Loop BB27_2317 Depth 2
                                        //     Child Loop BB27_1611 Depth 2
                                        //     Child Loop BB27_1606 Depth 2
                                        //     Child Loop BB27_2392 Depth 2
                                        //       Child Loop BB27_2396 Depth 3
                                        //     Child Loop BB27_2515 Depth 2
                                        //       Child Loop BB27_2517 Depth 3
                                        //     Child Loop BB27_2384 Depth 2
                                        //       Child Loop BB27_2386 Depth 3
                                        //     Child Loop BB27_2509 Depth 2
                                        //       Child Loop BB27_2511 Depth 3
                                        //     Child Loop BB27_2372 Depth 2
                                        //       Child Loop BB27_2376 Depth 3
                                        //     Child Loop BB27_2497 Depth 2
                                        //       Child Loop BB27_2501 Depth 3
                                        //       Child Loop BB27_2505 Depth 3
                                        //     Child Loop BB27_1578 Depth 2
                                        //       Child Loop BB27_1583 Depth 3
                                        //         Child Loop BB27_1587 Depth 4
                                        //           Child Loop BB27_1590 Depth 5
                                        //           Child Loop BB27_1593 Depth 5
                                        //           Child Loop BB27_1597 Depth 5
                                        //     Child Loop BB27_1558 Depth 2
                                        //       Child Loop BB27_1563 Depth 3
                                        //         Child Loop BB27_1567 Depth 4
                                        //           Child Loop BB27_1570 Depth 5
                                        //     Child Loop BB27_1534 Depth 2
                                        //       Child Loop BB27_1539 Depth 3
                                        //         Child Loop BB27_1543 Depth 4
                                        //           Child Loop BB27_1546 Depth 5
                                        //     Child Loop BB27_1509 Depth 2
                                        //       Child Loop BB27_1512 Depth 3
                                        //         Child Loop BB27_1515 Depth 4
                                        //           Child Loop BB27_1518 Depth 5
                                        //             Child Loop BB27_1521 Depth 6
                                        //     Child Loop BB27_1489 Depth 2
                                        //       Child Loop BB27_1492 Depth 3
                                        //         Child Loop BB27_1496 Depth 4
                                        //         Child Loop BB27_1499 Depth 4
                                        //     Child Loop BB27_1474 Depth 2
                                        //       Child Loop BB27_1477 Depth 3
                                        //         Child Loop BB27_1481 Depth 4
                                        //         Child Loop BB27_1484 Depth 4
                                        //     Child Loop BB27_1443 Depth 2
                                        //       Child Loop BB27_1446 Depth 3
                                        //         Child Loop BB27_1449 Depth 4
                                        //           Child Loop BB27_1452 Depth 5
                                        //             Child Loop BB27_1457 Depth 6
                                        //             Child Loop BB27_1468 Depth 6
                                        //     Child Loop BB27_1423 Depth 2
                                        //       Child Loop BB27_1426 Depth 3
                                        //         Child Loop BB27_1430 Depth 4
                                        //           Child Loop BB27_1436 Depth 5
                                        //     Child Loop BB27_1394 Depth 2
                                        //       Child Loop BB27_1397 Depth 3
                                        //         Child Loop BB27_1401 Depth 4
                                        //           Child Loop BB27_1405 Depth 5
                                        //           Child Loop BB27_1408 Depth 5
                                        //     Child Loop BB27_1210 Depth 2
                                        //       Child Loop BB27_1213 Depth 3
                                        //         Child Loop BB27_1216 Depth 4
                                        //           Child Loop BB27_1218 Depth 5
                                        //           Child Loop BB27_1222 Depth 5
                                        //           Child Loop BB27_1225 Depth 5
                                        //           Child Loop BB27_1230 Depth 5
                                        //             Child Loop BB27_1234 Depth 6
                                        //             Child Loop BB27_1237 Depth 6
                                        //           Child Loop BB27_1243 Depth 5
                                        //           Child Loop BB27_1247 Depth 5
                                        //           Child Loop BB27_1250 Depth 5
                                        //           Child Loop BB27_1254 Depth 5
                                        //           Child Loop BB27_1258 Depth 5
                                        //           Child Loop BB27_1261 Depth 5
                                        //           Child Loop BB27_1267 Depth 5
                                        //           Child Loop BB27_1270 Depth 5
                                        //           Child Loop BB27_1273 Depth 5
                                        //           Child Loop BB27_1278 Depth 5
                                        //           Child Loop BB27_1282 Depth 5
                                        //           Child Loop BB27_1285 Depth 5
                                        //           Child Loop BB27_1290 Depth 5
                                        //             Child Loop BB27_1294 Depth 6
                                        //             Child Loop BB27_1298 Depth 6
                                        //             Child Loop BB27_1301 Depth 6
                                        //           Child Loop BB27_1307 Depth 5
                                        //           Child Loop BB27_1310 Depth 5
                                        //           Child Loop BB27_1315 Depth 5
                                        //           Child Loop BB27_1319 Depth 5
                                        //           Child Loop BB27_1322 Depth 5
                                        //           Child Loop BB27_1327 Depth 5
                                        //           Child Loop BB27_1330 Depth 5
                                        //           Child Loop BB27_1334 Depth 5
                                        //           Child Loop BB27_1338 Depth 5
                                        //           Child Loop BB27_1341 Depth 5
                                        //           Child Loop BB27_1345 Depth 5
                                        //             Child Loop BB27_1349 Depth 6
                                        //             Child Loop BB27_1353 Depth 6
                                        //             Child Loop BB27_1356 Depth 6
                                        //           Child Loop BB27_1359 Depth 5
                                        //             Child Loop BB27_1363 Depth 6
                                        //             Child Loop BB27_1367 Depth 6
                                        //             Child Loop BB27_1370 Depth 6
                                        //           Child Loop BB27_1374 Depth 5
                                        //             Child Loop BB27_1378 Depth 6
                                        //             Child Loop BB27_1382 Depth 6
                                        //             Child Loop BB27_1385 Depth 6
                                        //     Child Loop BB27_1106 Depth 2
                                        //       Child Loop BB27_1123 Depth 3
                                        //         Child Loop BB27_1137 Depth 4
                                        //         Child Loop BB27_1141 Depth 4
                                        //         Child Loop BB27_1144 Depth 4
                                        //         Child Loop BB27_1155 Depth 4
                                        //         Child Loop BB27_1159 Depth 4
                                        //         Child Loop BB27_1163 Depth 4
                                        //         Child Loop BB27_1131 Depth 4
                                        //         Child Loop BB27_1149 Depth 4
                                        //       Child Loop BB27_1172 Depth 3
                                        //       Child Loop BB27_1175 Depth 3
                                        //       Child Loop BB27_1180 Depth 3
                                        //       Child Loop BB27_1184 Depth 3
                                        //       Child Loop BB27_1187 Depth 3
                                        //     Child Loop BB27_1080 Depth 2
                                        //       Child Loop BB27_1084 Depth 3
                                        //     Child Loop BB27_1888 Depth 2
                                        //       Child Loop BB27_1890 Depth 3
                                        //     Child Loop BB27_1051 Depth 2
                                        //       Child Loop BB27_1055 Depth 3
                                        //       Child Loop BB27_1059 Depth 3
                                        //       Child Loop BB27_1062 Depth 3
                                        //       Child Loop BB27_1065 Depth 3
                                        //         Child Loop BB27_1069 Depth 4
                                        //     Child Loop BB27_1041 Depth 2
                                        //       Child Loop BB27_1043 Depth 3
                                        //     Child Loop BB27_2164 Depth 2
                                        //     Child Loop BB27_2166 Depth 2
                                        //     Child Loop BB27_1002 Depth 2
                                        //       Child Loop BB27_1005 Depth 3
                                        //         Child Loop BB27_1008 Depth 4
                                        //           Child Loop BB27_1012 Depth 5
                                        //           Child Loop BB27_1015 Depth 5
                                        //           Child Loop BB27_1019 Depth 5
                                        //           Child Loop BB27_1022 Depth 5
                                        //           Child Loop BB27_1026 Depth 5
                                        //           Child Loop BB27_1029 Depth 5
                                        //     Child Loop BB27_978 Depth 2
                                        //       Child Loop BB27_981 Depth 3
                                        //         Child Loop BB27_985 Depth 4
                                        //           Child Loop BB27_990 Depth 5
                                        //     Child Loop BB27_959 Depth 2
                                        //       Child Loop BB27_962 Depth 3
                                        //         Child Loop BB27_965 Depth 4
                                        //           Child Loop BB27_969 Depth 5
                                        //     Child Loop BB27_916 Depth 2
                                        //       Child Loop BB27_919 Depth 3
                                        //         Child Loop BB27_924 Depth 4
                                        //           Child Loop BB27_928 Depth 5
                                        //             Child Loop BB27_934 Depth 6
                                        //           Child Loop BB27_941 Depth 5
                                        //             Child Loop BB27_947 Depth 6
                                        //     Child Loop BB27_878 Depth 2
                                        //       Child Loop BB27_881 Depth 3
                                        //         Child Loop BB27_886 Depth 4
                                        //           Child Loop BB27_894 Depth 5
                                        //             Child Loop BB27_900 Depth 6
                                        //     Child Loop BB27_852 Depth 2
                                        //       Child Loop BB27_856 Depth 3
                                        //         Child Loop BB27_865 Depth 4
                                        //     Child Loop BB27_832 Depth 2
                                        //       Child Loop BB27_835 Depth 3
                                        //         Child Loop BB27_838 Depth 4
                                        //           Child Loop BB27_842 Depth 5
                                        //           Child Loop BB27_845 Depth 5
                                        //     Child Loop BB27_2067 Depth 2
                                        //       Child Loop BB27_2070 Depth 3
                                        //         Child Loop BB27_2071 Depth 4
                                        //     Child Loop BB27_2083 Depth 2
                                        //       Child Loop BB27_2086 Depth 3
                                        //         Child Loop BB27_2089 Depth 4
                                        //           Child Loop BB27_2092 Depth 5
                                        //             Child Loop BB27_2096 Depth 6
                                        //               Child Loop BB27_2098 Depth 7
                                        //     Child Loop BB27_798 Depth 2
                                        //       Child Loop BB27_801 Depth 3
                                        //         Child Loop BB27_804 Depth 4
                                        //           Child Loop BB27_808 Depth 5
                                        //             Child Loop BB27_811 Depth 6
                                        //               Child Loop BB27_815 Depth 7
                                        //     Child Loop BB27_771 Depth 2
                                        //       Child Loop BB27_774 Depth 3
                                        //         Child Loop BB27_777 Depth 4
                                        //           Child Loop BB27_780 Depth 5
                                        //             Child Loop BB27_783 Depth 6
                                        //               Child Loop BB27_786 Depth 7
                                        //     Child Loop BB27_1850 Depth 2
                                        //       Child Loop BB27_1853 Depth 3
                                        //         Child Loop BB27_1856 Depth 4
                                        //           Child Loop BB27_1859 Depth 5
                                        //             Child Loop BB27_1863 Depth 6
                                        //               Child Loop BB27_1868 Depth 7
                                        //     Child Loop BB27_751 Depth 2
                                        //       Child Loop BB27_754 Depth 3
                                        //         Child Loop BB27_758 Depth 4
                                        //         Child Loop BB27_761 Depth 4
                                        //     Child Loop BB27_2236 Depth 2
                                        //       Child Loop BB27_2237 Depth 3
                                        //     Child Loop BB27_2256 Depth 2
                                        //       Child Loop BB27_2259 Depth 3
                                        //         Child Loop BB27_2263 Depth 4
                                        //           Child Loop BB27_2265 Depth 5
                                        //     Child Loop BB27_1834 Depth 2
                                        //       Child Loop BB27_1837 Depth 3
                                        //         Child Loop BB27_1841 Depth 4
                                        //         Child Loop BB27_1844 Depth 4
                                        //     Child Loop BB27_2241 Depth 2
                                        //       Child Loop BB27_2245 Depth 3
                                        //       Child Loop BB27_2249 Depth 3
                                        //     Child Loop BB27_2273 Depth 2
                                        //       Child Loop BB27_2276 Depth 3
                                        //         Child Loop BB27_2280 Depth 4
                                        //           Child Loop BB27_2284 Depth 5
                                        //           Child Loop BB27_2287 Depth 5
                                        //     Child Loop BB27_739 Depth 2
                                        //       Child Loop BB27_740 Depth 3
                                        //     Child Loop BB27_2154 Depth 2
                                        //       Child Loop BB27_2158 Depth 3
                                        //       Child Loop BB27_2162 Depth 3
                                        //     Child Loop BB27_681 Depth 2
                                        //       Child Loop BB27_685 Depth 3
                                        //       Child Loop BB27_688 Depth 3
                                        //       Child Loop BB27_692 Depth 3
                                        //       Child Loop BB27_695 Depth 3
                                        //       Child Loop BB27_699 Depth 3
                                        //       Child Loop BB27_703 Depth 3
                                        //       Child Loop BB27_706 Depth 3
                                        //       Child Loop BB27_710 Depth 3
                                        //       Child Loop BB27_713 Depth 3
                                        //       Child Loop BB27_717 Depth 3
                                        //       Child Loop BB27_721 Depth 3
                                        //       Child Loop BB27_724 Depth 3
                                        //     Child Loop BB27_1992 Depth 2
                                        //       Child Loop BB27_2003 Depth 3
                                        //       Child Loop BB27_2006 Depth 3
                                        //       Child Loop BB27_2010 Depth 3
                                        //       Child Loop BB27_2014 Depth 3
                                        //       Child Loop BB27_2017 Depth 3
                                        //       Child Loop BB27_2033 Depth 3
                                        //       Child Loop BB27_2037 Depth 3
                                        //       Child Loop BB27_2027 Depth 3
                                        //       Child Loop BB27_2031 Depth 3
                                        //       Child Loop BB27_2042 Depth 3
                                        //       Child Loop BB27_2045 Depth 3
                                        //       Child Loop BB27_2049 Depth 3
                                        //       Child Loop BB27_2052 Depth 3
                                        //       Child Loop BB27_2056 Depth 3
                                        //       Child Loop BB27_2060 Depth 3
                                        //       Child Loop BB27_2063 Depth 3
                                        //     Child Loop BB27_648 Depth 2
                                        //       Child Loop BB27_651 Depth 3
                                        //         Child Loop BB27_660 Depth 4
                                        //     Child Loop BB27_627 Depth 2
                                        //       Child Loop BB27_631 Depth 3
                                        //       Child Loop BB27_635 Depth 3
                                        //     Child Loop BB27_1815 Depth 2
                                        //       Child Loop BB27_1819 Depth 3
                                        //       Child Loop BB27_1823 Depth 3
                                        //     Child Loop BB27_2336 Depth 2
                                        //     Child Loop BB27_615 Depth 2
                                        //     Child Loop BB27_2343 Depth 2
                                        //     Child Loop BB27_2349 Depth 2
                                        //       Child Loop BB27_2355 Depth 3
                                        //       Child Loop BB27_2359 Depth 3
                                        //     Child Loop BB27_602 Depth 2
                                        //       Child Loop BB27_606 Depth 3
                                        //       Child Loop BB27_610 Depth 3
                                        //     Child Loop BB27_1799 Depth 2
                                        //       Child Loop BB27_1803 Depth 3
                                        //       Child Loop BB27_1807 Depth 3
                                        //     Child Loop BB27_573 Depth 2
                                        //       Child Loop BB27_579 Depth 3
                                        //       Child Loop BB27_583 Depth 3
                                        //       Child Loop BB27_586 Depth 3
                                        //     Child Loop BB27_2435 Depth 2
                                        //       Child Loop BB27_2438 Depth 3
                                        //         Child Loop BB27_2440 Depth 4
                                        //           Child Loop BB27_2443 Depth 5
                                        //             Child Loop BB27_2444 Depth 6
                                        //             Child Loop BB27_2447 Depth 6
                                        //               Child Loop BB27_2451 Depth 7
                                        //               Child Loop BB27_2455 Depth 7
                                        //               Child Loop BB27_2458 Depth 7
                                        //           Child Loop BB27_2462 Depth 5
                                        //             Child Loop BB27_2466 Depth 6
                                        //             Child Loop BB27_2470 Depth 6
                                        //             Child Loop BB27_2473 Depth 6
                                        //     Child Loop BB27_551 Depth 2
                                        //       Child Loop BB27_554 Depth 3
                                        //         Child Loop BB27_558 Depth 4
                                        //         Child Loop BB27_562 Depth 4
                                        //         Child Loop BB27_565 Depth 4
                                        //     Child Loop BB27_1902 Depth 2
                                        //       Child Loop BB27_1905 Depth 3
                                        //         Child Loop BB27_1907 Depth 4
                                        //     Child Loop BB27_2104 Depth 2
                                        //       Child Loop BB27_2108 Depth 3
                                        //     Child Loop BB27_1911 Depth 2
                                        //     Child Loop BB27_1918 Depth 2
                                        //       Child Loop BB27_1923 Depth 3
                                        //         Child Loop BB27_1925 Depth 4
                                        //           Child Loop BB27_1926 Depth 5
                                        //             Child Loop BB27_1931 Depth 6
                                        //     Child Loop BB27_519 Depth 2
                                        //       Child Loop BB27_522 Depth 3
                                        //         Child Loop BB27_524 Depth 4
                                        //     Child Loop BB27_1751 Depth 2
                                        //       Child Loop BB27_1761 Depth 3
                                        //         Child Loop BB27_1763 Depth 4
                                        //           Child Loop BB27_1765 Depth 5
                                        //             Child Loop BB27_1770 Depth 6
                                        //             Child Loop BB27_1775 Depth 6
                                        //     Child Loop BB27_477 Depth 2
                                        //       Child Loop BB27_480 Depth 3
                                        //         Child Loop BB27_483 Depth 4
                                        //           Child Loop BB27_488 Depth 5
                                        //           Child Loop BB27_491 Depth 5
                                        //           Child Loop BB27_496 Depth 5
                                        //           Child Loop BB27_500 Depth 5
                                        //           Child Loop BB27_503 Depth 5
                                        //     Child Loop BB27_421 Depth 2
                                        //       Child Loop BB27_424 Depth 3
                                        //         Child Loop BB27_427 Depth 4
                                        //           Child Loop BB27_431 Depth 5
                                        //             Child Loop BB27_435 Depth 6
                                        //             Child Loop BB27_438 Depth 6
                                        //         Child Loop BB27_441 Depth 4
                                        //           Child Loop BB27_445 Depth 5
                                        //             Child Loop BB27_449 Depth 6
                                        //             Child Loop BB27_452 Depth 6
                                        //         Child Loop BB27_455 Depth 4
                                        //           Child Loop BB27_458 Depth 5
                                        //             Child Loop BB27_462 Depth 6
                                        //             Child Loop BB27_466 Depth 6
                                        //             Child Loop BB27_469 Depth 6
                                        //     Child Loop BB27_364 Depth 2
                                        //       Child Loop BB27_367 Depth 3
                                        //         Child Loop BB27_370 Depth 4
                                        //           Child Loop BB27_375 Depth 5
                                        //           Child Loop BB27_382 Depth 5
                                        //           Child Loop BB27_385 Depth 5
                                        //           Child Loop BB27_389 Depth 5
                                        //           Child Loop BB27_393 Depth 5
                                        //           Child Loop BB27_396 Depth 5
                                        //           Child Loop BB27_400 Depth 5
                                        //           Child Loop BB27_403 Depth 5
                                        //           Child Loop BB27_407 Depth 5
                                        //           Child Loop BB27_411 Depth 5
                                        //           Child Loop BB27_414 Depth 5
                                        //     Child Loop BB27_329 Depth 2
                                        //       Child Loop BB27_332 Depth 3
                                        //         Child Loop BB27_335 Depth 4
                                        //           Child Loop BB27_340 Depth 5
                                        //           Child Loop BB27_343 Depth 5
                                        //           Child Loop BB27_348 Depth 5
                                        //           Child Loop BB27_352 Depth 5
                                        //           Child Loop BB27_355 Depth 5
                                        //     Child Loop BB27_288 Depth 2
                                        //       Child Loop BB27_291 Depth 3
                                        //         Child Loop BB27_294 Depth 4
                                        //           Child Loop BB27_299 Depth 5
                                        //           Child Loop BB27_302 Depth 5
                                        //           Child Loop BB27_306 Depth 5
                                        //           Child Loop BB27_309 Depth 5
                                        //           Child Loop BB27_314 Depth 5
                                        //           Child Loop BB27_318 Depth 5
                                        //           Child Loop BB27_321 Depth 5
                                        //     Child Loop BB27_275 Depth 2
                                        //       Child Loop BB27_279 Depth 3
                                        //     Child Loop BB27_1783 Depth 2
                                        //       Child Loop BB27_1785 Depth 3
                                        //     Child Loop BB27_2173 Depth 2
                                        //       Child Loop BB27_2176 Depth 3
                                        //         Child Loop BB27_2179 Depth 4
                                        //           Child Loop BB27_2183 Depth 5
                                        //     Child Loop BB27_254 Depth 2
                                        //       Child Loop BB27_257 Depth 3
                                        //         Child Loop BB27_260 Depth 4
                                        //           Child Loop BB27_264 Depth 5
                                        //     Child Loop BB27_1939 Depth 2
                                        //       Child Loop BB27_1942 Depth 3
                                        //         Child Loop BB27_1945 Depth 4
                                        //           Child Loop BB27_1949 Depth 5
                                        //     Child Loop BB27_2294 Depth 2
                                        //       Child Loop BB27_2297 Depth 3
                                        //         Child Loop BB27_2300 Depth 4
                                        //           Child Loop BB27_2304 Depth 5
                                        //     Child Loop BB27_2191 Depth 2
                                        //       Child Loop BB27_2194 Depth 3
                                        //         Child Loop BB27_2202 Depth 4
                                        //         Child Loop BB27_2199 Depth 4
                                        //     Child Loop BB27_2207 Depth 2
                                        //       Child Loop BB27_2210 Depth 3
                                        //         Child Loop BB27_2213 Depth 4
                                        //           Child Loop BB27_2216 Depth 5
                                        //             Child Loop BB27_2219 Depth 6
                                        //               Child Loop BB27_2222 Depth 7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
                                        //     Child Loop BB27_1962 Depth 2
                                        //       Child Loop BB27_1965 Depth 3
                                        //         Child Loop BB27_1968 Depth 4
                                        //           Child Loop BB27_1971 Depth 5
                                        //             Child Loop BB27_1974 Depth 6
                                        //               Child Loop BB27_1977 Depth 7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
                                        //     Child Loop BB27_212 Depth 2
                                        //       Child Loop BB27_215 Depth 3
                                        //         Child Loop BB27_218 Depth 4
                                        //           Child Loop BB27_221 Depth 5
                                        //             Child Loop BB27_224 Depth 6
                                        //               Child Loop BB27_227 Depth 7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
                                        //     Child Loop BB27_191 Depth 2
                                        //       Child Loop BB27_194 Depth 3
                                        //       Child Loop BB27_198 Depth 3
                                        //       Child Loop BB27_202 Depth 3
                                        //     Child Loop BB27_2321 Depth 2
                                        //     Child Loop BB27_2325 Depth 2
                                        //     Child Loop BB27_2406 Depth 2
                                        //     Child Loop BB27_175 Depth 2
                                        //       Child Loop BB27_179 Depth 3
                                        //       Child Loop BB27_182 Depth 3
                                        //     Child Loop BB27_153 Depth 2
                                        //       Child Loop BB27_156 Depth 3
                                        //         Child Loop BB27_160 Depth 4
                                        //           Child Loop BB27_164 Depth 5
                                        //           Child Loop BB27_167 Depth 5
                                        //     Child Loop BB27_132 Depth 2
                                        //       Child Loop BB27_135 Depth 3
                                        //         Child Loop BB27_139 Depth 4
                                        //           Child Loop BB27_143 Depth 5
                                        //           Child Loop BB27_146 Depth 5
                                        //     Child Loop BB27_106 Depth 2
                                        //       Child Loop BB27_109 Depth 3
                                        //         Child Loop BB27_113 Depth 4
                                        //           Child Loop BB27_117 Depth 5
                                        //           Child Loop BB27_120 Depth 5
                                        //     Child Loop BB27_2134 Depth 2
                                        //       Child Loop BB27_2137 Depth 3
                                        //         Child Loop BB27_2141 Depth 4
                                        //           Child Loop BB27_2145 Depth 5
                                        //           Child Loop BB27_2148 Depth 5
                                        //     Child Loop BB27_2115 Depth 2
                                        //       Child Loop BB27_2118 Depth 3
                                        //         Child Loop BB27_2122 Depth 4
                                        //           Child Loop BB27_2126 Depth 5
                                        //           Child Loop BB27_2129 Depth 5
                                        //     Child Loop BB27_83 Depth 2
                                        //       Child Loop BB27_87 Depth 3
                                        //       Child Loop BB27_90 Depth 3
                                        //     Child Loop BB27_56 Depth 2
                                        //       Child Loop BB27_60 Depth 3
                                        //       Child Loop BB27_64 Depth 3
                                        //       Child Loop BB27_67 Depth 3
                                        //     Child Loop BB27_2485 Depth 2
                                        //       Child Loop BB27_2489 Depth 3
                                        //       Child Loop BB27_2493 Depth 3
                                        //     Child Loop BB27_32 Depth 2
                                        //       Child Loop BB27_36 Depth 3
                                        //       Child Loop BB27_39 Depth 3
	ldr	x8, [sp, #288]                  // 8-byte Folded Reload
	ldr	w8, [x8, #264]
	cmp	x21, x8
	b.eq	.LBB27_2520
// %bb.4:                               //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x20, #16]
	str	w1, [sp, #300]                  // 4-byte Folded Spill
	str	x21, [sp, #328]                 // 8-byte Folded Spill
	ldr	x8, [x8, x21, lsl #3]
	str	x8, [sp, #768]                  // 8-byte Folded Spill
	ldr	w8, [x8, #80]
	cbz	w8, .LBB27_7
// %bb.5:                               //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	ggml_is_empty
	tbnz	w0, #0, .LBB27_7
// %bb.6:                               //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_cpu_extra_compute_forward
	tbz	w0, #0, .LBB27_14
	.p2align	5, , 16
.LBB27_7:                               // %ggml_compute_forward.exit
                                        //   in Loop: Header=BB27_3 Depth=1
	ldp	x8, x21, [sp, #320]             // 16-byte Folded Reload
	ldr	w8, [x8, #8]
	cbz	w8, .LBB27_11
.LBB27_8:                               //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [sp, #280]                 // 8-byte Folded Reload
	add	x21, x21, #1
	ldrsw	x19, [x20, #4]
	cmp	x21, x19
	b.ge	.LBB27_2
// %bb.9:                               //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #320]                  // 8-byte Folded Reload
	ldr	x8, [x8]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2
// %bb.10:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
	ldrsw	x19, [x20, #4]
	b	.LBB27_2
	.p2align	5, , 16
.LBB27_11:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #264]                  // 8-byte Folded Reload
	ldr	x8, [x8, #32]
	cbz	x8, .LBB27_8
// %bb.12:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #264]                  // 8-byte Folded Reload
	ldr	x0, [x9, #40]
	blr	x8
	tbz	w0, #0, .LBB27_8
// %bb.13:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #288]                  // 8-byte Folded Reload
	add	w8, w21, #1
	str	w8, [x9, #264]
	mov	w8, #1                          // =0x1
	str	w8, [x9, #296]
	b	.LBB27_8
.LBB27_14:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	w8, [x8, #80]
	sub	w8, w8, #1
	cmp	w8, #84
	b.hi	.LBB27_7
// %bb.15:                              //   in Loop: Header=BB27_3 Depth=1
	adrp	x11, .LJTI27_0
	add	x11, x11, :lo12:.LJTI27_0
.Ltmp0:
	adr	x9, .Ltmp0
	ldrsw	x10, [x11, x8, lsl #2]
	add	x9, x9, x10
	adrp	x20, :got:ggml_table_f32_f16
	ldr	x20, [x20, :got_lo12:ggml_table_f32_f16]
	br	x9
.LBB27_16:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_dup
	b	.LBB27_7
.LBB27_17:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [sp, #768]                 // 8-byte Folded Reload
	ldr	x28, [x20, #152]
	ldr	w8, [x28]
	cmp	w8, #35
	b.hi	.LBB27_2799
// %bb.18:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x10, #32204                     // =0x7dcc
	mov	w9, #1                          // =0x1
	movk	x10, #8447, lsl #16
	lsl	x9, x9, x8
	movk	x10, #12, lsl #32
	tst	x9, x10
	b.eq	.LBB27_2310
// %bb.19:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [x20, #160]
	mov	x0, x28
	str	x1, [sp, #736]                  // 8-byte Folded Spill
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_20
	b	.LBB27_2531
.LBB27_20:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x28
	mov	x1, x20
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_21
	b	.LBB27_2531
.LBB27_21:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x28
	bl	ggml_nrows
	ldp	x9, x8, [x28, #16]
	str	x28, [sp, #728]                 // 8-byte Folded Spill
	ldr	x23, [x20, #16]
	mov	x19, x0
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldp	x27, x8, [x28, #48]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	ldr	x21, [x28, #32]
	ldrsw	x22, [sp, #784]
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldp	x9, x8, [x28, #64]
	ldr	w25, [sp, #788]
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	str	x9, [sp, #688]                  // 8-byte Folded Spill
	ldp	x26, x9, [x8, #48]
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	ldp	x9, x8, [x8, #64]
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldp	x24, x9, [x20, #48]
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	mov	x8, x20
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldp	x10, x9, [x20, #64]
	ldr	w20, [x28]
	ldr	w28, [x8]
	mov	w0, w20
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	bl	ggml_get_type_traits
	ldr	x8, [x0, #40]
	lsl	x9, x28, #5
	mov	w0, w20
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	ldr	x28, [x8, x9]
	bl	ggml_type_size
	cmp	x27, x0
	b.ne	.LBB27_2537
// %bb.22:                              //   in Loop: Header=BB27_3 Depth=1
	str	x28, [sp, #664]                 // 8-byte Folded Spill
	cmp	x26, #4
	b.ne	.LBB27_2538
// %bb.23:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	ldr	x28, [sp, #728]                 // 8-byte Folded Reload
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	cmp	x24, x8
	b.hi	.LBB27_2539
// %bb.24:                              //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, x9
	b.hi	.LBB27_2540
// %bb.25:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.hi	.LBB27_2541
// %bb.26:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w0, [x28]
	bl	ggml_is_quantized
	tbnz	w0, #0, .LBB27_27
	b	.LBB27_2542
.LBB27_27:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	ldr	w8, [x8]
	cbnz	w8, .LBB27_2543
// %bb.28:                              //   in Loop: Header=BB27_3 Depth=1
	add	w8, w19, w25
	sub	w8, w8, #1
	sdiv	w9, w8, w25
	mul	w8, w9, w22
	add	w9, w8, w9
	cmp	w9, w19
	csel	w9, w9, w19, lt
	str	w9, [sp, #656]                  // 4-byte Folded Spill
	cmp	w8, w9
	b.ge	.LBB27_7
// %bb.29:                              // %.lr.ph.i.i809
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #744]                 // 8-byte Folded Reload
	sxtw	x26, w8
	add	x9, x11, #16
	ldr	x10, [sp, #800]
	mul	x9, x9, x22
	add	x10, x10, x9, lsl #2
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	mul	x9, x21, x9
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	and	x9, x11, #0x7fffffff
	sub	x8, x9, #1
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	and	x8, x11, #0x3
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	sub	x22, x8, x9
	mul	x8, x24, x23
	str	x8, [sp, #592]                  // 8-byte Folded Spill
	neg	w8, w21
	str	w8, [sp, #624]                  // 4-byte Folded Spill
	add	x8, x10, #8
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	b	.LBB27_32
.LBB27_30:                              //   in Loop: Header=BB27_32 Depth=2
	mov	x0, x1
	ldr	x1, [sp, #760]                  // 8-byte Folded Reload
	ldr	x2, [sp, #592]                  // 8-byte Folded Reload
	bl	memcpy
.LBB27_31:                              //   in Loop: Header=BB27_32 Depth=2
	ldr	x28, [sp, #728]                 // 8-byte Folded Reload
	add	x26, x26, #1
	ldr	w8, [sp, #656]                  // 4-byte Folded Reload
	cmp	w8, w26
	b.eq	.LBB27_7
.LBB27_32:                              //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_36 Depth 3
                                        //       Child Loop BB27_39 Depth 3
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	sdiv	x27, x26, x8
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	ldr	x19, [sp, #744]                 // 8-byte Folded Reload
	ldr	x1, [sp, #760]                  // 8-byte Folded Reload
	mov	x2, x19
	sxtw	x20, w27
	msub	x8, x20, x8, x26
	sdiv	x25, x8, x9
	sxtw	x23, w25
	msub	w8, w23, w9, w8
	ldr	x9, [x28, #248]
	sxtw	x21, w8
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	nop
	madd	x8, x21, x8, x9
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	nop
	madd	x8, x23, x9, x8
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	nop
	madd	x0, x20, x9, x8
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	ldr	x24, [x8, #248]
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x28, [x8, #248]
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	blr	x8
	cmp	w19, #1
	b.lt	.LBB27_40
// %bb.33:                              // %.lr.ph.i.i.i817.preheader
                                        //   in Loop: Header=BB27_32 Depth=2
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	mul	x8, x23, x8
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	mul	x9, x20, x9
	ldr	x10, [sp, #600]                 // 8-byte Folded Reload
	cmp	x10, #3
	b.hs	.LBB27_35
// %bb.34:                              //   in Loop: Header=BB27_32 Depth=2
	mov	x11, xzr
	ldr	x10, [sp, #648]                 // 8-byte Folded Reload
	cbnz	x10, .LBB27_38
	b	.LBB27_40
.LBB27_35:                              // %.lr.ph.i.i.i817.preheader1521
                                        //   in Loop: Header=BB27_32 Depth=2
	ldr	w11, [sp, #624]                 // 4-byte Folded Reload
	mov	x10, xzr
	mul	w11, w11, w27
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	sub	w11, w11, w25
	madd	w11, w12, w11, w26
	ldr	x12, [sp, #632]                 // 8-byte Folded Reload
	sxtw	x11, w11
	madd	x11, x12, x11, x9
	add	x12, x24, x8
	add	x11, x12, x11
	ldr	x12, [sp, #584]                 // 8-byte Folded Reload
	add	x11, x11, #8
	.p2align	5, , 16
.LBB27_36:                              // %.lr.ph.i.i.i817
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_32 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x11, #-8]
	sub	x10, x10, #4
	ldp	s1, s2, [x12, #-8]
	fadd	s0, s0, s1
	stur	s0, [x12, #-8]
	ldur	s0, [x11, #-4]
	fadd	s0, s0, s2
	ldp	s1, s2, [x12]
	stur	s0, [x12, #-4]
	ldr	s0, [x11]
	fadd	s0, s0, s1
	str	s0, [x12]
	ldr	s0, [x11, #4]
	add	x11, x11, #16
	fadd	s0, s0, s2
	str	s0, [x12, #4]
	add	x12, x12, #16
	cmp	x22, x10
	b.ne	.LBB27_36
// %bb.37:                              // %ggml_vec_acc_f32.exit.i.i813.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_32 Depth=2
	neg	x11, x10
	ldr	x10, [sp, #648]                 // 8-byte Folded Reload
	cbz	x10, .LBB27_40
.LBB27_38:                              // %.lr.ph.i.i.i817.epil.preheader
                                        //   in Loop: Header=BB27_32 Depth=2
	ldr	w13, [sp, #624]                 // 4-byte Folded Reload
	neg	w12, w25
	madd	w12, w13, w27, w12
	ldr	x13, [sp, #752]                 // 8-byte Folded Reload
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	add	x10, x10, x11, lsl #2
	madd	w12, w13, w12, w26
	ldr	x13, [sp, #632]                 // 8-byte Folded Reload
	sxtw	x12, w12
	mul	x12, x13, x12
	add	x9, x12, x9
	add	x8, x9, x8
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	add	x8, x8, x11, lsl #2
	add	x8, x24, x8
	.p2align	5, , 16
.LBB27_39:                              // %.lr.ph.i.i.i817.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_32 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x10]
	subs	x9, x9, #1
	ldr	s1, [x8], #4
	fadd	s0, s1, s0
	str	s0, [x10], #4
	b.ne	.LBB27_39
.LBB27_40:                              // %ggml_vec_acc_f32.exit.i.i813
                                        //   in Loop: Header=BB27_32 Depth=2
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	nop
	madd	x8, x21, x8, x28
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	nop
	madd	x8, x23, x9, x8
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	nop
	madd	x1, x20, x9, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_30
// %bb.41:                              //   in Loop: Header=BB27_32 Depth=2
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	ldr	x2, [sp, #744]                  // 8-byte Folded Reload
	blr	x8
	b	.LBB27_31
.LBB27_42:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	ldp	x28, x19, [x24, #152]
	ldr	w8, [x28]
	cmp	w8, #35
	b.hi	.LBB27_2477
// %bb.43:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x10, #32716                     // =0x7fcc
	mov	w9, #1                          // =0x1
	movk	x10, #8447, lsl #16
	lsl	x9, x9, x8
	movk	x10, #12, lsl #32
	tst	x9, x10
	b.eq	.LBB27_2326
// %bb.44:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x28
	mov	x1, x24
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_45
	b	.LBB27_2544
.LBB27_45:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	bl	ggml_is_scalar
	tbnz	w0, #0, .LBB27_46
	b	.LBB27_2545
.LBB27_46:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #248]
	mov	x0, x28
	mov	x20, x19
	ldr	w23, [sp, #788]
	ldr	s8, [x8]
	ldrsw	x8, [sp, #784]
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	bl	ggml_nrows
	ldp	x9, x8, [x28, #48]
	mov	x19, x0
	ldp	x22, x27, [x24, #16]
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldp	x9, x8, [x28, #64]
	ldp	x21, x26, [x24, #48]
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [x24, #32]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	ldp	x8, x25, [x24, #64]
	ldr	w24, [x28]
	mov	w0, w24
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	bl	ggml_get_type_traits
	ldr	x8, [x0, #40]
	lsl	x9, x24, #5
	mov	w0, w24
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	ldr	x8, [x8, x9]
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	bl	ggml_type_size
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	cmp	x8, x0
	b.ne	.LBB27_2546
// %bb.47:                              //   in Loop: Header=BB27_3 Depth=1
	cmp	x21, x26
	b.hi	.LBB27_2547
// %bb.48:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	cmp	x26, x8
	b.hi	.LBB27_2548
// %bb.49:                              //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, x25
	b.hi	.LBB27_2549
// %bb.50:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w0, [x28]
	bl	ggml_is_quantized
	tbnz	w0, #0, .LBB27_51
	b	.LBB27_2550
.LBB27_51:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x24]
	ldr	w9, [x28]
	cmp	w8, w9
	b.ne	.LBB27_2551
// %bb.52:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x20]
	str	x26, [sp, #696]                 // 8-byte Folded Spill
	str	x21, [sp, #704]                 // 8-byte Folded Spill
	str	x28, [sp, #712]                 // 8-byte Folded Spill
	cbnz	w8, .LBB27_2552
// %bb.53:                              //   in Loop: Header=BB27_3 Depth=1
	add	w8, w23, w19
	sub	w8, w8, #1
	sdiv	w9, w8, w23
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	mul	w8, w9, w8
	add	w9, w8, w9
	cmp	w9, w19
	csel	w9, w9, w19, lt
	str	w9, [sp, #688]                  // 4-byte Folded Spill
	cmp	w8, w9
	b.ge	.LBB27_7
// %bb.54:                              // %.lr.ph.i20.i792
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #680]                 // 8-byte Folded Reload
	and	x26, x22, #0x7fffffff
	sxtw	x23, w8
	and	x8, x22, #0x1
	add	x10, x22, #16
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	sub	x8, x26, x8
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	ldr	x9, [sp, #800]
	mul	x10, x10, x11
	mul	x28, x8, x27
	add	x19, x9, x10, lsl #2
	add	x8, x19, #4
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	add	x8, x19, #8
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	b	.LBB27_56
	.p2align	5, , 16
.LBB27_55:                              // %ggml_vec_acc1_f32.exit.i.i795
                                        //   in Loop: Header=BB27_56 Depth=2
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	mov	x0, x19
	mov	x2, x22
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	nop
	madd	x8, x21, x8, x24
	madd	x8, x20, x9, x8
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	nop
	madd	x1, x25, x9, x8
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	blr	x8
	ldr	w8, [sp, #688]                  // 4-byte Folded Reload
	add	x23, x23, #1
	cmp	w8, w23
	b.eq	.LBB27_7
.LBB27_56:                              //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_60 Depth 3
                                        //       Child Loop BB27_64 Depth 3
                                        //       Child Loop BB27_67 Depth 3
	sdiv	x8, x23, x28
	mov	x1, x19
	mov	x2, x22
	sxtw	x25, w8
	msub	x8, x25, x28, x23
	sdiv	x9, x8, x27
	sxtw	x20, w9
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	msub	w8, w20, w27, w8
	ldr	x9, [x9, #248]
	sxtw	x21, w8
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	nop
	madd	x8, x21, x8, x9
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	nop
	madd	x8, x20, x9, x8
	ldr	x9, [sp, #736]                  // 8-byte Folded Reload
	nop
	madd	x0, x25, x9, x8
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x24, [x8, #248]
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	blr	x8
	cmp	w22, #1
	b.lt	.LBB27_55
// %bb.57:                              // %.lr.ph.i.i26.i.preheader
                                        //   in Loop: Header=BB27_56 Depth=2
	cmp	x26, #2
	b.hs	.LBB27_59
// %bb.58:                              //   in Loop: Header=BB27_56 Depth=2
	mov	x8, xzr
	b	.LBB27_62
.LBB27_59:                              // %vector.body.preheader
                                        //   in Loop: Header=BB27_56 Depth=2
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_60:                              // %vector.body
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_56 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x9, #-4]
	subs	x8, x8, #2
	fadd	s1, s8, s1
	fadd	s0, s8, s0
	stp	s0, s1, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_60
// %bb.61:                              // %middle.block
                                        //   in Loop: Header=BB27_56 Depth=2
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_55
.LBB27_62:                              // %.lr.ph.i.i26.i.preheader523
                                        //   in Loop: Header=BB27_56 Depth=2
	sub	w9, w22, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_65
// %bb.63:                              // %.lr.ph.i.i26.i.prol.preheader
                                        //   in Loop: Header=BB27_56 Depth=2
	mov	x9, x8
	.p2align	5, , 16
.LBB27_64:                              // %.lr.ph.i.i26.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_56 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x19, x9, lsl #2]
	subs	x10, x10, #1
	fadd	s0, s8, s0
	str	s0, [x19, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_64
.LBB27_65:                              // %.lr.ph.i.i26.i.prol.loopexit
                                        //   in Loop: Header=BB27_56 Depth=2
	sub	x8, x8, x26
	cmn	x8, #4
	b.hi	.LBB27_55
// %bb.66:                              // %.lr.ph.i.i26.i.preheader1523
                                        //   in Loop: Header=BB27_56 Depth=2
	ldr	x10, [sp, #656]                 // 8-byte Folded Reload
	sub	x8, x26, x9
	add	x9, x10, x9, lsl #2
	.p2align	5, , 16
.LBB27_67:                              // %.lr.ph.i.i26.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_56 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x9, #-8]
	subs	x8, x8, #4
	ldp	s2, s3, [x9]
	fadd	s1, s8, s1
	fadd	s0, s8, s0
	fadd	s2, s8, s2
	stp	s0, s1, [x9, #-8]
	fadd	s0, s8, s3
	stp	s2, s0, [x9], #16
	b.ne	.LBB27_67
	b	.LBB27_55
.LBB27_68:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	ldr	x20, [x24, #152]
	ldr	w8, [x20]
	cbnz	w8, .LBB27_2553
// %bb.69:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x24, #160]
	mov	x0, x20
	mov	x1, x24
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_70
	b	.LBB27_2554
.LBB27_70:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x24
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_71
	b	.LBB27_2532
.LBB27_71:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_72
	b	.LBB27_2532
.LBB27_72:                              //   in Loop: Header=BB27_3 Depth=1
	ldpsw	x9, x8, [x24, #84]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	ldpsw	x9, x8, [x24, #92]
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	w8, [x24, #100]
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	cbnz	w8, .LBB27_77
// %bb.73:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_75
// %bb.74:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [x24, #248]
	mov	x0, x24
	ldr	x22, [x20, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x21
	mov	x1, x22
	bl	memcpy
.LBB27_75:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_77
// %bb.76:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_77:                              // %ggml_barrier.exit.i.i777
                                        //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x8, [sp, #784]
	mov	x0, x19
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	w26, [sp, #788]
	bl	ggml_nrows
	ldp	x28, x8, [x19, #32]
	mov	x21, x0
	ldp	x22, x23, [x19, #16]
	mov	x0, x20
	ldp	x24, x27, [x19, #48]
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldp	x8, x25, [x19, #64]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	bl	ggml_element_size
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	subs	x8, x22, #1
	str	x28, [sp, #704]                 // 8-byte Folded Spill
	ldr	x13, [sp, #728]                 // 8-byte Folded Reload
	csel	x8, xzr, x8, lo
	subs	x9, x23, #1
	csel	x9, xzr, x9, lo
	subs	x10, x28, #1
	ldr	x11, [sp, #720]                 // 8-byte Folded Reload
	csel	x10, xzr, x10, lo
	madd	x9, x9, x12, x13
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	subs	x11, x11, #1
	csel	x11, xzr, x11, lo
	madd	x9, x10, x12, x9
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	nop
	madd	x9, x11, x10, x9
	madd	x28, x0, x8, x9
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	ggml_nbytes
	cmp	x28, x0
	b.hs	.LBB27_2555
// %bb.78:                              //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	bl	ggml_nbytes
	cmp	x28, x0
	b.hs	.LBB27_2556
// %bb.79:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x30, [sp, #736]                 // 8-byte Folded Reload
	cmp	x24, #4
	b.ne	.LBB27_2557
// %bb.80:                              //   in Loop: Header=BB27_3 Depth=1
	add	w8, w26, w21
	sub	w8, w8, #1
	sdiv	w9, w8, w26
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	smull	x8, w8, w9
	add	w9, w8, w9
	cmp	w9, w21
	csel	w10, w9, w21, lt
	cmp	w8, w10
	b.ge	.LBB27_7
// %bb.81:                              // %.lr.ph.i.i778
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	and	x14, x22, #0x7fffffff
	and	x11, x22, #0x3
	ldr	x12, [sp, #704]                 // 8-byte Folded Reload
	sxtw	x10, w10
	sub	x13, x14, #1
	ldr	x0, [x20, #248]
	sub	x14, x11, x14
	ldr	x1, [sp, #728]                  // 8-byte Folded Reload
	add	x0, x0, x1
	ldr	x15, [x9, #248]
	mul	x9, x12, x23
	neg	w12, w12
	add	x15, x15, x1
	ldr	x16, [x19, #248]
	add	x1, x0, #8
	add	x2, x16, #8
	add	x17, x15, #8
	b	.LBB27_83
	.p2align	5, , 16
.LBB27_82:                              // %ggml_vec_add_f32.exit.i.i783
                                        //   in Loop: Header=BB27_83 Depth=2
	add	x8, x8, #1
	cmp	x8, x10
	b.eq	.LBB27_7
.LBB27_83:                              //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_87 Depth 3
                                        //       Child Loop BB27_90 Depth 3
	cmp	w22, #1
	b.lt	.LBB27_82
// %bb.84:                              // %.lr.ph.i.i.i786.preheader
                                        //   in Loop: Header=BB27_83 Depth=2
	sdiv	x3, x8, x9
	ldr	x19, [sp, #760]                 // 8-byte Folded Reload
	ldr	x20, [sp, #744]                 // 8-byte Folded Reload
	sxtw	x4, w3
	msub	x5, x4, x9, x8
	sdiv	x6, x5, x23
	ldr	x5, [sp, #752]                  // 8-byte Folded Reload
	sxtw	x7, w6
	smull	x5, w4, w5
	mul	x4, x4, x25
	smull	x19, w7, w19
	mul	x7, x7, x20
	cmp	x13, #3
	b.hs	.LBB27_86
// %bb.85:                              //   in Loop: Header=BB27_83 Depth=2
	mov	x20, xzr
	cbnz	x11, .LBB27_89
	b	.LBB27_82
.LBB27_86:                              // %.lr.ph.i.i.i786.preheader1524
                                        //   in Loop: Header=BB27_83 Depth=2
	mul	w21, w12, w3
	add	x28, x2, x4
	mov	x20, xzr
	sub	w21, w21, w6
	madd	w21, w23, w21, w8
	sxtw	x26, w21
	smaddl	x21, w30, w21, x19
	madd	x26, x27, x26, x7
	add	x24, x21, x5
	add	x21, x17, x24
	add	x24, x1, x24
	add	x26, x28, x26
	.p2align	5, , 16
.LBB27_87:                              // %.lr.ph.i.i.i786
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_83 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x24, #-8]
	sub	x20, x20, #4
	ldur	s1, [x26, #-8]
	fadd	s0, s0, s1
	stur	s0, [x21, #-8]
	ldur	s0, [x24, #-4]
	ldur	s1, [x26, #-4]
	fadd	s0, s0, s1
	stur	s0, [x21, #-4]
	ldr	s0, [x24]
	ldr	s1, [x26]
	fadd	s0, s0, s1
	str	s0, [x21]
	ldr	s0, [x24, #4]
	ldr	s1, [x26, #4]
	add	x24, x24, #16
	add	x26, x26, #16
	fadd	s0, s0, s1
	str	s0, [x21, #4]
	add	x21, x21, #16
	cmp	x14, x20
	b.ne	.LBB27_87
// %bb.88:                              // %ggml_vec_add_f32.exit.i.i783.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_83 Depth=2
	neg	x20, x20
	cbz	x11, .LBB27_82
.LBB27_89:                              // %.lr.ph.i.i.i786.epil.preheader
                                        //   in Loop: Header=BB27_83 Depth=2
	mul	w3, w12, w3
	sub	w3, w3, w6
	madd	w3, w23, w3, w8
	sxtw	x6, w3
	smaddl	x3, w30, w3, x19
	madd	x6, x27, x6, x7
	add	x3, x3, x5
	add	x5, x3, x20, lsl #2
	add	x4, x6, x4
	add	x3, x15, x5
	add	x5, x0, x5
	mov	x6, x11
	add	x4, x4, x20, lsl #2
	add	x4, x16, x4
	.p2align	5, , 16
.LBB27_90:                              // %.lr.ph.i.i.i786.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_83 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x5], #4
	subs	x6, x6, #1
	ldr	s1, [x4], #4
	fadd	s0, s0, s1
	str	s0, [x3], #4
	b.ne	.LBB27_90
	b	.LBB27_82
.LBB27_91:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_sub
	b	.LBB27_7
.LBB27_92:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_mul
	b	.LBB27_7
.LBB27_93:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_div
	b	.LBB27_7
.LBB27_94:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_sqr
	b	.LBB27_7
.LBB27_95:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_sqrt
	b	.LBB27_7
.LBB27_96:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_log
	b	.LBB27_7
.LBB27_97:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_sin
	b	.LBB27_7
.LBB27_98:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	add	x0, sp, #784
	bl	ggml_compute_forward_cos
	b	.LBB27_7
.LBB27_99:                              //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x8, #152]
	ldr	w9, [x8]
	cmp	w9, #30
	b.eq	.LBB27_2111
// %bb.100:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	w9, #1
	b.eq	.LBB27_2130
// %bb.101:                             //   in Loop: Header=BB27_3 Depth=1
	cbnz	w9, .LBB27_2722
// %bb.102:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [sp, #784]
	cbnz	w9, .LBB27_7
// %bb.103:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #40]
	cmp	x9, #1
	b.lt	.LBB27_2408
// %bb.104:                             // %.preheader40.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x17, [x8, #16]
	fmov	d0, xzr
	mov	x10, xzr
	ldp	x16, x12, [x8, #24]
	mov	x11, xzr
	ldp	x13, x14, [x8, #56]
	mov	w3, #8                          // =0x8
	ldr	x15, [x8, #72]
	and	x2, x17, #0x7fffffff
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	and	x0, x17, #0x3
	sub	x1, x2, #1
	sub	x2, x0, x2
	b	.LBB27_106
.LBB27_105:                             // %._crit_edge47.i.i
                                        //   in Loop: Header=BB27_106 Depth=2
	add	x11, x11, #1
	add	x3, x3, x15
	add	x10, x10, x15
	cmp	x11, x9
	b.eq	.LBB27_2331
.LBB27_106:                             // %.preheader40.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_109 Depth 3
                                        //         Child Loop BB27_113 Depth 4
                                        //           Child Loop BB27_117 Depth 5
                                        //           Child Loop BB27_120 Depth 5
	cmp	x12, #1
	b.lt	.LBB27_105
// %bb.107:                             // %.preheader.lr.ph.i.i762
                                        //   in Loop: Header=BB27_106 Depth=2
	mov	x4, xzr
	mov	x5, x10
	mov	x6, x3
	b	.LBB27_109
	.p2align	5, , 16
.LBB27_108:                             // %._crit_edge.i.i764
                                        //   in Loop: Header=BB27_109 Depth=3
	add	x4, x4, #1
	add	x6, x6, x14
	add	x5, x5, x14
	cmp	x4, x12
	b.eq	.LBB27_105
.LBB27_109:                             // %.preheader.i.i763
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_106 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_113 Depth 4
                                        //           Child Loop BB27_117 Depth 5
                                        //           Child Loop BB27_120 Depth 5
	cmp	x16, #1
	b.lt	.LBB27_108
// %bb.110:                             // %.lr.ph.i.i766
                                        //   in Loop: Header=BB27_109 Depth=3
	ldr	x20, [x8, #248]
	mov	x7, xzr
	add	x19, x20, x6
	add	x20, x20, x5
	b	.LBB27_113
	.p2align	5, , 16
.LBB27_111:                             //   in Loop: Header=BB27_113 Depth=4
	fmov	d1, xzr
.LBB27_112:                             // %ggml_vec_sum_f32_ggf.exit.i.i
                                        //   in Loop: Header=BB27_113 Depth=4
	fadd	d0, d0, d1
	add	x7, x7, #1
	add	x19, x19, x13
	add	x20, x20, x13
	cmp	x7, x16
	b.eq	.LBB27_108
.LBB27_113:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_106 Depth=2
                                        //       Parent Loop BB27_109 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_117 Depth 5
                                        //           Child Loop BB27_120 Depth 5
	cmp	w17, #1
	b.lt	.LBB27_111
// %bb.114:                             // %.lr.ph.i.i.i770.preheader
                                        //   in Loop: Header=BB27_113 Depth=4
	cmp	x1, #3
	b.hs	.LBB27_116
// %bb.115:                             //   in Loop: Header=BB27_113 Depth=4
	mov	x21, xzr
	fmov	d1, xzr
	cbnz	x0, .LBB27_119
	b	.LBB27_112
	.p2align	5, , 16
.LBB27_116:                             // %.lr.ph.i.i.i770.preheader1495
                                        //   in Loop: Header=BB27_113 Depth=4
	fmov	d1, xzr
	mov	x21, xzr
	mov	x22, x19
	.p2align	5, , 16
.LBB27_117:                             // %.lr.ph.i.i.i770
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_106 Depth=2
                                        //       Parent Loop BB27_109 Depth=3
                                        //         Parent Loop BB27_113 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s2, s3, [x22, #-8]
	sub	x21, x21, #4
	fcvt	d2, s2
	fadd	d1, d1, d2
	fcvt	d2, s3
	fadd	d1, d1, d2
	ldp	s2, s3, [x22], #16
	fcvt	d2, s2
	fadd	d1, d1, d2
	fcvt	d2, s3
	fadd	d1, d1, d2
	cmp	x2, x21
	b.ne	.LBB27_117
// %bb.118:                             // %ggml_vec_sum_f32_ggf.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_113 Depth=4
	neg	x21, x21
	cbz	x0, .LBB27_112
.LBB27_119:                             // %.lr.ph.i.i.i770.epil.preheader
                                        //   in Loop: Header=BB27_113 Depth=4
	add	x21, x20, x21, lsl #2
	mov	x22, x0
	.p2align	5, , 16
.LBB27_120:                             // %.lr.ph.i.i.i770.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_106 Depth=2
                                        //       Parent Loop BB27_109 Depth=3
                                        //         Parent Loop BB27_113 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s2, [x21], #4
	subs	x22, x22, #1
	fcvt	d2, s2
	fadd	d1, d1, d2
	b.ne	.LBB27_120
	b	.LBB27_112
.LBB27_121:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x8, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2558
// %bb.122:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [sp, #784]
	cbnz	w9, .LBB27_7
// %bb.123:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #48]
	cmp	x9, #4
	b.ne	.LBB27_2723
// %bb.124:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	ldr	x9, [x12, #48]
	cmp	x9, #4
	b.ne	.LBB27_2724
// %bb.125:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x12, #16]
	cmp	x9, #1
	b.ne	.LBB27_2725
// %bb.126:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #24]
	ldr	x10, [x12, #24]
	cmp	x10, x9
	b.ne	.LBB27_2726
// %bb.127:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x8, #32]
	ldr	x11, [x12, #32]
	cmp	x11, x10
	b.ne	.LBB27_2727
// %bb.128:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [x8, #40]
	ldr	x12, [x12, #40]
	cmp	x12, x11
	b.ne	.LBB27_2728
// %bb.129:                             // %.preheader74.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	x11, #1
	b.lt	.LBB27_7
// %bb.130:                             // %.preheader73.lr.ph.i.i737
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x6, [sp, #768]                  // 8-byte Folded Reload
	mov	x12, xzr
	mov	x13, xzr
	ldr	x14, [x8, #16]
	mov	w5, #8                          // =0x8
	and	x4, x14, #0x7fffffff
	ldp	x15, x16, [x8, #56]
	ldr	x17, [x8, #72]
	ldp	x0, x1, [x6, #56]
	and	x2, x14, #0x3
	sub	x3, x4, #1
	ldr	x6, [x6, #72]
	sub	x4, x2, x4
	b	.LBB27_132
.LBB27_131:                             // %._crit_edge82.i.i
                                        //   in Loop: Header=BB27_132 Depth=2
	add	x13, x13, #1
	add	x5, x5, x17
	add	x12, x12, x17
	cmp	x13, x11
	b.eq	.LBB27_7
.LBB27_132:                             // %.preheader73.i.i739
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_135 Depth 3
                                        //         Child Loop BB27_139 Depth 4
                                        //           Child Loop BB27_143 Depth 5
                                        //           Child Loop BB27_146 Depth 5
	cmp	x10, #1
	b.lt	.LBB27_131
// %bb.133:                             // %.preheader.lr.ph.i.i741
                                        //   in Loop: Header=BB27_132 Depth=2
	mul	x19, x13, x6
	mov	x7, xzr
	mov	x20, x12
	mov	x21, x5
	b	.LBB27_135
	.p2align	5, , 16
.LBB27_134:                             // %._crit_edge.i.i743
                                        //   in Loop: Header=BB27_135 Depth=3
	add	x7, x7, #1
	add	x21, x21, x16
	add	x20, x20, x16
	cmp	x7, x10
	b.eq	.LBB27_131
.LBB27_135:                             // %.preheader.i.i742
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_132 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_139 Depth 4
                                        //           Child Loop BB27_143 Depth 5
                                        //           Child Loop BB27_146 Depth 5
	cmp	x9, #1
	b.lt	.LBB27_134
// %bb.136:                             // %.lr.ph.i.i744
                                        //   in Loop: Header=BB27_135 Depth=3
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	mov	x22, xzr
	ldr	x25, [x8, #248]
	add	x24, x25, x21
	ldr	x23, [x23, #248]
	add	x25, x25, x20
	madd	x23, x7, x1, x23
	add	x23, x23, x19
	b	.LBB27_139
	.p2align	5, , 16
.LBB27_137:                             //   in Loop: Header=BB27_139 Depth=4
	fmov	s0, wzr
.LBB27_138:                             // %ggml_vec_sum_f32.exit.i.i748
                                        //   in Loop: Header=BB27_139 Depth=4
	mul	x26, x22, x0
	add	x22, x22, #1
	add	x24, x24, x15
	add	x25, x25, x15
	str	s0, [x23, x26]
	cmp	x22, x9
	b.eq	.LBB27_134
.LBB27_139:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_132 Depth=2
                                        //       Parent Loop BB27_135 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_143 Depth 5
                                        //           Child Loop BB27_146 Depth 5
	cmp	w14, #1
	b.lt	.LBB27_137
// %bb.140:                             // %.lr.ph.i.i.i751.preheader
                                        //   in Loop: Header=BB27_139 Depth=4
	cmp	x3, #3
	b.hs	.LBB27_142
// %bb.141:                             //   in Loop: Header=BB27_139 Depth=4
	mov	x26, xzr
	fmov	d0, xzr
	cbnz	x2, .LBB27_145
	b	.LBB27_147
	.p2align	5, , 16
.LBB27_142:                             // %.lr.ph.i.i.i751.preheader1498
                                        //   in Loop: Header=BB27_139 Depth=4
	fmov	d0, xzr
	mov	x26, xzr
	mov	x27, x24
	.p2align	5, , 16
.LBB27_143:                             // %.lr.ph.i.i.i751
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_132 Depth=2
                                        //       Parent Loop BB27_135 Depth=3
                                        //         Parent Loop BB27_139 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x27, #-8]
	sub	x26, x26, #4
	fcvt	d1, s1
	fadd	d0, d0, d1
	fcvt	d1, s2
	fadd	d0, d0, d1
	ldp	s1, s2, [x27], #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	fcvt	d1, s2
	fadd	d0, d0, d1
	cmp	x4, x26
	b.ne	.LBB27_143
// %bb.144:                             // %._crit_edge.loopexit.i.i.i756.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_139 Depth=4
	neg	x26, x26
	cbz	x2, .LBB27_147
.LBB27_145:                             // %.lr.ph.i.i.i751.epil.preheader
                                        //   in Loop: Header=BB27_139 Depth=4
	add	x26, x25, x26, lsl #2
	mov	x27, x2
	.p2align	5, , 16
.LBB27_146:                             // %.lr.ph.i.i.i751.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_132 Depth=2
                                        //       Parent Loop BB27_135 Depth=3
                                        //         Parent Loop BB27_139 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x26], #4
	subs	x27, x27, #1
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_146
.LBB27_147:                             // %._crit_edge.loopexit.i.i.i756
                                        //   in Loop: Header=BB27_139 Depth=4
	fcvt	s0, d0
	b	.LBB27_138
.LBB27_148:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x8, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2559
// %bb.149:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [sp, #784]
	cbnz	w9, .LBB27_7
// %bb.150:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #40]
	cmp	x9, #1
	b.lt	.LBB27_7
// %bb.151:                             // %.preheader71.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [x8, #16]
	mov	x10, xzr
	mov	x11, xzr
	ldr	x3, [sp, #768]                  // 8-byte Folded Reload
	mov	w6, #8                          // =0x8
	and	x5, x1, #0x7fffffff
	scvtf	s0, x1
	ldr	x15, [x8, #72]
	ldp	x0, x12, [x8, #24]
	and	x4, x1, #0x3
	sub	x2, x5, #1
	ldp	x13, x14, [x8, #56]
	sub	x5, x4, x5
	ldp	x16, x17, [x3, #56]
	ldr	x3, [x3, #72]
	b	.LBB27_153
.LBB27_152:                             // %._crit_edge79.i.i
                                        //   in Loop: Header=BB27_153 Depth=2
	add	x11, x11, #1
	add	x6, x6, x15
	add	x10, x10, x15
	cmp	x11, x9
	b.eq	.LBB27_7
.LBB27_153:                             // %.preheader71.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_156 Depth 3
                                        //         Child Loop BB27_160 Depth 4
                                        //           Child Loop BB27_164 Depth 5
                                        //           Child Loop BB27_167 Depth 5
	cmp	x12, #1
	b.lt	.LBB27_152
// %bb.154:                             // %.preheader.lr.ph.i.i721
                                        //   in Loop: Header=BB27_153 Depth=2
	mul	x19, x11, x3
	mov	x7, xzr
	mov	x20, x10
	mov	x21, x6
	b	.LBB27_156
	.p2align	5, , 16
.LBB27_155:                             // %._crit_edge.i.i723
                                        //   in Loop: Header=BB27_156 Depth=3
	add	x7, x7, #1
	add	x21, x21, x14
	add	x20, x20, x14
	cmp	x7, x12
	b.eq	.LBB27_152
.LBB27_156:                             // %.preheader.i.i722
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_153 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_160 Depth 4
                                        //           Child Loop BB27_164 Depth 5
                                        //           Child Loop BB27_167 Depth 5
	cmp	x0, #1
	b.lt	.LBB27_155
// %bb.157:                             // %.lr.ph.i.i724
                                        //   in Loop: Header=BB27_156 Depth=3
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	mov	x22, xzr
	ldr	x25, [x8, #248]
	add	x24, x25, x21
	ldr	x23, [x23, #248]
	add	x25, x25, x20
	madd	x23, x7, x17, x23
	add	x23, x23, x19
	b	.LBB27_160
	.p2align	5, , 16
.LBB27_158:                             //   in Loop: Header=BB27_160 Depth=4
	fmov	s1, wzr
.LBB27_159:                             // %ggml_vec_sum_f32.exit.i.i726
                                        //   in Loop: Header=BB27_160 Depth=4
	fdiv	s1, s1, s0
	mul	x26, x22, x16
	add	x22, x22, #1
	add	x24, x24, x13
	add	x25, x25, x13
	str	s1, [x23, x26]
	cmp	x22, x0
	b.eq	.LBB27_155
.LBB27_160:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_153 Depth=2
                                        //       Parent Loop BB27_156 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_164 Depth 5
                                        //           Child Loop BB27_167 Depth 5
	cmp	w1, #1
	b.lt	.LBB27_158
// %bb.161:                             // %.lr.ph.i.i.i729.preheader
                                        //   in Loop: Header=BB27_160 Depth=4
	cmp	x2, #3
	b.hs	.LBB27_163
// %bb.162:                             //   in Loop: Header=BB27_160 Depth=4
	mov	x26, xzr
	fmov	d1, xzr
	cbnz	x4, .LBB27_166
	b	.LBB27_168
	.p2align	5, , 16
.LBB27_163:                             // %.lr.ph.i.i.i729.preheader1499
                                        //   in Loop: Header=BB27_160 Depth=4
	fmov	d1, xzr
	mov	x26, xzr
	mov	x27, x24
	.p2align	5, , 16
.LBB27_164:                             // %.lr.ph.i.i.i729
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_153 Depth=2
                                        //       Parent Loop BB27_156 Depth=3
                                        //         Parent Loop BB27_160 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s2, s3, [x27, #-8]
	sub	x26, x26, #4
	fcvt	d2, s2
	fadd	d1, d1, d2
	fcvt	d2, s3
	fadd	d1, d1, d2
	ldp	s2, s3, [x27], #16
	fcvt	d2, s2
	fadd	d1, d1, d2
	fcvt	d2, s3
	fadd	d1, d1, d2
	cmp	x5, x26
	b.ne	.LBB27_164
// %bb.165:                             // %._crit_edge.loopexit.i.i.i734.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_160 Depth=4
	neg	x26, x26
	cbz	x4, .LBB27_168
.LBB27_166:                             // %.lr.ph.i.i.i729.epil.preheader
                                        //   in Loop: Header=BB27_160 Depth=4
	add	x26, x25, x26, lsl #2
	mov	x27, x4
	.p2align	5, , 16
.LBB27_167:                             // %.lr.ph.i.i.i729.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_153 Depth=2
                                        //       Parent Loop BB27_156 Depth=3
                                        //         Parent Loop BB27_160 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s2, [x26], #4
	subs	x27, x27, #1
	fcvt	d2, s2
	fadd	d1, d1, d2
	b.ne	.LBB27_167
.LBB27_168:                             // %._crit_edge.loopexit.i.i.i734
                                        //   in Loop: Header=BB27_160 Depth=4
	fcvt	s1, d1
	b	.LBB27_159
.LBB27_169:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x12, [x8, #152]
	ldr	w8, [x12]
	cbnz	w8, .LBB27_2560
// %bb.170:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.171:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x12, #24]
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.172:                             // %.lr.ph.i.i711
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x16, [sp, #768]                 // 8-byte Folded Reload
	mov	x9, xzr
	ldr	x10, [x12, #16]
	and	x17, x10, #0x7fffffff
	ldr	x11, [x12, #248]
	ldr	x12, [x12, #56]
	ldr	x13, [x16, #48]
	and	x14, x10, #0x3
	add	x0, x11, #8
	sub	x15, x17, #1
	ldr	x16, [x16, #248]
	sub	x17, x17, x14
	b	.LBB27_175
.LBB27_173:                             //   in Loop: Header=BB27_175 Depth=2
	mov	w2, wzr
.LBB27_174:                             // %ggml_vec_argmax_f32.exit.i.i
                                        //   in Loop: Header=BB27_175 Depth=2
	mul	x1, x9, x13
	add	x9, x9, #1
	add	x0, x0, x12
	add	x11, x11, x12
	str	w2, [x16, x1]
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_175:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_179 Depth 3
                                        //       Child Loop BB27_182 Depth 3
	cmp	w10, #1
	b.lt	.LBB27_173
// %bb.176:                             // %.lr.ph.i.i.i714.preheader
                                        //   in Loop: Header=BB27_175 Depth=2
	cmp	x15, #3
	b.hs	.LBB27_178
// %bb.177:                             //   in Loop: Header=BB27_175 Depth=2
	mov	w3, #-8388608                   // =0xff800000
	mov	x1, xzr
	fmov	s0, w3
	mov	w2, wzr
	b	.LBB27_180
.LBB27_178:                             // %.lr.ph.i.i.i714.preheader1525
                                        //   in Loop: Header=BB27_175 Depth=2
	mov	w3, #-8388608                   // =0xff800000
	mov	x1, xzr
	fmov	s0, w3
	mov	w2, wzr
	mov	x3, x0
	.p2align	5, , 16
.LBB27_179:                             // %.lr.ph.i.i.i714
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_175 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x3, #-8]
	add	w4, w1, #2
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s1
	csel	w2, w1, w2, eq
	fcmp	s0, s2
	fcsel	s0, s0, s2, gt
	fcmp	s0, s2
	csinc	w2, w2, w1, ne
	ldp	s1, s2, [x3], #16
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s1
	csel	w2, w4, w2, eq
	fcmp	s0, s2
	add	w4, w1, #3
	add	x1, x1, #4
	fcsel	s0, s0, s2, gt
	fcmp	s0, s2
	csel	w2, w4, w2, eq
	cmp	x1, x17
	b.ne	.LBB27_179
.LBB27_180:                             // %ggml_vec_argmax_f32.exit.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_175 Depth=2
	cbz	x14, .LBB27_174
// %bb.181:                             // %.lr.ph.i.i.i714.epil.preheader
                                        //   in Loop: Header=BB27_175 Depth=2
	mov	x3, x14
	.p2align	5, , 16
.LBB27_182:                             // %.lr.ph.i.i.i714.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_175 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x11, x1, lsl #2]
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s1
	csel	w2, w1, w2, eq
	add	x1, x1, #1
	subs	x3, x3, #1
	b.ne	.LBB27_182
	b	.LBB27_174
.LBB27_183:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x20, [x9, #152]
	ldr	w8, [x20]
	cmp	w8, #26
	b.ne	.LBB27_2561
// %bb.184:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x9, #160]
	ldr	w8, [x19]
	cmp	w8, #26
	b.ne	.LBB27_2562
// %bb.185:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x24, x8, [x20, #16]
	mov	x0, x20
	ldp	x28, x22, [x20, #48]
	mov	x1, x19
	ldp	x25, x26, [x19, #48]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldp	x8, x27, [x20, #32]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldp	x9, x8, [x20, #64]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldp	x9, x8, [x19, #64]
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_186
	b	.LBB27_2563
.LBB27_186:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x21
	bl	ggml_is_scalar
	tbnz	w0, #0, .LBB27_187
	b	.LBB27_2564
.LBB27_187:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x21]
	cmp	w8, #27
	b.ne	.LBB27_2565
// %bb.188:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	bl	ggml_nrows
	ldrsw	x9, [sp, #788]
	add	x8, x0, x9
	ldrsw	x10, [sp, #784]
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	sub	x8, x8, #1
	sdiv	x8, x8, x9
	mul	x9, x8, x10
	add	x8, x9, x8
	cmp	x8, x0
	csel	x10, x8, x0, lt
	cmp	x9, x10
	b.ge	.LBB27_1891
// %bb.189:                             // %.lr.ph135.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	x28, #1
	mov	x21, xzr
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	ccmp	x25, #1, #0, eq
	and	x13, x24, #0x7ffffffffffffffe
	ldr	x15, [x19, #248]
	cset	w14, ne
	lsl	x0, x25, #2
	lsl	x1, x28, #2
	mul	x11, x11, x8
	ldr	x8, [x20, #248]
	add	x12, x15, #1
	str	x12, [sp, #704]                 // 8-byte Folded Spill
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	add	x8, x8, #1
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	b	.LBB27_191
	.p2align	5, , 16
.LBB27_190:                             // %._crit_edge.i.i705
                                        //   in Loop: Header=BB27_191 Depth=2
	add	x9, x9, #1
	cmp	x9, x10
	b.eq	.LBB27_1892
.LBB27_191:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_194 Depth 3
                                        //       Child Loop BB27_198 Depth 3
                                        //       Child Loop BB27_202 Depth 3
	sdiv	x8, x9, x11
	mul	x2, x8, x27
	sub	x2, x9, x2
	cmp	x24, #1
	b.lt	.LBB27_190
// %bb.192:                             // %.lr.ph.i.i707.preheader
                                        //   in Loop: Header=BB27_191 Depth=2
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	mov	x19, xzr
	sdiv	x7, x2, x12
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	mul	x5, x7, x12
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	mul	x3, x8, x12
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	mul	x4, x7, x12
	ldr	x12, [sp, #720]                 // 8-byte Folded Reload
	mul	x6, x8, x12
	ldr	x12, [sp, #728]                 // 8-byte Folded Reload
	cset	w8, eq
	orr	w8, w8, w14
	mul	x7, x7, x12
	tbnz	w8, #0, .LBB27_196
// %bb.193:                             // %vector.body131.preheader
                                        //   in Loop: Header=BB27_191 Depth=2
	add	x8, x7, x6
	sub	x20, x2, x5
	ldr	x12, [sp, #704]                 // 8-byte Folded Reload
	nop
	madd	x8, x26, x20, x8
	add	x23, x4, x3
	madd	x20, x22, x20, x23
	mov	x23, x13
	add	x8, x12, x8
	ldr	x12, [sp, #696]                 // 8-byte Folded Reload
	add	x20, x12, x20
	.p2align	5, , 16
.LBB27_194:                             // %vector.body131
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_191 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	w16, [x20, #-1]
	ldur	w30, [x8, #-1]
	cmp	w16, w30
	ldr	w17, [x20], #2
	cinc	x21, x21, eq
	ldr	w16, [x8], #2
	cmp	w17, w16
	cinc	x19, x19, eq
	subs	x23, x23, #2
	b.ne	.LBB27_194
// %bb.195:                             // %middle.block124
                                        //   in Loop: Header=BB27_191 Depth=2
	add	x21, x19, x21
	mov	x19, x13
	cmp	x24, x13
	b.eq	.LBB27_190
.LBB27_196:                             // %.lr.ph.i.i707.preheader524
                                        //   in Loop: Header=BB27_191 Depth=2
	sub	w8, w24, w19
	ands	x23, x8, #0x3
	b.eq	.LBB27_199
// %bb.197:                             // %.lr.ph.i.i707.prol.preheader
                                        //   in Loop: Header=BB27_191 Depth=2
	madd	x8, x25, x19, x7
	sub	x30, x2, x5
	ldr	x12, [sp, #712]                 // 8-byte Folded Reload
	nop
	madd	x20, x28, x19, x4
	add	x8, x8, x6
	add	x20, x20, x3
	madd	x8, x26, x30, x8
	madd	x20, x22, x30, x20
	add	x8, x15, x8
	add	x30, x12, x20
	mov	x20, x19
	.p2align	5, , 16
.LBB27_198:                             // %.lr.ph.i.i707.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_191 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w16, [x30]
	add	x20, x20, #1
	add	x30, x30, x28
	ldr	w17, [x8]
	add	x8, x8, x25
	cmp	w16, w17
	cinc	x21, x21, eq
	subs	x23, x23, #1
	b.ne	.LBB27_198
	b	.LBB27_200
.LBB27_199:                             //   in Loop: Header=BB27_191 Depth=2
	mov	x20, x19
.LBB27_200:                             // %.lr.ph.i.i707.prol.loopexit
                                        //   in Loop: Header=BB27_191 Depth=2
	sub	x8, x19, x24
	cmn	x8, #4
	b.hi	.LBB27_190
// %bb.201:                             // %.lr.ph.i.i707.preheader1526
                                        //   in Loop: Header=BB27_191 Depth=2
	add	x16, x7, x6
	sub	x17, x2, x5
	madd	x16, x26, x17, x16
	add	x2, x4, x3
	add	x8, x20, #3
	madd	x17, x22, x17, x2
	mul	x19, x25, x8
	add	x5, x20, #2
	add	x30, x20, #1
	mul	x3, x28, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	sub	x2, x24, x20
	mul	x4, x25, x5
	add	x23, x8, x17
	mul	x5, x28, x5
	mul	x6, x25, x30
	add	x7, x15, x16
	mul	x30, x28, x30
	mul	x8, x25, x20
	mul	x20, x28, x20
	.p2align	5, , 16
.LBB27_202:                             // %.lr.ph.i.i707
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_191 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w16, [x23, x20]
	ldr	w17, [x7, x8]
	cmp	w16, w17
	ldr	w12, [x23, x30]
	cinc	x21, x21, eq
	ldr	w16, [x7, x6]
	cmp	w12, w16
	ldr	w17, [x23, x5]
	cinc	x16, x21, eq
	ldr	w12, [x7, x4]
	cmp	w17, w12
	ldr	w21, [x23, x3]
	add	x23, x23, x1
	ldr	w12, [x7, x19]
	add	x7, x7, x0
	cinc	x16, x16, eq
	cmp	w21, w12
	cinc	x21, x16, eq
	subs	x2, x2, #4
	b.ne	.LBB27_202
	b	.LBB27_190
.LBB27_203:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x21, [x8, #152]
	ldr	w8, [x21]
	cmp	w8, #30
	b.hi	.LBB27_2790
// %bb.204:                             //   in Loop: Header=BB27_3 Depth=1
	mov	w9, #1                          // =0x1
	lsl	w8, w9, w8
	mov	w9, #2                          // =0x2
	movk	w9, #16896, lsl #16
	tst	w8, w9
	b.eq	.LBB27_1954
// %bb.205:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.206:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x21
	mov	x1, x19
	bl	ggml_can_repeat
	tbnz	w0, #0, .LBB27_207
	b	.LBB27_2729
.LBB27_207:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB27_2730
// %bb.208:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x21, #48]
	cmp	x8, #2
	b.ne	.LBB27_2731
// %bb.209:                             // %.preheader116.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x21, #40]
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	ldr	x8, [x19, #40]
	sdiv	x8, x8, x9
	cmp	w8, #1
	b.lt	.LBB27_7
// %bb.210:                             // %.preheader115.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x15, [sp, #768]                 // 8-byte Folded Reload
	and	x8, x8, #0x7fffffff
	str	xzr, [sp, #576]                 // 8-byte Folded Spill
	ldr	x16, [x21, #32]
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	str	xzr, [sp, #560]                 // 8-byte Folded Spill
	ldp	x11, x12, [x21, #16]
	ldr	x13, [x15, #32]
	ldp	x9, x10, [x15, #16]
	lsl	x4, x11, #1
	and	x22, x11, #0x7
	str	x16, [sp, #720]                 // 8-byte Folded Spill
	sdiv	x8, x13, x16
	ldp	x14, x17, [x21, #56]
	str	x17, [sp, #712]                 // 8-byte Folded Spill
	ldr	x17, [x21, #72]
	str	x17, [sp, #600]                 // 8-byte Folded Spill
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	sdiv	x2, x9, x11
	and	x8, x8, #0x7fffffff
	and	x20, x2, #0x7fffffff
	ldp	x17, x0, [x15, #56]
	ldr	x15, [x15, #72]
	str	x15, [sp, #592]                 // 8-byte Folded Spill
	str	x0, [sp, #704]                  // 8-byte Folded Spill
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	mul	x28, x12, x17
	sdiv	x9, x10, x12
	and	x8, x9, #0x7fffffff
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	and	x8, x11, #0x7ffffffffffffff8
	neg	x24, x8
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	mul	x8, x8, x15
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	mul	x8, x16, x0
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	mov	w8, #8                          // =0x8
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	b	.LBB27_212
.LBB27_211:                             // %._crit_edge130.i.i
                                        //   in Loop: Header=BB27_212 Depth=2
	ldr	x10, [sp, #544]                 // 8-byte Folded Reload
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	add	x8, x8, x10
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x8, x10
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_212:                             // %.preheader115.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_215 Depth 3
                                        //         Child Loop BB27_218 Depth 4
                                        //           Child Loop BB27_221 Depth 5
                                        //             Child Loop BB27_224 Depth 6
                                        //               Child Loop BB27_227 Depth 7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_211
// %bb.213:                             // %.preheader114.lr.ph.i.i
                                        //   in Loop: Header=BB27_212 Depth=2
	mov	w8, #8                          // =0x8
	mov	x10, xzr
	str	xzr, [sp, #648]                 // 8-byte Folded Spill
	str	x8, [sp, #640]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	b	.LBB27_215
	.p2align	5, , 16
.LBB27_214:                             // %._crit_edge128.i.i683
                                        //   in Loop: Header=BB27_215 Depth=3
	ldr	x9, [sp, #592]                  // 8-byte Folded Reload
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x13, [sp, #640]                 // 8-byte Folded Reload
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	add	x13, x13, x8
	str	x13, [sp, #640]                 // 8-byte Folded Spill
	ldr	x13, [sp, #632]                 // 8-byte Folded Reload
	add	x13, x13, x9
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	str	x13, [sp, #632]                 // 8-byte Folded Spill
	add	x9, x9, x8
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB27_211
.LBB27_215:                             // %.preheader114.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_218 Depth 4
                                        //           Child Loop BB27_221 Depth 5
                                        //             Child Loop BB27_224 Depth 6
                                        //               Child Loop BB27_227 Depth 7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	cmp	w8, #1
	b.lt	.LBB27_214
// %bb.216:                             // %.preheader113.lr.ph.i.i
                                        //   in Loop: Header=BB27_215 Depth=3
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	mov	x9, xzr
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	b	.LBB27_218
	.p2align	5, , 16
.LBB27_217:                             // %._crit_edge126.i.i686
                                        //   in Loop: Header=BB27_218 Depth=4
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #680]                 // 8-byte Folded Spill
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_214
.LBB27_218:                             // %.preheader113.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_221 Depth 5
                                        //             Child Loop BB27_224 Depth 6
                                        //               Child Loop BB27_227 Depth 7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_217
// %bb.219:                             // %.preheader112.lr.ph.i.i
                                        //   in Loop: Header=BB27_218 Depth=4
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	mov	x10, xzr
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	ldr	x16, [sp, #640]                 // 8-byte Folded Reload
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_221
	.p2align	5, , 16
.LBB27_220:                             // %._crit_edge124.i.i688
                                        //   in Loop: Header=BB27_221 Depth=5
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x13, [sp, #744]                 // 8-byte Folded Reload
	add	x13, x13, x9
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	str	x13, [sp, #744]                 // 8-byte Folded Spill
	add	x16, x16, x8
	add	x9, x9, x8
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB27_217
.LBB27_221:                             // %.preheader112.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        //         Parent Loop BB27_218 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_224 Depth 6
                                        //               Child Loop BB27_227 Depth 7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	str	x10, [sp, #728]                 // 8-byte Folded Spill
	cmp	w8, #1
	b.lt	.LBB27_220
// %bb.222:                             // %.preheader111.lr.ph.i.i
                                        //   in Loop: Header=BB27_221 Depth=5
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	mov	x5, xzr
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	b	.LBB27_224
	.p2align	5, , 16
.LBB27_223:                             // %._crit_edge122.i.i689
                                        //   in Loop: Header=BB27_224 Depth=6
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	add	x5, x5, #1
	add	x8, x8, x28
	add	x10, x10, x28
	cmp	x5, x9
	b.eq	.LBB27_220
.LBB27_224:                             // %.preheader111.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        //         Parent Loop BB27_218 Depth=4
                                        //           Parent Loop BB27_221 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_227 Depth 7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	cmp	x12, #1
	b.lt	.LBB27_223
// %bb.225:                             // %.preheader.lr.ph.i.i690
                                        //   in Loop: Header=BB27_224 Depth=6
	ldr	x30, [sp, #752]                 // 8-byte Folded Reload
	mov	x1, xzr
	mov	x9, x10
	mov	x25, x16
	mov	x27, x8
	b	.LBB27_227
	.p2align	5, , 16
.LBB27_226:                             // %._crit_edge120.i.i
                                        //   in Loop: Header=BB27_227 Depth=7
	add	x1, x1, #1
	add	x27, x27, x17
	add	x25, x25, x14
	add	x9, x9, x17
	add	x30, x30, x14
	cmp	x1, x12
	b.eq	.LBB27_223
.LBB27_227:                             // %.preheader.i.i691
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        //         Parent Loop BB27_218 Depth=4
                                        //           Parent Loop BB27_221 Depth=5
                                        //             Parent Loop BB27_224 Depth=6
                                        // =>            This Loop Header: Depth=7
                                        //                 Child Loop BB27_230 Depth 8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	cmp	w2, #1
	b.lt	.LBB27_226
// %bb.228:                             // %.lr.ph119.i.i
                                        //   in Loop: Header=BB27_227 Depth=7
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	mov	x3, xzr
	ldr	x15, [x21, #248]
	add	x6, x15, x25
	ldr	x13, [x13, #248]
	add	x7, x15, x30
	add	x19, x13, x27
	add	x0, x13, x9
	b	.LBB27_230
	.p2align	5, , 16
.LBB27_229:                             // %._crit_edge.i.i693
                                        //   in Loop: Header=BB27_230 Depth=8
	add	x3, x3, #1
	add	x19, x19, x4
	add	x0, x0, x4
	cmp	x3, x20
	b.eq	.LBB27_226
.LBB27_230:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        //         Parent Loop BB27_218 Depth=4
                                        //           Parent Loop BB27_221 Depth=5
                                        //             Parent Loop BB27_224 Depth=6
                                        //               Parent Loop BB27_227 Depth=7
                                        // =>              This Loop Header: Depth=8
                                        //                   Child Loop BB27_234 Depth 9
                                        //                   Child Loop BB27_237 Depth 9
	cmp	x11, #1
	b.lt	.LBB27_229
// %bb.231:                             // %.lr.ph.i.i694.preheader
                                        //   in Loop: Header=BB27_230 Depth=8
	cmp	x11, #8
	b.hs	.LBB27_233
// %bb.232:                             //   in Loop: Header=BB27_230 Depth=8
	mov	x23, xzr
	cbnz	x22, .LBB27_236
	b	.LBB27_229
	.p2align	5, , 16
.LBB27_233:                             // %.lr.ph.i.i694.preheader1483
                                        //   in Loop: Header=BB27_230 Depth=8
	mov	x23, xzr
	mov	x15, x6
	mov	x13, x19
	.p2align	5, , 16
.LBB27_234:                             // %.lr.ph.i.i694
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        //         Parent Loop BB27_218 Depth=4
                                        //           Parent Loop BB27_221 Depth=5
                                        //             Parent Loop BB27_224 Depth=6
                                        //               Parent Loop BB27_227 Depth=7
                                        //                 Parent Loop BB27_230 Depth=8
                                        // =>                This Inner Loop Header: Depth=9
	ldurh	w26, [x15, #-8]
	sub	x23, x23, #8
	sturh	w26, [x13, #-8]
	ldurh	w26, [x15, #-6]
	sturh	w26, [x13, #-6]
	ldurh	w26, [x15, #-4]
	sturh	w26, [x13, #-4]
	ldurh	w26, [x15, #-2]
	sturh	w26, [x13, #-2]
	ldrh	w26, [x15]
	strh	w26, [x13]
	ldrh	w26, [x15, #2]
	strh	w26, [x13, #2]
	ldrh	w26, [x15, #4]
	strh	w26, [x13, #4]
	ldrh	w26, [x15, #6]
	add	x15, x15, #16
	strh	w26, [x13, #6]
	add	x13, x13, #16
	cmp	x24, x23
	b.ne	.LBB27_234
// %bb.235:                             // %._crit_edge.i.i693.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_230 Depth=8
	neg	x23, x23
	cbz	x22, .LBB27_229
.LBB27_236:                             // %.lr.ph.i.i694.epil.preheader
                                        //   in Loop: Header=BB27_230 Depth=8
	add	x13, x0, x23, lsl #1
	mov	x15, x22
	add	x23, x7, x23, lsl #1
	.p2align	5, , 16
.LBB27_237:                             // %.lr.ph.i.i694.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_212 Depth=2
                                        //       Parent Loop BB27_215 Depth=3
                                        //         Parent Loop BB27_218 Depth=4
                                        //           Parent Loop BB27_221 Depth=5
                                        //             Parent Loop BB27_224 Depth=6
                                        //               Parent Loop BB27_227 Depth=7
                                        //                 Parent Loop BB27_230 Depth=8
                                        // =>                This Inner Loop Header: Depth=9
	ldrh	w26, [x23], #2
	subs	x15, x15, #1
	strh	w26, [x13], #2
	b.ne	.LBB27_237
	b	.LBB27_229
.LBB27_238:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x21, [x8, #152]
	ldr	w8, [x21]
	cbnz	w8, .LBB27_2566
// %bb.239:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.240:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	mov	x1, x21
	mov	x0, x19
	bl	ggml_can_repeat
	tbnz	w0, #0, .LBB27_241
	b	.LBB27_2732
.LBB27_241:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB27_2733
// %bb.242:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x21, #48]
	cmp	x8, #4
	b.ne	.LBB27_2734
// %bb.243:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x9, x8, [x21, #16]
	mov	x0, x19
	ldp	x25, x26, [x19, #16]
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ldp	x9, x8, [x21, #32]
	ldp	x22, x23, [x19, #32]
	str	x8, [sp, #640]                  // 8-byte Folded Spill
	ldp	x20, x8, [x21, #56]
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [x21, #72]
	str	x8, [sp, #592]                  // 8-byte Folded Spill
	ldp	x28, x8, [x19, #56]
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [x19, #72]
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	bl	ggml_is_contiguous
	str	x22, [sp, #720]                 // 8-byte Folded Spill
	str	x23, [sp, #608]                 // 8-byte Folded Spill
	tbnz	w0, #0, .LBB27_244
	b	.LBB27_2188
.LBB27_244:                             //   in Loop: Header=BB27_3 Depth=1
	mul	x8, x26, x25
	mul	x8, x8, x22
	mul	x8, x8, x23
	cmp	w8, #1
	b.lt	.LBB27_2204
// %bb.245:                             // %.lr.ph.preheader.i.i.i657
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ubfiz	x2, x8, #2, #31
	mov	w1, wzr
	ldr	x0, [x9, #248]
	bl	memset
	b	.LBB27_2204
.LBB27_246:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x20, #152]
	ldr	w0, [x8]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	cmp	w0, #30
	b.hi	.LBB27_2290
// %bb.247:                             //   in Loop: Header=BB27_3 Depth=1
	mov	w8, #1                          // =0x1
	mov	w9, #2                          // =0x2
	lsl	w8, w8, w0
	movk	w9, #16896, lsl #16
	tst	w8, w9
	b.ne	.LBB27_1934
// %bb.248:                             //   in Loop: Header=BB27_3 Depth=1
	mov	w9, #1                          // =0x1
	movk	w9, #1024, lsl #16
	tst	w8, w9
	b.eq	.LBB27_2167
// %bb.249:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x20, #160]
	bl	ggml_type_size
	cmp	x0, #4
	b.ne	.LBB27_2735
// %bb.250:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w14, [x20, #84]
	cmp	w14, #4
	b.hs	.LBB27_2736
// %bb.251:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x1, x0, [x19, #64]
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	ldp	x0, x7, [x20, #32]
	ldr	x3, [sp, #760]                  // 8-byte Folded Reload
	ldp	x8, x9, [x3, #16]!
	str	x1, [sp, #712]                  // 8-byte Folded Spill
	ldp	x1, x2, [x20, #16]
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .LCPI27_0
	str	x7, [sp, #664]                  // 8-byte Folded Spill
	ldp	x10, x11, [x3, #16]
	ldr	q0, [x0, :lo12:.LCPI27_0]
	add	x0, sp, #1072
	ldp	x12, x13, [x3, #32]
	ldp	x17, x15, [x3, #48]
	str	x15, [sp, #672]                 // 8-byte Folded Spill
	ldp	x15, x16, [x19, #48]
	stp	q0, q0, [x0]
	ldp	x0, x4, [x20, #64]
	str	x4, [sp, #656]                  // 8-byte Folded Spill
	ldr	x3, [x3, x14, lsl #3]
	add	x4, sp, #1072
	ldp	x5, x6, [x20, #48]
	str	x3, [x4, x14, lsl #3]
	ldrsw	x14, [sp, #784]
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	ldrsw	x14, [sp, #788]
	str	x14, [sp, #736]                 // 8-byte Folded Spill
	cmp	x7, #1
	b.lt	.LBB27_7
// %bb.252:                             // %.preheader123.lr.ph.i29.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [sp, #680]                 // 8-byte Folded Reload
	mov	x23, xzr
	mul	x3, x17, x14
	mul	x14, x0, x14
	ldr	x25, [sp, #1072]
	ldr	x26, [sp, #1080]
	str	x3, [sp, #696]                  // 8-byte Folded Spill
	ldr	x3, [sp, #736]                  // 8-byte Folded Reload
	str	x14, [sp, #688]                 // 8-byte Folded Spill
	mul	x14, x0, x3
	mul	x17, x17, x3
	str	x14, [sp, #720]                 // 8-byte Folded Spill
	ldr	x14, [sp, #1088]
	str	x17, [sp, #728]                 // 8-byte Folded Spill
	str	x14, [sp, #704]                 // 8-byte Folded Spill
	ldr	x14, [sp, #1096]
	str	x14, [sp, #640]                 // 8-byte Folded Spill
	b	.LBB27_254
.LBB27_253:                             // %._crit_edge131.i32.i
                                        //   in Loop: Header=BB27_254 Depth=2
	ldr	x14, [sp, #672]                 // 8-byte Folded Reload
	add	x23, x23, #1
	ldr	x17, [sp, #696]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #656]                 // 8-byte Folded Reload
	str	x17, [sp, #696]                 // 8-byte Folded Spill
	ldr	x17, [sp, #688]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	str	x17, [sp, #688]                 // 8-byte Folded Spill
	cmp	x23, x14
	b.eq	.LBB27_7
.LBB27_254:                             // %.preheader123.i30.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_257 Depth 3
                                        //         Child Loop BB27_260 Depth 4
                                        //           Child Loop BB27_264 Depth 5
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	ldr	x17, [sp, #680]                 // 8-byte Folded Reload
	cmp	x14, x17
	b.le	.LBB27_253
// %bb.255:                             // %.preheader122.lr.ph.i35.i
                                        //   in Loop: Header=BB27_254 Depth=2
	ldr	x14, [sp, #640]                 // 8-byte Folded Reload
	sub	x17, x23, x14
	ldr	x14, [sp, #688]                 // 8-byte Folded Reload
	ldr	x27, [sp, #696]                 // 8-byte Folded Reload
	ldr	x21, [sp, #680]                 // 8-byte Folded Reload
	str	x14, [sp, #752]                 // 8-byte Folded Spill
	ldr	x14, [sp, #648]                 // 8-byte Folded Reload
	mul	x4, x17, x14
	b	.LBB27_257
	.p2align	5, , 16
.LBB27_256:                             // %._crit_edge129.i38.i
                                        //   in Loop: Header=BB27_257 Depth=3
	ldr	x14, [sp, #736]                 // 8-byte Folded Reload
	add	x21, x21, x14
	ldr	x14, [sp, #728]                 // 8-byte Folded Reload
	ldr	x17, [sp, #752]                 // 8-byte Folded Reload
	add	x27, x27, x14
	ldr	x14, [sp, #720]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	str	x17, [sp, #752]                 // 8-byte Folded Spill
	cmp	x14, x21
	b.le	.LBB27_253
.LBB27_257:                             // %.preheader122.i36.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_254 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_260 Depth 4
                                        //           Child Loop BB27_264 Depth 5
	cmp	x2, #1
	b.lt	.LBB27_256
// %bb.258:                             // %.preheader.lr.ph.i40.i
                                        //   in Loop: Header=BB27_257 Depth=3
	ldr	x14, [sp, #704]                 // 8-byte Folded Reload
	mov	x20, xzr
	sub	x17, x21, x14
	ldr	x14, [sp, #712]                 // 8-byte Folded Reload
	ldr	x28, [sp, #752]                 // 8-byte Folded Reload
	mul	x7, x17, x14
	mov	x17, x27
	b	.LBB27_260
	.p2align	5, , 16
.LBB27_259:                             // %._crit_edge.i43.i
                                        //   in Loop: Header=BB27_260 Depth=4
	add	x20, x20, #1
	add	x17, x17, x13
	add	x28, x28, x6
	cmp	x20, x2
	b.eq	.LBB27_256
.LBB27_260:                             // %.preheader.i41.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_254 Depth=2
                                        //       Parent Loop BB27_257 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_264 Depth 5
	cmp	x1, #1
	b.lt	.LBB27_259
// %bb.261:                             // %.lr.ph.i46.i
                                        //   in Loop: Header=BB27_260 Depth=4
	ldr	x14, [sp, #768]                 // 8-byte Folded Reload
	sub	x3, x20, x26
	mov	x0, xzr
	mul	x3, x3, x16
	mov	x24, x17
	ldr	x22, [x14, #248]
	add	x22, x22, x28
	b	.LBB27_264
	.p2align	5, , 16
.LBB27_262:                             //   in Loop: Header=BB27_264 Depth=5
	ldr	x30, [x19, #248]
	sub	x14, x0, x25
	madd	x14, x14, x15, x30
	add	x30, x3, x7
	add	x30, x30, x4
	add	x30, x14, x30
.LBB27_263:                             //   in Loop: Header=BB27_264 Depth=5
	ldr	s0, [x30]
	add	x0, x0, #1
	add	x24, x24, x12
	str	s0, [x22]
	add	x22, x22, x5
	cmp	x1, x0
	b.eq	.LBB27_259
.LBB27_264:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_254 Depth=2
                                        //       Parent Loop BB27_257 Depth=3
                                        //         Parent Loop BB27_260 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	cmp	x8, x0
	b.le	.LBB27_262
// %bb.265:                             //   in Loop: Header=BB27_264 Depth=5
	cmp	x9, x20
	b.le	.LBB27_262
// %bb.266:                             //   in Loop: Header=BB27_264 Depth=5
	cmp	x10, x21
	b.le	.LBB27_262
// %bb.267:                             //   in Loop: Header=BB27_264 Depth=5
	cmp	x11, x23
	b.le	.LBB27_262
// %bb.268:                             //   in Loop: Header=BB27_264 Depth=5
	ldr	x14, [sp, #760]                 // 8-byte Folded Reload
	ldr	x30, [x14, #248]
	add	x30, x30, x24
	b	.LBB27_263
.LBB27_269:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x24, [x9, #152]
	ldr	w8, [x24]
	cmp	w8, #1
	b.eq	.LBB27_1780
// %bb.270:                             //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2737
// %bb.271:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldrsw	x20, [sp, #784]
	ldr	w21, [sp, #788]
	ldr	x19, [x8, #160]
	ldr	x25, [x19, #16]
	mov	x0, x19
	bl	ggml_nrows
	add	w8, w21, w0
	sub	w8, w8, #1
	sdiv	w8, w8, w21
	smull	x21, w20, w8
	add	w8, w21, w8
	cmp	w8, w0
	csel	w8, w8, w0, lt
	cmp	w21, w8
	b.ge	.LBB27_7
// %bb.272:                             // %.lr.ph.i.i610
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	sxtw	x8, w8
	and	x13, x25, #0x7fffffff
	ldr	x11, [x19, #56]
	str	x8, [sp, #768]                  // 8-byte Folded Spill
	and	x8, x25, #0x1
	ldr	x12, [x24, #248]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	str	x13, [sp, #752]                 // 8-byte Folded Spill
	ldr	x26, [x24, #56]
	sub	x24, x8, x13
	str	x25, [sp, #736]                 // 8-byte Folded Spill
	ldr	x10, [x9, #248]
	str	x12, [sp, #704]                 // 8-byte Folded Spill
	str	x11, [sp, #760]                 // 8-byte Folded Spill
	ldr	x27, [x9, #56]
	ldr	x9, [x19, #248]
	nop
	madd	x8, x11, x21, x9
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	nop
	madd	x9, x26, x21, x12
	str	x10, [sp, #728]                 // 8-byte Folded Spill
	str	x27, [sp, #720]                 // 8-byte Folded Spill
	add	x19, x8, #4
	madd	x8, x27, x21, x10
	add	x23, x9, #4
	add	x28, x8, #4
	b	.LBB27_275
.LBB27_273:                             // %.lr.ph.i.i.i616.epil
                                        //   in Loop: Header=BB27_275 Depth=2
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	nop
	madd	x22, x21, x27, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	nop
	madd	x9, x21, x26, x9
	madd	x8, x21, x11, x8
	ldr	s9, [x9, x20, lsl #2]
	ldr	s8, [x8, x20, lsl #2]
	fneg	s0, s8
	bl	expf
	fmov	s1, #1.00000000
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	fadd	s0, s0, s1
	fdiv	s0, s1, s0
	fmul	s2, s9, s0
	fsub	s0, s1, s0
	fmadd	s0, s8, s0, s1
	fmul	s0, s2, s0
	str	s0, [x22, x20, lsl #2]
.LBB27_274:                             // %ggml_vec_silu_backward_f32.exit.i.i
                                        //   in Loop: Header=BB27_275 Depth=2
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	add	x21, x21, #1
	add	x19, x19, x11
	add	x23, x23, x26
	add	x28, x28, x27
	cmp	x21, x8
	b.eq	.LBB27_7
.LBB27_275:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_279 Depth 3
	cmp	w25, #1
	b.lt	.LBB27_274
// %bb.276:                             // %.lr.ph.i.i.i616.preheader
                                        //   in Loop: Header=BB27_275 Depth=2
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.ne	.LBB27_278
// %bb.277:                             //   in Loop: Header=BB27_275 Depth=2
	mov	x20, xzr
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_274
	b	.LBB27_273
.LBB27_278:                             // %.lr.ph.i.i.i616.preheader1527
                                        //   in Loop: Header=BB27_275 Depth=2
	mov	x20, xzr
	mov	x22, x28
	mov	x27, x23
	mov	x25, x19
	.p2align	5, , 16
.LBB27_279:                             // %.lr.ph.i.i.i616
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_275 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s8, [x25, #-4]
	fneg	s0, s8
	ldur	s9, [x27, #-4]
	bl	expf
	fmov	s10, #1.00000000
	fadd	s0, s0, s10
	fdiv	s0, s10, s0
	fmul	s1, s9, s0
	fsub	s0, s10, s0
	fmadd	s0, s8, s0, s10
	fmul	s0, s1, s0
	stur	s0, [x22, #-4]
	ldr	s8, [x25], #8
	fneg	s0, s8
	ldr	s9, [x27], #8
	bl	expf
	fadd	s0, s0, s10
	sub	x20, x20, #2
	fdiv	s0, s10, s0
	fmul	s1, s9, s0
	fsub	s0, s10, s0
	fmadd	s0, s8, s0, s10
	fmul	s0, s1, s0
	str	s0, [x22], #8
	cmp	x24, x20
	b.ne	.LBB27_279
// %bb.280:                             // %ggml_vec_silu_backward_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_275 Depth=2
	ldr	x25, [sp, #736]                 // 8-byte Folded Reload
	neg	x20, x20
	ldr	x27, [sp, #720]                 // 8-byte Folded Reload
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_274
	b	.LBB27_273
.LBB27_281:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	ldr	x20, [x19, #152]
	ldr	w8, [x20]
	cbnz	w8, .LBB27_2567
// %bb.282:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	mov	x1, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_283
	b	.LBB27_2568
.LBB27_283:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x20, #48]
	cmp	x8, #4
	b.ne	.LBB27_2569
// %bb.284:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	s0, [x19, #84]
	fcmp	s0, #0.0
	b.lt	.LBB27_2570
// %bb.285:                             // %.preheader98.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x20, #40]
	str	x20, [sp, #704]                 // 8-byte Folded Spill
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.286:                             // %.preheader.lr.ph.i.i596
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	str	xzr, [sp, #696]                 // 8-byte Folded Spill
	str	xzr, [sp, #640]                 // 8-byte Folded Spill
	ldrsw	x11, [sp, #784]
	ldrsw	x12, [sp, #788]
	str	x11, [sp, #736]                 // 8-byte Folded Spill
	ldr	x8, [x9, #32]
	ldp	x13, x14, [x9, #16]
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldp	x8, x10, [x9, #56]
	ldr	x9, [x9, #72]
	and	x17, x13, #0x7fffffff
	and	x1, x13, #0x3
	scvtf	d1, x13
	str	x10, [sp, #720]                 // 8-byte Folded Spill
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	and	x9, x13, #0x1
	mul	x20, x8, x12
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	sub	x3, x17, x9
	and	x9, x13, #0x7ffffffffffffffc
	neg	x6, x9
	mul	x9, x8, x11
	ldp	x4, x15, [x10, #56]
	str	x9, [sp, #688]                  // 8-byte Folded Spill
	add	x9, x9, #8
	mul	x8, x4, x11
	mul	x26, x4, x12
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	ldr	x9, [x10, #72]
	str	x15, [sp, #712]                 // 8-byte Folded Spill
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	add	x8, x8, #8
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	mov	w8, #4                          // =0x4
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	mov	w8, #8                          // =0x8
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	b	.LBB27_288
	.p2align	5, , 16
.LBB27_287:                             // %._crit_edge118.i.i
                                        //   in Loop: Header=BB27_288 Depth=2
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #680]                 // 8-byte Folded Spill
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	add	x10, x10, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_288:                             // %.preheader.i.i598
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_291 Depth 3
                                        //         Child Loop BB27_294 Depth 4
                                        //           Child Loop BB27_299 Depth 5
                                        //           Child Loop BB27_302 Depth 5
                                        //           Child Loop BB27_306 Depth 5
                                        //           Child Loop BB27_309 Depth 5
                                        //           Child Loop BB27_314 Depth 5
                                        //           Child Loop BB27_318 Depth 5
                                        //           Child Loop BB27_321 Depth 5
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_287
// %bb.289:                             // %.lr.ph117.i.i
                                        //   in Loop: Header=BB27_288 Depth=2
	ldr	x28, [sp, #648]                 // 8-byte Folded Reload
	mov	x30, xzr
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	ldr	x27, [sp, #656]                 // 8-byte Folded Reload
	ldr	x22, [sp, #672]                 // 8-byte Folded Reload
	ldr	x25, [sp, #664]                 // 8-byte Folded Reload
	ldr	x7, [sp, #688]                  // 8-byte Folded Reload
	ldr	x19, [sp, #680]                 // 8-byte Folded Reload
	b	.LBB27_291
	.p2align	5, , 16
.LBB27_290:                             // %._crit_edge110.i.i
                                        //   in Loop: Header=BB27_291 Depth=3
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	add	x30, x30, #1
	add	x19, x19, x8
	add	x7, x7, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x25, x25, x8
	add	x22, x22, x8
	add	x27, x27, x8
	add	x9, x9, x8
	add	x28, x28, x8
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	cmp	x30, x8
	b.eq	.LBB27_287
.LBB27_291:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_294 Depth 4
                                        //           Child Loop BB27_299 Depth 5
                                        //           Child Loop BB27_302 Depth 5
                                        //           Child Loop BB27_306 Depth 5
                                        //           Child Loop BB27_309 Depth 5
                                        //           Child Loop BB27_314 Depth 5
                                        //           Child Loop BB27_318 Depth 5
                                        //           Child Loop BB27_321 Depth 5
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	cmp	x14, x8
	b.le	.LBB27_290
// %bb.292:                             // %.lr.ph109.i.i
                                        //   in Loop: Header=BB27_291 Depth=3
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	ldr	x11, [x11, #248]
	add	x2, x11, x25
	ldr	x8, [x8, #248]
	ldr	x16, [sp, #736]                 // 8-byte Folded Reload
	add	x21, x11, x27
	add	x15, x11, x9
	str	x15, [sp, #760]                 // 8-byte Folded Spill
	add	x5, x8, x19
	add	x10, x8, x7
	add	x8, x11, x22
	add	x11, x11, x28
	str	x11, [sp, #744]                 // 8-byte Folded Spill
	b	.LBB27_294
	.p2align	5, , 16
.LBB27_293:                             // %ggml_vec_scale_f32.exit.i.i601
                                        //   in Loop: Header=BB27_294 Depth=4
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	add	x16, x16, x12
	add	x5, x5, x20
	add	x10, x10, x20
	add	x2, x2, x26
	add	x8, x8, x26
	cmp	x16, x14
	b.ge	.LBB27_290
.LBB27_294:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_299 Depth 5
                                        //           Child Loop BB27_302 Depth 5
                                        //           Child Loop BB27_306 Depth 5
                                        //           Child Loop BB27_309 Depth 5
                                        //           Child Loop BB27_314 Depth 5
                                        //           Child Loop BB27_318 Depth 5
                                        //           Child Loop BB27_321 Depth 5
	cmp	x13, #1
	b.lt	.LBB27_297
// %bb.295:                             // %.lr.ph.i.i606.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	cmp	x13, #4
	b.hs	.LBB27_298
// %bb.296:                             //   in Loop: Header=BB27_294 Depth=4
	mov	x11, xzr
	fmov	d2, xzr
	cbnz	x1, .LBB27_301
	b	.LBB27_303
	.p2align	5, , 16
.LBB27_297:                             // %._crit_edge.thread.i.i
                                        //   in Loop: Header=BB27_294 Depth=4
	mul	x23, x16, x4
	fmov	d3, xzr
	b	.LBB27_310
	.p2align	5, , 16
.LBB27_298:                             // %.lr.ph.i.i606.preheader1500
                                        //   in Loop: Header=BB27_294 Depth=4
	fmov	d2, xzr
	mov	x0, xzr
	mov	x23, x5
	.p2align	5, , 16
.LBB27_299:                             // %.lr.ph.i.i606
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s3, s4, [x23, #-8]
	sub	x0, x0, #4
	fcvt	d3, s3
	fadd	d2, d2, d3
	fcvt	d3, s4
	fadd	d2, d2, d3
	ldp	s3, s4, [x23], #16
	fcvt	d3, s3
	fadd	d2, d2, d3
	fcvt	d3, s4
	fadd	d2, d2, d3
	cmp	x6, x0
	b.ne	.LBB27_299
// %bb.300:                             // %._crit_edge.i.i608.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_294 Depth=4
	neg	x11, x0
	cbz	x1, .LBB27_303
.LBB27_301:                             // %.lr.ph.i.i606.epil.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	add	x11, x10, x11, lsl #2
	mov	x0, x1
	.p2align	5, , 16
.LBB27_302:                             // %.lr.ph.i.i606.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s3, [x11], #4
	subs	x0, x0, #1
	fcvt	d3, s3
	fadd	d2, d2, d3
	b.ne	.LBB27_302
.LBB27_303:                             // %._crit_edge.i.i608
                                        //   in Loop: Header=BB27_294 Depth=4
	fdiv	d2, d2, d1
	fcvt	s2, d2
	cmp	x13, #4
	b.hs	.LBB27_305
// %bb.304:                             //   in Loop: Header=BB27_294 Depth=4
	mov	x11, xzr
	fmov	d3, xzr
	mul	x23, x16, x4
	cbnz	x1, .LBB27_308
	b	.LBB27_310
	.p2align	5, , 16
.LBB27_305:                             // %.lr.ph104.i.i609.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	fmov	d3, xzr
	mov	x23, xzr
	mov	x24, x2
	mov	x0, x5
	.p2align	5, , 16
.LBB27_306:                             // %.lr.ph104.i.i609
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s4, [x0, #-8]
	sub	x23, x23, #4
	fsub	s4, s4, s2
	stur	s4, [x24, #-8]
	fmul	s4, s4, s4
	fcvt	d4, s4
	fadd	d3, d3, d4
	ldur	s4, [x0, #-4]
	fsub	s4, s4, s2
	stur	s4, [x24, #-4]
	fmul	s4, s4, s4
	fcvt	d4, s4
	fadd	d3, d3, d4
	ldr	s4, [x0]
	fsub	s4, s4, s2
	str	s4, [x24]
	fmul	s4, s4, s4
	fcvt	d4, s4
	fadd	d3, d3, d4
	ldr	s4, [x0, #4]
	add	x0, x0, #16
	fsub	s4, s4, s2
	str	s4, [x24, #4]
	fmul	s4, s4, s4
	add	x24, x24, #16
	fcvt	d4, s4
	fadd	d3, d3, d4
	cmp	x6, x23
	b.ne	.LBB27_306
// %bb.307:                             // %._crit_edge105.i.i600.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_294 Depth=4
	neg	x11, x23
	mul	x23, x16, x4
	cbz	x1, .LBB27_310
.LBB27_308:                             // %.lr.ph104.i.i609.epil.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	lsl	x11, x11, #2
	mov	x0, x1
	.p2align	5, , 16
.LBB27_309:                             // %.lr.ph104.i.i609.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s4, [x10, x11]
	subs	x0, x0, #1
	fsub	s4, s4, s2
	fmul	s5, s4, s4
	str	s4, [x8, x11]
	add	x11, x11, #4
	fcvt	d4, s5
	fadd	d3, d3, d4
	b.ne	.LBB27_309
.LBB27_310:                             // %._crit_edge105.i.i600
                                        //   in Loop: Header=BB27_294 Depth=4
	cmp	w13, #1
	b.lt	.LBB27_293
// %bb.311:                             // %.lr.ph.i.i.preheader.i
                                        //   in Loop: Header=BB27_294 Depth=4
	fdiv	d2, d3, d1
	fmov	s3, #1.00000000
	fcvt	s2, d2
	fadd	s2, s0, s2
	fsqrt	s2, s2
	fdiv	s2, s3, s2
	cmp	x17, #2
	b.hs	.LBB27_313
// %bb.312:                             //   in Loop: Header=BB27_294 Depth=4
	mov	x0, xzr
	b	.LBB27_316
	.p2align	5, , 16
.LBB27_313:                             // %vector.body146.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	add	x11, x21, x23
	mov	x15, x3
	.p2align	5, , 16
.LBB27_314:                             // %vector.body146
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s3, s4, [x11, #-4]
	subs	x15, x15, #2
	fmul	s4, s2, s4
	fmul	s3, s2, s3
	stp	s3, s4, [x11, #-4]
	add	x11, x11, #8
	b.ne	.LBB27_314
// %bb.315:                             // %middle.block139
                                        //   in Loop: Header=BB27_294 Depth=4
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	mov	x0, x3
	cbz	x11, .LBB27_293
.LBB27_316:                             // %.lr.ph.i.i.i602.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	sub	w11, w13, w0
	mov	x24, x0
	ands	x11, x11, #0x3
	b.eq	.LBB27_319
// %bb.317:                             // %.lr.ph.i.i.i602.prol.preheader
                                        //   in Loop: Header=BB27_294 Depth=4
	ldr	x15, [sp, #760]                 // 8-byte Folded Reload
	mov	x24, x0
	add	x15, x15, x23
	.p2align	5, , 16
.LBB27_318:                             // %.lr.ph.i.i.i602.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s3, [x15, x24, lsl #2]
	subs	x11, x11, #1
	fmul	s3, s2, s3
	str	s3, [x15, x24, lsl #2]
	add	x24, x24, #1
	b.ne	.LBB27_318
.LBB27_319:                             // %.lr.ph.i.i.i602.prol.loopexit
                                        //   in Loop: Header=BB27_294 Depth=4
	sub	x11, x0, x17
	cmn	x11, #4
	b.hi	.LBB27_293
// %bb.320:                             // %.lr.ph.i.i.i602.preheader.new
                                        //   in Loop: Header=BB27_294 Depth=4
	ldr	x15, [sp, #744]                 // 8-byte Folded Reload
	add	x11, x23, x24, lsl #2
	sub	x0, x17, x24
	add	x23, x15, x11
	.p2align	5, , 16
.LBB27_321:                             // %.lr.ph.i.i.i602
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_288 Depth=2
                                        //       Parent Loop BB27_291 Depth=3
                                        //         Parent Loop BB27_294 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s3, s4, [x23, #-8]
	subs	x0, x0, #4
	ldp	s5, s6, [x23]
	fmul	s4, s2, s4
	fmul	s3, s2, s3
	fmul	s5, s2, s5
	stp	s3, s4, [x23, #-8]
	fmul	s3, s2, s6
	stp	s5, s3, [x23], #16
	b.ne	.LBB27_321
	b	.LBB27_293
.LBB27_322:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	ldr	x25, [x19, #152]
	ldr	w8, [x25]
	cbnz	w8, .LBB27_2571
// %bb.323:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x25
	mov	x1, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_324
	b	.LBB27_2572
.LBB27_324:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x25, #48]
	cmp	x8, #4
	b.ne	.LBB27_2573
// %bb.325:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	s8, [x19, #84]
	fcmp	s8, #0.0
	b.lt	.LBB27_2574
// %bb.326:                             // %.preheader87.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x25, #40]
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.327:                             // %.preheader.lr.ph.i.i578
                                        //   in Loop: Header=BB27_3 Depth=1
	ldp	x26, x8, [x25, #16]
	str	xzr, [sp, #560]                 // 8-byte Folded Spill
	ldp	x11, x12, [x25, #56]
	str	x25, [sp, #704]                 // 8-byte Folded Spill
	ldr	x13, [x25, #72]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [x25, #32]
	str	x12, [sp, #584]                 // 8-byte Folded Spill
	and	x12, x26, #0x3
	ldrsw	x9, [sp, #784]
	str	x13, [sp, #512]                 // 8-byte Folded Spill
	str	x11, [sp, #680]                 // 8-byte Folded Spill
	ldrsw	x10, [sp, #788]
	scvtf	d9, x26
	str	x12, [sp, #728]                 // 8-byte Folded Spill
	and	x12, x26, #0x1
	str	x12, [sp, #648]                 // 8-byte Folded Spill
	str	x9, [sp, #592]                  // 8-byte Folded Spill
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	lsl	x8, x26, #2
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	and	x8, x26, #0x7fffffff
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	sub	x8, x8, x12
	mul	x12, x11, x9
	mul	x11, x11, x10
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	and	x8, x26, #0x7ffffffffffffffc
	neg	x28, x8
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldp	x13, x14, [x8, #56]
	ldr	x8, [x8, #72]
	str	x12, [sp, #552]                 // 8-byte Folded Spill
	add	x12, x12, #8
	str	x12, [sp, #544]                 // 8-byte Folded Spill
	str	x11, [sp, #664]                 // 8-byte Folded Spill
	mul	x20, x13, x10
	str	x8, [sp, #496]                  // 8-byte Folded Spill
	mul	x8, x13, x9
	str	x14, [sp, #576]                 // 8-byte Folded Spill
	str	x13, [sp, #672]                 // 8-byte Folded Spill
	add	x9, x8, #4
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	add	x8, x8, #8
	str	x9, [sp, #528]                  // 8-byte Folded Spill
	str	x8, [sp, #520]                  // 8-byte Folded Spill
	b	.LBB27_329
	.p2align	5, , 16
.LBB27_328:                             // %._crit_edge96.i.i
                                        //   in Loop: Header=BB27_329 Depth=2
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	ldr	x10, [sp, #544]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #544]                 // 8-byte Folded Spill
	ldr	x10, [sp, #552]                 // 8-byte Folded Reload
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x10, x10, x8
	ldp	x8, x11, [sp, #488]             // 16-byte Folded Reload
	str	x10, [sp, #552]                 // 8-byte Folded Spill
	ldr	x10, [sp, #528]                 // 8-byte Folded Reload
	add	x10, x10, x11
	str	x10, [sp, #528]                 // 8-byte Folded Spill
	ldr	x10, [sp, #536]                 // 8-byte Folded Reload
	add	x10, x10, x11
	str	x10, [sp, #536]                 // 8-byte Folded Spill
	ldr	x10, [sp, #520]                 // 8-byte Folded Reload
	add	x10, x10, x11
	str	x10, [sp, #520]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_329:                             // %.preheader.i.i580
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_332 Depth 3
                                        //         Child Loop BB27_335 Depth 4
                                        //           Child Loop BB27_340 Depth 5
                                        //           Child Loop BB27_343 Depth 5
                                        //           Child Loop BB27_348 Depth 5
                                        //           Child Loop BB27_352 Depth 5
                                        //           Child Loop BB27_355 Depth 5
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_328
// %bb.330:                             // %.lr.ph95.i.i582
                                        //   in Loop: Header=BB27_329 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	str	xzr, [sp, #640]                 // 8-byte Folded Spill
	ldr	x9, [sp, #512]                  // 8-byte Folded Reload
	mul	x9, x8, x9
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldr	x9, [sp, #520]                  // 8-byte Folded Reload
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	ldr	x9, [sp, #528]                  // 8-byte Folded Reload
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldr	x9, [sp, #496]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	b	.LBB27_332
	.p2align	5, , 16
.LBB27_331:                             // %._crit_edge93.i.i583
                                        //   in Loop: Header=BB27_332 Depth=3
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	ldr	x10, [sp, #600]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #600]                 // 8-byte Folded Spill
	ldr	x10, [sp, #608]                 // 8-byte Folded Reload
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	add	x10, x10, x8
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x10, [sp, #608]                 // 8-byte Folded Spill
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	ldr	x10, [sp, #624]                 // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #624]                 // 8-byte Folded Spill
	ldr	x10, [sp, #632]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x10, [sp, #632]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_328
.LBB27_332:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_335 Depth 4
                                        //           Child Loop BB27_340 Depth 5
                                        //           Child Loop BB27_343 Depth 5
                                        //           Child Loop BB27_348 Depth 5
                                        //           Child Loop BB27_352 Depth 5
                                        //           Child Loop BB27_355 Depth 5
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.le	.LBB27_331
// %bb.333:                             // %.lr.ph92.i.i585
                                        //   in Loop: Header=BB27_332 Depth=3
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x24, [sp, #632]                 // 8-byte Folded Reload
	ldr	x21, [sp, #624]                 // 8-byte Folded Reload
	ldr	x22, [sp, #616]                 // 8-byte Folded Reload
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	ldr	x27, [sp, #608]                 // 8-byte Folded Reload
	ldr	x23, [sp, #600]                 // 8-byte Folded Reload
	ldr	x19, [sp, #592]                 // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_335
	.p2align	5, , 16
.LBB27_334:                             // %ggml_vec_scale_f32.exit.i.i587
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	add	x22, x22, x20
	add	x21, x21, x20
	ldr	x25, [sp, #704]                 // 8-byte Folded Reload
	add	x24, x24, x20
	add	x19, x19, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	add	x23, x23, x8
	add	x27, x27, x8
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	cmp	x19, x8
	b.ge	.LBB27_331
.LBB27_335:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        //       Parent Loop BB27_332 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_340 Depth 5
                                        //           Child Loop BB27_343 Depth 5
                                        //           Child Loop BB27_348 Depth 5
                                        //           Child Loop BB27_352 Depth 5
                                        //           Child Loop BB27_355 Depth 5
	ldr	x8, [x25, #248]
	cmp	x26, #1
	b.lt	.LBB27_338
// %bb.336:                             // %.lr.ph.i.i592.preheader
                                        //   in Loop: Header=BB27_335 Depth=4
	cmp	x26, #4
	b.hs	.LBB27_339
// %bb.337:                             //   in Loop: Header=BB27_335 Depth=4
	mov	x9, xzr
	fmov	d10, xzr
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cbnz	x10, .LBB27_342
	b	.LBB27_344
	.p2align	5, , 16
.LBB27_338:                             //   in Loop: Header=BB27_335 Depth=4
	fmov	d10, xzr
	b	.LBB27_344
	.p2align	5, , 16
.LBB27_339:                             // %.lr.ph.i.i592.preheader1501
                                        //   in Loop: Header=BB27_335 Depth=4
	fmov	d10, xzr
	mov	x9, xzr
	add	x10, x8, x23
	.p2align	5, , 16
.LBB27_340:                             // %.lr.ph.i.i592
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        //       Parent Loop BB27_332 Depth=3
                                        //         Parent Loop BB27_335 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x10, #-8]
	sub	x9, x9, #4
	fmul	s1, s1, s1
	fmul	s0, s0, s0
	fcvt	d1, s1
	fcvt	d0, s0
	fadd	d0, d10, d0
	fadd	d0, d0, d1
	ldp	s1, s2, [x10], #16
	fmul	s1, s1, s1
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s2
	fcvt	d1, s1
	fadd	d10, d0, d1
	cmp	x28, x9
	b.ne	.LBB27_340
// %bb.341:                             // %._crit_edge.i.i586.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_335 Depth=4
	neg	x9, x9
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cbz	x10, .LBB27_344
.LBB27_342:                             // %.lr.ph.i.i592.epil.preheader
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x9, x27, x9, lsl #2
	add	x9, x8, x9
	.p2align	5, , 16
.LBB27_343:                             // %.lr.ph.i.i592.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        //       Parent Loop BB27_332 Depth=3
                                        //         Parent Loop BB27_335 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x9], #4
	subs	x10, x10, #1
	fmul	s0, s0, s0
	fcvt	d0, s0
	fadd	d10, d10, d0
	b.ne	.LBB27_343
.LBB27_344:                             // %._crit_edge.i.i586
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	nop
	madd	x8, x19, x9, x8
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	ldr	x11, [sp, #712]                 // 8-byte Folded Reload
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	add	x11, x12, x11
	add	x9, x10, x9
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x2, [sp, #688]                  // 8-byte Folded Reload
	add	x1, x8, x9
	ldr	x25, [x10, #248]
	ldr	x10, [sp, #672]                 // 8-byte Folded Reload
	nop
	madd	x10, x19, x10, x25
	add	x0, x10, x11
	bl	memcpy
	cmp	w26, #1
	b.lt	.LBB27_334
// %bb.345:                             // %.lr.ph.i.i.i588.preheader
                                        //   in Loop: Header=BB27_335 Depth=4
	fdiv	d0, d10, d9
	fmov	s1, #1.00000000
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	fcvt	s0, d0
	fadd	s0, s8, s0
	fsqrt	s0, s0
	fdiv	s0, s1, s0
	cmp	x8, #2
	b.hs	.LBB27_347
// %bb.346:                             //   in Loop: Header=BB27_335 Depth=4
	mov	x8, xzr
	b	.LBB27_350
	.p2align	5, , 16
.LBB27_347:                             // %vector.body157.preheader
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	add	x8, x25, x22
	.p2align	5, , 16
.LBB27_348:                             // %vector.body157
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        //       Parent Loop BB27_332 Depth=3
                                        //         Parent Loop BB27_335 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x8, #-4]
	subs	x9, x9, #2
	fmul	s2, s0, s2
	fmul	s1, s0, s1
	stp	s1, s2, [x8, #-4]
	add	x8, x8, #8
	b.ne	.LBB27_348
// %bb.349:                             // %middle.block150
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_334
.LBB27_350:                             // %.lr.ph.i.i.i588.preheader512
                                        //   in Loop: Header=BB27_335 Depth=4
	sub	w9, w26, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_353
// %bb.351:                             // %.lr.ph.i.i.i588.prol.preheader
                                        //   in Loop: Header=BB27_335 Depth=4
	add	x11, x25, x21
	mov	x9, x8
	.p2align	5, , 16
.LBB27_352:                             // %.lr.ph.i.i.i588.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        //       Parent Loop BB27_332 Depth=3
                                        //         Parent Loop BB27_335 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x11, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s1, s0, s1
	str	s1, [x11, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_352
.LBB27_353:                             // %.lr.ph.i.i.i588.prol.loopexit
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	sub	x8, x8, x10
	cmn	x8, #4
	b.hi	.LBB27_334
// %bb.354:                             // %.lr.ph.i.i.i588.preheader512.new
                                        //   in Loop: Header=BB27_335 Depth=4
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	sub	x8, x8, x9
	add	x9, x24, x9, lsl #2
	add	x9, x25, x9
	.p2align	5, , 16
.LBB27_355:                             // %.lr.ph.i.i.i588
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_329 Depth=2
                                        //       Parent Loop BB27_332 Depth=3
                                        //         Parent Loop BB27_335 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x9, #-8]
	subs	x8, x8, #4
	ldp	s3, s4, [x9]
	fmul	s2, s0, s2
	fmul	s1, s0, s1
	fmul	s3, s0, s3
	stp	s1, s2, [x9, #-8]
	fmul	s1, s0, s4
	stp	s3, s1, [x9], #16
	b.ne	.LBB27_355
	b	.LBB27_334
.LBB27_356:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x1, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2575
// %bb.357:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x1, #160]
	mov	x0, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_358
	b	.LBB27_2533
.LBB27_358:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_359
	b	.LBB27_2533
.LBB27_359:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB27_2576
// %bb.360:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x20, #48]
	str	x20, [sp, #568]                 // 8-byte Folded Spill
	cmp	x8, #4
	b.ne	.LBB27_2577
// %bb.361:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #40]
	str	x19, [sp, #576]                 // 8-byte Folded Spill
	str	x8, [sp, #440]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.362:                             // %.preheader.lr.ph.i.i560
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #576]                  // 8-byte Folded Reload
	str	xzr, [sp, #560]                 // 8-byte Folded Spill
	ldr	x12, [sp, #568]                 // 8-byte Folded Reload
	ldrsw	x14, [sp, #784]
	str	x14, [sp, #616]                 // 8-byte Folded Spill
	ldr	x8, [x9, #32]
	ldp	x10, x11, [x9, #16]
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	ldp	x13, x8, [x12, #56]
	ldrsw	x0, [sp, #788]
	scvtf	s1, x10
	and	x15, x10, #0x7fffffff
	and	x16, x10, #0x7
	and	x17, x10, #0x1
	and	x2, x10, #0x3
	sub	x4, x15, #1
	sub	x5, x15, x17
	sub	x27, x16, x15
	sub	x30, x2, x15
	str	x30, [sp, #728]                 // 8-byte Folded Spill
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	and	x8, x10, #0x7ffffffffffffffe
	mul	x1, x13, x14
	str	x13, [sp, #744]                 // 8-byte Folded Spill
	mul	x22, x13, x0
	neg	x6, x8
	str	x1, [sp, #552]                  // 8-byte Folded Spill
	ldp	x8, x3, [x9, #56]
	ldr	x9, [x9, #72]
	mul	x13, x8, x14
	str	x9, [sp, #456]                  // 8-byte Folded Spill
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	mul	x26, x8, x0
	add	x8, x1, #4
	str	x3, [sp, #624]                  // 8-byte Folded Spill
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	ldr	s0, [x9, #84]
	add	x8, x13, #4
	str	x13, [sp, #544]                 // 8-byte Folded Spill
	str	x8, [sp, #528]                  // 8-byte Folded Spill
	ldp	x8, x3, [x9, #56]
	mul	x14, x8, x14
	mul	x28, x8, x0
	add	x8, x1, #16
	str	x3, [sp, #600]                  // 8-byte Folded Spill
	str	x8, [sp, #496]                  // 8-byte Folded Spill
	add	x8, x14, #4
	add	x3, x14, #16
	str	x14, [sp, #520]                 // 8-byte Folded Spill
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	ldr	x8, [x12, #72]
	str	x3, [sp, #512]                  // 8-byte Folded Spill
	str	x8, [sp, #448]                  // 8-byte Folded Spill
	add	x8, x14, #8
	str	x8, [sp, #480]                  // 8-byte Folded Spill
	add	x8, x13, #8
	str	x8, [sp, #472]                  // 8-byte Folded Spill
	ldr	x8, [x9, #72]
	str	x8, [sp, #432]                  // 8-byte Folded Spill
	b	.LBB27_364
	.p2align	5, , 16
.LBB27_363:                             // %._crit_edge169.i.i563
                                        //   in Loop: Header=BB27_364 Depth=2
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	ldp	x13, x12, [sp, #448]            // 16-byte Folded Reload
	add	x8, x8, x13
	ldr	x14, [sp, #432]                 // 8-byte Folded Reload
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x8, x12
	str	x8, [sp, #528]                  // 8-byte Folded Spill
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	add	x8, x8, x14
	str	x8, [sp, #512]                  // 8-byte Folded Spill
	ldr	x8, [sp, #496]                  // 8-byte Folded Reload
	add	x8, x8, x13
	str	x8, [sp, #496]                  // 8-byte Folded Spill
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	add	x8, x8, x14
	str	x8, [sp, #520]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	add	x8, x8, x13
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	ldr	x8, [sp, #488]                  // 8-byte Folded Reload
	add	x8, x8, x14
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	ldr	x8, [sp, #480]                  // 8-byte Folded Reload
	add	x8, x8, x14
	str	x8, [sp, #480]                  // 8-byte Folded Spill
	ldr	x8, [sp, #472]                  // 8-byte Folded Reload
	add	x8, x8, x12
	str	x8, [sp, #472]                  // 8-byte Folded Spill
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	add	x8, x8, x12
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	ldr	x8, [sp, #440]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_364:                             // %.preheader.i.i562
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_367 Depth 3
                                        //         Child Loop BB27_370 Depth 4
                                        //           Child Loop BB27_375 Depth 5
                                        //           Child Loop BB27_382 Depth 5
                                        //           Child Loop BB27_385 Depth 5
                                        //           Child Loop BB27_389 Depth 5
                                        //           Child Loop BB27_393 Depth 5
                                        //           Child Loop BB27_396 Depth 5
                                        //           Child Loop BB27_400 Depth 5
                                        //           Child Loop BB27_403 Depth 5
                                        //           Child Loop BB27_407 Depth 5
                                        //           Child Loop BB27_411 Depth 5
                                        //           Child Loop BB27_414 Depth 5
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_363
// %bb.365:                             // %.lr.ph168.i.i565
                                        //   in Loop: Header=BB27_364 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	str	xzr, [sp, #720]                 // 8-byte Folded Spill
	ldr	x9, [sp, #456]                  // 8-byte Folded Reload
	mul	x9, x8, x9
	str	x9, [sp, #592]                  // 8-byte Folded Spill
	ldr	x9, [sp, #544]                  // 8-byte Folded Reload
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	ldr	x9, [sp, #472]                  // 8-byte Folded Reload
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	ldr	x9, [sp, #480]                  // 8-byte Folded Reload
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	ldr	x9, [sp, #448]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	ldr	x8, [sp, #488]                  // 8-byte Folded Reload
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	ldr	x8, [sp, #496]                  // 8-byte Folded Reload
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	str	x8, [sp, #640]                  // 8-byte Folded Spill
	b	.LBB27_367
	.p2align	5, , 16
.LBB27_366:                             // %._crit_edge158.i.i
                                        //   in Loop: Header=BB27_367 Depth=3
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x12, [sp, #648]                 // 8-byte Folded Reload
	ldr	x14, [sp, #656]                 // 8-byte Folded Reload
	ldr	x13, [sp, #720]                 // 8-byte Folded Reload
	add	x13, x13, #1
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	str	x13, [sp, #720]                 // 8-byte Folded Spill
	add	x12, x12, x9
	str	x12, [sp, #648]                 // 8-byte Folded Spill
	ldr	x12, [sp, #600]                 // 8-byte Folded Reload
	add	x14, x14, x12
	str	x14, [sp, #656]                 // 8-byte Folded Spill
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	add	x14, x14, x8
	str	x14, [sp, #664]                 // 8-byte Folded Spill
	ldr	x14, [sp, #672]                 // 8-byte Folded Reload
	add	x14, x14, x12
	str	x14, [sp, #672]                 // 8-byte Folded Spill
	ldr	x14, [sp, #680]                 // 8-byte Folded Reload
	add	x14, x14, x8
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	add	x8, x8, x12
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	add	x8, x8, x12
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	add	x8, x8, x9
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x8, x8, x9
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	cmp	x13, x8
	b.eq	.LBB27_363
.LBB27_367:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_370 Depth 4
                                        //           Child Loop BB27_375 Depth 5
                                        //           Child Loop BB27_382 Depth 5
                                        //           Child Loop BB27_385 Depth 5
                                        //           Child Loop BB27_389 Depth 5
                                        //           Child Loop BB27_393 Depth 5
                                        //           Child Loop BB27_396 Depth 5
                                        //           Child Loop BB27_400 Depth 5
                                        //           Child Loop BB27_403 Depth 5
                                        //           Child Loop BB27_407 Depth 5
                                        //           Child Loop BB27_411 Depth 5
                                        //           Child Loop BB27_414 Depth 5
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	cmp	x11, x8
	b.le	.LBB27_366
// %bb.368:                             // %.lr.ph157.i.i
                                        //   in Loop: Header=BB27_367 Depth=3
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	ldr	x19, [sp, #688]                 // 8-byte Folded Reload
	ldr	x7, [sp, #720]                  // 8-byte Folded Reload
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	ldr	x3, [sp, #672]                  // 8-byte Folded Reload
	ldr	x13, [x8, #248]
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	add	x20, x13, x8
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	ldr	x14, [x8, #248]
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x12, [x8, #248]
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	add	x21, x12, x19
	ldr	x19, [sp, #696]                 // 8-byte Folded Reload
	nop
	madd	x1, x7, x8, x14
	add	x25, x12, x9
	add	x24, x12, x3
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	ldr	x3, [sp, #680]                  // 8-byte Folded Reload
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	add	x12, x12, x19
	ldr	x19, [sp, #592]                 // 8-byte Folded Reload
	add	x9, x13, x9
	add	x3, x13, x3
	add	x8, x14, x8
	add	x1, x1, x19
	ldr	x19, [sp, #616]                 // 8-byte Folded Reload
	str	x1, [sp, #760]                  // 8-byte Folded Spill
	ldr	x1, [sp, #632]                  // 8-byte Folded Reload
	nop
	madd	x13, x7, x1, x13
	ldr	x1, [sp, #584]                  // 8-byte Folded Reload
	add	x13, x13, x1
	str	x13, [sp, #752]                 // 8-byte Folded Spill
	ldr	x13, [sp, #704]                 // 8-byte Folded Reload
	add	x1, x14, x13
	ldr	x13, [sp, #712]                 // 8-byte Folded Reload
	add	x14, x14, x13
	b	.LBB27_370
	.p2align	5, , 16
.LBB27_369:                             // %ggml_vec_scale_f32.exit150.i.i
                                        //   in Loop: Header=BB27_370 Depth=4
	add	x19, x19, x0
	add	x20, x20, x22
	add	x8, x8, x26
	add	x25, x25, x28
	add	x9, x9, x22
	add	x24, x24, x28
	add	x3, x3, x22
	add	x21, x21, x28
	add	x12, x12, x28
	add	x1, x1, x26
	add	x14, x14, x26
	cmp	x19, x11
	b.ge	.LBB27_366
.LBB27_370:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_375 Depth 5
                                        //           Child Loop BB27_382 Depth 5
                                        //           Child Loop BB27_385 Depth 5
                                        //           Child Loop BB27_389 Depth 5
                                        //           Child Loop BB27_393 Depth 5
                                        //           Child Loop BB27_396 Depth 5
                                        //           Child Loop BB27_400 Depth 5
                                        //           Child Loop BB27_403 Depth 5
                                        //           Child Loop BB27_407 Depth 5
                                        //           Child Loop BB27_411 Depth 5
                                        //           Child Loop BB27_414 Depth 5
	cmp	x10, #1
	b.lt	.LBB27_373
// %bb.371:                             // %.lr.ph.i.i574.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	cmp	x10, #1
	b.ne	.LBB27_374
// %bb.372:                             //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	fmov	d3, xzr
	fmov	d2, xzr
	tbnz	w10, #0, .LBB27_377
	b	.LBB27_378
	.p2align	5, , 16
.LBB27_373:                             //   in Loop: Header=BB27_370 Depth=4
	fmov	d2, xzr
	fmov	d3, xzr
	b	.LBB27_378
	.p2align	5, , 16
.LBB27_374:                             // %.lr.ph.i.i574.preheader1504
                                        //   in Loop: Header=BB27_370 Depth=4
	fmov	d3, xzr
	fmov	d2, xzr
	mov	x23, xzr
	mov	x7, x8
	mov	x13, x20
	.p2align	5, , 16
.LBB27_375:                             // %.lr.ph.i.i574
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s4, s5, [x13, #-4]
	sub	x23, x23, #2
	add	x13, x13, #8
	fmul	s6, s4, s4
	fcvt	d6, s6
	fadd	d2, d2, d6
	ldp	s6, s7, [x7, #-4]
	add	x7, x7, #8
	fmul	s4, s4, s6
	fcvt	d4, s4
	fadd	d3, d3, d4
	fmul	s4, s5, s5
	fcvt	d4, s4
	fadd	d2, d2, d4
	fmul	s4, s5, s7
	fcvt	d4, s4
	fadd	d3, d3, d4
	cmp	x6, x23
	b.ne	.LBB27_375
// %bb.376:                             // %._crit_edge.i.i568.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_370 Depth=4
	neg	x13, x23
	tbz	w10, #0, .LBB27_378
.LBB27_377:                             // %.lr.ph.i.i574.epil
                                        //   in Loop: Header=BB27_370 Depth=4
	ldr	x7, [sp, #736]                  // 8-byte Folded Reload
	mov	x30, x27
	mov	x27, x6
	ldr	x23, [sp, #760]                 // 8-byte Folded Reload
	mov	x6, x12
	mov	x12, x1
	mov	x1, x3
	mov	x3, x9
	madd	x7, x19, x7, x23
	ldr	x23, [sp, #744]                 // 8-byte Folded Reload
	mov	x9, x25
	mov	x25, x8
	mov	x8, x20
	mov	x20, x28
	mov	x28, x10
	mov	x10, x26
	mov	x26, x22
	mov	x22, x15
	mov	x15, x4
	mov	x4, x11
	mov	x11, x2
	mov	x2, x16
	mov	x16, x0
	mov	x0, x17
	ldr	x17, [sp, #752]                 // 8-byte Folded Reload
	nop
	madd	x23, x19, x23, x17
	ldr	s4, [x23, x13, lsl #2]
	mov	x17, x0
	mov	x0, x16
	mov	x16, x2
	mov	x2, x11
	mov	x11, x4
	mov	x4, x15
	mov	x15, x22
	mov	x22, x26
	fmul	s5, s4, s4
	mov	x26, x10
	mov	x10, x28
	mov	x28, x20
	mov	x20, x8
	mov	x8, x25
	mov	x25, x9
	mov	x9, x3
	mov	x3, x1
	mov	x1, x12
	mov	x12, x6
	fcvt	d5, s5
	mov	x6, x27
	mov	x27, x30
	ldr	x30, [sp, #728]                 // 8-byte Folded Reload
	fadd	d2, d2, d5
	ldr	s5, [x7, x13, lsl #2]
	fmul	s4, s4, s5
	fcvt	d4, s4
	fadd	d3, d3, d4
.LBB27_378:                             // %._crit_edge.i.i568
                                        //   in Loop: Header=BB27_370 Depth=4
	cmp	w10, #1
	b.lt	.LBB27_369
// %bb.379:                             // %.lr.ph.i.i.i569.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	cmp	x4, #7
	b.hs	.LBB27_381
// %bb.380:                             //   in Loop: Header=BB27_370 Depth=4
	mov	x23, xzr
	cbnz	x16, .LBB27_384
	b	.LBB27_386
	.p2align	5, , 16
.LBB27_381:                             // %.lr.ph.i.i.i569.preheader1503
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	mov	x7, x9
	mov	x23, x25
	.p2align	5, , 16
.LBB27_382:                             // %.lr.ph.i.i.i569
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s4, [x7, #-16]
	sub	x13, x13, #8
	stur	s4, [x23, #-16]
	ldur	s4, [x7, #-12]
	stur	s4, [x23, #-12]
	ldur	s4, [x7, #-8]
	stur	s4, [x23, #-8]
	ldur	s4, [x7, #-4]
	stur	s4, [x23, #-4]
	ldr	s4, [x7]
	str	s4, [x23]
	ldr	s4, [x7, #4]
	str	s4, [x23, #4]
	ldr	s4, [x7, #8]
	str	s4, [x23, #8]
	ldr	s4, [x7, #12]
	add	x7, x7, #32
	str	s4, [x23, #12]
	add	x23, x23, #32
	cmp	x27, x13
	b.ne	.LBB27_382
// %bb.383:                             // %ggml_vec_cpy_f32.exit.i.i573.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_370 Depth=4
	neg	x23, x13
	cbz	x16, .LBB27_386
.LBB27_384:                             // %.lr.ph.i.i.i569.epil.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	add	x13, x24, x23, lsl #2
	mov	x7, x16
	add	x23, x3, x23, lsl #2
	.p2align	5, , 16
.LBB27_385:                             // %.lr.ph.i.i.i569.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s4, [x23], #4
	subs	x7, x7, #1
	str	s4, [x13], #4
	b.ne	.LBB27_385
.LBB27_386:                             // %ggml_vec_cpy_f32.exit.i.i573
                                        //   in Loop: Header=BB27_370 Depth=4
	fcvt	s2, d2
	fcvt	s3, d3
	fmadd	s4, s0, s1, s2
	fneg	s3, s3
	fdiv	s3, s3, s4
	cmp	x15, #2
	b.hs	.LBB27_388
// %bb.387:                             //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	b	.LBB27_391
	.p2align	5, , 16
.LBB27_388:                             // %vector.body179.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x13, x5
	mov	x7, x21
	.p2align	5, , 16
.LBB27_389:                             // %vector.body179
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s4, s5, [x7, #-4]
	subs	x13, x13, #2
	fmul	s5, s3, s5
	fmul	s4, s3, s4
	stp	s4, s5, [x7, #-4]
	add	x7, x7, #8
	b.ne	.LBB27_389
// %bb.390:                             // %middle.block172
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x13, x5
	cbz	x17, .LBB27_397
.LBB27_391:                             // %.lr.ph.i134.i.i.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	sub	w7, w10, w13
	ands	x23, x7, #0x3
	mov	x7, x13
	b.eq	.LBB27_394
// %bb.392:                             // %.lr.ph.i134.i.i.prol.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x7, x13
	.p2align	5, , 16
.LBB27_393:                             // %.lr.ph.i134.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s4, [x24, x7, lsl #2]
	subs	x23, x23, #1
	fmul	s4, s3, s4
	str	s4, [x24, x7, lsl #2]
	add	x7, x7, #1
	b.ne	.LBB27_393
.LBB27_394:                             // %.lr.ph.i134.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_370 Depth=4
	sub	x13, x4, x13
	cmp	x13, #3
	b.lo	.LBB27_397
// %bb.395:                             // %.lr.ph.i134.i.i.preheader.new
                                        //   in Loop: Header=BB27_370 Depth=4
	sub	x13, x15, x7
	add	x7, x12, x7, lsl #2
	.p2align	5, , 16
.LBB27_396:                             // %.lr.ph.i134.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s4, s5, [x7, #-8]
	subs	x13, x13, #4
	ldp	s6, s7, [x7]
	fmul	s5, s3, s5
	fmul	s4, s3, s4
	fmul	s6, s3, s6
	stp	s4, s5, [x7, #-8]
	fmul	s4, s3, s7
	stp	s6, s4, [x7], #16
	b.ne	.LBB27_396
.LBB27_397:                             // %.lr.ph.i140.i.i.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	cmp	x4, #3
	b.hs	.LBB27_399
// %bb.398:                             //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	cbnz	x2, .LBB27_402
	b	.LBB27_404
	.p2align	5, , 16
.LBB27_399:                             // %.lr.ph.i140.i.i.preheader1502
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	mov	x7, x12
	mov	x23, x1
	.p2align	5, , 16
.LBB27_400:                             // %.lr.ph.i140.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s3, [x23, #-8]
	sub	x13, x13, #4
	ldp	s4, s5, [x7, #-8]
	fadd	s3, s3, s4
	stur	s3, [x7, #-8]
	ldur	s3, [x23, #-4]
	fadd	s3, s3, s5
	ldp	s4, s5, [x7]
	stur	s3, [x7, #-4]
	ldr	s3, [x23]
	fadd	s3, s3, s4
	str	s3, [x7]
	ldr	s3, [x23, #4]
	add	x23, x23, #16
	fadd	s3, s3, s5
	str	s3, [x7, #4]
	add	x7, x7, #16
	cmp	x30, x13
	b.ne	.LBB27_400
// %bb.401:                             // %.lr.ph.i146.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_370 Depth=4
	neg	x13, x13
	cbz	x2, .LBB27_404
.LBB27_402:                             // %.lr.ph.i140.i.i.epil.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	lsl	x13, x13, #2
	mov	x7, x2
	.p2align	5, , 16
.LBB27_403:                             // %.lr.ph.i140.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s3, [x14, x13]
	subs	x7, x7, #1
	ldr	s4, [x24, x13]
	fadd	s3, s3, s4
	str	s3, [x24, x13]
	add	x13, x13, #4
	b.ne	.LBB27_403
.LBB27_404:                             // %.lr.ph.i146.i.i.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	fdiv	s2, s2, s1
	fmov	s3, #1.00000000
	fadd	s2, s0, s2
	fsqrt	s2, s2
	fdiv	s2, s3, s2
	cmp	x15, #2
	b.hs	.LBB27_406
// %bb.405:                             //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	b	.LBB27_409
	.p2align	5, , 16
.LBB27_406:                             // %vector.body168.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x13, xzr
	.p2align	5, , 16
.LBB27_407:                             // %vector.body168
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s3, [x24, x13, lsl #2]
	fmul	s3, s2, s3
	ldr	s4, [x21, x13, lsl #2]
	str	s3, [x24, x13, lsl #2]
	fmul	s3, s2, s4
	str	s3, [x21, x13, lsl #2]
	add	x13, x13, #2
	cmp	x5, x13
	b.ne	.LBB27_407
// %bb.408:                             // %middle.block161
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x13, x5
	cbz	x17, .LBB27_369
.LBB27_409:                             // %.lr.ph.i146.i.i.preheader513
                                        //   in Loop: Header=BB27_370 Depth=4
	sub	w7, w10, w13
	ands	x23, x7, #0x3
	mov	x7, x13
	b.eq	.LBB27_412
// %bb.410:                             // %.lr.ph.i146.i.i.prol.preheader
                                        //   in Loop: Header=BB27_370 Depth=4
	mov	x7, x13
	.p2align	5, , 16
.LBB27_411:                             // %.lr.ph.i146.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s3, [x24, x7, lsl #2]
	subs	x23, x23, #1
	fmul	s3, s2, s3
	str	s3, [x24, x7, lsl #2]
	add	x7, x7, #1
	b.ne	.LBB27_411
.LBB27_412:                             // %.lr.ph.i146.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_370 Depth=4
	sub	x13, x13, x15
	cmn	x13, #4
	b.hi	.LBB27_369
// %bb.413:                             // %.lr.ph.i146.i.i.preheader513.new
                                        //   in Loop: Header=BB27_370 Depth=4
	sub	x13, x15, x7
	add	x7, x12, x7, lsl #2
	.p2align	5, , 16
.LBB27_414:                             // %.lr.ph.i146.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_364 Depth=2
                                        //       Parent Loop BB27_367 Depth=3
                                        //         Parent Loop BB27_370 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s3, s4, [x7, #-8]
	subs	x13, x13, #4
	ldp	s5, s6, [x7]
	fmul	s4, s2, s4
	fmul	s3, s2, s3
	fmul	s5, s2, s5
	stp	s3, s4, [x7, #-8]
	fmul	s3, s2, s6
	stp	s5, s3, [x7], #16
	b.ne	.LBB27_414
	b	.LBB27_369
.LBB27_415:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	ldr	x21, [x19, #152]
	ldr	w8, [x21]
	cbnz	w8, .LBB27_2578
// %bb.416:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x21
	mov	x1, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_417
	b	.LBB27_2579
.LBB27_417:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x21, #48]
	cmp	x8, #4
	b.ne	.LBB27_2580
// %bb.418:                             //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x8, [sp, #784]
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldrsw	x9, [x19, #84]
	str	x9, [sp, #656]                  // 8-byte Folded Spill
	cmp	w8, w9
	b.ge	.LBB27_7
// %bb.419:                             // %.lr.ph213.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x21, #32]
	str	w8, [sp, #624]                  // 4-byte Folded Spill
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	add	w8, w8, w9
	ldr	x15, [sp, #768]                 // 8-byte Folded Reload
	ldr	x0, [x21, #72]
	ldp	x16, x17, [x21, #16]
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	and	x4, x16, #0x7fffffff
	and	x6, x16, #0x1
	and	x5, x16, #0x3
	sub	w8, w8, #1
	ldp	x11, x12, [x21, #56]
	sub	x7, x4, x6
	sdiv	w8, w8, w9
	ldrsw	x1, [sp, #788]
	ldr	x10, [sp, #704]                 // 8-byte Folded Reload
	ldr	x0, [x15, #72]
	ldr	s0, [x15, #88]
	ldp	x13, x14, [x15, #56]
	ldr	x27, [x21, #40]
	str	x0, [sp, #720]                  // 8-byte Folded Spill
	str	x1, [sp, #648]                  // 8-byte Folded Spill
	str	x27, [sp, #712]                 // 8-byte Folded Spill
	mul	x15, x17, x16
	str	x15, [sp, #616]                 // 8-byte Folded Spill
	and	x15, x16, #0x7ffffffffffffffc
	neg	x19, x15
	sxtw	x15, w8
	mul	x9, x12, x10
	mul	x0, x12, x1
	mul	x10, x14, x10
	mul	x8, x9, x15
	mul	x9, x0, x15
	str	x15, [sp, #608]                 // 8-byte Folded Spill
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	mul	x9, x10, x15
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	add	x8, x8, #8
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	add	x8, x9, #8
	str	x9, [sp, #688]                  // 8-byte Folded Spill
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	mul	x8, x14, x1
	mul	x8, x8, x15
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	add	x8, x9, #4
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	b	.LBB27_421
	.p2align	5, , 16
.LBB27_420:                             // %._crit_edge210.i.i
                                        //   in Loop: Header=BB27_421 Depth=2
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	add	x9, x9, x10
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	add	x9, x9, x10
	ldr	x10, [sp, #632]                 // 8-byte Folded Reload
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, x10
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	add	x9, x9, x10
	str	x9, [sp, #688]                  // 8-byte Folded Spill
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	add	x9, x9, x10
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.ge	.LBB27_7
.LBB27_421:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_424 Depth 3
                                        //         Child Loop BB27_427 Depth 4
                                        //           Child Loop BB27_431 Depth 5
                                        //             Child Loop BB27_435 Depth 6
                                        //             Child Loop BB27_438 Depth 6
                                        //         Child Loop BB27_441 Depth 4
                                        //           Child Loop BB27_445 Depth 5
                                        //             Child Loop BB27_449 Depth 6
                                        //             Child Loop BB27_452 Depth 6
                                        //         Child Loop BB27_455 Depth 4
                                        //           Child Loop BB27_458 Depth 5
                                        //             Child Loop BB27_462 Depth 6
                                        //             Child Loop BB27_466 Depth 6
                                        //             Child Loop BB27_469 Depth 6
	cmp	x27, #1
	b.lt	.LBB27_420
// %bb.422:                             // %.lr.ph209.i.i
                                        //   in Loop: Header=BB27_421 Depth=2
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	mov	x15, xzr
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	mul	x10, x8, x9
	ldr	x24, [sp, #672]                 // 8-byte Folded Reload
	ldr	x22, [sp, #696]                 // 8-byte Folded Reload
	ldr	x28, [sp, #680]                 // 8-byte Folded Reload
	add	w8, w9, w10
	ldr	w9, [sp, #624]                  // 4-byte Folded Reload
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	cmp	w8, w9
	csel	w8, w8, w9, lt
	sxtw	x9, w8
	sub	x8, x9, x10
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	mul	x8, x10, x8
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	scvtf	d1, x8
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	b	.LBB27_424
	.p2align	5, , 16
.LBB27_423:                             // %._crit_edge206.i.i
                                        //   in Loop: Header=BB27_424 Depth=3
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	add	x28, x28, x8
	add	x22, x22, x8
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	ldr	x15, [sp, #736]                 // 8-byte Folded Reload
	add	x15, x15, #1
	add	x10, x10, x8
	add	x24, x24, x8
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	cmp	x15, x27
	b.eq	.LBB27_420
.LBB27_424:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_427 Depth 4
                                        //           Child Loop BB27_431 Depth 5
                                        //             Child Loop BB27_435 Depth 6
                                        //             Child Loop BB27_438 Depth 6
                                        //         Child Loop BB27_441 Depth 4
                                        //           Child Loop BB27_445 Depth 5
                                        //             Child Loop BB27_449 Depth 6
                                        //             Child Loop BB27_452 Depth 6
                                        //         Child Loop BB27_455 Depth 4
                                        //           Child Loop BB27_458 Depth 5
                                        //             Child Loop BB27_462 Depth 6
                                        //             Child Loop BB27_466 Depth 6
                                        //             Child Loop BB27_469 Depth 6
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	str	x15, [sp, #736]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.le	.LBB27_423
// %bb.425:                             // %.preheader163.lr.ph.i.i
                                        //   in Loop: Header=BB27_424 Depth=3
	ldr	x15, [sp, #752]                 // 8-byte Folded Reload
	fmov	d2, xzr
	mov	x8, x22
	mov	x10, x28
	b	.LBB27_427
	.p2align	5, , 16
.LBB27_426:                             // %._crit_edge169.i.i
                                        //   in Loop: Header=BB27_427 Depth=4
	add	x15, x15, #1
	add	x10, x10, x12
	add	x8, x8, x12
	cmp	x15, x9
	b.ge	.LBB27_439
.LBB27_427:                             // %.preheader163.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_431 Depth 5
                                        //             Child Loop BB27_435 Depth 6
                                        //             Child Loop BB27_438 Depth 6
	cmp	x17, #1
	b.lt	.LBB27_426
// %bb.428:                             // %.lr.ph168.i.i552
                                        //   in Loop: Header=BB27_427 Depth=4
	ldr	x2, [x21, #248]
	mov	x0, xzr
	add	x1, x2, x10
	add	x2, x2, x8
	b	.LBB27_431
	.p2align	5, , 16
.LBB27_429:                             //   in Loop: Header=BB27_431 Depth=5
	fmov	d3, xzr
.LBB27_430:                             // %._crit_edge.i.i554
                                        //   in Loop: Header=BB27_431 Depth=5
	fadd	d2, d2, d3
	add	x0, x0, #1
	add	x1, x1, x11
	add	x2, x2, x11
	cmp	x0, x17
	b.eq	.LBB27_426
.LBB27_431:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_427 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_435 Depth 6
                                        //             Child Loop BB27_438 Depth 6
	cmp	x16, #1
	b.lt	.LBB27_429
// %bb.432:                             // %.lr.ph.i.i555.preheader
                                        //   in Loop: Header=BB27_431 Depth=5
	cmp	x16, #4
	b.hs	.LBB27_434
// %bb.433:                             //   in Loop: Header=BB27_431 Depth=5
	mov	x3, xzr
	fmov	d3, xzr
	cbnz	x5, .LBB27_437
	b	.LBB27_430
	.p2align	5, , 16
.LBB27_434:                             // %.lr.ph.i.i555.preheader1488
                                        //   in Loop: Header=BB27_431 Depth=5
	fmov	d3, xzr
	mov	x3, xzr
	mov	x20, x1
	.p2align	5, , 16
.LBB27_435:                             // %.lr.ph.i.i555
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_427 Depth=4
                                        //           Parent Loop BB27_431 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s4, s5, [x20, #-8]
	sub	x3, x3, #4
	fcvt	d4, s4
	fadd	d3, d3, d4
	fcvt	d4, s5
	fadd	d3, d3, d4
	ldp	s4, s5, [x20], #16
	fcvt	d4, s4
	fadd	d3, d3, d4
	fcvt	d4, s5
	fadd	d3, d3, d4
	cmp	x19, x3
	b.ne	.LBB27_435
// %bb.436:                             // %._crit_edge.i.i554.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_431 Depth=5
	neg	x3, x3
	cbz	x5, .LBB27_430
.LBB27_437:                             // %.lr.ph.i.i555.epil.preheader
                                        //   in Loop: Header=BB27_431 Depth=5
	add	x3, x2, x3, lsl #2
	mov	x20, x5
	.p2align	5, , 16
.LBB27_438:                             // %.lr.ph.i.i555.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_427 Depth=4
                                        //           Parent Loop BB27_431 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s4, [x3], #4
	subs	x20, x20, #1
	fcvt	d4, s4
	fadd	d3, d3, d4
	b.ne	.LBB27_438
	b	.LBB27_430
	.p2align	5, , 16
.LBB27_439:                             // %.preheader162.lr.ph.i.i
                                        //   in Loop: Header=BB27_424 Depth=3
	fdiv	d2, d2, d1
	ldr	x25, [sp, #760]                 // 8-byte Folded Reload
	ldr	x15, [sp, #752]                 // 8-byte Folded Reload
	fmov	d3, xzr
	mov	x23, x22
	mov	x27, x24
	mov	x26, x28
	fcvt	s2, d2
	b	.LBB27_441
	.p2align	5, , 16
.LBB27_440:                             // %._crit_edge187.i.i
                                        //   in Loop: Header=BB27_441 Depth=4
	add	x15, x15, #1
	add	x26, x26, x12
	add	x27, x27, x14
	add	x25, x25, x14
	add	x23, x23, x12
	cmp	x15, x9
	b.ge	.LBB27_453
.LBB27_441:                             // %.preheader162.i.i544
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_445 Depth 5
                                        //             Child Loop BB27_449 Depth 6
                                        //             Child Loop BB27_452 Depth 6
	cmp	x17, #1
	b.lt	.LBB27_440
// %bb.442:                             // %.lr.ph186.i.i
                                        //   in Loop: Header=BB27_441 Depth=4
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x0, [x21, #248]
	add	x20, x0, x26
	ldr	x10, [x10, #248]
	add	x2, x0, x23
	add	x3, x10, x27
	add	x10, x10, x25
	b	.LBB27_445
	.p2align	5, , 16
.LBB27_443:                             //   in Loop: Header=BB27_445 Depth=5
	fmov	d4, xzr
.LBB27_444:                             // %._crit_edge182.i.i
                                        //   in Loop: Header=BB27_445 Depth=5
	fadd	d3, d3, d4
	add	x8, x8, #1
	add	x20, x20, x11
	add	x3, x3, x13
	add	x10, x10, x13
	add	x2, x2, x11
	cmp	x8, x17
	b.eq	.LBB27_440
.LBB27_445:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_441 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_449 Depth 6
                                        //             Child Loop BB27_452 Depth 6
	cmp	x16, #1
	b.lt	.LBB27_443
// %bb.446:                             // %.lr.ph181.i.i.preheader
                                        //   in Loop: Header=BB27_445 Depth=5
	cmp	x16, #4
	b.hs	.LBB27_448
// %bb.447:                             //   in Loop: Header=BB27_445 Depth=5
	mov	x30, xzr
	fmov	d4, xzr
	cbnz	x5, .LBB27_451
	b	.LBB27_444
	.p2align	5, , 16
.LBB27_448:                             // %.lr.ph181.i.i.preheader1487
                                        //   in Loop: Header=BB27_445 Depth=5
	fmov	d4, xzr
	mov	x30, xzr
	mov	x1, x3
	mov	x0, x20
	.p2align	5, , 16
.LBB27_449:                             // %.lr.ph181.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_441 Depth=4
                                        //           Parent Loop BB27_445 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldur	s5, [x0, #-8]
	sub	x30, x30, #4
	fsub	s5, s5, s2
	stur	s5, [x1, #-8]
	fmul	s5, s5, s5
	fcvt	d5, s5
	fadd	d4, d4, d5
	ldur	s5, [x0, #-4]
	fsub	s5, s5, s2
	stur	s5, [x1, #-4]
	fmul	s5, s5, s5
	fcvt	d5, s5
	fadd	d4, d4, d5
	ldr	s5, [x0]
	fsub	s5, s5, s2
	str	s5, [x1]
	fmul	s5, s5, s5
	fcvt	d5, s5
	fadd	d4, d4, d5
	ldr	s5, [x0, #4]
	add	x0, x0, #16
	fsub	s5, s5, s2
	str	s5, [x1, #4]
	fmul	s5, s5, s5
	add	x1, x1, #16
	fcvt	d5, s5
	fadd	d4, d4, d5
	cmp	x19, x30
	b.ne	.LBB27_449
// %bb.450:                             // %._crit_edge182.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_445 Depth=5
	neg	x30, x30
	cbz	x5, .LBB27_444
.LBB27_451:                             // %.lr.ph181.i.i.epil.preheader
                                        //   in Loop: Header=BB27_445 Depth=5
	add	x0, x10, x30, lsl #2
	mov	x1, x5
	add	x30, x2, x30, lsl #2
	.p2align	5, , 16
.LBB27_452:                             // %.lr.ph181.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_441 Depth=4
                                        //           Parent Loop BB27_445 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s5, [x30], #4
	subs	x1, x1, #1
	fsub	s5, s5, s2
	str	s5, [x0], #4
	fmul	s5, s5, s5
	fcvt	d5, s5
	fadd	d4, d4, d5
	b.ne	.LBB27_452
	b	.LBB27_444
	.p2align	5, , 16
.LBB27_453:                             // %.preheader.lr.ph.i.i545
                                        //   in Loop: Header=BB27_424 Depth=3
	fdiv	d2, d3, d1
	fmov	s3, #1.00000000
	ldr	x23, [sp, #760]                 // 8-byte Folded Reload
	ldr	x25, [sp, #744]                 // 8-byte Folded Reload
	ldr	x26, [sp, #752]                 // 8-byte Folded Reload
	ldr	x27, [sp, #712]                 // 8-byte Folded Reload
	mov	x15, x24
	fcvt	s2, d2
	fadd	s2, s0, s2
	fsqrt	s2, s2
	fdiv	s2, s3, s2
	b	.LBB27_455
	.p2align	5, , 16
.LBB27_454:                             // %._crit_edge201.i.i
                                        //   in Loop: Header=BB27_455 Depth=4
	add	x26, x26, #1
	add	x25, x25, x14
	add	x23, x23, x14
	add	x15, x15, x14
	cmp	x26, x9
	b.ge	.LBB27_423
.LBB27_455:                             // %.preheader.i.i546
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_458 Depth 5
                                        //             Child Loop BB27_462 Depth 6
                                        //             Child Loop BB27_466 Depth 6
                                        //             Child Loop BB27_469 Depth 6
	cmp	x17, #1
	b.lt	.LBB27_454
// %bb.456:                             // %.lr.ph200.i.i
                                        //   in Loop: Header=BB27_455 Depth=4
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x1, [x10, #248]
	add	x10, x1, x25
	add	x0, x1, x23
	add	x1, x1, x15
	b	.LBB27_458
	.p2align	5, , 16
.LBB27_457:                             // %ggml_vec_scale_f32.exit.i.i547
                                        //   in Loop: Header=BB27_458 Depth=5
	add	x8, x8, #1
	add	x10, x10, x13
	add	x0, x0, x13
	add	x1, x1, x13
	cmp	x8, x17
	b.eq	.LBB27_454
.LBB27_458:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_455 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_462 Depth 6
                                        //             Child Loop BB27_466 Depth 6
                                        //             Child Loop BB27_469 Depth 6
	cmp	w16, #1
	b.lt	.LBB27_457
// %bb.459:                             // %.lr.ph.i.i.i548.preheader
                                        //   in Loop: Header=BB27_458 Depth=5
	cmp	x4, #2
	b.hs	.LBB27_461
// %bb.460:                             //   in Loop: Header=BB27_458 Depth=5
	mov	x2, xzr
	b	.LBB27_464
	.p2align	5, , 16
.LBB27_461:                             // %vector.body190.preheader
                                        //   in Loop: Header=BB27_458 Depth=5
	mov	x2, x7
	mov	x3, x10
	.p2align	5, , 16
.LBB27_462:                             // %vector.body190
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_455 Depth=4
                                        //           Parent Loop BB27_458 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s3, s4, [x3, #-4]
	subs	x2, x2, #2
	fmul	s4, s2, s4
	fmul	s3, s2, s3
	stp	s3, s4, [x3, #-4]
	add	x3, x3, #8
	b.ne	.LBB27_462
// %bb.463:                             // %middle.block183
                                        //   in Loop: Header=BB27_458 Depth=5
	mov	x2, x7
	cbz	x6, .LBB27_457
.LBB27_464:                             // %.lr.ph.i.i.i548.preheader506
                                        //   in Loop: Header=BB27_458 Depth=5
	sub	w3, w16, w2
	ands	x20, x3, #0x3
	mov	x3, x2
	b.eq	.LBB27_467
// %bb.465:                             // %.lr.ph.i.i.i548.prol.preheader
                                        //   in Loop: Header=BB27_458 Depth=5
	mov	x3, x2
	.p2align	5, , 16
.LBB27_466:                             // %.lr.ph.i.i.i548.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_455 Depth=4
                                        //           Parent Loop BB27_458 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s3, [x0, x3, lsl #2]
	subs	x20, x20, #1
	fmul	s3, s2, s3
	str	s3, [x0, x3, lsl #2]
	add	x3, x3, #1
	b.ne	.LBB27_466
.LBB27_467:                             // %.lr.ph.i.i.i548.prol.loopexit
                                        //   in Loop: Header=BB27_458 Depth=5
	sub	x2, x2, x4
	cmn	x2, #4
	b.hi	.LBB27_457
// %bb.468:                             // %.lr.ph.i.i.i548.preheader506.new
                                        //   in Loop: Header=BB27_458 Depth=5
	sub	x2, x4, x3
	add	x3, x1, x3, lsl #2
	.p2align	5, , 16
.LBB27_469:                             // %.lr.ph.i.i.i548
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_421 Depth=2
                                        //       Parent Loop BB27_424 Depth=3
                                        //         Parent Loop BB27_455 Depth=4
                                        //           Parent Loop BB27_458 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s3, s4, [x3, #-8]
	subs	x2, x2, #4
	ldp	s5, s6, [x3]
	fmul	s4, s2, s4
	fmul	s3, s2, s3
	fmul	s5, s2, s5
	stp	s3, s4, [x3, #-8]
	fmul	s3, s2, s6
	stp	s5, s3, [x3], #16
	b.ne	.LBB27_469
	b	.LBB27_457
.LBB27_470:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	ldr	x21, [x19, #152]
	ldr	w8, [x21]
	cbnz	w8, .LBB27_2581
// %bb.471:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x21
	mov	x1, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_472
	b	.LBB27_2582
.LBB27_472:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x21, #48]
	cmp	x8, #4
	b.ne	.LBB27_2583
// %bb.473:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	s8, [x19, #84]
	fcmp	s8, #0.0
	b.lt	.LBB27_2584
// %bb.474:                             // %.preheader85.i.i522
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x21, #40]
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.475:                             // %.preheader.lr.ph.i.i523
                                        //   in Loop: Header=BB27_3 Depth=1
	ldp	x26, x9, [x21, #16]
	str	xzr, [sp, #560]                 // 8-byte Folded Spill
	ldrsw	x8, [sp, #784]
	str	x21, [sp, #704]                 // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	lsl	x9, x26, #2
	ldrsw	x10, [sp, #788]
	str	x8, [sp, #592]                  // 8-byte Folded Spill
	and	x12, x26, #0x7fffffff
	and	x16, x26, #0x1
	ldr	x17, [x21, #32]
	str	x17, [sp, #568]                 // 8-byte Folded Spill
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	str	x9, [sp, #688]                  // 8-byte Folded Spill
	ldp	x11, x9, [x21, #56]
	mul	x13, x11, x8
	str	x9, [sp, #584]                  // 8-byte Folded Spill
	and	x9, x26, #0x3
	str	x11, [sp, #680]                 // 8-byte Folded Spill
	mul	x11, x11, x10
	str	x12, [sp, #760]                 // 8-byte Folded Spill
	str	x16, [sp, #648]                 // 8-byte Folded Spill
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	str	x11, [sp, #664]                 // 8-byte Folded Spill
	ldp	x14, x15, [x9, #56]
	sub	x11, x12, x16
	str	x13, [sp, #552]                 // 8-byte Folded Spill
	str	x11, [sp, #656]                 // 8-byte Folded Spill
	ldr	x11, [x21, #72]
	str	x15, [sp, #576]                 // 8-byte Folded Spill
	mul	x15, x14, x8
	and	x8, x26, #0x7ffffffffffffffc
	mul	x28, x14, x10
	str	x14, [sp, #672]                 // 8-byte Folded Spill
	neg	x25, x8
	add	x8, x13, #8
	str	x11, [sp, #512]                 // 8-byte Folded Spill
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	add	x8, x15, #4
	str	x15, [sp, #544]                 // 8-byte Folded Spill
	str	x8, [sp, #528]                  // 8-byte Folded Spill
	add	x8, x15, #8
	str	x8, [sp, #520]                  // 8-byte Folded Spill
	ldr	x8, [x9, #72]
	str	x8, [sp, #496]                  // 8-byte Folded Spill
	b	.LBB27_477
	.p2align	5, , 16
.LBB27_476:                             // %._crit_edge94.i.i
                                        //   in Loop: Header=BB27_477 Depth=2
	ldr	x10, [sp, #512]                 // 8-byte Folded Reload
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	add	x8, x8, x10
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x8, x10
	ldr	x10, [sp, #496]                 // 8-byte Folded Reload
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #528]                  // 8-byte Folded Spill
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #520]                  // 8-byte Folded Spill
	ldr	x8, [sp, #488]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_477:                             // %.preheader.i.i525
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_480 Depth 3
                                        //         Child Loop BB27_483 Depth 4
                                        //           Child Loop BB27_488 Depth 5
                                        //           Child Loop BB27_491 Depth 5
                                        //           Child Loop BB27_496 Depth 5
                                        //           Child Loop BB27_500 Depth 5
                                        //           Child Loop BB27_503 Depth 5
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_476
// %bb.478:                             // %.lr.ph93.i.i
                                        //   in Loop: Header=BB27_477 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	str	xzr, [sp, #640]                 // 8-byte Folded Spill
	ldr	x9, [sp, #512]                  // 8-byte Folded Reload
	mul	x9, x8, x9
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldr	x9, [sp, #520]                  // 8-byte Folded Reload
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	ldr	x9, [sp, #544]                  // 8-byte Folded Reload
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	ldr	x9, [sp, #528]                  // 8-byte Folded Reload
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldr	x9, [sp, #496]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	b	.LBB27_480
	.p2align	5, , 16
.LBB27_479:                             // %._crit_edge91.i.i
                                        //   in Loop: Header=BB27_480 Depth=3
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	ldr	x10, [sp, #600]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #600]                 // 8-byte Folded Spill
	ldr	x10, [sp, #608]                 // 8-byte Folded Reload
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	add	x10, x10, x8
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x10, [sp, #608]                 // 8-byte Folded Spill
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	ldr	x10, [sp, #624]                 // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #624]                 // 8-byte Folded Spill
	ldr	x10, [sp, #632]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x10, [sp, #632]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_476
.LBB27_480:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_483 Depth 4
                                        //           Child Loop BB27_488 Depth 5
                                        //           Child Loop BB27_491 Depth 5
                                        //           Child Loop BB27_496 Depth 5
                                        //           Child Loop BB27_500 Depth 5
                                        //           Child Loop BB27_503 Depth 5
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.le	.LBB27_479
// %bb.481:                             // %.lr.ph90.i.i528
                                        //   in Loop: Header=BB27_480 Depth=3
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x24, [sp, #632]                 // 8-byte Folded Reload
	ldr	x27, [sp, #624]                 // 8-byte Folded Reload
	ldr	x22, [sp, #616]                 // 8-byte Folded Reload
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	ldr	x19, [sp, #608]                 // 8-byte Folded Reload
	ldr	x23, [sp, #600]                 // 8-byte Folded Reload
	ldr	x20, [sp, #592]                 // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_483
	.p2align	5, , 16
.LBB27_482:                             // %ggml_vec_scale_f32.exit.i.i530
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	add	x22, x22, x28
	add	x27, x27, x28
	ldr	x21, [sp, #704]                 // 8-byte Folded Reload
	add	x24, x24, x28
	add	x20, x20, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	add	x23, x23, x8
	add	x19, x19, x8
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	cmp	x20, x8
	b.ge	.LBB27_479
.LBB27_483:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        //       Parent Loop BB27_480 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_488 Depth 5
                                        //           Child Loop BB27_491 Depth 5
                                        //           Child Loop BB27_496 Depth 5
                                        //           Child Loop BB27_500 Depth 5
                                        //           Child Loop BB27_503 Depth 5
	ldr	x8, [x21, #248]
	cmp	x26, #1
	b.lt	.LBB27_486
// %bb.484:                             // %.lr.ph.i.i535.preheader
                                        //   in Loop: Header=BB27_483 Depth=4
	cmp	x26, #4
	b.hs	.LBB27_487
// %bb.485:                             //   in Loop: Header=BB27_483 Depth=4
	mov	x9, xzr
	fmov	d9, xzr
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cbnz	x10, .LBB27_490
	b	.LBB27_492
	.p2align	5, , 16
.LBB27_486:                             //   in Loop: Header=BB27_483 Depth=4
	fmov	d9, xzr
	b	.LBB27_492
	.p2align	5, , 16
.LBB27_487:                             // %.lr.ph.i.i535.preheader1505
                                        //   in Loop: Header=BB27_483 Depth=4
	fmov	d9, xzr
	mov	x9, xzr
	add	x10, x8, x23
	.p2align	5, , 16
.LBB27_488:                             // %.lr.ph.i.i535
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        //       Parent Loop BB27_480 Depth=3
                                        //         Parent Loop BB27_483 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x10, #-8]
	sub	x9, x9, #4
	fmul	s1, s1, s1
	fmul	s0, s0, s0
	fcvt	d1, s1
	fcvt	d0, s0
	fadd	d0, d9, d0
	fadd	d0, d0, d1
	ldp	s1, s2, [x10], #16
	fmul	s1, s1, s1
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s2
	fcvt	d1, s1
	fadd	d9, d0, d1
	cmp	x25, x9
	b.ne	.LBB27_488
// %bb.489:                             // %._crit_edge.i.i529.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_483 Depth=4
	neg	x9, x9
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cbz	x10, .LBB27_492
.LBB27_490:                             // %.lr.ph.i.i535.epil.preheader
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x9, x19, x9, lsl #2
	add	x9, x8, x9
	.p2align	5, , 16
.LBB27_491:                             // %.lr.ph.i.i535.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        //       Parent Loop BB27_480 Depth=3
                                        //         Parent Loop BB27_483 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x9], #4
	subs	x10, x10, #1
	fmul	s0, s0, s0
	fcvt	d0, s0
	fadd	d9, d9, d0
	b.ne	.LBB27_491
.LBB27_492:                             // %._crit_edge.i.i529
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	nop
	madd	x8, x20, x9, x8
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	ldr	x11, [sp, #712]                 // 8-byte Folded Reload
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	add	x11, x12, x11
	add	x9, x10, x9
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x2, [sp, #688]                  // 8-byte Folded Reload
	add	x1, x8, x9
	ldr	x21, [x10, #248]
	ldr	x10, [sp, #672]                 // 8-byte Folded Reload
	nop
	madd	x10, x20, x10, x21
	add	x0, x10, x11
	bl	memcpy
	cmp	w26, #1
	b.lt	.LBB27_482
// %bb.493:                             // %.lr.ph.i.i.i531.preheader
                                        //   in Loop: Header=BB27_483 Depth=4
	fcvt	s0, d9
	fmov	s1, #1.00000000
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	fsqrt	s0, s0
	fmaxnm	s0, s0, s8
	fdiv	s0, s1, s0
	cmp	x8, #2
	b.hs	.LBB27_495
// %bb.494:                             //   in Loop: Header=BB27_483 Depth=4
	mov	x8, xzr
	b	.LBB27_498
	.p2align	5, , 16
.LBB27_495:                             // %vector.body201.preheader
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	add	x8, x21, x22
	.p2align	5, , 16
.LBB27_496:                             // %vector.body201
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        //       Parent Loop BB27_480 Depth=3
                                        //         Parent Loop BB27_483 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x8, #-4]
	subs	x9, x9, #2
	fmul	s2, s0, s2
	fmul	s1, s0, s1
	stp	s1, s2, [x8, #-4]
	add	x8, x8, #8
	b.ne	.LBB27_496
// %bb.497:                             // %middle.block194
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_482
.LBB27_498:                             // %.lr.ph.i.i.i531.preheader514
                                        //   in Loop: Header=BB27_483 Depth=4
	sub	w9, w26, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_501
// %bb.499:                             // %.lr.ph.i.i.i531.prol.preheader
                                        //   in Loop: Header=BB27_483 Depth=4
	add	x11, x21, x27
	mov	x9, x8
	.p2align	5, , 16
.LBB27_500:                             // %.lr.ph.i.i.i531.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        //       Parent Loop BB27_480 Depth=3
                                        //         Parent Loop BB27_483 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x11, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s1, s0, s1
	str	s1, [x11, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_500
.LBB27_501:                             // %.lr.ph.i.i.i531.prol.loopexit
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	sub	x8, x8, x10
	cmn	x8, #4
	b.hi	.LBB27_482
// %bb.502:                             // %.lr.ph.i.i.i531.preheader514.new
                                        //   in Loop: Header=BB27_483 Depth=4
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	sub	x8, x8, x9
	add	x9, x24, x9, lsl #2
	add	x9, x21, x9
	.p2align	5, , 16
.LBB27_503:                             // %.lr.ph.i.i.i531
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_477 Depth=2
                                        //       Parent Loop BB27_480 Depth=3
                                        //         Parent Loop BB27_483 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x9, #-8]
	subs	x8, x8, #4
	ldp	s3, s4, [x9]
	fmul	s2, s0, s2
	fmul	s1, s0, s1
	fmul	s3, s0, s3
	stp	s1, s2, [x9, #-8]
	fmul	s1, s0, s4
	stp	s3, s1, [x9], #16
	b.ne	.LBB27_503
	b	.LBB27_482
.LBB27_504:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x9, #152]
	str	x8, [sp, #376]                  // 8-byte Folded Spill
	ldr	x10, [x8, #24]
	ldr	x8, [x9, #16]
	str	x10, [sp, #384]                 // 8-byte Folded Spill
	cmp	x8, x10
	b.ne	.LBB27_2585
// %bb.505:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x25, [x9, #160]
	ldr	x8, [x9, #24]
	ldr	x10, [x25, #24]
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	cmp	x8, x10
	b.ne	.LBB27_2586
// %bb.506:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x25, #32]
	str	x10, [sp, #704]                 // 8-byte Folded Spill
	ldr	x8, [x9, #32]
	cmp	x8, x10
	b.ne	.LBB27_2587
// %bb.507:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x25, #40]
	str	x10, [sp, #624]                 // 8-byte Folded Spill
	ldr	x8, [x9, #40]
	cmp	x8, x10
	b.ne	.LBB27_2588
// %bb.508:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x25, #16]
	str	x10, [sp, #720]                 // 8-byte Folded Spill
	ldr	x8, [sp, #376]                  // 8-byte Folded Reload
	ldp	x11, x10, [x25, #64]
	ldr	w0, [x8]
	ldr	x22, [x8, #48]
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	adrp	x10, type_traits_cpu
	add	x10, x10, :lo12:type_traits_cpu
	ldp	x19, x23, [x9, #48]
	ldp	x20, x21, [x9, #64]
	ldrsw	x24, [sp, #784]
	ldp	x27, x28, [x25, #48]
	str	x11, [sp, #648]                 // 8-byte Folded Spill
	add	x8, x10, x0, lsl #5
	ldr	w26, [sp, #788]
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	w9, [x8, #16]
	ldr	x8, [x8, #24]
	str	x9, [sp, #760]                  // 8-byte Folded Spill
	lsl	x9, x9, #5
	str	x8, [sp, #312]                  // 8-byte Folded Spill
	ldr	x9, [x10, x9]
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	bl	ggml_type_size
	cmp	x22, x0
	b.ne	.LBB27_2589
// %bb.509:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w0, [x25]
	bl	ggml_type_size
	cmp	x27, x0
	b.ne	.LBB27_2590
// %bb.510:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x19, #4
	ldr	x19, [sp, #760]                 // 8-byte Folded Reload
	b.ne	.LBB27_2591
// %bb.511:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x23, #3
	b.ls	.LBB27_2592
// %bb.512:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x23, x20
	b.hi	.LBB27_2593
// %bb.513:                             //   in Loop: Header=BB27_3 Depth=1
	str	x28, [sp, #736]                 // 8-byte Folded Spill
	str	x27, [sp, #744]                 // 8-byte Folded Spill
	str	x24, [sp, #592]                 // 8-byte Folded Spill
	cmp	x20, x21
	b.hi	.LBB27_2594
// %bb.514:                             //   in Loop: Header=BB27_3 Depth=1
	sxtw	x8, w26
	str	x26, [sp, #584]                 // 8-byte Folded Spill
	str	x25, [sp, #752]                 // 8-byte Folded Spill
	str	x8, [sp, #424]                  // 8-byte Folded Spill
	ldr	w8, [x25]
	cmp	w8, w19
	b.eq	.LBB27_1745
// %bb.515:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #800]
	mov	w0, w19
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	bl	ggml_type_size
	ldr	x1, [sp, #720]                  // 8-byte Folded Reload
	str	x0, [sp, #680]                  // 8-byte Folded Spill
	mov	w0, w19
	bl	ggml_row_size
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	ldr	w8, [x8]
	cbnz	w8, .LBB27_2738
// %bb.516:                             // %.preheader237.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1745
// %bb.517:                             // %.preheader236.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	str	xzr, [sp, #632]                 // 8-byte Folded Spill
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	mul	x9, x9, x8
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	mul	x10, x9, x8
	add	w8, w8, #1
	sxtw	x8, w8
	mul	x8, x9, x8
	str	x10, [sp, #672]                 // 8-byte Folded Spill
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	b	.LBB27_519
.LBB27_518:                             // %._crit_edge240.i
                                        //   in Loop: Header=BB27_519 Depth=2
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_1745
.LBB27_519:                             // %.preheader236.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_522 Depth 3
                                        //         Child Loop BB27_524 Depth 4
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_518
// %bb.520:                             // %.preheader.lr.ph.i515
                                        //   in Loop: Header=BB27_519 Depth=2
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	str	xzr, [sp, #720]                 // 8-byte Folded Spill
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x10, [sp, #600]                 // 8-byte Folded Reload
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	nop
	madd	x8, x10, x9, x8
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	b	.LBB27_522
	.p2align	5, , 16
.LBB27_521:                             // %._crit_edge.i517
                                        //   in Loop: Header=BB27_522 Depth=3
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_518
.LBB27_522:                             // %.preheader.i516
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_519 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_524 Depth 4
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x24, [sp, #424]                 // 8-byte Folded Reload
	ldr	x27, [sp, #680]                 // 8-byte Folded Reload
	ldr	x20, [sp, #688]                 // 8-byte Folded Reload
	ldr	x21, [sp, #672]                 // 8-byte Folded Reload
	ldr	x25, [sp, #664]                 // 8-byte Folded Reload
	ldr	x26, [sp, #696]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_521
// %bb.523:                             // %.lr.ph.i518
                                        //   in Loop: Header=BB27_522 Depth=3
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	mov	x23, xzr
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	mul	x28, x9, x8
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	ldr	x10, [sp, #656]                 // 8-byte Folded Reload
	ldr	x22, [sp, #712]                 // 8-byte Folded Reload
	nop
	madd	x19, x9, x8, x10
	.p2align	5, , 16
.LBB27_524:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_519 Depth=2
                                        //       Parent Loop BB27_522 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
                                        // kill: def $w0 killed $w0 killed $x0
	bl	ggml_blck_size
	udiv	x8, x21, x0
	add	x11, x26, x28
	udiv	x9, x8, x24
	udiv	x8, x25, x0
	udiv	x10, x8, x24
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	add	x8, x8, x11
	ldr	x11, [sp, #736]                 // 8-byte Folded Reload
	nop
	madd	x8, x23, x11, x8
	ldr	x11, [sp, #744]                 // 8-byte Folded Reload
	mul	x11, x0, x11
	madd	x8, x11, x9, x8
	madd	x11, x23, x20, x19
	madd	x1, x9, x27, x11
	sub	x9, x10, x9
	mul	x2, x9, x0
	mov	x0, x8
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	blr	x8
	add	x23, x23, #1
	subs	x22, x22, #1
	b.ne	.LBB27_524
	b	.LBB27_521
.LBB27_525:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldp	x9, x22, [x8, #152]
	ldr	x26, [x8, #168]
	ldp	x25, x24, [x8, #48]
	ldp	x21, x23, [x8, #64]
	mov	x0, x22
	ldp	x11, x10, [x9, #24]
	ldr	w8, [sp, #788]
	ldr	x19, [x9, #48]
	ldr	x27, [x9, #64]
	str	x9, [sp, #512]                  // 8-byte Folded Spill
	str	x11, [sp, #440]                 // 8-byte Folded Spill
	str	x10, [sp, #552]                 // 8-byte Folded Spill
	ldr	w20, [x9]
	ldp	x11, x10, [x22, #16]
	str	x11, [sp, #496]                 // 8-byte Folded Spill
	str	x10, [sp, #720]                 // 8-byte Folded Spill
	ldp	x11, x10, [x22, #32]
	str	x10, [sp, #600]                 // 8-byte Folded Spill
	ldp	x28, x10, [x22, #48]
	str	x11, [sp, #712]                 // 8-byte Folded Spill
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	ldp	x11, x10, [x22, #64]
	str	x10, [sp, #592]                 // 8-byte Folded Spill
	ldrsw	x10, [sp, #784]
	str	x11, [sp, #624]                 // 8-byte Folded Spill
	stp	x10, x8, [sp, #472]             // 16-byte Folded Spill
	bl	ggml_is_contiguous
	adrp	x9, type_traits_cpu
	add	x9, x9, :lo12:type_traits_cpu
	str	w0, [sp, #656]                  // 4-byte Folded Spill
	add	x8, x9, x20, lsl #5
	mov	w0, w20
	ldr	w8, [x8, #16]
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	lsl	x8, x8, #5
	ldr	x8, [x9, x8]
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	bl	ggml_type_size
	cmp	x19, x0
	b.ne	.LBB27_2595
// %bb.526:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w0, [x22]
	bl	ggml_type_size
	cmp	x28, x0
	b.ne	.LBB27_2596
// %bb.527:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x25, #4
	b.ne	.LBB27_2597
// %bb.528:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x24, #3
	b.ls	.LBB27_2598
// %bb.529:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x24, x21
	b.hi	.LBB27_2599
// %bb.530:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x21, x23
	b.hi	.LBB27_2600
// %bb.531:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x26, #16]
	str	x27, [sp, #456]                 // 8-byte Folded Spill
	ldr	x21, [sp, #800]
	ldr	w8, [x22]
	ldr	x19, [sp, #568]                 // 8-byte Folded Reload
	cmp	w8, w19
	b.ne	.LBB27_1895
// %bb.532:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x8, x20
	mov	x9, x21
	b	.LBB27_1896
.LBB27_533:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x11, [x10, #152]
	ldr	w19, [x11]
	cmp	w19, #35
	b.hi	.LBB27_2825
// %bb.534:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x9, #32204                      // =0x7dcc
	mov	w8, #1                          // =0x1
	str	x11, [sp, #640]                 // 8-byte Folded Spill
	movk	x9, #8447, lsl #16
	lsl	x8, x8, x19
	movk	x9, #12, lsl #32
	tst	x8, x9
	b.eq	.LBB27_2416
// %bb.535:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x21, x9, [x11, #16]
	mov	w0, w19
	ldr	x8, [x10, #160]
	str	x9, [sp, #760]                  // 8-byte Folded Spill
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldp	x25, x9, [x11, #48]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	ldr	x9, [x11, #64]
	ldp	x26, x20, [x11, #32]
	ldp	x24, x23, [x10, #32]
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	ldr	x9, [x11, #72]
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	ldr	x9, [x8, #16]
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	ldp	x9, x22, [x8, #32]
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	ldp	x11, x9, [x8, #48]
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	ldr	x9, [x8, #64]
	ldr	x8, [x8, #72]
	str	x11, [sp, #616]                 // 8-byte Folded Spill
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	ldp	x27, x8, [x10, #16]
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldp	x28, x8, [x10, #48]
	str	x8, [sp, #592]                  // 8-byte Folded Spill
	ldp	x9, x8, [x10, #64]
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldrsw	x8, [sp, #784]
	str	x9, [sp, #584]                  // 8-byte Folded Spill
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldrsw	x8, [sp, #788]
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	bl	ggml_get_type_traits
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	str	x26, [sp, #728]                 // 8-byte Folded Spill
	cmp	x26, x8
	b.ne	.LBB27_2601
// %bb.536:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x20, x22
	b.ne	.LBB27_2602
// %bb.537:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	cmp	x24, x8
	b.ne	.LBB27_2603
// %bb.538:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	cmp	x23, x20
	b.ne	.LBB27_2604
// %bb.539:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x0, #40]
	mov	w0, w19
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	bl	ggml_type_size
	cmp	x25, x0
	b.ne	.LBB27_2605
// %bb.540:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x28, #4
	b.ne	.LBB27_2606
// %bb.541:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x27, x21
	b.ne	.LBB27_2607
// %bb.542:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.ne	.LBB27_2608
// %bb.543:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	cbnz	w8, .LBB27_546
// %bb.544:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	mul	x8, x8, x21
	mul	x8, x8, x20
	cmp	w8, #1
	b.lt	.LBB27_546
// %bb.545:                             // %.lr.ph.preheader.i.i.i472
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [x22, #248]
	ubfiz	x2, x8, #2, #31
	mov	w1, wzr
	bl	memset
.LBB27_546:                             // %ggml_vec_set_f32.exit.i.i466
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_548
// %bb.547:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_548:                             // %ggml_barrier.exit.i.i467
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	mul	x8, x8, x20
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	add	x9, x8, x10
	sub	x9, x9, #1
	sdiv	x9, x9, x10
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	mul	x10, x9, x10
	add	x9, x10, x9
	str	x10, [sp, #672]                 // 8-byte Folded Spill
	cmp	x9, x8
	csel	x8, x9, x8, lt
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.ge	.LBB27_7
// %bb.549:                             // %.lr.ph170.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	add	x9, x21, #16
	and	x23, x21, #0x7fffffff
	ldr	x8, [sp, #800]
	mul	x9, x9, x10
	and	x10, x21, #0x1
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	sub	x10, x23, x10
	str	x10, [sp, #704]                 // 8-byte Folded Spill
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x19, x8, x9, lsl #2
	neg	x10, x10
	add	x8, x19, #4
	str	x10, [sp, #568]                 // 8-byte Folded Spill
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	add	x8, x19, #8
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	b	.LBB27_551
	.p2align	5, , 16
.LBB27_550:                             // %._crit_edge.i.i468
                                        //   in Loop: Header=BB27_551 Depth=2
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	add	x8, x8, #1
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	cmp	x8, x9
	b.eq	.LBB27_7
.LBB27_551:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_554 Depth 3
                                        //         Child Loop BB27_558 Depth 4
                                        //         Child Loop BB27_562 Depth 4
                                        //         Child Loop BB27_565 Depth 4
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_550
// %bb.552:                             // %.lr.ph.i.i469
                                        //   in Loop: Header=BB27_551 Depth=2
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	mov	x26, xzr
	ldr	x13, [sp, #672]                 // 8-byte Folded Reload
	sdiv	x8, x13, x9
	ldr	x12, [sp, #648]                 // 8-byte Folded Reload
	ldr	x11, [sp, #632]                 // 8-byte Folded Reload
	nop
	msub	x9, x8, x9, x13
	sdiv	x10, x9, x12
	mul	x27, x10, x11
	ldr	x11, [sp, #624]                 // 8-byte Folded Reload
	nop
	msub	x9, x10, x12, x9
	mul	x28, x8, x11
	ldr	x11, [sp, #616]                 // 8-byte Folded Reload
	mul	x9, x9, x11
	ldr	x11, [sp, #584]                 // 8-byte Folded Reload
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	mul	x9, x10, x9
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldr	x9, [sp, #568]                  // 8-byte Folded Reload
	mul	x9, x9, x8
	sub	x9, x9, x10
	mul	x10, x10, x11
	ldr	x11, [sp, #576]                 // 8-byte Folded Reload
	nop
	madd	x10, x8, x11, x10
	ldr	x11, [sp, #600]                 // 8-byte Folded Reload
	mul	x24, x8, x11
	madd	x8, x12, x9, x13
	ldr	x9, [sp, #592]                  // 8-byte Folded Reload
	nop
	madd	x25, x9, x8, x10
	b	.LBB27_554
	.p2align	5, , 16
.LBB27_553:                             // %ggml_vec_mad_f32.exit.i.i470
                                        //   in Loop: Header=BB27_554 Depth=3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	add	x26, x26, #1
	cmp	x26, x8
	b.eq	.LBB27_550
.LBB27_554:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_551 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_558 Depth 4
                                        //         Child Loop BB27_562 Depth 4
                                        //         Child Loop BB27_565 Depth 4
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	mov	x1, x19
	mov	x2, x21
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	mul	x9, x26, x9
	ldr	x8, [x8, #248]
	add	x8, x8, x27
	add	x8, x8, x9
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	add	x0, x8, x28
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	ldr	x22, [x9, #248]
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x20, [x9, #248]
	blr	x8
	cmp	w21, #1
	b.lt	.LBB27_553
// %bb.555:                             // %.lr.ph.i164.i.i.preheader
                                        //   in Loop: Header=BB27_554 Depth=3
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	mul	x8, x26, x8
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x9, x22, x9
	add	x8, x9, x8
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	s0, [x8, x24]
	cmp	x23, #2
	b.hs	.LBB27_557
// %bb.556:                             //   in Loop: Header=BB27_554 Depth=3
	mov	x8, xzr
	b	.LBB27_560
	.p2align	5, , 16
.LBB27_557:                             // %vector.body212.preheader
                                        //   in Loop: Header=BB27_554 Depth=3
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	add	x8, x20, x25
	add	x8, x8, #4
	ldr	x10, [sp, #704]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_558:                             // %vector.body212
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_551 Depth=2
                                        //       Parent Loop BB27_554 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s1, s2, [x9, #-4]
	subs	x10, x10, #2
	ldp	s3, s4, [x8, #-4]
	add	x9, x9, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x8, #-4]
	add	x8, x8, #8
	b.ne	.LBB27_558
// %bb.559:                             // %middle.block205
                                        //   in Loop: Header=BB27_554 Depth=3
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_553
.LBB27_560:                             // %.lr.ph.i164.i.i.preheader519
                                        //   in Loop: Header=BB27_554 Depth=3
	sub	w9, w21, w8
	mov	x10, x8
	ands	x9, x9, #0x3
	b.eq	.LBB27_563
// %bb.561:                             // %.lr.ph.i164.i.i.prol.preheader
                                        //   in Loop: Header=BB27_554 Depth=3
	add	x10, x20, x25
	add	x11, x10, x8, lsl #2
	mov	x10, x8
	.p2align	5, , 16
.LBB27_562:                             // %.lr.ph.i164.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_551 Depth=2
                                        //       Parent Loop BB27_554 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s1, [x19, x10, lsl #2]
	add	x10, x10, #1
	subs	x9, x9, #1
	ldr	s2, [x11]
	fmadd	s1, s1, s0, s2
	str	s1, [x11], #4
	b.ne	.LBB27_562
.LBB27_563:                             // %.lr.ph.i164.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_554 Depth=3
	sub	x8, x8, x23
	cmn	x8, #4
	b.hi	.LBB27_553
// %bb.564:                             // %.lr.ph.i164.i.i.preheader1515
                                        //   in Loop: Header=BB27_554 Depth=3
	ldr	x11, [sp, #680]                 // 8-byte Folded Reload
	add	x9, x20, x25
	sub	x8, x23, x10
	add	x9, x9, x10, lsl #2
	add	x9, x9, #8
	add	x10, x11, x10, lsl #2
	.p2align	5, , 16
.LBB27_565:                             // %.lr.ph.i164.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_551 Depth=2
                                        //       Parent Loop BB27_554 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldur	s1, [x10, #-8]
	subs	x8, x8, #4
	ldp	s2, s3, [x9, #-8]
	fmadd	s1, s1, s0, s2
	stur	s1, [x9, #-8]
	ldur	s1, [x10, #-4]
	fmadd	s1, s1, s0, s3
	ldp	s2, s3, [x9]
	stur	s1, [x9, #-4]
	ldr	s1, [x10]
	fmadd	s1, s1, s0, s2
	str	s1, [x9]
	ldr	s1, [x10, #4]
	add	x10, x10, #16
	fmadd	s1, s1, s0, s3
	str	s1, [x9, #4]
	add	x9, x9, #16
	b.ne	.LBB27_565
	b	.LBB27_553
.LBB27_566:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	ldr	x21, [x19, #152]
	ldr	w8, [x21]
	cbnz	w8, .LBB27_2609
// %bb.567:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x21
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_568
	b	.LBB27_2610
.LBB27_568:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_569
	b	.LBB27_2611
.LBB27_569:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x21
	mov	x1, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_570
	b	.LBB27_2612
.LBB27_570:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	s8, [x19, #84]
	mov	x0, x21
	ldrsw	x19, [sp, #784]
	ldr	w22, [sp, #788]
	ldr	x20, [x21, #16]
	bl	ggml_nrows
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w8, w8, w22
	smull	x22, w19, w8
	add	w8, w22, w8
	cmp	w8, w0
	csel	w8, w8, w0, lt
	cmp	w22, w8
	b.ge	.LBB27_7
// %bb.571:                             // %.lr.ph.i.i446
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x21, #56]
	sxtw	x26, w8
	and	x25, x20, #0x7fffffff
	sbfiz	x10, x20, #2, #32
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	str	x9, [sp, #760]                  // 8-byte Folded Spill
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x24, [x9, #56]
	ldr	x8, [x9, #248]
	and	x9, x20, #0x1
	sub	x28, x25, x9
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	mul	x27, x24, x22
	add	x23, x27, #4
	add	x19, x27, #8
	b	.LBB27_573
	.p2align	5, , 16
.LBB27_572:                             // %ggml_vec_scale_f32.exit.i.i453
                                        //   in Loop: Header=BB27_573 Depth=2
	add	x22, x22, #1
	add	x23, x23, x24
	add	x27, x27, x24
	add	x19, x19, x24
	cmp	x22, x26
	b.eq	.LBB27_7
.LBB27_573:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_579 Depth 3
                                        //       Child Loop BB27_583 Depth 3
                                        //       Child Loop BB27_586 Depth 3
	ldr	x9, [x21, #248]
	cmp	x8, x9
	b.eq	.LBB27_575
// %bb.574:                             //   in Loop: Header=BB27_573 Depth=2
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	mul	x10, x22, x24
	madd	x1, x22, x11, x9
	ldr	x2, [sp, #752]                  // 8-byte Folded Reload
	add	x0, x8, x10
	bl	memcpy
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x8, #248]
.LBB27_575:                             // %._crit_edge45.i.i
                                        //   in Loop: Header=BB27_573 Depth=2
	cmp	w20, #1
	b.lt	.LBB27_572
// %bb.576:                             // %.lr.ph.i.i.i456.preheader
                                        //   in Loop: Header=BB27_573 Depth=2
	cmp	x25, #2
	b.hs	.LBB27_578
// %bb.577:                             //   in Loop: Header=BB27_573 Depth=2
	mov	x9, xzr
	b	.LBB27_581
.LBB27_578:                             // %vector.body252.preheader
                                        //   in Loop: Header=BB27_573 Depth=2
	add	x9, x8, x23
	mov	x10, x28
	.p2align	5, , 16
.LBB27_579:                             // %vector.body252
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_573 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x9, #-4]
	subs	x10, x10, #2
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	stp	s0, s1, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_579
// %bb.580:                             // %middle.block245
                                        //   in Loop: Header=BB27_573 Depth=2
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	mov	x9, x28
	cbz	x10, .LBB27_572
.LBB27_581:                             // %.lr.ph.i.i.i456.preheader525
                                        //   in Loop: Header=BB27_573 Depth=2
	sub	w10, w20, w9
	ands	x11, x10, #0x3
	mov	x10, x9
	b.eq	.LBB27_584
// %bb.582:                             // %.lr.ph.i.i.i456.prol.preheader
                                        //   in Loop: Header=BB27_573 Depth=2
	add	x12, x8, x27
	mov	x10, x9
	.p2align	5, , 16
.LBB27_583:                             // %.lr.ph.i.i.i456.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_573 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x12, x10, lsl #2]
	subs	x11, x11, #1
	fmul	s0, s8, s0
	str	s0, [x12, x10, lsl #2]
	add	x10, x10, #1
	b.ne	.LBB27_583
.LBB27_584:                             // %.lr.ph.i.i.i456.prol.loopexit
                                        //   in Loop: Header=BB27_573 Depth=2
	sub	x9, x9, x25
	cmn	x9, #4
	b.hi	.LBB27_572
// %bb.585:                             // %.lr.ph.i.i.i456.preheader525.new
                                        //   in Loop: Header=BB27_573 Depth=2
	sub	x9, x25, x10
	add	x10, x19, x10, lsl #2
	add	x10, x8, x10
	.p2align	5, , 16
.LBB27_586:                             // %.lr.ph.i.i.i456
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_573 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x10, #-8]
	subs	x9, x9, #4
	ldp	s2, s3, [x10]
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	fmul	s2, s8, s2
	stp	s0, s1, [x10, #-8]
	fmul	s0, s8, s3
	stp	s2, s0, [x10], #16
	b.ne	.LBB27_586
	b	.LBB27_572
.LBB27_587:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x24, #152]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	w8, [x8]
	cmp	w8, #26
	b.eq	.LBB27_1786
// %bb.588:                             //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2739
// %bb.589:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	mov	x1, x24
	ldr	x20, [x24, #160]
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_590
	b	.LBB27_2740
.LBB27_590:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x24
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_591
	b	.LBB27_2613
.LBB27_591:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_592
	b	.LBB27_2613
.LBB27_592:                             //   in Loop: Header=BB27_3 Depth=1
	ldpsw	x9, x8, [x24, #84]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	ldpsw	x9, x8, [x24, #92]
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	w8, [x24, #100]
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	cbnz	w8, .LBB27_597
// %bb.593:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_595
// %bb.594:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	mov	x0, x24
	ldr	x21, [x24, #248]
	ldr	x22, [x8, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x21
	mov	x1, x22
	bl	memcpy
.LBB27_595:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_597
// %bb.596:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_597:                             // %ggml_barrier.exit.i.i429
                                        //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x8, [sp, #784]
	mov	x0, x20
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	w23, [sp, #788]
	bl	ggml_nrows
	mov	x21, x0
	ldp	x19, x8, [x20, #32]
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldp	x22, x26, [x20, #16]
	ldp	x25, x27, [x20, #48]
	ldp	x28, x24, [x20, #64]
	bl	ggml_element_size
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	subs	x8, x22, #1
	str	x19, [sp, #760]                 // 8-byte Folded Spill
	ldr	x13, [sp, #728]                 // 8-byte Folded Reload
	csel	x8, xzr, x8, lo
	subs	x9, x26, #1
	csel	x9, xzr, x9, lo
	subs	x10, x19, #1
	ldr	x11, [sp, #720]                 // 8-byte Folded Reload
	csel	x10, xzr, x10, lo
	sxtw	x8, w8
	smaddl	x9, w9, w12, x13
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	subs	x11, x11, #1
	csel	x11, xzr, x11, lo
	smaddl	x9, w10, w12, x9
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	nop
	smaddl	x9, w11, w10, x9
	madd	x19, x0, x8, x9
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	ggml_nbytes
	cmp	x19, x0
	b.hi	.LBB27_2741
// %bb.598:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	x25, #4
	b.ne	.LBB27_2742
// %bb.599:                             //   in Loop: Header=BB27_3 Depth=1
	add	w8, w23, w21
	ldr	x25, [sp, #744]                 // 8-byte Folded Reload
	sub	w8, w8, #1
	ldr	x30, [sp, #736]                 // 8-byte Folded Reload
	sdiv	w9, w8, w23
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x23, [sp, #752]                 // 8-byte Folded Reload
	smull	x8, w8, w9
	add	w9, w8, w9
	cmp	w9, w21
	csel	w10, w9, w21, lt
	cmp	w8, w10
	b.ge	.LBB27_7
// %bb.600:                             // %.lr.ph.i.i433
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	and	x13, x22, #0x7fffffff
	and	x12, x22, #0x7
	ldr	x17, [sp, #760]                 // 8-byte Folded Reload
	sxtw	x10, w10
	mul	x9, x17, x26
	ldr	x15, [x11, #248]
	ldr	x16, [sp, #728]                 // 8-byte Folded Reload
	ldr	x14, [x20, #248]
	sub	x11, x13, #1
	sub	x13, x12, x13
	neg	w17, w17
	add	x0, x14, #16
	add	x15, x15, x16
	add	x16, x15, #16
	b	.LBB27_602
.LBB27_601:                             // %ggml_vec_cpy_f32.exit.i.i437
                                        //   in Loop: Header=BB27_602 Depth=2
	add	x8, x8, #1
	cmp	x8, x10
	b.eq	.LBB27_7
.LBB27_602:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_606 Depth 3
                                        //       Child Loop BB27_610 Depth 3
	cmp	w22, #1
	b.lt	.LBB27_601
// %bb.603:                             // %.lr.ph.i.i.i440.preheader
                                        //   in Loop: Header=BB27_602 Depth=2
	sdiv	x1, x8, x9
	sxtw	x2, w1
	msub	x3, x2, x9, x8
	sdiv	x4, x3, x26
	sxtw	x5, w4
	smull	x3, w2, w30
	mul	x2, x2, x24
	smull	x6, w5, w25
	mul	x5, x5, x28
	cmp	x11, #7
	b.hs	.LBB27_605
// %bb.604:                             //   in Loop: Header=BB27_602 Depth=2
	mov	x7, xzr
	b	.LBB27_608
.LBB27_605:                             // %.lr.ph.i.i.i440.preheader1528
                                        //   in Loop: Header=BB27_602 Depth=2
	mul	w19, w17, w1
	add	x21, x16, x3
	mov	x7, xzr
	sub	w19, w19, w4
	madd	w19, w26, w19, w8
	sxtw	x20, w19
	smaddl	x19, w23, w19, x6
	madd	x20, x27, x20, x5
	add	x19, x21, x19
	add	x21, x0, x2
	add	x20, x21, x20
	.p2align	5, , 16
.LBB27_606:                             // %.lr.ph.i.i.i440
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_602 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x20, #-16]
	sub	x7, x7, #8
	stur	s0, [x19, #-16]
	ldur	s0, [x20, #-12]
	stur	s0, [x19, #-12]
	ldur	s0, [x20, #-8]
	stur	s0, [x19, #-8]
	ldur	s0, [x20, #-4]
	stur	s0, [x19, #-4]
	ldr	s0, [x20]
	str	s0, [x19]
	ldr	s0, [x20, #4]
	str	s0, [x19, #4]
	ldr	s0, [x20, #8]
	str	s0, [x19, #8]
	ldr	s0, [x20, #12]
	add	x20, x20, #32
	str	s0, [x19, #12]
	add	x19, x19, #32
	cmp	x13, x7
	b.ne	.LBB27_606
// %bb.607:                             // %ggml_vec_cpy_f32.exit.i.i437.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_602 Depth=2
	neg	x7, x7
.LBB27_608:                             // %ggml_vec_cpy_f32.exit.i.i437.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_602 Depth=2
	cbz	x12, .LBB27_601
// %bb.609:                             // %.lr.ph.i.i.i440.epil.preheader
                                        //   in Loop: Header=BB27_602 Depth=2
	mul	w1, w17, w1
	sub	w1, w1, w4
	madd	w1, w26, w1, w8
	sxtw	x4, w1
	smaddl	x1, w23, w1, x6
	add	x1, x1, x3
	madd	x3, x27, x4, x5
	add	x1, x1, x7, lsl #2
	add	x1, x15, x1
	add	x2, x3, x2
	mov	x3, x12
	add	x2, x2, x7, lsl #2
	add	x2, x14, x2
	.p2align	5, , 16
.LBB27_610:                             // %.lr.ph.i.i.i440.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_602 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x2], #4
	subs	x3, x3, #1
	str	s0, [x1], #4
	b.ne	.LBB27_610
	b	.LBB27_601
.LBB27_611:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x11, #152]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	w8, [x8]
	cmp	w8, #35
	b.hi	.LBB27_2339
// %bb.612:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x10, #32716                     // =0x7fcc
	mov	w9, #1                          // =0x1
	movk	x10, #8447, lsl #16
	lsl	x9, x9, x8
	movk	x10, #12, lsl #32
	tst	x9, x10
	b.eq	.LBB27_2332
// %bb.613:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [sp, #760]                 // 8-byte Folded Reload
	ldr	x19, [x11, #160]
	mov	x0, x19
	ldp	x9, x8, [x21, #16]
	ldr	x24, [x11, #72]
	ldp	x27, x23, [x19, #16]
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldp	x9, x8, [x21, #56]
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [x21, #72]
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldp	x9, x8, [x19, #48]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [x19, #64]
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldp	x8, x20, [x11, #56]
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	bl	ggml_nelements
	mov	x22, x0
	ldr	w0, [x21]
	bl	ggml_get_type_traits
	ldrsw	x9, [sp, #788]
	add	x10, x22, x9
	ldrsw	x8, [sp, #784]
	sub	x10, x10, #1
	sdiv	x9, x10, x9
	smull	x25, w8, w9
	add	w8, w25, w9
	cmp	x22, w8, sxtw
	csel	w8, w8, w22, gt
	cmp	w25, w8
	b.ge	.LBB27_7
// %bb.614:                             // %.lr.ph.i.i422
                                        //   in Loop: Header=BB27_3 Depth=1
	mul	x22, x23, x27
	neg	x21, x23
	ldr	x26, [x0, #40]
	mneg	x23, x23, x27
	sxtw	x28, w8
	.p2align	5, , 16
.LBB27_615:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sdiv	x8, x25, x22
	ldr	x11, [x19, #248]
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	nop
	madd	x9, x23, x8, x25
	mul	x10, x21, x8
	sdiv	x9, x9, x27
	sub	x10, x10, x9
	madd	x10, x27, x10, x25
	madd	x11, x10, x12, x11
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	nop
	madd	x11, x9, x12, x11
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	mul	x12, x8, x12
	ldrsw	x11, [x11, x12]
	tbz	w11, #31, .LBB27_616
	b	.LBB27_2528
.LBB27_616:                             //   in Loop: Header=BB27_615 Depth=2
	ldr	x12, [sp, #728]                 // 8-byte Folded Reload
	cmp	x12, x11
	b.le	.LBB27_2528
// %bb.617:                             //   in Loop: Header=BB27_615 Depth=2
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	ldr	x13, [sp, #712]                 // 8-byte Folded Reload
	ldr	x2, [sp, #720]                  // 8-byte Folded Reload
	ldr	x12, [x12, #248]
	nop
	madd	x11, x13, x11, x12
	ldr	x12, [sp, #704]                 // 8-byte Folded Reload
	nop
	madd	x11, x9, x12, x11
	ldr	x12, [sp, #696]                 // 8-byte Folded Reload
	nop
	madd	x0, x8, x12, x11
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldr	x12, [sp, #688]                 // 8-byte Folded Reload
	ldr	x11, [x11, #248]
	nop
	madd	x10, x10, x12, x11
	madd	x9, x9, x20, x10
	madd	x1, x8, x24, x9
	blr	x26
	add	x25, x25, #1
	cmp	x28, x25
	b.ne	.LBB27_615
	b	.LBB27_7
.LBB27_618:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x22, [x8, #152]
	ldr	w8, [x22]
	cbz	w8, .LBB27_1808
// %bb.619:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2743
// %bb.620:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.621:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x23
	ldr	x19, [x23, #160]
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_622
	b	.LBB27_2744
.LBB27_622:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [x23, #248]
	mov	x0, x23
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x21
	mov	w1, wzr
	bl	memset
	ldr	x21, [x22, #16]
	mov	x0, x19
	bl	ggml_nelements
	ldr	x8, [x23, #16]
	cmp	x8, w21, sxtw
	b.ne	.LBB27_2745
// %bb.623:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x22, #48]
	cmp	x8, #2
	b.ne	.LBB27_2746
// %bb.624:                             // %.preheader.i.i410
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	w0, #1
	b.lt	.LBB27_7
// %bb.625:                             // %.lr.ph30.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x19, #248]
	and	x13, x21, #0x7fffffff
	and	x12, x21, #0x3
	mov	x8, xzr
	and	x9, x0, #0x7fffffff
	sub	x11, x13, #1
	sub	x13, x12, x13
	b	.LBB27_627
.LBB27_626:                             // %._crit_edge.i.i412
                                        //   in Loop: Header=BB27_627 Depth=2
	add	x8, x8, #1
	cmp	x8, x9
	b.eq	.LBB27_7
.LBB27_627:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_631 Depth 3
                                        //       Child Loop BB27_635 Depth 3
	cmp	w21, #1
	b.lt	.LBB27_626
// %bb.628:                             // %.lr.ph.i.i413
                                        //   in Loop: Header=BB27_627 Depth=2
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldrsw	x17, [x10, x8, lsl #2]
	ldr	x14, [x22, #248]
	ldr	x15, [x22, #56]
	ldr	x16, [x0, #248]
	ldr	x0, [x0, #56]
	mul	x17, x0, x17
	cmp	x11, #3
	b.hs	.LBB27_630
// %bb.629:                             //   in Loop: Header=BB27_627 Depth=2
	mov	x0, xzr
	b	.LBB27_633
.LBB27_630:                             // %.lr.ph.i.i413.new.preheader
                                        //   in Loop: Header=BB27_627 Depth=2
	madd	x1, x15, x8, x14
	add	x2, x16, x17
	mov	x0, xzr
	add	x2, x2, #8
	add	x1, x1, #4
	.p2align	5, , 16
.LBB27_631:                             // %.lr.ph.i.i413.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_627 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldurh	w3, [x1, #-4]
	sub	x0, x0, #4
	ldr	s0, [x20, x3, lsl #2]
	ldp	s1, s2, [x2, #-8]
	fadd	s0, s0, s1
	stur	s0, [x2, #-8]
	ldurh	w3, [x1, #-2]
	ldr	s0, [x20, x3, lsl #2]
	fadd	s0, s0, s2
	ldp	s1, s2, [x2]
	stur	s0, [x2, #-4]
	ldrh	w3, [x1]
	ldr	s0, [x20, x3, lsl #2]
	fadd	s0, s0, s1
	str	s0, [x2]
	ldrh	w3, [x1, #2]
	add	x1, x1, #8
	ldr	s0, [x20, x3, lsl #2]
	fadd	s0, s0, s2
	str	s0, [x2, #4]
	add	x2, x2, #16
	cmp	x13, x0
	b.ne	.LBB27_631
// %bb.632:                             // %._crit_edge.i.i412.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_627 Depth=2
	neg	x0, x0
.LBB27_633:                             // %._crit_edge.i.i412.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_627 Depth=2
	cbz	x12, .LBB27_626
// %bb.634:                             // %.epil.preheader915.preheader
                                        //   in Loop: Header=BB27_627 Depth=2
	mul	x15, x15, x8
	add	x17, x17, x0, lsl #2
	add	x16, x16, x17
	add	x15, x15, x0, lsl #1
	add	x14, x14, x15
	mov	x15, x12
	.p2align	5, , 16
.LBB27_635:                             // %.epil.preheader915
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_627 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w17, [x14], #2
	subs	x15, x15, #1
	ldr	s0, [x16]
	ldr	s1, [x20, x17, lsl #2]
	fadd	s0, s1, s0
	str	s0, [x16], #4
	b.ne	.LBB27_635
	b	.LBB27_626
.LBB27_636:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x25, [x8, #152]
	ldr	w8, [x25]
	cbnz	w8, .LBB27_2614
// %bb.637:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.638:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x26, [x25, #16]
	ldr	x8, [x9, #16]
	cmp	x26, x8
	b.ne	.LBB27_2747
// %bb.639:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #24]
	cmp	x26, x8
	b.ne	.LBB27_2748
// %bb.640:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x25, #24]
	cmp	x8, #1
	b.ne	.LBB27_2749
// %bb.641:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [x25, #32]
	ldr	x8, [x9, #32]
	cmp	x23, x8
	b.ne	.LBB27_2750
// %bb.642:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x25, #40]
	str	x10, [sp, #544]                 // 8-byte Folded Spill
	ldr	x8, [x9, #40]
	cmp	x10, x8
	b.ne	.LBB27_2751
// %bb.643:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x25, #48]
	cmp	x8, #4
	b.ne	.LBB27_2752
// %bb.644:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #48]
	cmp	x8, #4
	b.ne	.LBB27_2753
// %bb.645:                             // %.preheader94.i.i392
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.646:                             // %.preheader93.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldp	x27, x8, [x25, #64]
	sub	x9, x26, #1
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	and	x9, x9, #0xfffffffffffffffe
	str	xzr, [sp, #600]                 // 8-byte Folded Spill
	str	x25, [sp, #656]                 // 8-byte Folded Spill
	str	x23, [sp, #648]                 // 8-byte Folded Spill
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	lsl	x8, x26, #2
	sub	x10, x8, #4
	sub	x8, x8, #12
	str	x27, [sp, #640]                 // 8-byte Folded Spill
	str	x10, [sp, #672]                 // 8-byte Folded Spill
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldp	x11, x28, [x10, #56]
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	neg	x8, x9
	ldr	x9, [x10, #72]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	add	x8, x11, #4
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	str	x11, [sp, #616]                 // 8-byte Folded Spill
	str	x11, [sp, #576]                 // 8-byte Folded Spill
	str	x28, [sp, #624]                 // 8-byte Folded Spill
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	lsl	x8, x11, #1
	add	x9, x8, #8
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	mov	w9, #8                          // =0x8
	str	x9, [sp, #592]                  // 8-byte Folded Spill
	b	.LBB27_648
.LBB27_647:                             // %._crit_edge104.i.i
                                        //   in Loop: Header=BB27_648 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	ldr	x10, [sp, #576]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #600]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #576]                 // 8-byte Folded Spill
	ldr	x10, [sp, #584]                 // 8-byte Folded Reload
	str	x9, [sp, #600]                  // 8-byte Folded Spill
	add	x10, x10, x8
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x10, [sp, #584]                 // 8-byte Folded Spill
	ldr	x10, [sp, #592]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	str	x10, [sp, #592]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_648:                             // %.preheader93.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_651 Depth 3
                                        //         Child Loop BB27_660 Depth 4
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	cmp	x23, #1
	b.lt	.LBB27_647
// %bb.649:                             // %.preheader.lr.ph.i.i393
                                        //   in Loop: Header=BB27_648 Depth=2
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	mov	x22, xzr
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	mul	x9, x8, x9
	ldr	x10, [sp, #592]                 // 8-byte Folded Reload
	ldr	x11, [sp, #584]                 // 8-byte Folded Reload
	ldr	x12, [sp, #576]                 // 8-byte Folded Reload
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	ldr	x9, [sp, #568]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	b	.LBB27_651
	.p2align	5, , 16
.LBB27_650:                             // %._crit_edge102.i.i
                                        //   in Loop: Header=BB27_651 Depth=3
	add	x22, x22, #1
	add	x12, x12, x28
	add	x11, x11, x28
	add	x10, x10, x27
	cmp	x22, x23
	b.eq	.LBB27_647
.LBB27_651:                             // %.preheader.i.i394
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_648 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_660 Depth 4
	cmp	x26, #1
	b.lt	.LBB27_650
// %bb.652:                             // %._crit_edge.peel.i.i
                                        //   in Loop: Header=BB27_651 Depth=3
	mul	x8, x22, x28
	ldr	x19, [x24, #248]
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	add	x9, x19, x9
	ldr	x20, [x25, #248]
	add	x9, x9, x8
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	add	x8, x20, x8
	madd	x8, x22, x27, x8
	ldr	s0, [x8]
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	str	s0, [x9]
	cmp	x26, #1
	b.eq	.LBB27_650
// %bb.653:                             // %.peel.next.i.i
                                        //   in Loop: Header=BB27_651 Depth=3
	ldr	x2, [sp, #672]                  // 8-byte Folded Reload
	add	x0, x9, #4
	mov	w1, wzr
	str	x12, [sp, #720]                 // 8-byte Folded Spill
	str	x11, [sp, #728]                 // 8-byte Folded Spill
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	str	x22, [sp, #712]                 // 8-byte Folded Spill
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	str	x0, [sp, #664]                  // 8-byte Folded Spill
	bl	memset
	mov	x23, x26
	cmp	x26, #2
	b.ne	.LBB27_658
// %bb.654:                             //   in Loop: Header=BB27_651 Depth=3
	mov	w21, #1                         // =0x1
.LBB27_655:                             // %._crit_edge102.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_651 Depth=3
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	mov	x26, x23
	ldr	x25, [sp, #656]                 // 8-byte Folded Reload
	ldr	x23, [sp, #648]                 // 8-byte Folded Reload
	ldr	x27, [sp, #640]                 // 8-byte Folded Reload
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	ldr	x28, [sp, #624]                 // 8-byte Folded Reload
	ldr	x22, [sp, #712]                 // 8-byte Folded Reload
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	ldr	x12, [sp, #720]                 // 8-byte Folded Reload
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	tbz	w8, #0, .LBB27_650
// %bb.656:                             // %._crit_edge.i.i395.epil
                                        //   in Loop: Header=BB27_651 Depth=3
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	lsl	x20, x21, #2
	mov	w1, wzr
	mov	x2, x20
	madd	x22, x21, x8, x9
	mov	x0, x22
	bl	memset
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	ldr	x12, [sp, #720]                 // 8-byte Folded Reload
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldr	s0, [x8, x20]
	add	x8, x21, #1
	str	s0, [x22, x20]
	ldr	x22, [sp, #712]                 // 8-byte Folded Reload
	cmp	x26, x8
	b.le	.LBB27_650
// %bb.657:                             // %.lr.ph99.preheader.i.i.epil
                                        //   in Loop: Header=BB27_651 Depth=3
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	mov	w1, wzr
	sub	x2, x8, x20
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	nop
	madd	x0, x21, x8, x9
	bl	memset
	ldr	x12, [sp, #720]                 // 8-byte Folded Reload
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	b	.LBB27_650
.LBB27_658:                             // %._crit_edge.i.i395.preheader
                                        //   in Loop: Header=BB27_651 Depth=3
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	mov	w21, #1                         // =0x1
	add	x28, x20, x8
	ldr	x24, [sp, #720]                 // 8-byte Folded Reload
	ldr	x26, [sp, #728]                 // 8-byte Folded Reload
	ldr	x22, [sp, #608]                 // 8-byte Folded Reload
	mov	w20, #8                         // =0x8
	mov	x27, x24
	mov	x25, x26
	b	.LBB27_660
	.p2align	5, , 16
.LBB27_659:                             // %.loopexit.i.i396.1
                                        //   in Loop: Header=BB27_660 Depth=4
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	sub	x22, x22, #8
	add	x20, x20, #8
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	add	x28, x28, #8
	add	x24, x24, x8
	add	x26, x26, x8
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	add	x25, x25, x9
	add	x27, x27, x9
	add	x8, x8, x21
	cmp	x8, #1
	b.eq	.LBB27_655
.LBB27_660:                             // %._crit_edge.i.i395
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_648 Depth=2
                                        //       Parent Loop BB27_651 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	sub	x2, x20, #4
	add	x0, x19, x27
	mov	w1, wzr
	bl	memset
	ldur	s0, [x28, #-4]
	add	x8, x19, x24
	add	x9, x21, #1
	str	s0, [x8, #4]
	cmp	x23, x9
	b.le	.LBB27_662
// %bb.661:                             // %.lr.ph99.preheader.i.i
                                        //   in Loop: Header=BB27_660 Depth=4
	add	x0, x8, #8
	add	x2, x22, #4
	mov	w1, wzr
	bl	memset
.LBB27_662:                             // %.loopexit.i.i396
                                        //   in Loop: Header=BB27_660 Depth=4
	add	x0, x19, x25
	mov	w1, wzr
	mov	x2, x20
	bl	memset
	ldr	s0, [x28]
	add	x8, x19, x26
	add	x21, x21, #2
	str	s0, [x8, #8]
	cmp	x23, x21
	b.le	.LBB27_659
// %bb.663:                             // %.lr.ph99.preheader.i.i.1
                                        //   in Loop: Header=BB27_660 Depth=4
	add	x0, x8, #12
	mov	w1, wzr
	mov	x2, x22
	bl	memset
	b	.LBB27_659
.LBB27_664:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x1, #152]
	ldr	w8, [x8]
	cbnz	w8, .LBB27_2615
// %bb.665:                             // %ggml_compute_forward_diag_mask_inf.exit
                                        //   in Loop: Header=BB27_3 Depth=1
	mov	w8, #-8388608                   // =0xff800000
	add	x0, sp, #784
	fmov	s0, w8
	bl	ggml_compute_forward_diag_mask_f32
	b	.LBB27_7
.LBB27_666:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x1, #152]
	ldr	w8, [x8]
	cbnz	w8, .LBB27_2616
// %bb.667:                             // %ggml_compute_forward_diag_mask_zero.exit
                                        //   in Loop: Header=BB27_3 Depth=1
	fmov	s0, wzr
	add	x0, sp, #784
	bl	ggml_compute_forward_diag_mask_f32
	b	.LBB27_7
.LBB27_668:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x9, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2617
// %bb.669:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x26, x8, [x19, #16]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [x19, #32]
	ldp	s10, s11, [x9, #84]
	ldr	x25, [x9, #160]
	ldrsw	x21, [sp, #784]
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ucvtf	d0, w8
	ldr	w22, [sp, #788]
	bl	log2
	fcvtmu	w8, d0
	mov	w9, #1                          // =0x1
	fneg	s0, s11
	lsl	w8, w9, w8
	str	w8, [sp, #616]                  // 4-byte Folded Spill
	ucvtf	s9, w8
	fdiv	s0, s0, s9
	bl	exp2f
	fmov	s8, s0
	fmov	s0, #-0.50000000
	fmul	s0, s11, s0
	fdiv	s0, s0, s9
	bl	exp2f
	mov	x0, x19
	fmov	s9, s0
	bl	ggml_nrows
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w22
	mul	w8, w9, w21
	add	w9, w8, w9
	cmp	w9, w0
	csel	w9, w9, w0, lt
	cbz	x25, .LBB27_1988
// %bb.670:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w10, [x25]
	cmp	w10, #1
	cset	w10, eq
	str	w10, [sp, #640]                 // 4-byte Folded Spill
	b	.LBB27_1989
.LBB27_671:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [sp, #768]                 // 8-byte Folded Reload
	ldr	x19, [x21, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2618
// %bb.672:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x21, #160]
	mov	x0, x19
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_673
	b	.LBB27_2619
.LBB27_673:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_674
	b	.LBB27_2620
.LBB27_674:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x21
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_675
	b	.LBB27_2621
.LBB27_675:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_676
	b	.LBB27_2622
.LBB27_676:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_677
	b	.LBB27_2623
.LBB27_677:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	s0, [x21, #88]
	fcmp	s0, #0.0
	b.ne	.LBB27_2624
// %bb.678:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	s8, [x21, #84]
	mov	x0, x19
	ldrsw	x22, [sp, #784]
	ldr	w23, [sp, #788]
	ldr	x21, [x19, #16]
	bl	ggml_nrows
	add	w8, w23, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w23
	smull	x8, w22, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w12, w9, w0, lt
	cmp	w8, w12
	b.ge	.LBB27_7
// %bb.679:                             // %.lr.ph.i.i335
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	and	x11, x21, #0x7fffffff
	and	x14, x21, #0x3
	ldr	x4, [x19, #248]
	and	x15, x21, #0x7
	and	x16, x21, #0x1
	ldr	x9, [x19, #56]
	sxtw	x12, w12
	sub	x17, x11, #1
	ldr	x3, [x20, #248]
	sub	x0, x11, x16
	sub	x1, x14, x11
	ldr	x10, [x20, #56]
	nop
	madd	x3, x10, x8, x3
	madd	x4, x9, x8, x4
	ldr	x6, [x13, #248]
	sub	x2, x15, x11
	add	x5, x3, #8
	ldr	x13, [x13, #56]
	nop
	madd	x6, x13, x8, x6
	add	x7, x4, #8
	add	x20, x4, #16
	add	x19, x6, #16
	add	x22, x6, #4
	b	.LBB27_681
	.p2align	5, , 16
.LBB27_680:                             // %ggml_vec_scale_f32.exit.i.i339
                                        //   in Loop: Header=BB27_681 Depth=2
	add	x8, x8, #1
	add	x5, x5, x10
	add	x7, x7, x9
	add	x4, x4, x9
	add	x3, x3, x10
	add	x19, x19, x13
	add	x20, x20, x9
	add	x6, x6, x13
	add	x22, x22, x13
	cmp	x8, x12
	b.eq	.LBB27_7
.LBB27_681:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_685 Depth 3
                                        //       Child Loop BB27_688 Depth 3
                                        //       Child Loop BB27_692 Depth 3
                                        //       Child Loop BB27_695 Depth 3
                                        //       Child Loop BB27_699 Depth 3
                                        //       Child Loop BB27_703 Depth 3
                                        //       Child Loop BB27_706 Depth 3
                                        //       Child Loop BB27_710 Depth 3
                                        //       Child Loop BB27_713 Depth 3
                                        //       Child Loop BB27_717 Depth 3
                                        //       Child Loop BB27_721 Depth 3
                                        //       Child Loop BB27_724 Depth 3
	cmp	w21, #1
	b.lt	.LBB27_680
// %bb.682:                             // %.lr.ph.i.i.i342.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	cmp	x17, #3
	b.hs	.LBB27_684
// %bb.683:                             //   in Loop: Header=BB27_681 Depth=2
	mov	x25, xzr
	fmov	d0, xzr
	cbnz	x14, .LBB27_687
	b	.LBB27_689
.LBB27_684:                             // %.lr.ph.i.i.i342.preheader1549
                                        //   in Loop: Header=BB27_681 Depth=2
	fmov	d0, xzr
	mov	x23, xzr
	mov	x24, x7
	mov	x25, x5
	.p2align	5, , 16
.LBB27_685:                             // %.lr.ph.i.i.i342
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x25, #-8]
	sub	x23, x23, #4
	ldp	s3, s4, [x24, #-8]
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	ldp	s3, s4, [x24], #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	ldp	s1, s2, [x25], #16
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	fcvt	d1, s1
	fadd	d0, d0, d1
	cmp	x1, x23
	b.ne	.LBB27_685
// %bb.686:                             // %.lr.ph.i57.i.i348.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_681 Depth=2
	neg	x25, x23
	cbz	x14, .LBB27_689
.LBB27_687:                             // %.lr.ph.i.i.i342.epil.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	add	x23, x4, x25, lsl #2
	mov	x24, x14
	add	x25, x3, x25, lsl #2
	.p2align	5, , 16
.LBB27_688:                             // %.lr.ph.i.i.i342.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x25], #4
	subs	x24, x24, #1
	ldr	s2, [x23], #4
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_688
.LBB27_689:                             // %.lr.ph.i57.i.i348.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	cmp	x17, #7
	b.hs	.LBB27_691
// %bb.690:                             //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	cbnz	x15, .LBB27_694
	b	.LBB27_696
.LBB27_691:                             // %.lr.ph.i57.i.i348.preheader1548
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	mov	x24, x20
	mov	x25, x19
	.p2align	5, , 16
.LBB27_692:                             // %.lr.ph.i57.i.i348
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s1, [x24, #-16]
	sub	x23, x23, #8
	stur	s1, [x25, #-16]
	ldur	s1, [x24, #-12]
	stur	s1, [x25, #-12]
	ldur	s1, [x24, #-8]
	stur	s1, [x25, #-8]
	ldur	s1, [x24, #-4]
	stur	s1, [x25, #-4]
	ldr	s1, [x24]
	str	s1, [x25]
	ldr	s1, [x24, #4]
	str	s1, [x25, #4]
	ldr	s1, [x24, #8]
	str	s1, [x25, #8]
	ldr	s1, [x24, #12]
	add	x24, x24, #32
	str	s1, [x25, #12]
	add	x25, x25, #32
	cmp	x2, x23
	b.ne	.LBB27_692
// %bb.693:                             // %.lr.ph.i63.preheader.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_681 Depth=2
	neg	x23, x23
	cbz	x15, .LBB27_696
.LBB27_694:                             // %.lr.ph.i57.i.i348.epil.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	lsl	x23, x23, #2
	mov	x24, x15
	.p2align	5, , 16
.LBB27_695:                             // %.lr.ph.i57.i.i348.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x4, x23]
	subs	x24, x24, #1
	str	s1, [x6, x23]
	add	x23, x23, #4
	b.ne	.LBB27_695
.LBB27_696:                             // %.lr.ph.i63.preheader.i.i
                                        //   in Loop: Header=BB27_681 Depth=2
	fcvt	s0, d0
	cmp	x11, #2
	b.hs	.LBB27_698
// %bb.697:                             //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	b	.LBB27_701
.LBB27_698:                             // %vector.body329.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x23, x0
	mov	x24, x22
	.p2align	5, , 16
.LBB27_699:                             // %vector.body329
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x24, #-4]
	subs	x23, x23, #2
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	stp	s1, s2, [x24, #-4]
	add	x24, x24, #8
	b.ne	.LBB27_699
// %bb.700:                             // %middle.block322
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x23, x0
	cbz	x16, .LBB27_707
.LBB27_701:                             // %.lr.ph.i63.i.i352.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	sub	w24, w21, w23
	ands	x25, x24, #0x3
	mov	x24, x23
	b.eq	.LBB27_704
// %bb.702:                             // %.lr.ph.i63.i.i352.prol.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x24, x23
	.p2align	5, , 16
.LBB27_703:                             // %.lr.ph.i63.i.i352.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x6, x24, lsl #2]
	subs	x25, x25, #1
	fsub	s1, s1, s0
	str	s1, [x6, x24, lsl #2]
	add	x24, x24, #1
	b.ne	.LBB27_703
.LBB27_704:                             // %.lr.ph.i63.i.i352.prol.loopexit
                                        //   in Loop: Header=BB27_681 Depth=2
	sub	x23, x17, x23
	cmp	x23, #3
	b.lo	.LBB27_707
// %bb.705:                             // %.lr.ph.i63.i.i352.preheader.new
                                        //   in Loop: Header=BB27_681 Depth=2
	sub	x23, x11, x24
	lsl	x24, x24, #2
	.p2align	5, , 16
.LBB27_706:                             // %.lr.ph.i63.i.i352
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x25, x6, x24
	subs	x23, x23, #4
	add	x24, x24, #16
	ldp	s1, s2, [x25]
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	stp	s1, s2, [x25]
	ldp	s1, s2, [x25, #8]
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	stp	s1, s2, [x25, #8]
	b.ne	.LBB27_706
.LBB27_707:                             // %.lr.ph.i69.i.i356.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	cmp	x17, #3
	b.hs	.LBB27_709
// %bb.708:                             //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	cbnz	x14, .LBB27_712
	b	.LBB27_714
.LBB27_709:                             // %.lr.ph.i69.i.i356.preheader1547
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	mov	w24, #8                         // =0x8
	.p2align	5, , 16
.LBB27_710:                             // %.lr.ph.i69.i.i356
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x25, x6, x24
	add	x26, x3, x24
	ldur	s0, [x26, #-8]
	ldp	s1, s2, [x25, #-8]
	sub	x23, x23, #4
	add	x24, x24, #16
	fmul	s0, s1, s0
	stur	s0, [x25, #-8]
	ldur	s0, [x26, #-4]
	fmul	s0, s2, s0
	stur	s0, [x25, #-4]
	ldp	s0, s2, [x25]
	ldr	s1, [x26]
	fmul	s0, s0, s1
	str	s0, [x25]
	ldr	s0, [x26, #4]
	fmul	s0, s2, s0
	str	s0, [x25, #4]
	cmp	x1, x23
	b.ne	.LBB27_710
// %bb.711:                             // %.lr.ph.i75.i.i360.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_681 Depth=2
	neg	x23, x23
	cbz	x14, .LBB27_714
.LBB27_712:                             // %.lr.ph.i69.i.i356.epil.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	lsl	x23, x23, #2
	mov	x24, x14
	.p2align	5, , 16
.LBB27_713:                             // %.lr.ph.i69.i.i356.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x6, x23]
	subs	x24, x24, #1
	ldr	s1, [x3, x23]
	fmul	s0, s0, s1
	str	s0, [x6, x23]
	add	x23, x23, #4
	b.ne	.LBB27_713
.LBB27_714:                             // %.lr.ph.i75.i.i360.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	cmp	x11, #2
	b.hs	.LBB27_716
// %bb.715:                             //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	b	.LBB27_719
.LBB27_716:                             // %vector.body318.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x23, xzr
	.p2align	5, , 16
.LBB27_717:                             // %vector.body318
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x6, x23, lsl #2]
	fmul	s0, s8, s0
	ldr	s1, [x22, x23, lsl #2]
	str	s0, [x6, x23, lsl #2]
	fmul	s0, s8, s1
	str	s0, [x22, x23, lsl #2]
	add	x23, x23, #2
	cmp	x0, x23
	b.ne	.LBB27_717
// %bb.718:                             // %middle.block311
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x23, x0
	cbz	x16, .LBB27_680
.LBB27_719:                             // %.lr.ph.i75.i.i360.preheader529
                                        //   in Loop: Header=BB27_681 Depth=2
	sub	w24, w21, w23
	ands	x25, x24, #0x3
	mov	x24, x23
	b.eq	.LBB27_722
// %bb.720:                             // %.lr.ph.i75.i.i360.prol.preheader
                                        //   in Loop: Header=BB27_681 Depth=2
	mov	x24, x23
	.p2align	5, , 16
.LBB27_721:                             // %.lr.ph.i75.i.i360.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x6, x24, lsl #2]
	subs	x25, x25, #1
	fmul	s0, s8, s0
	str	s0, [x6, x24, lsl #2]
	add	x24, x24, #1
	b.ne	.LBB27_721
.LBB27_722:                             // %.lr.ph.i75.i.i360.prol.loopexit
                                        //   in Loop: Header=BB27_681 Depth=2
	sub	x23, x23, x11
	cmn	x23, #4
	b.hi	.LBB27_680
// %bb.723:                             // %.lr.ph.i75.i.i360.preheader529.new
                                        //   in Loop: Header=BB27_681 Depth=2
	sub	x23, x11, x24
	lsl	x24, x24, #2
	.p2align	5, , 16
.LBB27_724:                             // %.lr.ph.i75.i.i360
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_681 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x25, x6, x24
	subs	x23, x23, #4
	add	x24, x24, #16
	ldp	s0, s1, [x25]
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	stp	s0, s1, [x25]
	ldp	s0, s1, [x25, #8]
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	stp	s0, s1, [x25, #8]
	b.ne	.LBB27_724
	b	.LBB27_680
.LBB27_725:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x1, #152]
	ldr	w8, [x8]
	cbz	w8, .LBB27_1824
// %bb.726:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2754
// %bb.727:                             //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	w2, #1                          // =0x1
	bl	ggml_compute_forward_rope_f16
	b	.LBB27_7
.LBB27_728:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x1, #152]
	ldr	w8, [x8]
	cbz	w8, .LBB27_1825
// %bb.729:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2755
// %bb.730:                             //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	w2, wzr
	bl	ggml_compute_forward_rope_f16
	b	.LBB27_7
.LBB27_731:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x8, #152]
	ldr	w8, [x19]
	cmp	w8, #39
	b.hi	.LBB27_7
// %bb.732:                             //   in Loop: Header=BB27_3 Depth=1
	cbz	x8, .LBB27_2149
// %bb.733:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.ne	.LBB27_2289
// %bb.734:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	s8, s9, [x23, #84]
	mov	x0, x19
	ldrsw	x21, [sp, #784]
	ldrsw	x22, [sp, #788]
	bl	ggml_nrows
	ldr	x8, [x23, #48]
	cmp	x8, #2
	b.ne	.LBB27_2756
// %bb.735:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB27_2757
// %bb.736:                             // %.preheader.i7.i
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	w21, w0
	b.ge	.LBB27_7
// %bb.737:                             // %.lr.ph45.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x14, [x19, #56]
	ldr	x13, [x19, #248]
	nop
	madd	x13, x14, x21, x13
	ldr	x12, [x9, #56]
	ldr	x11, [x9, #248]
	mul	x14, x14, x22
	sxtw	x9, w0
	madd	x11, x12, x21, x11
	ldr	x8, [x19, #16]
	mul	x12, x12, x22
	and	x10, x8, #0x7fffffff
	b	.LBB27_739
.LBB27_738:                             // %._crit_edge.i10.i
                                        //   in Loop: Header=BB27_739 Depth=2
	add	x21, x21, x22
	add	x11, x11, x12
	add	x13, x13, x14
	cmp	x21, x9
	b.ge	.LBB27_7
.LBB27_739:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_740 Depth 3
	mov	x15, x13
	mov	x16, x11
	mov	x17, x10
	cmp	w8, #1
	b.lt	.LBB27_738
	.p2align	5, , 16
.LBB27_740:                             // %.lr.ph.i11.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_739 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w0, [x15], #2
	mov	w2, #125829120                  // =0x7800000
	mov	w4, #-16777216                  // =0xff000000
	ldr	s0, [x20, x0, lsl #2]
	mov	w0, #2004877312                 // =0x77800000
	fmov	s2, w0
	mov	w0, #142606336                  // =0x8800000
	fcmp	s0, s9
	fcsel	s0, s0, s9, mi
	fcmp	s0, s8
	fcsel	s0, s0, s8, gt
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w0
	fmov	w0, s0
	and	w1, w0, #0x7f800000
	ubfx	w3, w0, #23, #8
	fmul	s1, s1, s2
	add	w1, w1, w2
	cmp	w3, #113
	mov	w2, #1073741824                 // =0x40000000
	csel	w1, w2, w1, lo
	fmov	s0, w1
	lsl	w1, w0, #1
	lsr	w0, w0, #31
	cmp	w1, w4
	mov	w1, #32256                      // =0x7e00
	fadd	s0, s1, s0
	fmov	w2, s0
	lsr	w3, w2, #13
	and	w2, w2, #0xfff
	and	w3, w3, #0x7c00
	add	w2, w3, w2
	csel	w1, w1, w2, hi
	subs	x17, x17, #1
	orr	w0, w1, w0, lsl #15
	strh	w0, [x16], #2
	b.ne	.LBB27_740
	b	.LBB27_738
.LBB27_741:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x10, [x9, #152]
	ldr	w8, [x10]
	cbz	w8, .LBB27_1826
// %bb.742:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2758
// %bb.743:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [x9, #160]
	ldr	w8, [x11]
	cbnz	w8, .LBB27_2759
// %bb.744:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x9]
	cbnz	w8, .LBB27_2760
// %bb.745:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #48]
	cmp	x8, #2
	b.ne	.LBB27_2761
// %bb.746:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x11, #48]
	cmp	x8, #4
	b.ne	.LBB27_2762
// %bb.747:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x24, x8, [x11, #16]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldp	x21, x27, [x10, #16]
	ldr	x22, [x10, #32]
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	w25, [sp, #784]
	ldr	w26, [sp, #788]
	ldr	x19, [x8, #24]
	ldr	x23, [x8, #56]
	mul	x8, x22, x21
	mul	x8, x8, x27
	lsl	x8, x8, #32
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	cbnz	w25, .LBB27_2251
// %bb.748:                             //   in Loop: Header=BB27_3 Depth=1
	str	w25, [sp, #712]                 // 4-byte Folded Spill
	ldp	x25, x8, [x10, #56]
	ldr	x0, [sp, #800]
	mov	w1, wzr
	str	w26, [sp, #704]                 // 4-byte Folded Spill
	ldr	x2, [sp, #792]
	str	x19, [sp, #720]                 // 8-byte Folded Spill
	str	x23, [sp, #728]                 // 8-byte Folded Spill
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	str	x11, [sp, #688]                 // 8-byte Folded Spill
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [x11, #56]
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	bl	memset
	ldr	x8, [sp, #800]
	cmp	x22, #1
	b.lt	.LBB27_2233
// %bb.749:                             // %.preheader.lr.ph.i.i318
                                        //   in Loop: Header=BB27_3 Depth=1
	mov	w10, #6                         // =0x6
	lsl	x14, x22, #1
	add	x0, x8, x22, lsl #2
	madd	x12, x22, x10, x8
	and	x10, x21, #0x7ffffffffffffffc
	mov	x9, xzr
	mul	x15, x14, x21
	mov	x19, xzr
	mov	x11, xzr
	add	x1, x8, x22, lsl #1
	and	x13, x21, #0x3
	neg	x16, x10
	lsl	x17, x22, #3
	mov	w2, #4                          // =0x4
	mov	x3, x8
	b	.LBB27_751
.LBB27_750:                             // %._crit_edge170.i.i
                                        //   in Loop: Header=BB27_751 Depth=2
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	add	x11, x11, #1
	add	x19, x19, #2
	add	x3, x3, #2
	add	x2, x2, x10
	add	x9, x9, x10
	cmp	x11, x22
	b.eq	.LBB27_2233
.LBB27_751:                             // %.preheader.i.i319
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_754 Depth 3
                                        //         Child Loop BB27_758 Depth 4
                                        //         Child Loop BB27_761 Depth 4
	cmp	x27, #1
	b.lt	.LBB27_750
// %bb.752:                             // %.lr.ph169.i.i
                                        //   in Loop: Header=BB27_751 Depth=2
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	mov	x4, xzr
	mov	x7, x3
	ldr	x10, [x10, #248]
	add	x23, x10, x2
	add	x6, x10, x9
	mov	x10, x19
	b	.LBB27_754
	.p2align	5, , 16
.LBB27_753:                             // %._crit_edge.i.i320
                                        //   in Loop: Header=BB27_754 Depth=3
	add	x4, x4, #1
	add	x10, x10, x15
	add	x23, x23, x25
	add	x7, x7, x15
	add	x6, x6, x25
	cmp	x4, x27
	b.eq	.LBB27_750
.LBB27_754:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_751 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_758 Depth 4
                                        //         Child Loop BB27_761 Depth 4
	cmp	x21, #1
	b.lt	.LBB27_753
// %bb.755:                             // %.lr.ph.i.i321.preheader
                                        //   in Loop: Header=BB27_754 Depth=3
	cmp	x21, #4
	b.hs	.LBB27_757
// %bb.756:                             //   in Loop: Header=BB27_754 Depth=3
	mov	x30, xzr
	cbnz	x13, .LBB27_760
	b	.LBB27_753
	.p2align	5, , 16
.LBB27_757:                             // %.lr.ph.i.i321.preheader1516
                                        //   in Loop: Header=BB27_754 Depth=3
	mov	x26, xzr
	mov	x5, x23
	mov	x30, x10
	.p2align	5, , 16
.LBB27_758:                             // %.lr.ph.i.i321
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_751 Depth=2
                                        //       Parent Loop BB27_754 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w28, [x5, #-4]
	sub	x26, x26, #4
	strh	w28, [x8, x30]
	ldurh	w28, [x5, #-2]
	strh	w28, [x1, x30]
	ldrh	w28, [x5]
	strh	w28, [x0, x30]
	ldrh	w28, [x5, #2]
	add	x5, x5, #8
	strh	w28, [x12, x30]
	add	x30, x30, x17
	cmp	x16, x26
	b.ne	.LBB27_758
// %bb.759:                             // %._crit_edge.i.i320.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_754 Depth=3
	neg	x30, x26
	cbz	x13, .LBB27_753
.LBB27_760:                             // %.lr.ph.i.i321.epil.preheader
                                        //   in Loop: Header=BB27_754 Depth=3
	madd	x5, x14, x30, x7
	mov	x26, x13
	add	x30, x6, x30, lsl #1
	.p2align	5, , 16
.LBB27_761:                             // %.lr.ph.i.i321.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_751 Depth=2
                                        //       Parent Loop BB27_754 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w28, [x30], #2
	subs	x26, x26, #1
	strh	w28, [x5]
	add	x5, x5, x14
	b.ne	.LBB27_761
	b	.LBB27_753
.LBB27_762:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x16, [sp, #768]                 // 8-byte Folded Reload
	ldr	w8, [x16]
	cbz	w8, .LBB27_1845
// %bb.763:                             //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2763
// %bb.764:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x16, #152]
	ldr	w9, [x8]
	cmp	w9, #1
	b.ne	.LBB27_2764
// %bb.765:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x17, [x16, #160]
	ldr	w9, [x17]
	cbnz	w9, .LBB27_2765
// %bb.766:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w12, [x16, #108]
	cmp	w12, #1
	ldr	x13, [x17, #40]
	ldp	x11, x10, [x17, #24]
	ldr	x9, [x8, #24]
	ldp	x14, x15, [x17, #56]
	csel	x12, x13, x10, eq
	ldr	x13, [x16, #32]
	csel	x10, x10, x11, eq
	csinc	x11, x11, xzr, eq
	str	x12, [sp, #592]                 // 8-byte Folded Spill
	csinc	x12, x9, xzr, eq
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	csinc	x9, x13, xzr, eq
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [x17, #72]
	csel	x13, x9, x15, eq
	csel	x9, x15, x14, eq
	ldr	x14, [x8, #48]
	cmp	x14, #2
	b.ne	.LBB27_2766
// %bb.767:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [x17, #48]
	str	x17, [sp, #696]                 // 8-byte Folded Spill
	cmp	x14, #4
	b.ne	.LBB27_2767
// %bb.768:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #592]                 // 8-byte Folded Reload
	cmp	x10, #1
	b.lt	.LBB27_7
// %bb.769:                             // %.preheader175.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	str	xzr, [sp, #600]                 // 8-byte Folded Spill
	ldr	x8, [x8, #16]
	mul	x17, x12, x8
	ldr	x16, [x10, #16]
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldrsw	x6, [sp, #784]
	lsl	x24, x8, #1
	str	x6, [sp, #736]                  // 8-byte Folded Spill
	lsl	x0, x17, #1
	ldr	x15, [x10, #248]
	ldr	x1, [x10, #24]
	ldpsw	x2, x3, [x10, #84]
	ldrsw	x4, [sp, #788]
	smull	x28, w4, w9
	mul	x23, x0, x4
	madd	x15, x0, x6, x15
	str	x1, [sp, #728]                  // 8-byte Folded Spill
	ldpsw	x14, x5, [x10, #92]
	str	x5, [sp, #632]                  // 8-byte Folded Spill
	str	x3, [sp, #640]                  // 8-byte Folded Spill
	ldpsw	x19, x20, [x10, #100]
	sxtw	x10, w13
	str	x10, [sp, #584]                 // 8-byte Folded Spill
	smull	x13, w6, w9
	lsl	x9, x19, #2
	str	x2, [sp, #720]                  // 8-byte Folded Spill
	str	x15, [sp, #616]                 // 8-byte Folded Spill
	ldr	x15, [sp, #760]                 // 8-byte Folded Reload
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	mul	x15, x17, x15
	lsl	x15, x15, #1
	str	x15, [sp, #712]                 // 8-byte Folded Spill
	mul	x15, x15, x1
	str	x15, [sp, #656]                 // 8-byte Folded Spill
	mul	x10, x15, x10
	lsl	x15, x16, #2
	msub	x13, x15, x5, x13
	mul	x30, x15, x20
	str	x10, [sp, #576]                 // 8-byte Folded Spill
	sub	x10, x13, x14, lsl #2
	str	x10, [sp, #608]                 // 8-byte Folded Spill
	mul	x10, x15, x3
	str	x10, [sp, #648]                 // 8-byte Folded Spill
	lsl	x10, x2, #2
	str	x10, [sp, #704]                 // 8-byte Folded Spill
	neg	x10, x14
	str	x10, [sp, #624]                 // 8-byte Folded Spill
	b	.LBB27_771
.LBB27_770:                             // %._crit_edge193.i.i
                                        //   in Loop: Header=BB27_771 Depth=2
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	ldr	x14, [sp, #576]                 // 8-byte Folded Reload
	add	x10, x10, x14
	ldr	x14, [sp, #608]                 // 8-byte Folded Reload
	ldr	x13, [sp, #600]                 // 8-byte Folded Reload
	add	x13, x13, #1
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	ldr	x10, [sp, #584]                 // 8-byte Folded Reload
	str	x13, [sp, #600]                 // 8-byte Folded Spill
	add	x14, x14, x10
	ldr	x10, [sp, #592]                 // 8-byte Folded Reload
	str	x14, [sp, #608]                 // 8-byte Folded Spill
	cmp	x13, x10
	b.eq	.LBB27_7
.LBB27_771:                             // %.preheader175.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_774 Depth 3
                                        //         Child Loop BB27_777 Depth 4
                                        //           Child Loop BB27_780 Depth 5
                                        //             Child Loop BB27_783 Depth 6
                                        //               Child Loop BB27_786 Depth 7
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	cmp	x10, #1
	b.lt	.LBB27_770
// %bb.772:                             // %.preheader174.lr.ph.i.i
                                        //   in Loop: Header=BB27_771 Depth=2
	ldr	x10, [sp, #608]                 // 8-byte Folded Reload
	str	xzr, [sp, #688]                 // 8-byte Folded Spill
	str	x10, [sp, #680]                 // 8-byte Folded Spill
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	str	x10, [sp, #672]                 // 8-byte Folded Spill
	b	.LBB27_774
	.p2align	5, , 16
.LBB27_773:                             // %._crit_edge190.i.i
                                        //   in Loop: Header=BB27_774 Depth=3
	ldr	x10, [sp, #656]                 // 8-byte Folded Reload
	ldr	x14, [sp, #672]                 // 8-byte Folded Reload
	add	x14, x14, x10
	ldr	x10, [sp, #648]                 // 8-byte Folded Reload
	ldr	x13, [sp, #688]                 // 8-byte Folded Reload
	add	x13, x13, #1
	str	x14, [sp, #672]                 // 8-byte Folded Spill
	ldr	x14, [sp, #680]                 // 8-byte Folded Reload
	str	x13, [sp, #688]                 // 8-byte Folded Spill
	add	x14, x14, x10
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	cmp	x13, x10
	b.eq	.LBB27_770
.LBB27_774:                             // %.preheader174.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_771 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_777 Depth 4
                                        //           Child Loop BB27_780 Depth 5
                                        //             Child Loop BB27_783 Depth 6
                                        //               Child Loop BB27_786 Depth 7
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cmp	x10, #1
	b.lt	.LBB27_773
// %bb.775:                             // %.lr.ph189.i.i
                                        //   in Loop: Header=BB27_774 Depth=3
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	mov	x14, xzr
	ldr	x13, [sp, #688]                 // 8-byte Folded Reload
	mul	x13, x13, x10
	ldr	x10, [sp, #632]                 // 8-byte Folded Reload
	ldr	x0, [sp, #624]                  // 8-byte Folded Reload
	sub	x1, x13, x10
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	str	x10, [sp, #768]                 // 8-byte Folded Spill
	ldr	x10, [sp, #672]                 // 8-byte Folded Reload
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	b	.LBB27_777
	.p2align	5, , 16
.LBB27_776:                             // %._crit_edge186.i.i
                                        //   in Loop: Header=BB27_777 Depth=4
	ldr	x10, [sp, #712]                 // 8-byte Folded Reload
	ldr	x13, [sp, #752]                 // 8-byte Folded Reload
	add	x13, x13, x10
	ldr	x10, [sp, #704]                 // 8-byte Folded Reload
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	add	x14, x14, #1
	str	x13, [sp, #752]                 // 8-byte Folded Spill
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	add	x13, x13, x10
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	str	x13, [sp, #768]                 // 8-byte Folded Spill
	add	x0, x0, x10
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cmp	x14, x10
	b.eq	.LBB27_773
.LBB27_777:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_771 Depth=2
                                        //       Parent Loop BB27_774 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_780 Depth 5
                                        //             Child Loop BB27_783 Depth 6
                                        //               Child Loop BB27_786 Depth 7
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	str	x14, [sp, #744]                 // 8-byte Folded Spill
	ldr	x13, [sp, #736]                 // 8-byte Folded Reload
	cmp	x10, x13
	b.le	.LBB27_776
// %bb.778:                             // %.lr.ph185.i.i
                                        //   in Loop: Header=BB27_777 Depth=4
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	ldr	x22, [sp, #752]                 // 8-byte Folded Reload
	ldr	x3, [sp, #736]                  // 8-byte Folded Reload
	ldr	x13, [x10, #248]
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	add	x6, x13, x10
	b	.LBB27_780
	.p2align	5, , 16
.LBB27_779:                             // %._crit_edge181.i.i
                                        //   in Loop: Header=BB27_780 Depth=5
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	add	x3, x3, x4
	add	x22, x22, x23
	add	x6, x6, x28
	cmp	x3, x10
	b.ge	.LBB27_776
.LBB27_780:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_771 Depth=2
                                        //       Parent Loop BB27_774 Depth=3
                                        //         Parent Loop BB27_777 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_783 Depth 6
                                        //               Child Loop BB27_786 Depth 7
	cmp	x12, #1
	b.lt	.LBB27_779
// %bb.781:                             // %.preheader.lr.ph.i.i290
                                        //   in Loop: Header=BB27_780 Depth=5
	mov	x2, xzr
	mov	x26, x6
	mov	x13, x22
	b	.LBB27_783
	.p2align	5, , 16
.LBB27_782:                             // %._crit_edge.i.i292
                                        //   in Loop: Header=BB27_783 Depth=6
	add	x2, x2, #1
	add	x13, x13, x24
	add	x26, x26, x30
	cmp	x2, x12
	b.eq	.LBB27_779
.LBB27_783:                             // %.preheader.i.i291
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_771 Depth=2
                                        //       Parent Loop BB27_774 Depth=3
                                        //         Parent Loop BB27_777 Depth=4
                                        //           Parent Loop BB27_780 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_786 Depth 7
	cmp	x8, #1
	b.lt	.LBB27_782
// %bb.784:                             // %.lr.ph.i.i293
                                        //   in Loop: Header=BB27_783 Depth=6
	mul	x15, x2, x20
	mov	x21, x0
	mov	x7, x26
	mov	x5, x13
	add	x17, x15, x1
	mov	x15, x8
	b	.LBB27_786
	.p2align	5, , 16
.LBB27_785:                             //   in Loop: Header=BB27_786 Depth=7
	subs	x15, x15, #1
	add	x7, x7, x9
	add	x21, x21, x19
	strh	w25, [x5], #2
	b.eq	.LBB27_782
.LBB27_786:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_771 Depth=2
                                        //       Parent Loop BB27_774 Depth=3
                                        //         Parent Loop BB27_777 Depth=4
                                        //           Parent Loop BB27_780 Depth=5
                                        //             Parent Loop BB27_783 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	mov	w25, wzr
	tbnz	x17, #63, .LBB27_785
// %bb.787:                             //   in Loop: Header=BB27_786 Depth=7
	cmp	x17, x11
	b.ge	.LBB27_785
// %bb.788:                             //   in Loop: Header=BB27_786 Depth=7
	tbnz	x21, #63, .LBB27_785
// %bb.789:                             //   in Loop: Header=BB27_786 Depth=7
	cmp	x21, x16
	b.ge	.LBB27_785
// %bb.790:                             //   in Loop: Header=BB27_786 Depth=7
	ldr	s0, [x7]
	mov	w25, #2004877312                // =0x77800000
	mov	w10, #125829120                 // =0x7800000
	fmov	s2, w25
	mov	w25, #142606336                 // =0x8800000
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w25
	fmov	w25, s0
	and	w14, w25, #0x7f800000
	fmul	s1, s1, s2
	lsl	w27, w25, #1
	add	w10, w14, w10
	ubfx	w14, w25, #23, #8
	cmp	w14, #113
	mov	w14, #1073741824                // =0x40000000
	csel	w10, w14, w10, lo
	fmov	s0, w10
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w14, w10, #13
	and	w10, w10, #0xfff
	and	w14, w14, #0x7c00
	add	w10, w14, w10
	lsr	w14, w25, #31
	mov	w25, #-16777216                 // =0xff000000
	cmp	w27, w25
	mov	w25, #32256                     // =0x7e00
	csel	w10, w25, w10, hi
	orr	w25, w10, w14, lsl #15
	b	.LBB27_785
.LBB27_791:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x0, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2625
// %bb.792:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x0, #160]
	ldr	w9, [x10]
	cbnz	w9, .LBB27_2626
// %bb.793:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [x0]
	cbnz	w9, .LBB27_2627
// %bb.794:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [x0, #108]
	cmp	w9, #1
	ldr	x11, [x8, #32]
	ldp	x12, x13, [x0, #24]
	ldp	x14, x15, [x0, #40]
	csel	x1, x14, x13, eq
	ldr	x14, [x10, #24]
	csel	x13, x13, x12, eq
	csinc	x12, x12, xzr, eq
	ldp	x16, x17, [x0, #56]
	csel	x16, x17, x16, eq
	str	x13, [sp, #728]                 // 8-byte Folded Spill
	str	x12, [sp, #760]                 // 8-byte Folded Spill
	csinc	x13, x14, xzr, eq
	csinc	x14, x11, xzr, eq
	ldr	x11, [x0, #72]
	csel	x11, x11, x17, eq
	cmp	x15, #4
	b.ne	.LBB27_2628
// %bb.795:                             //   in Loop: Header=BB27_3 Depth=1
	str	x1, [sp, #672]                  // 8-byte Folded Spill
	cmp	x1, #1
	b.lt	.LBB27_7
// %bb.796:                             // %.lr.ph226.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [x10, #16]
	sxtw	x11, w11
	mov	x15, xzr
	ldr	x12, [sp, #728]                 // 8-byte Folded Reload
	str	x11, [sp, #656]                 // 8-byte Folded Spill
	sxtw	x11, w16
	ldrsw	x0, [sp, #784]
	str	x11, [sp, #696]                 // 8-byte Folded Spill
	str	xzr, [sp, #688]                 // 8-byte Folded Spill
	ldrsw	x6, [sp, #788]
	mul	x10, x13, x1
	ldr	x2, [x8, #24]
	lsl	x27, x1, #2
	str	x0, [sp, #680]                  // 8-byte Folded Spill
	str	x6, [sp, #720]                  // 8-byte Folded Spill
	mul	x17, x12, x10
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	lsl	x10, x10, #2
	mul	x11, x10, x0
	mul	x10, x10, x6
	ldrsw	x7, [x12, #92]
	ldpsw	x4, x5, [x12, #84]
	ldr	x3, [x12, #16]
	ldrsw	x20, [x12, #104]
	lsl	x24, x17, #2
	str	x11, [sp, #648]                 // 8-byte Folded Spill
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	str	x7, [sp, #752]                  // 8-byte Folded Spill
	ldpsw	x7, x19, [x12, #96]
	ldr	x12, [x12, #248]
	str	x12, [sp, #664]                 // 8-byte Folded Spill
	str	x7, [sp, #744]                  // 8-byte Folded Spill
	b	.LBB27_798
	.p2align	5, , 16
.LBB27_797:                             // %._crit_edge220.i
                                        //   in Loop: Header=BB27_798 Depth=2
	ldr	x11, [sp, #688]                 // 8-byte Folded Reload
	add	x15, x15, x14
	add	x11, x11, #1
	ldr	x10, [sp, #672]                 // 8-byte Folded Reload
	str	x11, [sp, #688]                 // 8-byte Folded Spill
	cmp	x11, x10
	b.eq	.LBB27_7
.LBB27_798:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_801 Depth 3
                                        //         Child Loop BB27_804 Depth 4
                                        //           Child Loop BB27_808 Depth 5
                                        //             Child Loop BB27_811 Depth 6
                                        //               Child Loop BB27_815 Depth 7
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	ldr	x11, [sp, #680]                 // 8-byte Folded Reload
	cmp	x10, x11
	b.le	.LBB27_797
// %bb.799:                             // %.preheader186.lr.ph.i
                                        //   in Loop: Header=BB27_798 Depth=2
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	ldr	x11, [sp, #664]                 // 8-byte Folded Reload
	ldr	x12, [sp, #656]                 // 8-byte Folded Reload
	nop
	madd	x10, x10, x12, x11
	ldr	x0, [sp, #648]                  // 8-byte Folded Reload
	str	x10, [sp, #704]                 // 8-byte Folded Spill
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	b	.LBB27_801
	.p2align	5, , 16
.LBB27_800:                             // %._crit_edge215.i
                                        //   in Loop: Header=BB27_801 Depth=3
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	ldr	x11, [sp, #736]                 // 8-byte Folded Reload
	add	x11, x11, x10
	ldr	x10, [sp, #712]                 // 8-byte Folded Reload
	str	x11, [sp, #736]                 // 8-byte Folded Spill
	add	x0, x0, x10
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cmp	x11, x10
	b.ge	.LBB27_797
.LBB27_801:                             // %.preheader186.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_798 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_804 Depth 4
                                        //           Child Loop BB27_808 Depth 5
                                        //             Child Loop BB27_811 Depth 6
                                        //               Child Loop BB27_815 Depth 7
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	cmp	x10, #1
	b.lt	.LBB27_800
// %bb.802:                             // %.preheader185.lr.ph.i
                                        //   in Loop: Header=BB27_801 Depth=3
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	mov	x22, xzr
	ldr	x11, [sp, #704]                 // 8-byte Folded Reload
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	nop
	madd	x10, x12, x10, x11
	str	x10, [sp, #768]                 // 8-byte Folded Spill
	b	.LBB27_804
	.p2align	5, , 16
.LBB27_803:                             // %._crit_edge209.i
                                        //   in Loop: Header=BB27_804 Depth=4
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	add	x22, x22, #1
	cmp	x22, x10
	b.eq	.LBB27_800
.LBB27_804:                             // %.preheader185.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_798 Depth=2
                                        //       Parent Loop BB27_801 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_808 Depth 5
                                        //             Child Loop BB27_811 Depth 6
                                        //               Child Loop BB27_815 Depth 7
	cmp	x3, #1
	b.lt	.LBB27_803
// %bb.805:                             // %.preheader184.lr.ph.i
                                        //   in Loop: Header=BB27_804 Depth=4
	ldr	x11, [sp, #744]                 // 8-byte Folded Reload
	mov	x10, xzr
	add	x21, x22, x11
	mul	x11, x22, x3
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	ldr	x23, [sp, #752]                 // 8-byte Folded Reload
	add	x16, x12, x11, lsl #2
	b	.LBB27_808
	.p2align	5, , 16
.LBB27_806:                             //   in Loop: Header=BB27_808 Depth=5
	fmov	s0, wzr
.LBB27_807:                             // %._crit_edge202.i
                                        //   in Loop: Header=BB27_808 Depth=5
	str	s0, [x16, x10, lsl #2]
	add	x10, x10, #1
	add	x23, x23, #1
	cmp	x10, x3
	b.eq	.LBB27_803
.LBB27_808:                             // %.preheader184.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_798 Depth=2
                                        //       Parent Loop BB27_801 Depth=3
                                        //         Parent Loop BB27_804 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_811 Depth 6
                                        //               Child Loop BB27_815 Depth 7
	cmp	x13, #1
	b.lt	.LBB27_806
// %bb.809:                             // %.preheader.lr.ph.i283
                                        //   in Loop: Header=BB27_808 Depth=5
	fmov	s0, wzr
	mov	x28, xzr
	mov	x11, x0
	b	.LBB27_811
	.p2align	5, , 16
.LBB27_810:                             // %._crit_edge.i285
                                        //   in Loop: Header=BB27_811 Depth=6
	add	x28, x28, #1
	add	x11, x11, x27
	cmp	x28, x13
	b.eq	.LBB27_807
.LBB27_811:                             // %.preheader.i284
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_798 Depth=2
                                        //       Parent Loop BB27_801 Depth=3
                                        //         Parent Loop BB27_804 Depth=4
                                        //           Parent Loop BB27_808 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_815 Depth 7
	cmp	x1, #1
	b.lt	.LBB27_810
// %bb.812:                             // %.lr.ph.i286
                                        //   in Loop: Header=BB27_811 Depth=6
	msub	x26, x28, x20, x21
	mov	x17, x1
	mov	x30, x11
	mov	x6, x23
	b	.LBB27_815
.LBB27_813:                             //   in Loop: Header=BB27_815 Depth=7
	sdiv	x25, x26, x5
	msub	x12, x25, x5, x26
	cbz	x12, .LBB27_818
	.p2align	5, , 16
.LBB27_814:                             //   in Loop: Header=BB27_815 Depth=7
	sub	x6, x6, x19
	add	x30, x30, #4
	subs	x17, x17, #1
	b.eq	.LBB27_810
.LBB27_815:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_798 Depth=2
                                        //       Parent Loop BB27_801 Depth=3
                                        //         Parent Loop BB27_804 Depth=4
                                        //           Parent Loop BB27_808 Depth=5
                                        //             Parent Loop BB27_811 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	sdiv	x7, x6, x4
	msub	x25, x7, x4, x6
	cbnz	x25, .LBB27_814
// %bb.816:                             //   in Loop: Header=BB27_815 Depth=7
	cmp	w9, #1
	b.eq	.LBB27_813
// %bb.817:                             //   in Loop: Header=BB27_815 Depth=7
	mov	x25, xzr
.LBB27_818:                             // %.thread.i
                                        //   in Loop: Header=BB27_815 Depth=7
	tbnz	x7, #63, .LBB27_814
// %bb.819:                             //   in Loop: Header=BB27_815 Depth=7
	cmp	x7, x2
	b.ge	.LBB27_814
// %bb.820:                             //   in Loop: Header=BB27_815 Depth=7
	tbnz	x25, #63, .LBB27_814
// %bb.821:                             //   in Loop: Header=BB27_815 Depth=7
	cmp	x25, x14
	b.ge	.LBB27_814
// %bb.822:                             //   in Loop: Header=BB27_815 Depth=7
	add	x25, x15, x25
	ldr	x12, [x8, #248]
	nop
	madd	x7, x2, x25, x7
	madd	x12, x24, x7, x12
	ldr	s1, [x12, x30]
	fadd	s0, s0, s1
	b	.LBB27_814
.LBB27_823:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x11, [x9, #152]
	ldr	w8, [x11]
	cmp	w8, #1
	b.ne	.LBB27_2629
// %bb.824:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x9, #160]
	ldr	w8, [x10]
	cbnz	w8, .LBB27_2630
// %bb.825:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x9]
	cbnz	w8, .LBB27_2631
// %bb.826:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x11, #48]
	cmp	x8, #2
	b.ne	.LBB27_2632
// %bb.827:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #48]
	cmp	x8, #4
	b.ne	.LBB27_2633
// %bb.828:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	x25, x8, [x10, #16]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	x8, [x10, #32]
	ldp	x21, x22, [x11, #16]
	ldp	x9, x24, [x11, #32]
	ldr	w23, [sp, #784]
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	w26, [sp, #788]
	ldr	x27, [x8, #16]
	ldr	x19, [x8, #32]
	ldr	x8, [x8, #64]
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	mul	x8, x24, x21
	mul	x8, x8, x22
	mul	x8, x8, x9
	lsl	x8, x8, #32
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	cbnz	w23, .LBB27_2078
// %bb.829:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x11, #64]
	str	x11, [sp, #640]                 // 8-byte Folded Spill
	mov	w1, wzr
	ldr	x0, [sp, #800]
	str	w26, [sp, #592]                 // 4-byte Folded Spill
	str	w23, [sp, #600]                 // 4-byte Folded Spill
	ldr	x2, [sp, #792]
	str	x19, [sp, #608]                 // 8-byte Folded Spill
	str	x10, [sp, #584]                 // 8-byte Folded Spill
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	x8, [x11, #72]
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	ldp	x11, x8, [x10, #56]
	str	x11, [sp, #576]                 // 8-byte Folded Spill
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	bl	memset
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldr	x8, [sp, #800]
	str	x8, [sp, #616]                  // 8-byte Folded Spill
	cmp	x24, #1
	b.lt	.LBB27_2064
// %bb.830:                             // %.preheader215.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #616]                 // 8-byte Folded Reload
	mov	w9, #6                          // =0x6
	lsl	x13, x24, #1
	and	x8, x21, #0x7ffffffffffffffc
	lsl	x15, x21, #1
	mul	x16, x15, x24
	neg	x17, x8
	mov	x14, xzr
	str	xzr, [sp, #712]                 // 8-byte Folded Spill
	and	x11, x21, #0x3
	lsl	x0, x24, #3
	madd	x9, x24, x9, x12
	add	x8, x12, x24, lsl #2
	str	x12, [sp, #672]                 // 8-byte Folded Spill
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	add	x8, x12, x24, lsl #1
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	mov	w8, #4                          // =0x4
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	mul	x9, x13, x21
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	mul	x9, x9, x22
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	b	.LBB27_832
.LBB27_831:                             // %._crit_edge223.i
                                        //   in Loop: Header=BB27_832 Depth=2
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	add	x8, x8, #2
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	add	x14, x14, #1
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	add	x9, x9, #2
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, #2
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	add	x9, x9, #2
	str	x9, [sp, #688]                  // 8-byte Folded Spill
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	cmp	x14, x24
	b.eq	.LBB27_2064
.LBB27_832:                             // %.preheader215.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_835 Depth 3
                                        //         Child Loop BB27_838 Depth 4
                                        //           Child Loop BB27_842 Depth 5
                                        //           Child Loop BB27_845 Depth 5
	str	x14, [sp, #664]                 // 8-byte Folded Spill
	cmp	x10, #1
	b.lt	.LBB27_831
// %bb.833:                             // %.lr.ph222.i
                                        //   in Loop: Header=BB27_832 Depth=2
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	mov	x12, xzr
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	ldr	x28, [sp, #696]                 // 8-byte Folded Reload
	ldr	x26, [sp, #704]                 // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	add	x3, x8, x9
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	add	x2, x8, x9
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	b	.LBB27_835
	.p2align	5, , 16
.LBB27_834:                             // %._crit_edge218.i
                                        //   in Loop: Header=BB27_835 Depth=3
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	add	x26, x26, x10
	ldr	x14, [sp, #752]                 // 8-byte Folded Reload
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x28, x28, x10
	add	x8, x8, x10
	add	x14, x14, x10
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	add	x12, x12, #1
	add	x3, x3, x9
	add	x2, x2, x9
	str	x14, [sp, #752]                 // 8-byte Folded Spill
	cmp	x12, x10
	b.eq	.LBB27_831
.LBB27_835:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_832 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_838 Depth 4
                                        //           Child Loop BB27_842 Depth 5
                                        //           Child Loop BB27_845 Depth 5
	str	x12, [sp, #744]                 // 8-byte Folded Spill
	cmp	x22, #1
	b.lt	.LBB27_834
// %bb.836:                             // %.preheader214.lr.ph.i
                                        //   in Loop: Header=BB27_835 Depth=3
	ldr	x6, [sp, #752]                  // 8-byte Folded Reload
	mov	x10, xzr
	mov	x9, xzr
	mov	x30, x2
	mov	x4, x8
	mov	x1, x28
	mov	x19, x3
	mov	x12, x26
	b	.LBB27_838
	.p2align	5, , 16
.LBB27_837:                             // %._crit_edge.i278
                                        //   in Loop: Header=BB27_838 Depth=4
	add	x9, x9, #1
	add	x12, x12, x16
	add	x19, x19, x15
	add	x1, x1, x16
	add	x4, x4, x16
	add	x6, x6, x16
	add	x10, x10, x21
	add	x30, x30, x15
	cmp	x9, x22
	b.eq	.LBB27_834
.LBB27_838:                             // %.preheader214.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_832 Depth=2
                                        //       Parent Loop BB27_835 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_842 Depth 5
                                        //           Child Loop BB27_845 Depth 5
	cmp	x21, #1
	b.lt	.LBB27_837
// %bb.839:                             // %.lr.ph.i279
                                        //   in Loop: Header=BB27_838 Depth=4
	cmp	x21, #4
	b.hs	.LBB27_841
// %bb.840:                             //   in Loop: Header=BB27_838 Depth=4
	mov	x7, xzr
	cbnz	x11, .LBB27_844
	b	.LBB27_837
	.p2align	5, , 16
.LBB27_841:                             // %.lr.ph.i279.new.preheader
                                        //   in Loop: Header=BB27_838 Depth=4
	mov	x14, xzr
	mov	x23, xzr
	mov	x7, x19
	.p2align	5, , 16
.LBB27_842:                             // %.lr.ph.i279.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_832 Depth=2
                                        //       Parent Loop BB27_835 Depth=3
                                        //         Parent Loop BB27_838 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldurh	w5, [x7, #-4]
	sub	x23, x23, #4
	strh	w5, [x4, x14]
	ldurh	w5, [x7, #-2]
	strh	w5, [x6, x14]
	ldrh	w5, [x7]
	strh	w5, [x1, x14]
	ldrh	w5, [x7, #2]
	add	x7, x7, #8
	strh	w5, [x12, x14]
	add	x14, x14, x0
	cmp	x17, x23
	b.ne	.LBB27_842
// %bb.843:                             // %._crit_edge.i278.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_838 Depth=4
	neg	x7, x23
	cbz	x11, .LBB27_837
.LBB27_844:                             // %.epil.preheader812.preheader
                                        //   in Loop: Header=BB27_838 Depth=4
	add	x14, x7, x10
	add	x7, x30, x7, lsl #1
	mov	x23, x11
	mul	x14, x13, x14
	.p2align	5, , 16
.LBB27_845:                             // %.epil.preheader812
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_832 Depth=2
                                        //       Parent Loop BB27_835 Depth=3
                                        //         Parent Loop BB27_838 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldrh	w5, [x7], #2
	subs	x23, x23, #1
	strh	w5, [x8, x14]
	add	x14, x14, x13
	b.ne	.LBB27_845
	b	.LBB27_837
.LBB27_846:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	w8, [x9, #96]
	cbnz	w8, .LBB27_2634
// %bb.847:                             //   in Loop: Header=BB27_3 Depth=1
	ldp	w21, w8, [x9, #88]
	cmp	w21, w8
	b.ne	.LBB27_2635
// %bb.848:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.849:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x8, #152]
	ldr	w22, [x8, #84]
	ldr	x23, [x19, #248]
	mov	x0, x19
	bl	ggml_nbytes
	cmp	x0, #1
	b.lt	.LBB27_7
// %bb.850:                             // %.preheader.lr.ph.i.i259
                                        //   in Loop: Header=BB27_3 Depth=1
	scvtf	s0, w21
	add	x8, x23, x0
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x9, [x10, #16]
	ldr	x10, [x10, #248]
	b	.LBB27_852
.LBB27_851:                             // %._crit_edge57.i.i
                                        //   in Loop: Header=BB27_852 Depth=2
	ldr	x11, [x19, #56]
	add	x10, x10, x9, lsl #2
	add	x23, x23, x11
	cmp	x23, x8
	b.hs	.LBB27_7
.LBB27_852:                             // %.preheader.i.i260
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_856 Depth 3
                                        //         Child Loop BB27_865 Depth 4
	cmp	x9, #1
	b.lt	.LBB27_851
// %bb.853:                             // %.lr.ph56.i.i
                                        //   in Loop: Header=BB27_852 Depth=2
	cmp	w22, #2
	b.eq	.LBB27_2530
// %bb.854:                             // %.lr.ph56.split.i.i.preheader
                                        //   in Loop: Header=BB27_852 Depth=2
	mov	x11, xzr
	mov	w12, wzr
	b	.LBB27_856
	.p2align	5, , 16
.LBB27_855:                             //   in Loop: Header=BB27_856 Depth=3
	add	x11, x11, #1
	cmp	x11, x9
	b.eq	.LBB27_851
.LBB27_856:                             // %.lr.ph56.split.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_852 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_865 Depth 4
	cmp	w22, #1
	b.eq	.LBB27_859
// %bb.857:                             // %.lr.ph56.split.i.i
                                        //   in Loop: Header=BB27_856 Depth=3
	cbnz	w22, .LBB27_861
// %bb.858:                             //   in Loop: Header=BB27_856 Depth=3
	mov	w13, #-8388609                  // =0xff7fffff
	fmov	s1, w13
	b	.LBB27_860
	.p2align	5, , 16
.LBB27_859:                             //   in Loop: Header=BB27_856 Depth=3
	fmov	s1, wzr
.LBB27_860:                             // %.sink.split.i.i
                                        //   in Loop: Header=BB27_856 Depth=3
	str	s1, [x10, x11, lsl #2]
.LBB27_861:                             //   in Loop: Header=BB27_856 Depth=3
	cmp	w21, #1
	b.lt	.LBB27_872
// %bb.862:                             // %.lr.ph.i.i263
                                        //   in Loop: Header=BB27_856 Depth=3
	ldr	w13, [x19]
	add	x14, x23, w12, sxtw #2
	add	x16, x23, w12, sxtw #1
	mov	w15, w21
	b	.LBB27_865
	.p2align	5, , 16
.LBB27_863:                             //   in Loop: Header=BB27_865 Depth=4
	cmp	w22, #2
	b.eq	.LBB27_2525
.LBB27_864:                             //   in Loop: Header=BB27_865 Depth=4
	add	x14, x14, #4
	add	w12, w12, #1
	add	x16, x16, #2
	subs	w15, w15, #1
	b.eq	.LBB27_872
.LBB27_865:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_852 Depth=2
                                        //       Parent Loop BB27_856 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	mov	x17, x14
	cbz	w13, .LBB27_867
// %bb.866:                             //   in Loop: Header=BB27_865 Depth=4
	ldrh	w17, [x16]
	add	x17, x20, x17, lsl #2
.LBB27_867:                             //   in Loop: Header=BB27_865 Depth=4
	ldr	s1, [x17]
	cbz	w22, .LBB27_870
// %bb.868:                             //   in Loop: Header=BB27_865 Depth=4
	cmp	w22, #1
	b.ne	.LBB27_863
// %bb.869:                             //   in Loop: Header=BB27_865 Depth=4
	ldr	s2, [x10, x11, lsl #2]
	fadd	s1, s1, s2
	b	.LBB27_871
	.p2align	5, , 16
.LBB27_870:                             //   in Loop: Header=BB27_865 Depth=4
	ldr	s2, [x10, x11, lsl #2]
	fcmp	s1, s2
	b.le	.LBB27_864
.LBB27_871:                             // %.sink.split64.i.i
                                        //   in Loop: Header=BB27_865 Depth=4
	str	s1, [x10, x11, lsl #2]
	b	.LBB27_864
	.p2align	5, , 16
.LBB27_872:                             // %._crit_edge.i.i262
                                        //   in Loop: Header=BB27_856 Depth=3
	cmp	w22, #1
	b.ne	.LBB27_855
// %bb.873:                             //   in Loop: Header=BB27_856 Depth=3
	ldr	s1, [x10, x11, lsl #2]
	fdiv	s1, s1, s0
	str	s1, [x10, x11, lsl #2]
	b	.LBB27_855
.LBB27_874:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.875:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x21, [x8, #152]
	ldr	w26, [x8, #108]
	ldp	w19, w22, [x8, #84]
	ldr	x27, [x21, #248]
	ldp	w23, w24, [x8, #92]
	mov	x0, x21
	ldp	w25, w28, [x8, #100]
	bl	ggml_nbytes
	cmp	x0, #1
	b.lt	.LBB27_7
// %bb.876:                             // %.preheader.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	add	x8, x27, x0
	mul	w12, w23, w22
	neg	w13, w28
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	scvtf	s0, w12
	ldr	x12, [x8, #248]
	ldp	x9, x10, [x8, #16]
	neg	w8, w26
	str	w8, [sp, #768]                  // 4-byte Folded Spill
	mul	x11, x10, x9
	b	.LBB27_878
.LBB27_877:                             // %._crit_edge106.i247
                                        //   in Loop: Header=BB27_878 Depth=2
	ldr	x14, [x21, #64]
	add	x12, x12, x11, lsl #2
	add	x27, x27, x14
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	x27, x8
	b.hs	.LBB27_7
.LBB27_878:                             // %.preheader.i246
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_881 Depth 3
                                        //         Child Loop BB27_886 Depth 4
                                        //           Child Loop BB27_894 Depth 5
                                        //             Child Loop BB27_900 Depth 6
	cmp	x10, #1
	b.lt	.LBB27_877
// %bb.879:                             // %.lr.ph105.i248.preheader
                                        //   in Loop: Header=BB27_878 Depth=2
	ldr	w16, [sp, #768]                 // 4-byte Folded Reload
	mov	x15, xzr
	b	.LBB27_881
	.p2align	5, , 16
.LBB27_880:                             // %._crit_edge103.i
                                        //   in Loop: Header=BB27_881 Depth=3
	add	x15, x15, #1
	add	w16, w16, w25
	cmp	x15, x10
	b.eq	.LBB27_877
.LBB27_881:                             // %.lr.ph105.i248
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_878 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_886 Depth 4
                                        //           Child Loop BB27_894 Depth 5
                                        //             Child Loop BB27_900 Depth 6
	sxtw	x16, w16
	cmp	x9, #1
	b.lt	.LBB27_880
// %bb.882:                             // %.lr.ph102.i249
                                        //   in Loop: Header=BB27_881 Depth=3
	cmp	w19, #2
	b.eq	.LBB27_2527
// %bb.883:                             // %.lr.ph102.split.preheader.i
                                        //   in Loop: Header=BB27_881 Depth=3
	mul	x14, x15, x9
	mov	x17, xzr
	mov	w4, w13
	add	x0, x12, x14, lsl #2
	neg	w14, w26
	madd	w14, w25, w15, w14
	sxtw	x1, w14
	b	.LBB27_886
	.p2align	5, , 16
.LBB27_884:                             //   in Loop: Header=BB27_886 Depth=4
	ldr	s1, [x0, x17, lsl #2]
	fdiv	s1, s1, s0
	str	s1, [x0, x17, lsl #2]
.LBB27_885:                             //   in Loop: Header=BB27_886 Depth=4
	add	x17, x17, #1
	add	w4, w2, w24
	cmp	x17, x9
	b.eq	.LBB27_880
.LBB27_886:                             // %.lr.ph102.split.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_878 Depth=2
                                        //       Parent Loop BB27_881 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_894 Depth 5
                                        //             Child Loop BB27_900 Depth 6
	cmp	w19, #1
	b.eq	.LBB27_889
// %bb.887:                             // %.lr.ph102.split.i
                                        //   in Loop: Header=BB27_886 Depth=4
	cbnz	w19, .LBB27_891
// %bb.888:                             //   in Loop: Header=BB27_886 Depth=4
	mov	w14, #-8388609                  // =0xff7fffff
	fmov	s1, w14
	b	.LBB27_890
	.p2align	5, , 16
.LBB27_889:                             //   in Loop: Header=BB27_886 Depth=4
	fmov	s1, wzr
.LBB27_890:                             // %.sink.split.i
                                        //   in Loop: Header=BB27_886 Depth=4
	str	s1, [x0, x17, lsl #2]
.LBB27_891:                             //   in Loop: Header=BB27_886 Depth=4
	sxtw	x2, w4
	cmp	w23, #1
	b.lt	.LBB27_909
// %bb.892:                             // %.lr.ph99.preheader.i
                                        //   in Loop: Header=BB27_886 Depth=4
	sbfiz	x14, x4, #2, #32
	mov	x3, xzr
	mov	x5, x16
	add	x4, x27, x14
	b	.LBB27_894
	.p2align	5, , 16
.LBB27_893:                             // %.loopexit.i252
                                        //   in Loop: Header=BB27_894 Depth=5
	add	x3, x3, #1
	add	x5, x5, #1
	cmp	x3, x23
	b.eq	.LBB27_909
.LBB27_894:                             // %.lr.ph99.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_878 Depth=2
                                        //       Parent Loop BB27_881 Depth=3
                                        //         Parent Loop BB27_886 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_900 Depth 6
	adds	x14, x3, x1
	b.mi	.LBB27_893
// %bb.895:                             //   in Loop: Header=BB27_894 Depth=5
	ldr	x6, [x21, #24]
	cmp	x6, x14
	b.le	.LBB27_893
// %bb.896:                             //   in Loop: Header=BB27_894 Depth=5
	cmp	w22, #1
	b.lt	.LBB27_893
// %bb.897:                             // %.lr.ph.i253.preheader
                                        //   in Loop: Header=BB27_894 Depth=5
	ldr	x14, [x21, #56]
	mov	x28, x2
	mov	x30, x22
	mul	x14, x14, x5
	add	x6, x4, x14
	add	x7, x27, x14
	b	.LBB27_900
.LBB27_898:                             //   in Loop: Header=BB27_900 Depth=6
	cmp	w19, #2
	b.eq	.LBB27_2523
	.p2align	5, , 16
.LBB27_899:                             //   in Loop: Header=BB27_900 Depth=6
	subs	x30, x30, #1
	add	x6, x6, #4
	add	x28, x28, #1
	b.eq	.LBB27_893
.LBB27_900:                             // %.lr.ph.i253
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_878 Depth=2
                                        //       Parent Loop BB27_881 Depth=3
                                        //         Parent Loop BB27_886 Depth=4
                                        //           Parent Loop BB27_894 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	tbnz	x28, #63, .LBB27_899
// %bb.901:                             //   in Loop: Header=BB27_900 Depth=6
	ldr	x14, [x21, #16]
	cmp	x14, x28
	b.le	.LBB27_899
// %bb.902:                             //   in Loop: Header=BB27_900 Depth=6
	ldr	w8, [x21]
	mov	x14, x6
	cbz	w8, .LBB27_904
// %bb.903:                             //   in Loop: Header=BB27_900 Depth=6
	ldrh	w8, [x7, x28, lsl #1]
	add	x14, x20, x8, lsl #2
.LBB27_904:                             //   in Loop: Header=BB27_900 Depth=6
	ldr	s1, [x14]
	cbz	w19, .LBB27_907
// %bb.905:                             //   in Loop: Header=BB27_900 Depth=6
	cmp	w19, #1
	b.ne	.LBB27_898
// %bb.906:                             //   in Loop: Header=BB27_900 Depth=6
	ldr	s2, [x0, x17, lsl #2]
	fadd	s1, s1, s2
	b	.LBB27_908
.LBB27_907:                             //   in Loop: Header=BB27_900 Depth=6
	ldr	s2, [x0, x17, lsl #2]
	fcmp	s1, s2
	b.le	.LBB27_899
.LBB27_908:                             // %.sink.split123.i
                                        //   in Loop: Header=BB27_900 Depth=6
	str	s1, [x0, x17, lsl #2]
	b	.LBB27_899
	.p2align	5, , 16
.LBB27_909:                             // %._crit_edge.i250
                                        //   in Loop: Header=BB27_886 Depth=4
	cmp	w19, #1
	b.eq	.LBB27_884
// %bb.910:                             // %._crit_edge.i250
                                        //   in Loop: Header=BB27_886 Depth=4
	cmp	w19, #2
	b.ne	.LBB27_885
	b	.LBB27_2524
.LBB27_911:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.912:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x24
	ldr	x21, [x24, #248]
	ldp	w9, w28, [x24, #100]
	str	w9, [sp, #760]                  // 4-byte Folded Spill
	ldp	x23, x8, [x24, #152]
	ldr	w9, [x24, #108]
	ldp	w22, w27, [x24, #84]
	ldr	x19, [x8, #248]
	ldp	w25, w26, [x24, #92]
	str	w9, [sp, #736]                  // 4-byte Folded Spill
	bl	ggml_nbytes
	ldr	w8, [sp, #784]
	str	x0, [sp, #752]                  // 8-byte Folded Spill
	cbnz	w8, .LBB27_2768
// %bb.913:                             //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x24
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x21
	mov	w1, wzr
	bl	memset
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.914:                             // %.preheader170.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	add	x8, x21, x8
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldp	x9, x8, [x23, #16]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	mul	x8, x8, x9
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	mul	w8, w25, w27
	scvtf	s0, w8
	ldr	x8, [x23, #248]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	w8, [sp, #736]                  // 4-byte Folded Reload
	neg	w8, w8
	str	w8, [sp, #704]                  // 4-byte Folded Spill
	neg	w8, w28
	str	w8, [sp, #728]                  // 4-byte Folded Spill
	b	.LBB27_916
.LBB27_915:                             // %._crit_edge196.i
                                        //   in Loop: Header=BB27_916 Depth=2
	ldr	x8, [x24, #64]
	add	x21, x21, x8
	add	x19, x19, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	add	x10, x10, x8, lsl #2
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	cmp	x21, x8
	b.hs	.LBB27_7
.LBB27_916:                             // %.preheader170.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_919 Depth 3
                                        //         Child Loop BB27_924 Depth 4
                                        //           Child Loop BB27_928 Depth 5
                                        //             Child Loop BB27_934 Depth 6
                                        //           Child Loop BB27_941 Depth 5
                                        //             Child Loop BB27_947 Depth 6
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_915
// %bb.917:                             // %.lr.ph195.i.preheader
                                        //   in Loop: Header=BB27_916 Depth=2
	ldr	w8, [sp, #704]                  // 4-byte Folded Reload
	mov	x15, xzr
	b	.LBB27_919
	.p2align	5, , 16
.LBB27_918:                             // %._crit_edge193.i
                                        //   in Loop: Header=BB27_919 Depth=3
	ldr	w8, [sp, #760]                  // 4-byte Folded Reload
	add	x15, x15, #1
	add	w8, w16, w8
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	cmp	x15, x10
	b.eq	.LBB27_915
.LBB27_919:                             // %.lr.ph195.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_916 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_924 Depth 4
                                        //           Child Loop BB27_928 Depth 5
                                        //             Child Loop BB27_934 Depth 6
                                        //           Child Loop BB27_941 Depth 5
                                        //             Child Loop BB27_947 Depth 6
	sxtw	x16, w8
	cmp	x9, #1
	b.lt	.LBB27_918
// %bb.920:                             // %.lr.ph192.i
                                        //   in Loop: Header=BB27_919 Depth=3
	cmp	w22, #1
	b.hi	.LBB27_2526
// %bb.921:                             // %.lr.ph192.split.preheader.i
                                        //   in Loop: Header=BB27_919 Depth=3
	mul	x8, x15, x9
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	mov	x17, xzr
	add	x0, x10, x8, lsl #2
	ldr	w8, [sp, #736]                  // 4-byte Folded Reload
	ldr	w10, [sp, #760]                 // 4-byte Folded Reload
	neg	w8, w8
	madd	w1, w10, w15, w8
	ldr	w8, [sp, #728]                  // 4-byte Folded Reload
	sxtw	x2, w1
	b	.LBB27_924
.LBB27_922:                             //   in Loop: Header=BB27_924 Depth=4
	lsl	x10, x11, #1
	mov	w3, #125829120                  // =0x7800000
	ldrh	w11, [x8, x10]
	ldr	s2, [x20, x11, lsl #2]
	mov	w11, #2004877312                // =0x77800000
	fmov	s3, w11
	mov	w11, #142606336                 // =0x8800000
	fadd	s1, s1, s2
	fabs	s2, s1
	fmul	s2, s2, s3
	fmov	s3, w11
	fmov	w11, s1
	and	w13, w11, #0x7f800000
	fmul	s2, s2, s3
	lsl	w12, w11, #1
	add	w13, w13, w3
	ubfx	w3, w11, #23, #8
	lsr	w11, w11, #31
	cmp	w3, #113
	mov	w3, #1073741824                 // =0x40000000
	csel	w13, w3, w13, lo
	fmov	s1, w13
	fadd	s1, s2, s1
	fmov	w13, s1
	lsr	w3, w13, #13
	and	w13, w13, #0xfff
	and	w3, w3, #0x7c00
	add	w13, w3, w13
	mov	w3, #-16777216                  // =0xff000000
	cmp	w12, w3
	mov	w12, #32256                     // =0x7e00
	csel	w12, w12, w13, hi
	orr	w11, w12, w11, lsl #15
	strh	w11, [x8, x10]
	.p2align	5, , 16
.LBB27_923:                             // %.critedge.i
                                        //   in Loop: Header=BB27_924 Depth=4
	add	x17, x17, #1
	add	w8, w14, w26
	cmp	x17, x9
	b.eq	.LBB27_918
.LBB27_924:                             // %.lr.ph192.split.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_916 Depth=2
                                        //       Parent Loop BB27_919 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_928 Depth 5
                                        //             Child Loop BB27_934 Depth 6
                                        //           Child Loop BB27_941 Depth 5
                                        //             Child Loop BB27_947 Depth 6
	ldr	s1, [x0, x17, lsl #2]
	sxtw	x14, w8
	cmp	w25, #1
	cbz	w22, .LBB27_938
// %bb.925:                             //   in Loop: Header=BB27_924 Depth=4
	b.lt	.LBB27_923
// %bb.926:                             // %.lr.ph174.i
                                        //   in Loop: Header=BB27_924 Depth=4
	fdiv	s1, s1, s0
	mov	w8, #2004877312                 // =0x77800000
	mov	w11, #125829120                 // =0x7800000
	fmov	s3, w8
	mov	w8, #142606336                  // =0x8800000
	mov	x4, xzr
	fabs	s2, s1
	fmul	s2, s2, s3
	fmov	s3, w8
	fmov	w8, s1
	and	w10, w8, #0x7f800000
	fmul	s2, s2, s3
	add	w10, w10, w11
	ubfx	w11, w8, #23, #8
	cmp	w11, #113
	mov	w11, #1073741824                // =0x40000000
	csel	w10, w11, w10, lo
	lsl	w11, w8, #1
	lsr	w8, w8, #31
	fmov	s3, w10
	mov	w10, #-16777216                 // =0xff000000
	cmp	w11, w10
	fadd	s2, s2, s3
	fmov	w10, s2
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	mov	w11, #32256                     // =0x7e00
	csel	w10, w11, w10, hi
	mov	x11, x16
	orr	w8, w10, w8, lsl #15
	b	.LBB27_928
	.p2align	5, , 16
.LBB27_927:                             // %.loopexit169.i
                                        //   in Loop: Header=BB27_928 Depth=5
	add	x4, x4, #1
	add	x11, x11, #1
	cmp	x4, x25
	b.eq	.LBB27_923
.LBB27_928:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_916 Depth=2
                                        //       Parent Loop BB27_919 Depth=3
                                        //         Parent Loop BB27_924 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_934 Depth 6
	adds	x12, x4, x2
	b.mi	.LBB27_927
// %bb.929:                             //   in Loop: Header=BB27_928 Depth=5
	ldr	x10, [x24, #24]
	cmp	x10, x12
	b.le	.LBB27_927
// %bb.930:                             //   in Loop: Header=BB27_928 Depth=5
	cmp	w27, #1
	b.lt	.LBB27_927
// %bb.931:                             // %.lr.ph.i237.preheader
                                        //   in Loop: Header=BB27_928 Depth=5
	ldr	x10, [x24, #56]
	mov	x3, x14
	mov	x5, x27
	madd	x13, x10, x11, x21
	b	.LBB27_934
.LBB27_932:                             //   in Loop: Header=BB27_934 Depth=6
	lsl	x10, x3, #1
	ldrh	w12, [x13, x10]
	add	w12, w12, w8
	strh	w12, [x13, x10]
	.p2align	5, , 16
.LBB27_933:                             //   in Loop: Header=BB27_934 Depth=6
	subs	x5, x5, #1
	add	x3, x3, #1
	b.eq	.LBB27_927
.LBB27_934:                             // %.lr.ph.i237
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_916 Depth=2
                                        //       Parent Loop BB27_919 Depth=3
                                        //         Parent Loop BB27_924 Depth=4
                                        //           Parent Loop BB27_928 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	tbnz	x3, #63, .LBB27_933
// %bb.935:                             //   in Loop: Header=BB27_934 Depth=6
	ldr	x10, [x24, #16]
	cmp	x10, x3
	b.le	.LBB27_933
// %bb.936:                             //   in Loop: Header=BB27_934 Depth=6
	ldr	w10, [x24]
	cbnz	w10, .LBB27_932
// %bb.937:                             //   in Loop: Header=BB27_934 Depth=6
	ldr	s2, [x13, x3, lsl #2]
	fadd	s2, s1, s2
	str	s2, [x13, x3, lsl #2]
	b	.LBB27_933
	.p2align	5, , 16
.LBB27_938:                             // %.preheader.i241
                                        //   in Loop: Header=BB27_924 Depth=4
	b.lt	.LBB27_923
// %bb.939:                             // %.lr.ph187.preheader.i
                                        //   in Loop: Header=BB27_924 Depth=4
	sbfiz	x8, x8, #2, #32
	neg	w11, w28
	madd	w4, w26, w17, w11
	add	x7, x19, x8
	mov	w8, #-8388609                   // =0xff7fffff
	fmov	s2, w8
	mov	x6, xzr
	mov	w5, #-1                         // =0xffffffff
	mov	x30, x16
	mov	w23, #-1                        // =0xffffffff
	b	.LBB27_941
	.p2align	5, , 16
.LBB27_940:                             // %.loopexit.i
                                        //   in Loop: Header=BB27_941 Depth=5
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	add	x6, x6, #1
	add	x30, x30, #1
	cmp	x6, x25
	b.eq	.LBB27_951
.LBB27_941:                             // %.lr.ph187.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_916 Depth=2
                                        //       Parent Loop BB27_919 Depth=3
                                        //         Parent Loop BB27_924 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_947 Depth 6
	adds	x8, x6, x2
	b.mi	.LBB27_940
// %bb.942:                             //   in Loop: Header=BB27_941 Depth=5
	ldr	x11, [x24, #24]
	cmp	x11, x8
	b.le	.LBB27_940
// %bb.943:                             //   in Loop: Header=BB27_941 Depth=5
	cmp	w27, #1
	b.lt	.LBB27_940
// %bb.944:                             // %.lr.ph179.preheader.i
                                        //   in Loop: Header=BB27_941 Depth=5
	ldr	x8, [x24, #56]
	mov	w13, wzr
	mov	x3, x14
	mov	x24, x27
	mul	x11, x8, x30
	add	x8, x7, x11
	add	x11, x19, x11
	b	.LBB27_947
	.p2align	5, , 16
.LBB27_945:                             //   in Loop: Header=BB27_947 Depth=6
	ldr	s3, [x12]
	fcmp	s3, s2
	fcsel	s2, s3, s2, hi
	csel	w23, w6, w23, hi
	csel	w5, w13, w5, hi
.LBB27_946:                             //   in Loop: Header=BB27_947 Depth=6
	add	w13, w13, #1
	subs	x24, x24, #1
	add	x8, x8, #4
	add	x3, x3, #1
	b.eq	.LBB27_940
.LBB27_947:                             // %.lr.ph179.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_916 Depth=2
                                        //       Parent Loop BB27_919 Depth=3
                                        //         Parent Loop BB27_924 Depth=4
                                        //           Parent Loop BB27_941 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	tbnz	x3, #63, .LBB27_946
// %bb.948:                             //   in Loop: Header=BB27_947 Depth=6
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x12, [x10, #16]
	cmp	x12, x3
	b.le	.LBB27_946
// %bb.949:                             //   in Loop: Header=BB27_947 Depth=6
	ldr	w10, [x10]
	mov	x12, x8
	cbz	w10, .LBB27_945
// %bb.950:                             //   in Loop: Header=BB27_947 Depth=6
	ldrh	w10, [x11, x3, lsl #1]
	add	x12, x20, x10, lsl #2
	b	.LBB27_945
	.p2align	5, , 16
.LBB27_951:                             // %._crit_edge.i242
                                        //   in Loop: Header=BB27_924 Depth=4
	cmn	w5, #1
	b.eq	.LBB27_923
// %bb.952:                             // %._crit_edge.i242
                                        //   in Loop: Header=BB27_924 Depth=4
	cmn	w23, #1
	b.eq	.LBB27_923
// %bb.953:                             //   in Loop: Header=BB27_924 Depth=4
	ldr	x8, [x24, #56]
	add	w10, w23, w1
	sxtw	x10, w10
	ldr	w12, [x24]
	nop
	madd	x8, x8, x10, x21
	add	w10, w5, w4
	sxtw	x11, w10
	cbnz	w12, .LBB27_922
// %bb.954:                             //   in Loop: Header=BB27_924 Depth=4
	ldr	s2, [x8, x11, lsl #2]
	fadd	s1, s1, s2
	str	s1, [x8, x11, lsl #2]
	b	.LBB27_923
.LBB27_955:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x10, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2636
// %bb.956:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #40]
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB27_7
// %bb.957:                             // %.lr.ph108.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldp	x10, x9, [x8, #64]
	str	xzr, [sp, #752]                 // 8-byte Folded Spill
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	ldp	x15, x16, [x13, #16]
	ldr	x17, [x13, #32]
	ldp	x9, x10, [x8, #16]
	and	x6, x15, #0x7ffffffffffffffe
	scvtf	s0, x15
	ldrsw	x4, [sp, #788]
	scvtf	s1, x9
	fdiv	s0, s0, s1
	scvtf	s1, x16
	scvtf	s2, x10
	fdiv	s1, s1, s2
	ldp	x9, x10, [x8, #32]
	scvtf	s2, x17
	scvtf	s3, x9
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	scvtf	s4, x10
	fdiv	s2, s2, s3
	scvtf	s3, x9
	fdiv	s3, s3, s4
	ldp	x2, x9, [x13, #64]
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	ldrsw	x9, [sp, #784]
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	mul	x9, x2, x9
	ldp	x0, x1, [x13, #48]
	mul	x20, x2, x4
	ldp	x11, x12, [x8, #48]
	lsl	x21, x0, #1
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	add	x9, x0, x9
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_959
	.p2align	5, , 16
.LBB27_958:                             // %._crit_edge105.i.i
                                        //   in Loop: Header=BB27_959 Depth=2
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	ldr	x13, [sp, #736]                 // 8-byte Folded Reload
	add	x13, x13, x9
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x13, [sp, #736]                 // 8-byte Folded Spill
	ldr	x13, [sp, #744]                 // 8-byte Folded Reload
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	add	x13, x13, x9
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	str	x13, [sp, #744]                 // 8-byte Folded Spill
	cmp	x10, x9
	b.eq	.LBB27_7
.LBB27_959:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_962 Depth 3
                                        //         Child Loop BB27_965 Depth 4
                                        //           Child Loop BB27_969 Depth 5
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	cmp	x17, x9
	b.le	.LBB27_958
// %bb.960:                             // %.lr.ph104.i.i
                                        //   in Loop: Header=BB27_959 Depth=2
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	ldr	x13, [sp, #704]                 // 8-byte Folded Reload
	ldr	x7, [sp, #744]                  // 8-byte Folded Reload
	ldr	x19, [sp, #736]                 // 8-byte Folded Reload
	ldr	x26, [sp, #720]                 // 8-byte Folded Reload
	ucvtf	s4, x9
	fdiv	s4, s4, s3
	fcvtzs	x10, s4
	mul	x22, x13, x10
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	mul	x24, x9, x10
	b	.LBB27_962
	.p2align	5, , 16
.LBB27_961:                             // %._crit_edge101.i.i
                                        //   in Loop: Header=BB27_962 Depth=3
	add	x26, x26, x4
	add	x19, x19, x20
	add	x7, x7, x20
	cmp	x26, x17
	b.ge	.LBB27_958
.LBB27_962:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_959 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_965 Depth 4
                                        //           Child Loop BB27_969 Depth 5
	cmp	x16, #1
	b.lt	.LBB27_961
// %bb.963:                             // %.lr.ph100.i.i
                                        //   in Loop: Header=BB27_962 Depth=3
	scvtf	s4, x26
	mul	x30, x26, x2
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	mov	x27, xzr
	mov	x23, x7
	mov	x25, x19
	fdiv	s4, s4, s2
	fcvtzs	x10, s4
	mul	x28, x9, x10
	b	.LBB27_965
	.p2align	5, , 16
.LBB27_964:                             // %._crit_edge.i.i228
                                        //   in Loop: Header=BB27_965 Depth=4
	add	x27, x27, #1
	add	x25, x25, x1
	add	x23, x23, x1
	cmp	x27, x16
	b.eq	.LBB27_961
.LBB27_965:                             //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_959 Depth=2
                                        //       Parent Loop BB27_962 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_969 Depth 5
	cmp	x15, #1
	b.lt	.LBB27_964
// %bb.966:                             // %.lr.ph.i.i229
                                        //   in Loop: Header=BB27_965 Depth=4
	ucvtf	s4, x27
	fdiv	s4, s4, s1
	ldr	x14, [x8, #248]
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	fcvtzs	x10, s4
	madd	x10, x12, x10, x14
	add	x14, x28, x22
	add	x5, x10, x14
	ldr	x14, [x9, #248]
	cmp	x15, #1
	b.ne	.LBB27_968
// %bb.967:                             //   in Loop: Header=BB27_965 Depth=4
	mov	x3, xzr
	b	.LBB27_970
	.p2align	5, , 16
.LBB27_968:                             // %.lr.ph.i.i229.new.preheader
                                        //   in Loop: Header=BB27_965 Depth=4
	mov	x3, xzr
	mov	x10, x14
	.p2align	5, , 16
.LBB27_969:                             // %.lr.ph.i.i229.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_959 Depth=2
                                        //       Parent Loop BB27_962 Depth=3
                                        //         Parent Loop BB27_965 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ucvtf	s4, x3
	add	x9, x3, #1
	ucvtf	s5, x9
	add	x3, x3, #2
	fdiv	s4, s4, s0
	fcvtzs	x9, s4
	fdiv	s4, s5, s0
	mul	x9, x11, x9
	fcvtzs	x13, s4
	ldr	s4, [x5, x9]
	str	s4, [x10, x23]
	mul	x9, x11, x13
	ldr	s4, [x5, x9]
	str	s4, [x10, x25]
	add	x10, x10, x21
	cmp	x3, x6
	b.ne	.LBB27_969
.LBB27_970:                             // %._crit_edge.i.i228.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_965 Depth=4
	tbz	w15, #0, .LBB27_964
// %bb.971:                             // %._crit_edge.i.i228.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB27_965 Depth=4
	ucvtf	s4, x3
	madd	x10, x27, x1, x14
	add	x14, x30, x24
	add	x10, x10, x14
	mul	x14, x3, x0
	fdiv	s4, s4, s0
	fcvtzs	x9, s4
	mul	x9, x11, x9
	ldr	s4, [x5, x9]
	str	s4, [x10, x14]
	b	.LBB27_964
.LBB27_972:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x10, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2637
// %bb.973:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #48]
	cmp	x9, #4
	b.ne	.LBB27_2638
// %bb.974:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #48]
	cmp	x9, #4
	b.ne	.LBB27_2639
// %bb.975:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #32]
	str	x9, [sp, #760]                  // 8-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB27_7
// %bb.976:                             // %.lr.ph102.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	mov	x10, xzr
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	ldrsw	x5, [sp, #784]
	str	x5, [sp, #664]                  // 8-byte Folded Spill
	ldrsw	x0, [sp, #788]
	ldp	x11, x15, [x13, #16]
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	mul	x9, x9, x15
	ldp	x19, x12, [x8, #56]
	lsl	x14, x11, #2
	ldr	x17, [x13, #248]
	str	x12, [sp, #656]                 // 8-byte Folded Spill
	mov	x12, x15
	mul	x15, x15, x11
	ldr	x6, [x13, #40]
	mul	x20, x19, x5
	ldr	x21, [x8, #72]
	and	x7, x6, #0x7ffffffffffffffe
	lsl	x25, x21, #1
	str	x19, [sp, #704]                 // 8-byte Folded Spill
	str	x21, [sp, #736]                 // 8-byte Folded Spill
	str	x17, [sp, #768]                 // 8-byte Folded Spill
	mul	x13, x14, x0
	str	x20, [sp, #696]                 // 8-byte Folded Spill
	ldp	x1, x2, [x8, #16]
	add	x16, x9, x5
	mul	x9, x9, x11
	ldp	x3, x4, [x8, #32]
	str	x13, [sp, #720]                 // 8-byte Folded Spill
	lsl	x13, x15, #2
	str	x13, [sp, #648]                 // 8-byte Folded Spill
	add	x13, x21, x20
	str	x13, [sp, #688]                 // 8-byte Folded Spill
	nop
	madd	x13, x14, x16, x17
	lsl	x23, x9, #3
	mul	x9, x19, x0
	str	x13, [sp, #680]                 // 8-byte Folded Spill
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	nop
	madd	x9, x14, x5, x17
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	b	.LBB27_978
	.p2align	5, , 16
.LBB27_977:                             // %._crit_edge99.i.i
                                        //   in Loop: Header=BB27_978 Depth=2
	ldr	x14, [sp, #648]                 // 8-byte Folded Reload
	add	x10, x10, #1
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	add	x9, x9, x14
	ldr	x13, [sp, #688]                 // 8-byte Folded Reload
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	add	x13, x13, x9
	str	x13, [sp, #688]                 // 8-byte Folded Spill
	ldr	x13, [sp, #696]                 // 8-byte Folded Reload
	add	x13, x13, x9
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	str	x13, [sp, #696]                 // 8-byte Folded Spill
	add	x9, x9, x14
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB27_7
.LBB27_978:                             //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_981 Depth 3
                                        //         Child Loop BB27_985 Depth 4
                                        //           Child Loop BB27_990 Depth 5
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	cmp	x12, x9
	b.le	.LBB27_977
// %bb.979:                             // %.preheader94.lr.ph.i.i
                                        //   in Loop: Header=BB27_978 Depth=2
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	mul	x9, x10, x9
	ldr	x26, [sp, #672]                 // 8-byte Folded Reload
	ldr	x5, [sp, #696]                  // 8-byte Folded Reload
	ldr	x28, [sp, #688]                 // 8-byte Folded Reload
	ldr	x14, [sp, #680]                 // 8-byte Folded Reload
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	ldr	x17, [sp, #664]                 // 8-byte Folded Reload
	b	.LBB27_981
	.p2align	5, , 16
.LBB27_980:                             // %._crit_edge97.i.i
                                        //   in Loop: Header=BB27_981 Depth=3
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x17, x17, x9
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	ldr	x13, [sp, #712]                 // 8-byte Folded Reload
	add	x28, x28, x13
	add	x5, x5, x13
	add	x14, x14, x9
	add	x26, x26, x9
	cmp	x17, x12
	b.ge	.LBB27_977
.LBB27_981:                             // %.preheader94.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_978 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_985 Depth 4
                                        //           Child Loop BB27_990 Depth 5
	cmp	x11, #1
	b.lt	.LBB27_980
// %bb.982:                             // %.preheader.lr.ph.i.i215
                                        //   in Loop: Header=BB27_981 Depth=3
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	mov	x0, xzr
	mov	x27, x26
	mov	x20, x5
	mov	x16, x28
	mul	x9, x17, x9
	mov	x22, x14
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	b	.LBB27_985
	.p2align	5, , 16
.LBB27_983:                             // %._crit_edge.i.i217.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB27_985 Depth=4
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	add	x15, x13, x0, lsl #2
	ldr	x13, [sp, #760]                 // 8-byte Folded Reload
	mul	x9, x9, x13
	add	x9, x9, x10
	madd	x9, x9, x12, x17
	mul	x9, x9, x11
	str	s0, [x15, x9, lsl #2]
.LBB27_984:                             // %._crit_edge.i.i217
                                        //   in Loop: Header=BB27_985 Depth=4
	add	x0, x0, #1
	add	x22, x22, #4
	add	x16, x16, #4
	add	x20, x20, #4
	add	x27, x27, #4
	cmp	x0, x11
	b.eq	.LBB27_980
.LBB27_985:                             // %.preheader.i.i216
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_978 Depth=2
                                        //       Parent Loop BB27_981 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_990 Depth 5
	cmp	x6, #1
	b.lt	.LBB27_984
// %bb.986:                             // %.lr.ph.i.i219
                                        //   in Loop: Header=BB27_985 Depth=4
	cmp	x0, x1
	ccmp	x17, x2, #0, lt
	ccmp	x10, x3, #0, lt
	cset	w19, lt
	cmp	x6, #1
	b.ne	.LBB27_988
// %bb.987:                             //   in Loop: Header=BB27_985 Depth=4
	mov	x9, xzr
	tbz	w6, #0, .LBB27_984
	b	.LBB27_995
	.p2align	5, , 16
.LBB27_988:                             // %.lr.ph.i.i219.new.preheader
                                        //   in Loop: Header=BB27_985 Depth=4
	mov	x24, xzr
	mov	x15, xzr
	mov	x30, x20
	mov	x21, x16
	b	.LBB27_990
	.p2align	5, , 16
.LBB27_989:                             //   in Loop: Header=BB27_990 Depth=5
	str	s0, [x22, x24]
	add	x24, x24, x23
	add	x21, x21, x25
	add	x30, x30, x25
	add	x15, x15, #1
	cmp	x15, x7
	b.eq	.LBB27_994
.LBB27_990:                             // %.lr.ph.i.i219.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_978 Depth=2
                                        //       Parent Loop BB27_981 Depth=3
                                        //         Parent Loop BB27_985 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	fmov	s0, wzr
	fmov	s1, wzr
	cmp	x15, x4
	mov	x9, x15
	csel	w15, wzr, w19, ge
	cmp	w15, #1
	b.ne	.LBB27_992
// %bb.991:                             //   in Loop: Header=BB27_990 Depth=5
	ldr	x15, [x8, #248]
	ldr	s1, [x15, x30]
.LBB27_992:                             //   in Loop: Header=BB27_990 Depth=5
	add	x15, x9, #1
	str	s1, [x27, x24]
	cmp	x15, x4
	csel	w13, wzr, w19, ge
	cmp	w13, #1
	b.ne	.LBB27_989
// %bb.993:                             //   in Loop: Header=BB27_990 Depth=5
	ldr	x13, [x8, #248]
	ldr	s0, [x13, x21]
	b	.LBB27_989
	.p2align	5, , 16
.LBB27_994:                             //   in Loop: Header=BB27_985 Depth=4
	add	x9, x9, #2
	tbz	w6, #0, .LBB27_984
.LBB27_995:                             // %.epil.preheader800
                                        //   in Loop: Header=BB27_985 Depth=4
	fmov	s0, wzr
	cmp	x9, x4
	csel	w15, wzr, w19, ge
	cmp	w15, #1
	b.ne	.LBB27_983
// %bb.996:                             //   in Loop: Header=BB27_985 Depth=4
	ldr	x13, [sp, #736]                 // 8-byte Folded Reload
	mul	x19, x9, x13
	ldr	x15, [x8, #248]
	ldr	x13, [sp, #744]                 // 8-byte Folded Reload
	add	x15, x15, x13
	ldr	x13, [sp, #752]                 // 8-byte Folded Reload
	add	x15, x15, x19
	add	x15, x15, x13
	ldr	s0, [x15, x0, lsl #2]
	b	.LBB27_983
.LBB27_997:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x9, #152]
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	ldr	w8, [x8]
	cbnz	w8, .LBB27_2640
// %bb.998:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x9]
	cbnz	w8, .LBB27_2641
// %bb.999:                             //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #40]
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.1000:                            // %.preheader97.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	str	xzr, [sp, #552]                 // 8-byte Folded Spill
	ldr	x22, [sp, #632]                 // 8-byte Folded Reload
	ldrsw	x7, [sp, #784]
	str	x7, [sp, #664]                  // 8-byte Folded Spill
	ldr	x14, [x22, #16]
	ldp	w12, w11, [x23, #84]
                                        // kill: def $w12 killed $w12 def $x12
	sxtw	x12, w12
	add	w17, w12, #1
	ldp	x8, x13, [x23, #16]
	mvn	w9, w11
	ldp	x5, x2, [x23, #48]
	and	x10, x14, #0x7fffffff
	add	w1, w11, #1
	and	x15, x14, #0x7
	mul	x21, x2, x7
	ldrsw	x0, [sp, #788]
	mul	x2, x2, x0
	add	x8, x8, w9, sxtw
	sub	x9, x17, #1
	sub	x16, x10, #1
	sub	x6, x1, #1
	sub	x3, x1, #2
	sub	x4, x15, x10
	ldp	x10, x1, [x22, #56]
	sub	x17, x17, #2
	and	x19, x9, #0x3
	and	x20, x9, #0xfffffffffffffffc
	ldr	x9, [x22, #72]
	nop
	madd	x8, x8, x5, x21
	and	x24, x6, #0xfffffffffffffffc
	and	x22, x6, #0x3
	str	x1, [sp, #648]                  // 8-byte Folded Spill
	mul	x1, x10, x7
	mul	x7, x10, x0
	str	x9, [sp, #536]                  // 8-byte Folded Spill
	ldr	x9, [x23, #32]
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	str	x9, [sp, #656]                  // 8-byte Folded Spill
	nop
	madd	x9, x5, x12, x21
	add	x10, x1, #16
	str	x1, [sp, #624]                  // 8-byte Folded Spill
	str	x10, [sp, #608]                 // 8-byte Folded Spill
	add	x10, x9, #16
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	str	x10, [sp, #600]                 // 8-byte Folded Spill
	add	x10, x9, #8
	sub	x9, x9, #8
	str	x9, [sp, #584]                  // 8-byte Folded Spill
	orr	x9, x20, #0x1
	str	x10, [sp, #592]                 // 8-byte Folded Spill
	str	x9, [sp, #760]                  // 8-byte Folded Spill
	add	x9, x8, #8
	sub	x8, x8, #8
	str	x9, [sp, #568]                  // 8-byte Folded Spill
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	ldp	x10, x9, [x23, #64]
	orr	x8, x24, #0x1
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	str	x10, [sp, #640]                 // 8-byte Folded Spill
	str	x9, [sp, #528]                  // 8-byte Folded Spill
	b	.LBB27_1002
	.p2align	5, , 16
.LBB27_1001:                            // %._crit_edge109.i
                                        //   in Loop: Header=BB27_1002 Depth=2
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	ldr	x1, [sp, #528]                  // 8-byte Folded Reload
	add	x8, x8, x1
	ldr	x10, [sp, #536]                 // 8-byte Folded Reload
	ldr	x9, [sp, #552]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	str	x9, [sp, #552]                  // 8-byte Folded Spill
	add	x8, x8, x10
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	add	x8, x8, x1
	str	x8, [sp, #616]                  // 8-byte Folded Spill
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	add	x8, x8, x10
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	add	x8, x8, x1
	str	x8, [sp, #592]                  // 8-byte Folded Spill
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	add	x8, x8, x1
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	add	x8, x8, x1
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	add	x8, x8, x1
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	add	x8, x8, x1
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_1002:                            // %.preheader97.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1005 Depth 3
                                        //         Child Loop BB27_1008 Depth 4
                                        //           Child Loop BB27_1012 Depth 5
                                        //           Child Loop BB27_1015 Depth 5
                                        //           Child Loop BB27_1019 Depth 5
                                        //           Child Loop BB27_1022 Depth 5
                                        //           Child Loop BB27_1026 Depth 5
                                        //           Child Loop BB27_1029 Depth 5
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1001
// %bb.1003:                            // %.lr.ph108.i
                                        //   in Loop: Header=BB27_1002 Depth=2
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	mov	x10, xzr
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	b	.LBB27_1005
	.p2align	5, , 16
.LBB27_1004:                            // %._crit_edge106.i
                                        //   in Loop: Header=BB27_1005 Depth=3
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x1, [sp, #688]                  // 8-byte Folded Reload
	ldr	x10, [sp, #672]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	add	x1, x1, x8
	str	x1, [sp, #688]                  // 8-byte Folded Spill
	ldr	x1, [sp, #696]                  // 8-byte Folded Reload
	add	x1, x1, x9
	str	x1, [sp, #696]                  // 8-byte Folded Spill
	ldr	x1, [sp, #704]                  // 8-byte Folded Reload
	add	x1, x1, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	str	x1, [sp, #704]                  // 8-byte Folded Spill
	add	x8, x8, x9
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	add	x8, x8, x9
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	add	x8, x8, x9
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	add	x8, x8, x9
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	add	x8, x8, x9
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	cmp	x10, x8
	b.eq	.LBB27_1001
.LBB27_1005:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1008 Depth 4
                                        //           Child Loop BB27_1012 Depth 5
                                        //           Child Loop BB27_1015 Depth 5
                                        //           Child Loop BB27_1019 Depth 5
                                        //           Child Loop BB27_1022 Depth 5
                                        //           Child Loop BB27_1026 Depth 5
                                        //           Child Loop BB27_1029 Depth 5
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	str	x10, [sp, #672]                 // 8-byte Folded Spill
	cmp	x13, x8
	b.le	.LBB27_1004
// %bb.1006:                            // %.lr.ph105.i
                                        //   in Loop: Header=BB27_1005 Depth=3
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	ldr	x1, [sp, #704]                  // 8-byte Folded Reload
	ldr	x23, [sp, #664]                 // 8-byte Folded Reload
	ldr	x9, [x8, #248]
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	add	x26, x9, x8
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	add	x21, x8, x10
	add	x30, x8, x1
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x1, [sp, #736]                  // 8-byte Folded Reload
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	add	x6, x9, x8
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	add	x25, x9, x1
	ldr	x1, [sp, #744]                  // 8-byte Folded Reload
	add	x10, x9, x10
	add	x28, x9, x8
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	add	x1, x9, x1
	add	x8, x9, x8
	b	.LBB27_1008
	.p2align	5, , 16
.LBB27_1007:                            // %._crit_edge.i
                                        //   in Loop: Header=BB27_1008 Depth=4
	add	x23, x23, x0
	add	x26, x26, x2
	add	x21, x21, x7
	add	x10, x10, x2
	add	x30, x30, x7
	add	x6, x6, x2
	add	x28, x28, x2
	add	x8, x8, x2
	add	x25, x25, x2
	add	x1, x1, x2
	cmp	x23, x13
	b.ge	.LBB27_1004
.LBB27_1008:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1012 Depth 5
                                        //           Child Loop BB27_1015 Depth 5
                                        //           Child Loop BB27_1019 Depth 5
                                        //           Child Loop BB27_1022 Depth 5
                                        //           Child Loop BB27_1026 Depth 5
                                        //           Child Loop BB27_1029 Depth 5
	cmp	w14, #1
	b.lt	.LBB27_1016
// %bb.1009:                            // %.lr.ph.i.i210.preheader
                                        //   in Loop: Header=BB27_1008 Depth=4
	cmp	x16, #7
	b.hs	.LBB27_1011
// %bb.1010:                            //   in Loop: Header=BB27_1008 Depth=4
	mov	x27, xzr
	cbnz	x15, .LBB27_1014
	b	.LBB27_1016
	.p2align	5, , 16
.LBB27_1011:                            // %.lr.ph.i.i210.preheader1507
                                        //   in Loop: Header=BB27_1008 Depth=4
	mov	x5, xzr
	mov	x27, x21
	mov	x9, x26
	.p2align	5, , 16
.LBB27_1012:                            // %.lr.ph.i.i210
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        //         Parent Loop BB27_1008 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s0, [x27, #-16]
	sub	x5, x5, #8
	stur	s0, [x9, #-16]
	ldur	s0, [x27, #-12]
	stur	s0, [x9, #-12]
	ldur	s0, [x27, #-8]
	stur	s0, [x9, #-8]
	ldur	s0, [x27, #-4]
	stur	s0, [x9, #-4]
	ldr	s0, [x27]
	str	s0, [x9]
	ldr	s0, [x27, #4]
	str	s0, [x9, #4]
	ldr	s0, [x27, #8]
	str	s0, [x9, #8]
	ldr	s0, [x27, #12]
	add	x27, x27, #32
	str	s0, [x9, #12]
	add	x9, x9, #32
	cmp	x4, x5
	b.ne	.LBB27_1012
// %bb.1013:                            // %ggml_vec_cpy_f32.exit.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1008 Depth=4
	neg	x27, x5
	cbz	x15, .LBB27_1016
.LBB27_1014:                            // %.lr.ph.i.i210.epil.preheader
                                        //   in Loop: Header=BB27_1008 Depth=4
	add	x9, x10, x27, lsl #2
	mov	x5, x15
	add	x27, x30, x27, lsl #2
	.p2align	5, , 16
.LBB27_1015:                            // %.lr.ph.i.i210.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        //         Parent Loop BB27_1008 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x27], #4
	subs	x5, x5, #1
	str	s0, [x9], #4
	b.ne	.LBB27_1015
.LBB27_1016:                            // %ggml_vec_cpy_f32.exit.i
                                        //   in Loop: Header=BB27_1008 Depth=4
	cmp	w12, #1
	b.lt	.LBB27_1023
// %bb.1017:                            // %.lr.ph.i.preheader
                                        //   in Loop: Header=BB27_1008 Depth=4
	mov	x9, x28
	mov	x5, x6
	mov	x27, x20
	cmp	x17, #3
	b.hs	.LBB27_1019
// %bb.1018:                            //   in Loop: Header=BB27_1008 Depth=4
	mov	w5, #1                          // =0x1
	cbnz	x19, .LBB27_1021
	b	.LBB27_1023
	.p2align	5, , 16
.LBB27_1019:                            // %.lr.ph.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        //         Parent Loop BB27_1008 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s0, [x5, #-4]
	sub	x27, x27, #4
	str	s0, [x9, #4]
	ldr	s0, [x5]
	str	s0, [x9]
	ldr	s0, [x5, #4]
	stur	s0, [x9, #-4]
	ldr	s0, [x5, #8]
	add	x5, x5, #16
	stur	s0, [x9, #-8]
	sub	x9, x9, #16
	cbnz	x27, .LBB27_1019
// %bb.1020:                            //   in Loop: Header=BB27_1008 Depth=4
	ldr	x5, [sp, #760]                  // 8-byte Folded Reload
	cbz	x19, .LBB27_1023
.LBB27_1021:                            // %.lr.ph.i.epil.preheader
                                        //   in Loop: Header=BB27_1008 Depth=4
	neg	x9, x5, lsl #2
	lsl	x5, x5, #2
	mov	x27, x19
	.p2align	5, , 16
.LBB27_1022:                            // %.lr.ph.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        //         Parent Loop BB27_1008 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x10, x5]
	add	x5, x5, #4
	subs	x27, x27, #1
	str	s0, [x10, x9]
	sub	x9, x9, #4
	b.ne	.LBB27_1022
.LBB27_1023:                            // %.preheader.i
                                        //   in Loop: Header=BB27_1008 Depth=4
	cmp	w11, #1
	b.lt	.LBB27_1007
// %bb.1024:                            // %.lr.ph102.i.preheader
                                        //   in Loop: Header=BB27_1008 Depth=4
	mov	x9, x25
	mov	x5, x8
	mov	x27, x24
	cmp	x3, #3
	b.hs	.LBB27_1026
// %bb.1025:                            //   in Loop: Header=BB27_1008 Depth=4
	mov	w27, #1                         // =0x1
	cbnz	x22, .LBB27_1028
	b	.LBB27_1007
	.p2align	5, , 16
.LBB27_1026:                            // %.lr.ph102.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        //         Parent Loop BB27_1008 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x9, #4]
	sub	x27, x27, #4
	stur	s0, [x5, #-4]
	ldr	s0, [x9]
	str	s0, [x5]
	ldur	s0, [x9, #-4]
	str	s0, [x5, #4]
	ldur	s0, [x9, #-8]
	sub	x9, x9, #16
	str	s0, [x5, #8]
	add	x5, x5, #16
	cbnz	x27, .LBB27_1026
// %bb.1027:                            //   in Loop: Header=BB27_1008 Depth=4
	ldr	x27, [sp, #752]                 // 8-byte Folded Reload
	cbz	x22, .LBB27_1007
.LBB27_1028:                            // %.lr.ph102.i.epil.preheader
                                        //   in Loop: Header=BB27_1008 Depth=4
	add	x9, x1, x27, lsl #2
	mov	x5, x22
	sub	x27, x1, x27, lsl #2
	.p2align	5, , 16
.LBB27_1029:                            // %.lr.ph102.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1002 Depth=2
                                        //       Parent Loop BB27_1005 Depth=3
                                        //         Parent Loop BB27_1008 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x27], #-4
	subs	x5, x5, #1
	str	s0, [x9], #4
	b.ne	.LBB27_1029
	b	.LBB27_1007
.LBB27_1030:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	w8, [x0]
	cbnz	w8, .LBB27_2642
// %bb.1031:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x0, #48]
	cmp	x8, #4
	b.ne	.LBB27_2643
// %bb.1032:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	s8, s0, [x0, #84]
	fsub	s0, s0, s8
	ldr	s9, [x0, #92]
	ldrsw	x21, [sp, #784]
	ldrsw	x19, [sp, #788]
	fdiv	s0, s0, s9
	fcvtps	x20, s0
	bl	ggml_nelements
	cmp	x0, x20
	b.ne	.LBB27_2644
// %bb.1033:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x21, x20
	b.ge	.LBB27_7
// %bb.1034:                            // %.lr.ph.i.i208
                                        //   in Loop: Header=BB27_3 Depth=1
	add	x9, x21, x19
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	mov	w12, #1                         // =0x1
	cmp	x20, x9
	csel	x10, x20, x9, gt
	cmp	x9, x20
	cset	w11, lt
	cinc	x12, x12, lt
	sub	x10, x10, x11
	ldr	x8, [x8, #248]
	sub	x9, x10, x9
	udiv	x9, x9, x19
	add	x10, x12, x9
	cmp	x10, #2
	ccmp	w19, #1, #0, hs
	b.eq	.LBB27_2163
// %bb.1035:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x9, x21
	b	.LBB27_2166
.LBB27_1036:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x9, [x8, #152]
	ldr	w8, [x9]
	cbnz	w8, .LBB27_2645
// %bb.1037:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #48]
	cmp	x8, #4
	b.ne	.LBB27_2646
// %bb.1038:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #16]
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.1039:                            // %.lr.ph73.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldrsw	x20, [sp, #784]
	cmp	x20, #0
	ldp	w24, w8, [x10, #84]
	ldr	x21, [x10, #56]
                                        // kill: def $w24 killed $w24 def $x24
	sxtw	x24, w24
	ldrsw	x23, [sp, #788]
	add	w9, w24, w24, lsr #31
	ldr	x25, [x10, #248]
	cset	w22, eq
	asr	w19, w9, #1
	sbfx	x26, x9, #1, #31
	scvtf	s0, w8
	bl	logf
	scvtf	s9, w19
	fneg	s8, s0
	and	w28, w24, w22
	add	x22, x25, w19, sxtw #2
	mov	x27, xzr
	str	x24, [sp, #768]                 // 8-byte Folded Spill
	str	x25, [sp, #744]                 // 8-byte Folded Spill
	b	.LBB27_1041
	.p2align	5, , 16
.LBB27_1040:                            //   in Loop: Header=BB27_1041 Depth=2
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	add	x27, x27, #1
	add	x22, x22, x21
	add	x25, x25, x21
	cmp	x27, x8
	b.eq	.LBB27_7
.LBB27_1041:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1043 Depth 3
	cmp	w20, w26
	b.ge	.LBB27_1044
// %bb.1042:                            // %.lr.ph.i.i206
                                        //   in Loop: Header=BB27_1041 Depth=2
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	mov	x24, x20
	ldr	x19, [x8, #248]
	.p2align	5, , 16
.LBB27_1043:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1041 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	scvtf	s0, x24
	fmul	s0, s8, s0
	ldr	s10, [x19, x27, lsl #2]
	fdiv	s0, s0, s9
	bl	expf
	fmul	s0, s10, s0
	add	x0, sp, #780
	add	x1, sp, #776
	bl	sincosf
	ldr	s0, [sp, #780]
	ldr	s1, [sp, #776]
	str	s1, [x25, x24, lsl #2]
	str	s0, [x22, x24, lsl #2]
	add	x24, x24, x23
	cmp	x24, x26
	b.lt	.LBB27_1043
.LBB27_1044:                            // %._crit_edge.i.i204
                                        //   in Loop: Header=BB27_1041 Depth=2
	tbz	w28, #0, .LBB27_1040
// %bb.1045:                            //   in Loop: Header=BB27_1041 Depth=2
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	nop
	madd	x8, x27, x21, x8
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	str	wzr, [x8, x9, lsl #2]
	b	.LBB27_1040
.LBB27_1046:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x9, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2647
// %bb.1047:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #48]
	cmp	x8, #4
	b.ne	.LBB27_2648
// %bb.1048:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x19, #56]
	mov	x0, x19
	ldr	x21, [x9, #16]
	ldr	x22, [x9, #56]
	ldrsw	x23, [sp, #784]
	ldrsw	x24, [sp, #788]
	bl	ggml_nrows
	cmp	x0, x23
	b.le	.LBB27_7
// %bb.1049:                            // %.lr.ph95.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	mul	x14, x22, x24
	and	x12, x21, #0x7ffffffffffffffe
	ldr	x11, [x19, #248]
	sub	x16, x21, #1
	ldr	x8, [x10, #248]
	ldr	w10, [x10, #84]
	nop
	madd	x9, x22, x23, x8
	add	x13, x9, #4
	add	x15, x9, #28
	b	.LBB27_1051
	.p2align	5, , 16
.LBB27_1050:                            // %._crit_edge.i.i195
                                        //   in Loop: Header=BB27_1051 Depth=2
	add	x23, x23, x24
	add	x13, x13, x14
	add	x9, x9, x14
	add	x15, x15, x14
	cmp	x23, x0
	b.ge	.LBB27_7
.LBB27_1051:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1055 Depth 3
                                        //       Child Loop BB27_1059 Depth 3
                                        //       Child Loop BB27_1062 Depth 3
                                        //       Child Loop BB27_1065 Depth 3
                                        //         Child Loop BB27_1069 Depth 4
	cmp	x21, #1
	b.lt	.LBB27_1050
// %bb.1052:                            // %.lr.ph.i.i196.preheader
                                        //   in Loop: Header=BB27_1051 Depth=2
	b.ne	.LBB27_1054
// %bb.1053:                            //   in Loop: Header=BB27_1051 Depth=2
	mov	x1, xzr
	b	.LBB27_1057
.LBB27_1054:                            // %vector.body355.preheader
                                        //   in Loop: Header=BB27_1051 Depth=2
	mov	x17, xzr
	mov	x1, x13
	.p2align	5, , 16
.LBB27_1055:                            // %vector.body355
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1051 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	w2, w17, #1
	stp	w17, w2, [x1, #-4]
	add	x17, x17, #2
	add	x1, x1, #8
	cmp	x12, x17
	b.ne	.LBB27_1055
// %bb.1056:                            // %middle.block348
                                        //   in Loop: Header=BB27_1051 Depth=2
	mov	x1, x12
	cmp	x21, x12
	b.eq	.LBB27_1063
.LBB27_1057:                            // %.lr.ph.i.i196.preheader530
                                        //   in Loop: Header=BB27_1051 Depth=2
	sub	w17, w21, w1
	ands	x2, x17, #0x7
	mov	x17, x1
	b.eq	.LBB27_1060
// %bb.1058:                            // %.lr.ph.i.i196.prol.preheader
                                        //   in Loop: Header=BB27_1051 Depth=2
	mov	x17, x1
	.p2align	5, , 16
.LBB27_1059:                            // %.lr.ph.i.i196.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1051 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	str	w17, [x9, x17, lsl #2]
	add	x17, x17, #1
	subs	x2, x2, #1
	b.ne	.LBB27_1059
.LBB27_1060:                            // %.lr.ph.i.i196.prol.loopexit
                                        //   in Loop: Header=BB27_1051 Depth=2
	sub	x1, x1, x21
	cmn	x1, #8
	b.hi	.LBB27_1063
// %bb.1061:                            // %.lr.ph.i.i196.preheader1552
                                        //   in Loop: Header=BB27_1051 Depth=2
	lsl	x1, x17, #2
	mov	x2, x15
	mov	x3, x17
	.p2align	5, , 16
.LBB27_1062:                            // %.lr.ph.i.i196
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1051 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x4, x2, x1
	add	w5, w3, #1
	stp	w3, w5, [x4, #-28]
	add	w6, w3, #2
	add	w5, w3, #3
	stp	w6, w5, [x4, #-20]
	add	w5, w3, #7
	add	w6, w3, #5
	str	w5, [x2, x17, lsl #2]
	add	w5, w3, #4
	stp	w5, w6, [x4, #-12]
	add	w5, w3, #6
	add	x3, x3, #8
	add	x2, x2, #32
	stur	w5, [x4, #-4]
	cmp	x3, x21
	b.ne	.LBB27_1062
.LBB27_1063:                            // %.lr.ph92.i.i198.preheader
                                        //   in Loop: Header=BB27_1051 Depth=2
	mul	x17, x23, x22
	mov	x2, xzr
	mov	x3, x16
	mul	x1, x23, x20
	mov	x4, x13
	add	x17, x8, x17
	add	x1, x11, x1
	b	.LBB27_1065
	.p2align	5, , 16
.LBB27_1064:                            // %.loopexit.i.i199
                                        //   in Loop: Header=BB27_1065 Depth=3
	add	x4, x4, #4
	sub	x3, x3, #1
	mov	x2, x5
	cmp	x5, x21
	b.eq	.LBB27_1050
.LBB27_1065:                            // %.lr.ph92.i.i198
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1051 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1069 Depth 4
	add	x5, x2, #1
	cmp	x5, x21
	b.ge	.LBB27_1064
// %bb.1066:                            // %.lr.ph90.i.i
                                        //   in Loop: Header=BB27_1065 Depth=3
	mov	x6, x3
	mov	x7, x4
	b	.LBB27_1069
	.p2align	5, , 16
.LBB27_1067:                            //   in Loop: Header=BB27_1069 Depth=4
	str	w25, [x17, x2, lsl #2]
	str	w19, [x7]
.LBB27_1068:                            //   in Loop: Header=BB27_1069 Depth=4
	add	x7, x7, #4
	subs	x6, x6, #1
	b.eq	.LBB27_1064
.LBB27_1069:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1051 Depth=2
                                        //       Parent Loop BB27_1065 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	cmp	w10, #1
	b.eq	.LBB27_1072
// %bb.1070:                            //   in Loop: Header=BB27_1069 Depth=4
	cbnz	w10, .LBB27_1068
// %bb.1071:                            //   in Loop: Header=BB27_1069 Depth=4
	ldrsw	x19, [x17, x2, lsl #2]
	ldrsw	x25, [x7]
	ldr	s0, [x1, x19, lsl #2]
	ldr	s1, [x1, x25, lsl #2]
	fcmp	s0, s1
	b.gt	.LBB27_1067
	b	.LBB27_1068
	.p2align	5, , 16
.LBB27_1072:                            //   in Loop: Header=BB27_1069 Depth=4
	ldrsw	x19, [x17, x2, lsl #2]
	ldrsw	x25, [x7]
	ldr	s0, [x1, x19, lsl #2]
	ldr	s1, [x1, x25, lsl #2]
	fcmp	s0, s1
	b.pl	.LBB27_1068
// %bb.1073:                            //   in Loop: Header=BB27_1069 Depth=4
                                        // kill: def $w25 killed $w25 killed $x25 def $x25
                                        // kill: def $w19 killed $w19 killed $x19 def $x19
	b	.LBB27_1067
.LBB27_1074:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x8, #152]
	ldr	w8, [x19]
	cmp	w8, #1
	b.eq	.LBB27_1884
// %bb.1075:                            //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2769
// %bb.1076:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1077:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	bl	ggml_nrows
	cmp	w0, #1
	b.lt	.LBB27_7
// %bb.1078:                            // %.lr.ph.i.i184
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	mov	x8, xzr
	and	x13, x0, #0x7fffffff
	ldr	x9, [x19, #16]
	and	x14, x9, #0x7fffffff
	ldr	s0, [x12, #84]
	ldr	x10, [x12, #248]
	ldr	x11, [x19, #248]
	and	x15, x9, #0x1
	add	x0, x11, #4
	sub	x16, x15, x14
	ldr	x12, [x12, #56]
	add	x1, x10, #4
	ldr	x17, [x19, #56]
	b	.LBB27_1080
.LBB27_1079:                            // %ggml_vec_leaky_relu_f32.exit.i.i
                                        //   in Loop: Header=BB27_1080 Depth=2
	add	x8, x8, #1
	add	x0, x0, x17
	add	x1, x1, x12
	cmp	x8, x13
	b.eq	.LBB27_7
.LBB27_1080:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1084 Depth 3
	cmp	w9, #1
	b.lt	.LBB27_1079
// %bb.1081:                            // %.lr.ph.i.i.i190.preheader
                                        //   in Loop: Header=BB27_1080 Depth=2
	cmp	x14, #1
	b.ne	.LBB27_1083
// %bb.1082:                            //   in Loop: Header=BB27_1080 Depth=2
	mov	x2, xzr
	b	.LBB27_1086
.LBB27_1083:                            // %.lr.ph.i.i.i190.preheader1553
                                        //   in Loop: Header=BB27_1080 Depth=2
	mov	x2, xzr
	mov	x3, x1
	mov	x4, x0
	.p2align	5, , 16
.LBB27_1084:                            // %.lr.ph.i.i.i190
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1080 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s1, [x4, #-4]
	fmov	s2, wzr
	sub	x2, x2, #2
	fmaxnm	s3, s1, s2
	fminnm	s1, s1, s2
	fmadd	s1, s0, s1, s3
	stur	s1, [x3, #-4]
	ldr	s1, [x4], #8
	fmaxnm	s3, s1, s2
	fminnm	s1, s1, s2
	fmadd	s1, s0, s1, s3
	str	s1, [x3], #8
	cmp	x16, x2
	b.ne	.LBB27_1084
// %bb.1085:                            // %ggml_vec_leaky_relu_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1080 Depth=2
	neg	x2, x2
.LBB27_1086:                            // %ggml_vec_leaky_relu_f32.exit.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_1080 Depth=2
	cbz	x15, .LBB27_1079
// %bb.1087:                            // %.lr.ph.i.i.i190.epil
                                        //   in Loop: Header=BB27_1080 Depth=2
	madd	x4, x8, x17, x11
	fmov	s2, wzr
	ldr	s1, [x4, x2, lsl #2]
	nop
	madd	x3, x8, x12, x10
	fmaxnm	s3, s1, s2
	fminnm	s1, s1, s2
	fmadd	s1, s0, s1, s3
	str	s1, [x3, x2, lsl #2]
	b	.LBB27_1079
.LBB27_1088:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	w8, [x9, #96]
	cmp	w8, #1
	b.hi	.LBB27_2649
// %bb.1089:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [x9, #168]
	ldr	x8, [x9, #16]
	ldr	x24, [x10, #16]
	cmp	x8, x24
	b.ne	.LBB27_2650
// %bb.1090:                            //   in Loop: Header=BB27_3 Depth=1
	str	x10, [sp, #656]                 // 8-byte Folded Spill
	ldr	x10, [x9, #152]
	ldr	x8, [x9, #32]
	ldr	x11, [x10, #24]
	str	x11, [sp, #528]                 // 8-byte Folded Spill
	cmp	x8, x11
	b.ne	.LBB27_2651
// %bb.1091:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #16]
	str	x10, [sp, #512]                 // 8-byte Folded Spill
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [x10, #32]
	ldr	x11, [x9, #176]
	ldr	x26, [x9, #160]
	ldr	w0, [x10]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [x10, #40]
	ldp	x27, x19, [x9, #64]
	ldr	w22, [sp, #788]
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	x8, [x10, #48]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [x10, #56]
	stp	x8, x11, [sp, #488]             // 16-byte Folded Spill
	ldp	x11, x8, [x10, #64]
	stp	x8, x11, [sp, #472]             // 16-byte Folded Spill
	ldp	x11, x8, [x26, #16]
	str	x11, [sp, #696]                 // 8-byte Folded Spill
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldp	x11, x8, [x26, #32]
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	ldp	x23, x8, [x26, #48]
	str	x11, [sp, #680]                 // 8-byte Folded Spill
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldp	x11, x8, [x26, #64]
	stp	x8, x11, [sp, #392]             // 16-byte Folded Spill
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	ldr	x11, [x8, #32]
	str	x11, [sp, #664]                 // 8-byte Folded Spill
	ldp	x11, x28, [x8, #40]
	str	x11, [sp, #688]                 // 8-byte Folded Spill
	ldp	x25, x11, [x8, #56]
	ldr	x8, [x8, #72]
	stp	x8, x11, [sp, #376]             // 16-byte Folded Spill
	ldr	x8, [x9, #24]
	str	x8, [sp, #456]                  // 8-byte Folded Spill
	ldp	x21, x8, [x9, #48]
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	ldrsw	x8, [sp, #784]
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	bl	ggml_type_size
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	cmp	x8, x0
	b.ne	.LBB27_2652
// %bb.1092:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w0, [x26]
	str	x26, [sp, #712]                 // 8-byte Folded Spill
	bl	ggml_type_size
	cmp	x23, x0
	b.ne	.LBB27_2653
// %bb.1093:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [sp, #656]                 // 8-byte Folded Reload
	ldr	w0, [x23]
	bl	ggml_type_size
	cmp	x28, x0
	b.ne	.LBB27_2654
// %bb.1094:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	cmp	x8, x9
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	b.ne	.LBB27_2655
// %bb.1095:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x21, #4
	b.ne	.LBB27_2656
// %bb.1096:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, #3
	b.ls	.LBB27_2657
// %bb.1097:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, x27
	b.hi	.LBB27_2658
// %bb.1098:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x27, x19
	b.hi	.LBB27_2659
// %bb.1099:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x26, [sp, #528]                 // 8-byte Folded Reload
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	mul	x8, x10, x26
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	ldr	x11, [sp, #720]                 // 8-byte Folded Reload
	ldr	x19, [sp, #712]                 // 8-byte Folded Reload
	str	x8, [sp, #448]                  // 8-byte Folded Spill
	mul	w8, w8, w9
	add	w9, w8, w22
	sub	w9, w9, #1
	sdiv	w9, w9, w22
	mul	w22, w9, w11
	add	w9, w22, w9
	cmp	w9, w8
	csel	w8, w9, w8, lt
	str	w8, [sp, #520]                  // 4-byte Folded Spill
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	s14, [x8, #92]
	ldr	s13, [x8, #84]
	fcmp	s14, #0.0
	b.eq	.LBB27_1101
// %bb.1100:                            // %select.true.sink
                                        //   in Loop: Header=BB27_3 Depth=1
	fdiv	s13, s13, s14
.LBB27_1101:                            // %select.end
                                        //   in Loop: Header=BB27_3 Depth=1
	ucvtf	d0, w10
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	s9, [x8, #88]
	bl	log2
	fcvtmu	w8, d0
	mov	w9, #1                          // =0x1
	fneg	s0, s9
	lsl	w8, w9, w8
	str	w8, [sp, #336]                  // 4-byte Folded Spill
	ucvtf	s8, w8
	fdiv	s0, s0, s8
	bl	exp2f
	str	s0, [sp, #304]                  // 4-byte Folded Spill
	fmov	s0, #-0.50000000
	fmul	s0, s9, s0
	str	s9, [sp, #440]                  // 4-byte Folded Spill
	fdiv	s0, s0, s8
	bl	exp2f
	ldr	w9, [x19]
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	ldr	w0, [x23]
	str	s0, [sp, #272]                  // 4-byte Folded Spill
	add	x9, x8, x9, lsl #5
	ldr	w10, [x9, #16]
	lsl	x10, x10, #5
	ldr	x19, [x8, x10]
	ldr	x8, [x9, #8]
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	bl	ggml_get_type_traits
	str	x19, [sp, #432]                 // 8-byte Folded Spill
	cbz	x19, .LBB27_2660
// %bb.1102:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x0, #40]
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	cbz	x8, .LBB27_2661
// %bb.1103:                            // %.preheader356.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #520]                  // 4-byte Folded Reload
	cmp	w22, w8
	b.ge	.LBB27_7
// %bb.1104:                            // %.lr.ph363.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	lsl	x28, x24, #2
	sxtw	x21, w22
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	sdiv	x10, x9, x8
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	sdiv	x8, x11, x8
	stp	x8, x10, [sp, #360]             // 16-byte Folded Spill
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	sub	x10, x24, #1
	str	x10, [sp, #312]                 // 8-byte Folded Spill
	and	x10, x24, #0x1
	str	x10, [sp, #624]                 // 8-byte Folded Spill
	sdiv	x8, x9, x8
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	str	x8, [sp, #352]                  // 8-byte Folded Spill
	lsl	x8, x24, #1
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	add	x8, x8, x24, lsl #1
	add	x8, x8, #16
	mul	x8, x8, x9
	and	x9, x24, #0x7fffffff
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	sub	x9, x9, x10
	and	x10, x24, #0x3
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	str	x8, [sp, #424]                  // 8-byte Folded Spill
	sdiv	x9, x11, x9
	str	x9, [sp, #344]                  // 8-byte Folded Spill
	lsl	x9, x8, #2
	and	x8, x24, #0x7ffffffffffffffc
	neg	x27, x8
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x9, x24, lsl #2
	stp	x10, x27, [sp, #408]            // 16-byte Folded Spill
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	b	.LBB27_1106
	.p2align	5, , 16
.LBB27_1105:                            // %ggml_vec_scale_f32.exit354.i.i
                                        //   in Loop: Header=BB27_1106 Depth=2
	mul	x9, x12, x26
	ldr	x10, [sp, #584]                 // 8-byte Folded Reload
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	mov	x1, x21
	add	x9, x10, x9
	ldr	x10, [sp, #456]                 // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	ldr	x2, [sp, #536]                  // 8-byte Folded Reload
	mul	x9, x9, x10
	add	x9, x9, x13
	madd	x0, x9, x2, x8
	bl	memcpy
	ldr	x21, [sp, #592]                 // 8-byte Folded Reload
	add	x21, x21, #1
	ldr	w8, [sp, #520]                  // 4-byte Folded Reload
	cmp	w8, w21
	b.eq	.LBB27_7
.LBB27_1106:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1123 Depth 3
                                        //         Child Loop BB27_1137 Depth 4
                                        //         Child Loop BB27_1141 Depth 4
                                        //         Child Loop BB27_1144 Depth 4
                                        //         Child Loop BB27_1155 Depth 4
                                        //         Child Loop BB27_1159 Depth 4
                                        //         Child Loop BB27_1163 Depth 4
                                        //         Child Loop BB27_1131 Depth 4
                                        //         Child Loop BB27_1149 Depth 4
                                        //       Child Loop BB27_1172 Depth 3
                                        //       Child Loop BB27_1175 Depth 3
                                        //       Child Loop BB27_1180 Depth 3
                                        //       Child Loop BB27_1184 Depth 3
                                        //       Child Loop BB27_1187 Depth 3
	ldr	x9, [sp, #448]                  // 8-byte Folded Reload
	fmov	s10, #1.00000000
	sdiv	x8, x21, x9
	ldr	s0, [sp, #440]                  // 4-byte Folded Reload
	fcmp	s0, #0.0
	sxtw	x8, w8
	msub	x22, x8, x9, x21
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	sdiv	x19, x22, x26
	b.le	.LBB27_1111
// %bb.1107:                            //   in Loop: Header=BB27_1106 Depth=2
	ldr	w8, [sp, #336]                  // 4-byte Folded Reload
	subs	w8, w19, w8
	b.hs	.LBB27_1109
// %bb.1108:                            //   in Loop: Header=BB27_1106 Depth=2
	ldr	s0, [sp, #304]                  // 4-byte Folded Reload
	add	w8, w19, #1
	b	.LBB27_1110
.LBB27_1109:                            //   in Loop: Header=BB27_1106 Depth=2
	mov	w9, #1                          // =0x1
	ldr	s0, [sp, #272]                  // 4-byte Folded Reload
	orr	w8, w9, w8, lsl #1
.LBB27_1110:                            //   in Loop: Header=BB27_1106 Depth=2
	ucvtf	s1, w8
	bl	powf
	fmov	s10, s0
.LBB27_1111:                            //   in Loop: Header=BB27_1106 Depth=2
	ldr	x9, [sp, #800]
	str	x21, [sp, #592]                 // 8-byte Folded Spill
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldr	x8, [sp, #424]                  // 8-byte Folded Reload
	add	x21, x9, x8, lsl #2
	ldr	w8, [x23]
	add	x0, x21, x24, lsl #2
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	cmp	w8, #1
	b.ne	.LBB27_1113
// %bb.1112:                            //   in Loop: Header=BB27_1106 Depth=2
	ldr	x2, [sp, #744]                  // 8-byte Folded Reload
	mov	w1, wzr
	b	.LBB27_1114
.LBB27_1113:                            //   in Loop: Header=BB27_1106 Depth=2
	mov	x0, x21
	mov	w1, wzr
	mov	x2, x28
.LBB27_1114:                            //   in Loop: Header=BB27_1106 Depth=2
	bl	memset
	msub	x8, x19, x26, x22
	ldr	x10, [sp, #512]                 // 8-byte Folded Reload
	ldr	x11, [sp, #496]                 // 8-byte Folded Reload
	cbz	x11, .LBB27_1116
// %bb.1115:                            //   in Loop: Header=BB27_1106 Depth=2
	ldr	x9, [x11, #248]
	sxtw	x12, w8
	ldr	x8, [x11, #56]
	nop
	madd	x27, x8, x12, x9
	b	.LBB27_1117
.LBB27_1116:                            // %._crit_edge371.i.i
                                        //   in Loop: Header=BB27_1106 Depth=2
	mov	x27, xzr
	sxtw	x12, w8
.LBB27_1117:                            //   in Loop: Header=BB27_1106 Depth=2
	ldr	x8, [x10, #248]
	sxtw	x19, w19
	str	x12, [sp, #584]                 // 8-byte Folded Spill
	ldp	x9, x10, [sp, #480]             // 16-byte Folded Reload
	nop
	madd	x8, x12, x10, x8
	ldr	x22, [sp, #632]                 // 8-byte Folded Reload
	ldr	x2, [sp, #736]                  // 8-byte Folded Reload
	nop
	madd	x8, x19, x9, x8
	ldr	x9, [sp, #472]                  // 8-byte Folded Reload
	nop
	madd	x0, x22, x9, x8
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	add	x1, x21, x8, lsl #2
	ldr	x8, [sp, #432]                  // 8-byte Folded Reload
	blr	x8
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	str	x19, [sp, #576]                 // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_1166
// %bb.1118:                            // %.lr.ph.i.i175
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x9, [sp, #368]                  // 8-byte Folded Reload
	fmov	s8, wzr
	mov	x26, xzr
	ldp	x8, x10, [sp, #352]             // 16-byte Folded Reload
	sdiv	x9, x19, x9
	ldr	x11, [sp, #344]                 // 8-byte Folded Reload
	ldr	x15, [sp, #616]                 // 8-byte Folded Reload
	ldr	x14, [sp, #560]                 // 8-byte Folded Reload
	add	x12, x15, #4
	add	x13, x12, x14
	str	x13, [sp, #640]                 // 8-byte Folded Spill
	ldr	x13, [sp, #400]                 // 8-byte Folded Reload
	sxtw	x9, w9
	sdiv	x8, x19, x8
	sxtw	x8, w8
	mul	x9, x9, x13
	add	x13, x15, x14
	str	x13, [sp, #600]                 // 8-byte Folded Spill
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	add	x9, x13, #8
	str	x9, [sp, #552]                  // 8-byte Folded Spill
	ldr	x9, [sp, #384]                  // 8-byte Folded Reload
	mul	x9, x8, x9
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	add	x8, x12, x8
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	add	x8, x13, #12
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #376]                  // 8-byte Folded Reload
	sdiv	x11, x22, x11
	sxtw	x11, w11
	mul	x11, x11, x8
	mov	w8, #-8388608                   // =0xff800000
	fmov	s15, w8
	ldr	x8, [sp, #392]                  // 8-byte Folded Reload
	str	x11, [sp, #672]                 // 8-byte Folded Spill
	sdiv	x10, x22, x10
	sxtw	x10, w10
	add	x22, x9, x11
	mul	x8, x10, x8
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	b	.LBB27_1123
.LBB27_1119:                            //   in Loop: Header=BB27_1123 Depth=3
	ldr	x23, [sp, #656]                 // 8-byte Folded Reload
.LBB27_1120:                            //   in Loop: Header=BB27_1123 Depth=3
	fmov	s9, s15
.LBB27_1121:                            // %ggml_vec_mad_f16.exit.i.i
                                        //   in Loop: Header=BB27_1123 Depth=3
	fmadd	s8, s8, s11, s12
	fmov	s15, s9
.LBB27_1122:                            //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	add	x26, x26, #1
	add	x22, x22, x25
	cmp	x26, x8
	b.eq	.LBB27_1167
.LBB27_1123:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1137 Depth 4
                                        //         Child Loop BB27_1141 Depth 4
                                        //         Child Loop BB27_1144 Depth 4
                                        //         Child Loop BB27_1155 Depth 4
                                        //         Child Loop BB27_1159 Depth 4
                                        //         Child Loop BB27_1163 Depth 4
                                        //         Child Loop BB27_1131 Depth 4
                                        //         Child Loop BB27_1149 Depth 4
	fmov	s9, wzr
	cbz	x27, .LBB27_1125
// %bb.1124:                            //   in Loop: Header=BB27_1123 Depth=3
	ldrh	w8, [x27, x26, lsl #1]
	ldr	s0, [x20, x8, lsl #2]
	mov	w8, #-8388608                   // =0xff800000
	fmul	s9, s10, s0
	fmov	s0, w8
	fcmp	s9, s0
	b.eq	.LBB27_1122
.LBB27_1125:                            // %.thread.i.i
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x1, sp, #1072
	mov	x2, xzr
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	mov	x4, xzr
	mov	x6, xzr
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	mov	w7, #1                          // =0x1
	ldr	x0, [sp, #736]                  // 8-byte Folded Reload
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	x8, [x8, #248]
	nop
	madd	x8, x26, x9, x8
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x9, x9, x10
	add	x3, x8, x9
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	add	x5, x21, x8, lsl #2
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	blr	x8
	ldr	s0, [sp, #1072]
	fcmp	s14, #0.0
	fmul	s0, s13, s0
	b.eq	.LBB27_1127
// %bb.1126:                            //   in Loop: Header=BB27_1123 Depth=3
	bl	tanhf
	fmul	s0, s14, s0
.LBB27_1127:                            //   in Loop: Header=BB27_1123 Depth=3
	fadd	s9, s9, s0
	ldr	x19, [x23, #248]
	str	s9, [sp, #1072]
	ldr	w8, [x23]
	cmp	w8, #1
	b.ne	.LBB27_1133
// %bb.1128:                            //   in Loop: Header=BB27_1123 Depth=3
	fcmp	s9, s15
	b.le	.LBB27_1146
// %bb.1129:                            //   in Loop: Header=BB27_1123 Depth=3
	fsub	s0, s15, s9
	bl	expf
	fmov	s11, s0
	cmp	w24, #1
	b.lt	.LBB27_1164
// %bb.1130:                            // %.lr.ph.i.i.i178.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x14, [sp, #688]                 // 8-byte Folded Reload
	mov	x8, x14
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1131:                            // %.lr.ph.i.i.i178
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w10, [x8]
	mov	w11, #125829120                 // =0x7800000
	ldr	s0, [x20, x10, lsl #2]
	mov	w10, #2004877312                // =0x77800000
	fmov	s2, w10
	mov	w10, #142606336                 // =0x8800000
	fmul	s0, s11, s0
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w10
	fmov	w10, s0
	and	w12, w10, #0x7f800000
	ubfx	w13, w10, #23, #8
	fmul	s0, s1, s2
	add	w11, w12, w11
	mov	w12, #1073741824                // =0x40000000
	cmp	w13, #113
	lsl	w13, w10, #1
	lsr	w10, w10, #31
	csel	w11, w12, w11, lo
	mov	w12, #-16777216                 // =0xff000000
	fmov	s1, w11
	cmp	w13, w12
	mov	w13, #32256                     // =0x7e00
	fadd	s0, s0, s1
	fmov	w11, s0
	lsr	w12, w11, #13
	and	w11, w11, #0xfff
	and	w12, w12, #0x7c00
	add	w11, w12, w11
	csel	w11, w13, w11, hi
	subs	x9, x9, #1
	orr	w10, w11, w10, lsl #15
	strh	w10, [x8], #2
	b.ne	.LBB27_1131
// %bb.1132:                            //   in Loop: Header=BB27_1123 Depth=3
	fmov	s12, #1.00000000
	b	.LBB27_1147
	.p2align	5, , 16
.LBB27_1133:                            //   in Loop: Header=BB27_1123 Depth=3
	madd	x23, x26, x25, x19
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	fcmp	s9, s15
	add	x19, x8, x9
	b.le	.LBB27_1150
// %bb.1134:                            //   in Loop: Header=BB27_1123 Depth=3
	fsub	s0, s15, s9
	bl	expf
	fmov	s11, s0
	cmp	w24, #1
	b.lt	.LBB27_1165
// %bb.1135:                            // %.lr.ph.i338.i.i.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	ldr	x1, [sp, #688]                  // 8-byte Folded Reload
	cmp	x11, #2
	b.hs	.LBB27_1137
// %bb.1136:                            //   in Loop: Header=BB27_1123 Depth=3
	mov	x8, xzr
	b	.LBB27_1139
	.p2align	5, , 16
.LBB27_1137:                            // %vector.body388
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s0, s1, [x9, #-4]
	subs	x8, x8, #2
	fmul	s1, s11, s1
	fmul	s0, s11, s0
	stp	s0, s1, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_1137
// %bb.1138:                            // %middle.block381
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	fmov	s12, #1.00000000
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_1145
.LBB27_1139:                            // %.lr.ph.i338.i.i.preheader522
                                        //   in Loop: Header=BB27_1123 Depth=3
	sub	w9, w24, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_1142
// %bb.1140:                            // %.lr.ph.i338.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1141:                            // %.lr.ph.i338.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x21, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s0, s11, s0
	str	s0, [x21, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1141
.LBB27_1142:                            // %.lr.ph.i338.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1123 Depth=3
	fmov	s12, #1.00000000
	sub	x8, x8, x11
	cmn	x8, #4
	b.hi	.LBB27_1145
// %bb.1143:                            // %.lr.ph.i338.i.i.preheader1520
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x10, [sp, #552]                 // 8-byte Folded Reload
	sub	x8, x11, x9
	add	x9, x10, x9, lsl #2
	.p2align	5, , 16
.LBB27_1144:                            // %.lr.ph.i338.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s0, s1, [x9, #-8]
	subs	x8, x8, #4
	ldp	s2, s3, [x9]
	fmul	s1, s11, s1
	fmul	s0, s11, s0
	fmul	s2, s11, s2
	stp	s0, s1, [x9, #-8]
	fmul	s0, s11, s3
	stp	s2, s0, [x9], #16
	b.ne	.LBB27_1144
.LBB27_1145:                            //   in Loop: Header=BB27_1123 Depth=3
	fmov	s15, s9
	b	.LBB27_1151
.LBB27_1146:                            //   in Loop: Header=BB27_1123 Depth=3
	fsub	s0, s9, s15
	bl	expf
	ldr	x14, [sp, #688]                 // 8-byte Folded Reload
	fmov	s12, s0
	fmov	s11, #1.00000000
	fmov	s9, s15
.LBB27_1147:                            // %ggml_vec_scale_f16.exit.i.i
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	cmp	w24, #1
	b.lt	.LBB27_1121
// %bb.1148:                            // %.lr.ph.i332.i.i.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	add	x8, x19, x22
	mov	x9, x14
	.p2align	5, , 16
.LBB27_1149:                            // %.lr.ph.i332.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w11, [x8], #2
	ldrh	w12, [x9]
	ldr	s0, [x20, x12, lsl #2]
	ldr	s1, [x20, x11, lsl #2]
	mov	w11, #2004877312                // =0x77800000
	mov	w12, #125829120                 // =0x7800000
	fmov	s2, w11
	mov	w11, #142606336                 // =0x8800000
	fmadd	s0, s1, s12, s0
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w11
	fmov	w11, s0
	and	w13, w11, #0x7f800000
	ubfx	w14, w11, #23, #8
	fmul	s0, s1, s2
	add	w12, w13, w12
	mov	w13, #1073741824                // =0x40000000
	cmp	w14, #113
	lsl	w14, w11, #1
	lsr	w11, w11, #31
	csel	w12, w13, w12, lo
	mov	w13, #-16777216                 // =0xff000000
	fmov	s1, w12
	cmp	w14, w13
	mov	w14, #32256                     // =0x7e00
	fadd	s0, s0, s1
	fmov	w12, s0
	lsr	w13, w12, #13
	and	w12, w12, #0xfff
	and	w13, w13, #0x7c00
	add	w12, w13, w12
	csel	w12, w14, w12, hi
	subs	x10, x10, #1
	orr	w11, w12, w11, lsl #15
	strh	w11, [x9], #2
	b.ne	.LBB27_1149
	b	.LBB27_1121
.LBB27_1150:                            //   in Loop: Header=BB27_1123 Depth=3
	fsub	s0, s9, s15
	bl	expf
	ldr	x1, [sp, #688]                  // 8-byte Folded Reload
	fmov	s12, s0
	fmov	s11, #1.00000000
.LBB27_1151:                            // %ggml_vec_scale_f32.exit.i.i176
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	add	x0, x23, x19
	mov	x2, x24
	blr	x8
	cmp	w24, #1
	b.lt	.LBB27_1119
// %bb.1152:                            // %.lr.ph.i344.i.i.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	cmp	x11, #2
	b.hs	.LBB27_1154
// %bb.1153:                            //   in Loop: Header=BB27_1123 Depth=3
	ldr	x23, [sp, #656]                 // 8-byte Folded Reload
	mov	x8, xzr
	b	.LBB27_1157
.LBB27_1154:                            // %vector.body377.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1155:                            // %vector.body377
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s0, s1, [x8, #-4]
	subs	x10, x10, #2
	ldp	s2, s3, [x9, #-4]
	add	x8, x8, #8
	fmadd	s1, s1, s12, s3
	fmadd	s0, s0, s12, s2
	stp	s0, s1, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_1155
// %bb.1156:                            // %middle.block370
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	ldr	x23, [sp, #656]                 // 8-byte Folded Reload
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_1120
.LBB27_1157:                            // %.lr.ph.i344.i.i.preheader520
                                        //   in Loop: Header=BB27_1123 Depth=3
	sub	w9, w24, w8
	mov	x10, x8
	ands	x9, x9, #0x3
	b.eq	.LBB27_1161
// %bb.1158:                            // %.lr.ph.i344.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x11, [sp, #600]                 // 8-byte Folded Reload
	neg	x10, x8
	add	x11, x11, x8, lsl #2
	.p2align	5, , 16
.LBB27_1159:                            // %.lr.ph.i344.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x11, x28]
	sub	x10, x10, #1
	subs	x9, x9, #1
	ldr	s1, [x11]
	fmadd	s0, s0, s12, s1
	str	s0, [x11], #4
	b.ne	.LBB27_1159
// %bb.1160:                            // %.lr.ph.i344.i.i.prol.loopexit.loopexit
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	neg	x10, x10
.LBB27_1161:                            // %.lr.ph.i344.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1123 Depth=3
	sub	x8, x8, x11
	cmn	x8, #4
	b.hi	.LBB27_1120
// %bb.1162:                            // %.lr.ph.i344.i.i.preheader1518
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x9, [sp, #568]                  // 8-byte Folded Reload
	sub	x8, x11, x10
	add	x9, x9, x10, lsl #2
	.p2align	5, , 16
.LBB27_1163:                            // %.lr.ph.i344.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        //       Parent Loop BB27_1123 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add	x10, x9, x28
	ldp	s1, s2, [x9, #-12]
	ldur	s0, [x10, #-12]
	subs	x8, x8, #4
	fmadd	s0, s0, s12, s1
	stur	s0, [x9, #-12]
	ldur	s0, [x10, #-8]
	fmadd	s0, s0, s12, s2
	ldp	s1, s2, [x9, #-4]
	stur	s0, [x9, #-8]
	ldur	s0, [x10, #-4]
	fmadd	s0, s0, s12, s1
	stur	s0, [x9, #-4]
	ldr	s0, [x10]
	fmadd	s0, s0, s12, s2
	str	s0, [x9], #16
	b.ne	.LBB27_1163
	b	.LBB27_1120
.LBB27_1164:                            //   in Loop: Header=BB27_1123 Depth=3
	fmov	s12, #1.00000000
	b	.LBB27_1121
.LBB27_1165:                            // %ggml_vec_scale_f32.exit.thread.i.i
                                        //   in Loop: Header=BB27_1123 Depth=3
	ldr	x1, [sp, #688]                  // 8-byte Folded Reload
	add	x0, x23, x19
	mov	x2, x24
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	blr	x8
	ldr	x23, [sp, #656]                 // 8-byte Folded Reload
	fmov	s12, #1.00000000
	b	.LBB27_1121
.LBB27_1166:                            //   in Loop: Header=BB27_1106 Depth=2
	fmov	s8, wzr
.LBB27_1167:                            // %._crit_edge.i.i171
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x26, [sp, #528]                 // 8-byte Folded Reload
	ldr	x27, [sp, #416]                 // 8-byte Folded Reload
	ldr	x12, [sp, #632]                 // 8-byte Folded Reload
	ldr	x13, [sp, #576]                 // 8-byte Folded Reload
	cmp	x24, #1
	b.lt	.LBB27_1176
// %bb.1168:                            // %._crit_edge.i.i171
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	w8, [x23]
	cmp	w8, #1
	b.ne	.LBB27_1176
// %bb.1169:                            // %.lr.ph361.i.i.preheader
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x8, [sp, #312]                  // 8-byte Folded Reload
	cmp	x8, #3
	b.hs	.LBB27_1171
// %bb.1170:                            //   in Loop: Header=BB27_1106 Depth=2
	mov	x9, xzr
	ldr	x8, [sp, #408]                  // 8-byte Folded Reload
	cbnz	x8, .LBB27_1174
	b	.LBB27_1176
.LBB27_1171:                            // %.lr.ph361.i.i.preheader1554
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x9, [sp, #544]                  // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x11, [sp, #616]                 // 8-byte Folded Reload
	add	x9, x11, x9
	ldr	x10, [sp, #560]                 // 8-byte Folded Reload
	add	x10, x11, x10
	add	x9, x9, #4
	add	x10, x10, #8
	.p2align	5, , 16
.LBB27_1172:                            // %.lr.ph361.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldurh	w11, [x9, #-4]
	sub	x8, x8, #4
	ldr	s0, [x20, x11, lsl #2]
	stur	s0, [x10, #-8]
	ldurh	w11, [x9, #-2]
	ldr	s0, [x20, x11, lsl #2]
	stur	s0, [x10, #-4]
	ldrh	w11, [x9]
	ldr	s0, [x20, x11, lsl #2]
	str	s0, [x10]
	ldrh	w11, [x9, #2]
	add	x9, x9, #8
	ldr	s0, [x20, x11, lsl #2]
	str	s0, [x10, #4]
	add	x10, x10, #16
	cmp	x27, x8
	b.ne	.LBB27_1172
// %bb.1173:                            // %.loopexit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1106 Depth=2
	neg	x9, x8
	ldr	x8, [sp, #408]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_1176
.LBB27_1174:                            // %.lr.ph361.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	ldr	x11, [sp, #616]                 // 8-byte Folded Reload
	add	x8, x11, x8
	ldr	x10, [sp, #544]                 // 8-byte Folded Reload
	add	x10, x11, x10
	add	x8, x8, x9, lsl #2
	add	x9, x10, x9, lsl #1
	ldr	x10, [sp, #408]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1175:                            // %.lr.ph361.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w11, [x9], #2
	subs	x10, x10, #1
	ldr	s0, [x20, x11, lsl #2]
	str	s0, [x8], #4
	b.ne	.LBB27_1175
.LBB27_1176:                            // %.loopexit.i.i
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	cmp	w24, #1
	b.lt	.LBB27_1105
// %bb.1177:                            // %.lr.ph.i350.i.i.preheader
                                        //   in Loop: Header=BB27_1106 Depth=2
	fmov	s0, #1.00000000
	fdiv	s0, s0, s8
	cmp	x11, #2
	b.hs	.LBB27_1179
// %bb.1178:                            //   in Loop: Header=BB27_1106 Depth=2
	mov	x8, xzr
	b	.LBB27_1182
.LBB27_1179:                            // %vector.body366.preheader
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	ldr	x9, [sp, #616]                  // 8-byte Folded Reload
	add	x8, x9, x8
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	add	x8, x8, #4
	.p2align	5, , 16
.LBB27_1180:                            // %vector.body366
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x8, #-4]
	subs	x9, x9, #2
	fmul	s2, s0, s2
	fmul	s1, s0, s1
	stp	s1, s2, [x8, #-4]
	add	x8, x8, #8
	b.ne	.LBB27_1180
// %bb.1181:                            // %middle.block359
                                        //   in Loop: Header=BB27_1106 Depth=2
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_1105
.LBB27_1182:                            // %.lr.ph.i350.i.i.preheader531
                                        //   in Loop: Header=BB27_1106 Depth=2
	sub	w9, w24, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_1185
// %bb.1183:                            // %.lr.ph.i350.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1106 Depth=2
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1184:                            // %.lr.ph.i350.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x21, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s1, s0, s1
	str	s1, [x21, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1184
.LBB27_1185:                            // %.lr.ph.i350.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1106 Depth=2
	sub	x8, x8, x11
	cmn	x8, #4
	b.hi	.LBB27_1105
// %bb.1186:                            // %.lr.ph.i350.i.i.preheader531.new
                                        //   in Loop: Header=BB27_1106 Depth=2
	sub	x8, x11, x9
	ldr	x10, [sp, #560]                 // 8-byte Folded Reload
	ldr	x11, [sp, #616]                 // 8-byte Folded Reload
	add	x10, x11, x10
	add	x9, x10, x9, lsl #2
	add	x9, x9, #8
	.p2align	5, , 16
.LBB27_1187:                            // %.lr.ph.i350.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1106 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x9, #-8]
	subs	x8, x8, #4
	ldp	s3, s4, [x9]
	fmul	s2, s0, s2
	fmul	s1, s0, s1
	fmul	s3, s0, s3
	stp	s1, s2, [x9, #-8]
	fmul	s1, s0, s4
	stp	s3, s1, [x9], #16
	b.ne	.LBB27_1187
	b	.LBB27_1105
.LBB27_1188:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	w8, [x10, #84]
	str	w8, [sp, #592]                  // 4-byte Folded Spill
	cmp	w8, #2
	b.hs	.LBB27_2662
// %bb.1189:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [x10, #152]
	ldr	w8, [x0]
	cbnz	w8, .LBB27_2663
// %bb.1190:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #160]
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	ldr	x11, [x8, #24]
	ldp	x26, x9, [x0, #16]
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	add	w8, w11, #3
	sub	x19, x11, x9
	and	w8, w8, #0xfffffffc
	sxtw	x12, w8
	cmp	x26, x12
	csel	x20, x26, x12, gt
	tbz	x19, #63, .LBB27_1191
	b	.LBB27_2664
.LBB27_1191:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x0, #48]
	cmp	x8, #4
	b.ne	.LBB27_2665
// %bb.1192:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2666
// %bb.1193:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #168]
	str	x8, [sp, #416]                  // 8-byte Folded Spill
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2667
// %bb.1194:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	ldr	x8, [x8, #16]
	cmp	x8, x26
	b.ne	.LBB27_2668
// %bb.1195:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #416]                  // 8-byte Folded Reload
	ldr	x8, [x8, #24]
	cmp	x8, x26
	b.ne	.LBB27_2669
// %bb.1196:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [x10, #176]
	ldr	x8, [x13, #16]
	cmp	x8, x26
	b.ne	.LBB27_2670
// %bb.1197:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x13, #24]
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.ne	.LBB27_2671
// %bb.1198:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #48]
	cmp	x8, #4
	b.ne	.LBB27_2672
// %bb.1199:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #56]
	cmp	x8, #3
	b.ls	.LBB27_2673
// %bb.1200:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #64]
	cmp	x8, x9
	b.hi	.LBB27_2674
// %bb.1201:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #72]
	str	x12, [sp, #616]                 // 8-byte Folded Spill
	str	x11, [sp, #608]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.hi	.LBB27_2675
// %bb.1202:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x0, #32]
	str	x13, [sp, #584]                 // 8-byte Folded Spill
	str	x0, [sp, #624]                  // 8-byte Folded Spill
	ldr	x10, [x0, #72]
	ldr	w24, [sp, #784]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldp	x9, x8, [x0, #56]
	ldr	w28, [sp, #788]
	str	x8, [sp, #208]                  // 8-byte Folded Spill
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	str	x9, [sp, #576]                  // 8-byte Folded Spill
	ldp	x9, x25, [x8, #32]
	str	x9, [sp, #272]                  // 8-byte Folded Spill
	ldp	x11, x9, [x8, #56]
	str	x11, [sp, #600]                 // 8-byte Folded Spill
	stp	x9, x10, [sp, #128]             // 16-byte Folded Spill
	ldr	x10, [x8, #72]
	ldr	x8, [sp, #416]                  // 8-byte Folded Reload
	ldp	x27, x9, [x8, #56]
	ldr	x23, [x8, #16]
	stp	x9, x10, [sp, #112]             // 16-byte Folded Spill
	ldr	x9, [x8, #72]
	ldp	x10, x8, [x13, #48]
	str	x10, [sp, #568]                 // 8-byte Folded Spill
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	ldp	x10, x8, [x13, #64]
	str	x10, [sp, #200]                 // 8-byte Folded Spill
	stp	x8, x9, [sp, #96]               // 16-byte Folded Spill
	cbnz	w24, .LBB27_1204
// %bb.1203:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	mov	w1, wzr
	ldr	x0, [x12, #248]
	ldp	x8, x9, [x12, #16]
	mul	x8, x8, x9
	ldp	x10, x11, [x12, #32]
	mul	x8, x8, x10
	mul	x8, x8, x11
	lsl	x2, x8, #2
	bl	memset
	ldr	x0, [sp, #624]                  // 8-byte Folded Reload
.LBB27_1204:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1206
// %bb.1205:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
	ldr	x0, [sp, #624]                  // 8-byte Folded Reload
.LBB27_1206:                            // %ggml_barrier.exit.i.i149
                                        //   in Loop: Header=BB27_3 Depth=1
	bl	ggml_nelements
	mov	x22, x0
	ldr	x0, [sp, #648]                  // 8-byte Folded Reload
	bl	ggml_nelements
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	str	x0, [sp, #760]                  // 8-byte Folded Spill
	ldr	w0, [x8]
	mov	w21, w0
	bl	ggml_blck_size
	cmp	x0, #1
	b.ne	.LBB27_2676
// %bb.1207:                            //   in Loop: Header=BB27_3 Depth=1
	mov	w0, w21
	bl	ggml_type_size
	ldr	x8, [sp, #272]                  // 8-byte Folded Reload
	mul	w8, w25, w8
	ldr	x1, [sp, #624]                  // 8-byte Folded Reload
	ldr	x2, [sp, #608]                  // 8-byte Folded Reload
	ldr	x3, [sp, #616]                  // 8-byte Folded Reload
	ldr	x5, [sp, #600]                  // 8-byte Folded Reload
	add	w9, w8, w28
	sub	w9, w9, #1
	sdiv	w9, w9, w28
	mul	w10, w9, w24
	add	w9, w10, w9
	cmp	w9, w8
	csel	w11, w9, w8, lt
	cmp	w10, w11
	b.ge	.LBB27_7
// %bb.1208:                            // %.lr.ph543.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	sxtw	x10, w10
	ldr	x4, [sp, #752]                  // 8-byte Folded Reload
	mov	x9, #15                         // =0xf
	str	x10, [sp, #160]                 // 8-byte Folded Spill
	sxtw	x10, w11
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	str	x10, [sp, #152]                 // 8-byte Folded Spill
	ldr	x10, [sp, #272]                 // 8-byte Folded Reload
	nop
	madd	x8, x0, x22, x9
	scvtf	s0, x26
	sxtw	x13, w20
	madd	x9, x0, x12, x9
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	sxtw	x16, w2
	add	x14, x13, #16
	fmov	s1, #1.00000000
	and	x0, x26, #0x3
	sdiv	x10, x4, x10
	and	x8, x8, #0xfffffffffffffff0
	lsl	x7, x26, #2
	lsl	x20, x23, #2
	str	x16, [sp, #368]                 // 8-byte Folded Spill
	str	x7, [sp, #552]                  // 8-byte Folded Spill
	ldr	x15, [x12, #248]
	lsl	w12, w24, #1
	str	x20, [sp, #544]                 // 8-byte Folded Spill
	sxtw	x12, w12
	and	x9, x9, #0xfffffffffffffff0
	str	x0, [sp, #512]                  // 8-byte Folded Spill
	fsqrt	s0, s0
	fdiv	s8, s1, s0
	str	x10, [sp, #144]                 // 8-byte Folded Spill
	and	x10, x10, #0x7fffffff
	mul	x12, x14, x12
	add	x14, x19, #1
	str	x14, [sp, #536]                 // 8-byte Folded Spill
	mov	w14, w3
	str	x14, [sp, #408]                 // 8-byte Folded Spill
	and	x14, x2, #0x7fffffff
	and	x19, x26, #0x7fffffff
	lsl	x17, x12, #2
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	sub	x30, x19, #1
	sub	x28, x0, x19
	str	x12, [sp, #88]                  // 8-byte Folded Spill
	str	x19, [sp, #528]                 // 8-byte Folded Spill
	str	x30, [sp, #520]                 // 8-byte Folded Spill
	str	x10, [sp, #256]                 // 8-byte Folded Spill
	sub	x10, x3, x16
	str	x10, [sp, #480]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffffe
	str	x10, [sp, #472]                 // 8-byte Folded Spill
	add	x10, x16, x10
	str	x10, [sp, #344]                 // 8-byte Folded Spill
	and	x10, x2, #0x1
	str	x10, [sp, #352]                 // 8-byte Folded Spill
	sub	x10, x14, x10
	lsl	x14, x4, #2
	str	x10, [sp, #400]                 // 8-byte Folded Spill
	and	x10, x26, #0x1
	stp	x14, x17, [sp, #72]             // 16-byte Folded Spill
	sub	x11, x19, x10
	stp	x27, x10, [sp, #488]            // 16-byte Folded Spill
	str	x11, [sp, #760]                 // 8-byte Folded Spill
	lsl	x11, x13, #2
	add	x13, x15, #4
	add	x14, x13, x8
	stp	x13, x15, [sp, #184]            // 16-byte Folded Spill
	str	x11, [sp, #392]                 // 8-byte Folded Spill
	str	x14, [sp, #64]                  // 8-byte Folded Spill
	add	x14, x15, x8
	add	x8, x9, x8
	add	x9, x13, x8
	add	x8, x15, x8
	stp	x9, x14, [sp, #48]              // 16-byte Folded Spill
	mul	x9, x23, x26
	stp	x8, x9, [sp, #32]               // 16-byte Folded Spill
	neg	x8, x3
	add	x9, x17, w2, sxtw #2
	str	x8, [sp, #336]                  // 8-byte Folded Spill
	add	x8, x11, x12, lsl #2
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	add	x8, x11, #64
	str	x8, [sp, #640]                  // 8-byte Folded Spill
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	mul	x8, x26, x8
	str	x8, [sp, #176]                  // 8-byte Folded Spill
	mul	x8, x26, x2
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB27_1210
	.p2align	5, , 16
.LBB27_1209:                            // %._crit_edge538.i.i
                                        //   in Loop: Header=BB27_1210 Depth=2
	ldp	x9, x8, [sp, #152]              // 16-byte Folded Reload
	add	x8, x8, #1
	str	x8, [sp, #160]                  // 8-byte Folded Spill
	cmp	x8, x9
	b.eq	.LBB27_7
.LBB27_1210:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1213 Depth 3
                                        //         Child Loop BB27_1216 Depth 4
                                        //           Child Loop BB27_1218 Depth 5
                                        //           Child Loop BB27_1222 Depth 5
                                        //           Child Loop BB27_1225 Depth 5
                                        //           Child Loop BB27_1230 Depth 5
                                        //             Child Loop BB27_1234 Depth 6
                                        //             Child Loop BB27_1237 Depth 6
                                        //           Child Loop BB27_1243 Depth 5
                                        //           Child Loop BB27_1247 Depth 5
                                        //           Child Loop BB27_1250 Depth 5
                                        //           Child Loop BB27_1254 Depth 5
                                        //           Child Loop BB27_1258 Depth 5
                                        //           Child Loop BB27_1261 Depth 5
                                        //           Child Loop BB27_1267 Depth 5
                                        //           Child Loop BB27_1270 Depth 5
                                        //           Child Loop BB27_1273 Depth 5
                                        //           Child Loop BB27_1278 Depth 5
                                        //           Child Loop BB27_1282 Depth 5
                                        //           Child Loop BB27_1285 Depth 5
                                        //           Child Loop BB27_1290 Depth 5
                                        //             Child Loop BB27_1294 Depth 6
                                        //             Child Loop BB27_1298 Depth 6
                                        //             Child Loop BB27_1301 Depth 6
                                        //           Child Loop BB27_1307 Depth 5
                                        //           Child Loop BB27_1310 Depth 5
                                        //           Child Loop BB27_1315 Depth 5
                                        //           Child Loop BB27_1319 Depth 5
                                        //           Child Loop BB27_1322 Depth 5
                                        //           Child Loop BB27_1327 Depth 5
                                        //           Child Loop BB27_1330 Depth 5
                                        //           Child Loop BB27_1334 Depth 5
                                        //           Child Loop BB27_1338 Depth 5
                                        //           Child Loop BB27_1341 Depth 5
                                        //           Child Loop BB27_1345 Depth 5
                                        //             Child Loop BB27_1349 Depth 6
                                        //             Child Loop BB27_1353 Depth 6
                                        //             Child Loop BB27_1356 Depth 6
                                        //           Child Loop BB27_1359 Depth 5
                                        //             Child Loop BB27_1363 Depth 6
                                        //             Child Loop BB27_1367 Depth 6
                                        //             Child Loop BB27_1370 Depth 6
                                        //           Child Loop BB27_1374 Depth 5
                                        //             Child Loop BB27_1378 Depth 6
                                        //             Child Loop BB27_1382 Depth 6
                                        //             Child Loop BB27_1385 Depth 6
	ldr	x8, [sp, #144]                  // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB27_1209
// %bb.1211:                            // %.lr.ph537.i.i
                                        //   in Loop: Header=BB27_1210 Depth=2
	ldr	x10, [sp, #272]                 // 8-byte Folded Reload
	str	xzr, [sp, #312]                 // 8-byte Folded Spill
	ldr	x11, [sp, #160]                 // 8-byte Folded Reload
	sdiv	x8, x11, x10
	ldp	x15, x12, [sp, #80]             // 16-byte Folded Reload
	ldr	x13, [sp, #24]                  // 8-byte Folded Reload
	sxtw	x9, w8
	mul	w8, w8, w10
	ldr	x10, [sp, #120]                 // 8-byte Folded Reload
	sub	w16, w11, w8
	mul	x10, x9, x10
	ldp	x14, x8, [sp, #128]             // 16-byte Folded Reload
	mul	x17, x9, x8
	ldp	x11, x8, [sp, #96]              // 16-byte Folded Reload
	mul	x11, x9, x11
	mul	x8, x9, x8
	stp	x17, x16, [sp, #240]            // 16-byte Folded Spill
	str	x11, [sp, #664]                 // 8-byte Folded Spill
	ldr	x11, [sp, #800]
	add	x4, x11, x12, lsl #2
	add	x12, x11, #4
	add	x22, x11, x15
	add	x13, x12, x13
	str	x13, [sp, #376]                 // 8-byte Folded Spill
	add	x13, x22, #16
	str	x4, [sp, #768]                  // 8-byte Folded Spill
	str	x13, [sp, #360]                 // 8-byte Folded Spill
	sxtw	x13, w16
	madd	x10, x14, x13, x10
	str	x10, [sp, #656]                 // 8-byte Folded Spill
	add	x10, x17, #8
	str	x10, [sp, #232]                 // 8-byte Folded Spill
	add	x10, x12, x15
	ldr	x12, [sp, #16]                  // 8-byte Folded Reload
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	add	x10, x11, #8
	add	x10, x10, x15
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	add	x10, x11, #68
	add	x10, x10, x12
	add	x24, x11, x12
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	add	x10, x11, #64
	add	x10, x10, x12
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	add	x10, x24, #76
	str	x10, [sp, #384]                 // 8-byte Folded Spill
	ldr	x10, [sp, #112]                 // 8-byte Folded Reload
	nop
	madd	x11, x10, x13, x8
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	mul	x8, x8, x9
	ldr	x9, [sp, #64]                   // 8-byte Folded Reload
	str	x8, [sp, #224]                  // 8-byte Folded Spill
	add	x8, x8, w16, sxtw #2
                                        // kill: def $w16 killed $w16 killed $x16 def $x16
	str	x16, [sp, #304]                 // 8-byte Folded Spill
	nop
	madd	x9, x10, x8, x9
	stp	x9, x11, [sp, #448]             // 16-byte Folded Spill
	add	x9, x17, #4
	mov	x17, x4
	str	x9, [sp, #216]                  // 8-byte Folded Spill
	ldr	x9, [sp, #56]                   // 8-byte Folded Reload
	nop
	madd	x11, x10, x8, x9
	ldp	x10, x9, [sp, #40]              // 16-byte Folded Reload
	nop
	madd	x9, x10, x8, x9
	stp	x9, x11, [sp, #432]             // 16-byte Folded Spill
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	nop
	madd	x8, x10, x8, x9
	str	x8, [sp, #424]                  // 8-byte Folded Spill
	b	.LBB27_1213
	.p2align	5, , 16
.LBB27_1212:                            // %._crit_edge530.i.i
                                        //   in Loop: Header=BB27_1213 Depth=3
	ldp	x10, x9, [sp, #304]             // 16-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #272]                  // 8-byte Folded Reload
	add	w10, w10, w8
	ldr	x8, [sp, #256]                  // 8-byte Folded Reload
	stp	x10, x9, [sp, #304]             // 16-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_1209
.LBB27_1213:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1216 Depth 4
                                        //           Child Loop BB27_1218 Depth 5
                                        //           Child Loop BB27_1222 Depth 5
                                        //           Child Loop BB27_1225 Depth 5
                                        //           Child Loop BB27_1230 Depth 5
                                        //             Child Loop BB27_1234 Depth 6
                                        //             Child Loop BB27_1237 Depth 6
                                        //           Child Loop BB27_1243 Depth 5
                                        //           Child Loop BB27_1247 Depth 5
                                        //           Child Loop BB27_1250 Depth 5
                                        //           Child Loop BB27_1254 Depth 5
                                        //           Child Loop BB27_1258 Depth 5
                                        //           Child Loop BB27_1261 Depth 5
                                        //           Child Loop BB27_1267 Depth 5
                                        //           Child Loop BB27_1270 Depth 5
                                        //           Child Loop BB27_1273 Depth 5
                                        //           Child Loop BB27_1278 Depth 5
                                        //           Child Loop BB27_1282 Depth 5
                                        //           Child Loop BB27_1285 Depth 5
                                        //           Child Loop BB27_1290 Depth 5
                                        //             Child Loop BB27_1294 Depth 6
                                        //             Child Loop BB27_1298 Depth 6
                                        //             Child Loop BB27_1301 Depth 6
                                        //           Child Loop BB27_1307 Depth 5
                                        //           Child Loop BB27_1310 Depth 5
                                        //           Child Loop BB27_1315 Depth 5
                                        //           Child Loop BB27_1319 Depth 5
                                        //           Child Loop BB27_1322 Depth 5
                                        //           Child Loop BB27_1327 Depth 5
                                        //           Child Loop BB27_1330 Depth 5
                                        //           Child Loop BB27_1334 Depth 5
                                        //           Child Loop BB27_1338 Depth 5
                                        //           Child Loop BB27_1341 Depth 5
                                        //           Child Loop BB27_1345 Depth 5
                                        //             Child Loop BB27_1349 Depth 6
                                        //             Child Loop BB27_1353 Depth 6
                                        //             Child Loop BB27_1356 Depth 6
                                        //           Child Loop BB27_1359 Depth 5
                                        //             Child Loop BB27_1363 Depth 6
                                        //             Child Loop BB27_1367 Depth 6
                                        //             Child Loop BB27_1370 Depth 6
                                        //           Child Loop BB27_1374 Depth 5
                                        //             Child Loop BB27_1378 Depth 6
                                        //             Child Loop BB27_1382 Depth 6
                                        //             Child Loop BB27_1385 Depth 6
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1212
// %bb.1214:                            // %.lr.ph529.i.i
                                        //   in Loop: Header=BB27_1213 Depth=3
	ldr	x10, [sp, #304]                 // 8-byte Folded Reload
	mov	x12, xzr
	sxtw	x8, w10
	ldp	x11, x9, [sp, #208]             // 16-byte Folded Reload
	mul	x8, x11, x8
	ldr	x11, [sp, #176]                 // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	ldr	x9, [sp, #224]                  // 8-byte Folded Reload
	add	x9, x9, w10, sxtw #2
	ldr	x10, [sp, #192]                 // 8-byte Folded Reload
	nop
	madd	x21, x11, x9, x10
	ldr	x10, [sp, #184]                 // 8-byte Folded Reload
	nop
	madd	x9, x11, x9, x10
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldp	x9, x10, [sp, #232]             // 16-byte Folded Reload
	add	x4, x10, x8
	add	x6, x9, x8
	ldr	x8, [sp, #272]                  // 8-byte Folded Reload
	ldr	x9, [sp, #312]                  // 8-byte Folded Reload
	mul	w8, w9, w8
	ldr	x9, [sp, #248]                  // 8-byte Folded Reload
	add	w8, w8, w9
	ldr	x9, [sp, #200]                  // 8-byte Folded Reload
	sxtw	x8, w8
	mul	x8, x9, x8
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	b	.LBB27_1216
	.p2align	5, , 16
.LBB27_1215:                            // %._crit_edge516.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	add	x21, x21, x7
	add	x9, x9, x7
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	ldr	x6, [sp, #704]                  // 8-byte Folded Reload
	ldr	x4, [sp, #712]                  // 8-byte Folded Reload
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	add	x6, x6, x8
	add	x4, x4, x8
	add	x12, x12, #1
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	ldr	x0, [sp, #512]                  // 8-byte Folded Reload
	ldr	x17, [sp, #768]                 // 8-byte Folded Reload
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	cmp	x12, x8
	b.eq	.LBB27_1212
.LBB27_1216:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1218 Depth 5
                                        //           Child Loop BB27_1222 Depth 5
                                        //           Child Loop BB27_1225 Depth 5
                                        //           Child Loop BB27_1230 Depth 5
                                        //             Child Loop BB27_1234 Depth 6
                                        //             Child Loop BB27_1237 Depth 6
                                        //           Child Loop BB27_1243 Depth 5
                                        //           Child Loop BB27_1247 Depth 5
                                        //           Child Loop BB27_1250 Depth 5
                                        //           Child Loop BB27_1254 Depth 5
                                        //           Child Loop BB27_1258 Depth 5
                                        //           Child Loop BB27_1261 Depth 5
                                        //           Child Loop BB27_1267 Depth 5
                                        //           Child Loop BB27_1270 Depth 5
                                        //           Child Loop BB27_1273 Depth 5
                                        //           Child Loop BB27_1278 Depth 5
                                        //           Child Loop BB27_1282 Depth 5
                                        //           Child Loop BB27_1285 Depth 5
                                        //           Child Loop BB27_1290 Depth 5
                                        //             Child Loop BB27_1294 Depth 6
                                        //             Child Loop BB27_1298 Depth 6
                                        //             Child Loop BB27_1301 Depth 6
                                        //           Child Loop BB27_1307 Depth 5
                                        //           Child Loop BB27_1310 Depth 5
                                        //           Child Loop BB27_1315 Depth 5
                                        //           Child Loop BB27_1319 Depth 5
                                        //           Child Loop BB27_1322 Depth 5
                                        //           Child Loop BB27_1327 Depth 5
                                        //           Child Loop BB27_1330 Depth 5
                                        //           Child Loop BB27_1334 Depth 5
                                        //           Child Loop BB27_1338 Depth 5
                                        //           Child Loop BB27_1341 Depth 5
                                        //           Child Loop BB27_1345 Depth 5
                                        //             Child Loop BB27_1349 Depth 6
                                        //             Child Loop BB27_1353 Depth 6
                                        //             Child Loop BB27_1356 Depth 6
                                        //           Child Loop BB27_1359 Depth 5
                                        //             Child Loop BB27_1363 Depth 6
                                        //             Child Loop BB27_1367 Depth 6
                                        //             Child Loop BB27_1370 Depth 6
                                        //           Child Loop BB27_1374 Depth 5
                                        //             Child Loop BB27_1378 Depth 6
                                        //             Child Loop BB27_1382 Depth 6
                                        //             Child Loop BB27_1385 Depth 6
	cmp	w3, w2
	b.le	.LBB27_1226
// %bb.1217:                            // %.lr.ph.i.i164.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldp	x8, x9, [sp, #368]              // 16-byte Folded Reload
	ldp	x10, x11, [sp, #472]            // 16-byte Folded Reload
	cmp	x11, #2
	b.lo	.LBB27_1220
	.p2align	5, , 16
.LBB27_1218:                            // %vector.body501
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	mov	x8, #-36028792732385280         // =0xff800000ff800000
	subs	x10, x10, #2
	stur	x8, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_1218
// %bb.1219:                            // %middle.block493
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x8, [sp, #344]                  // 8-byte Folded Reload
	ldp	x10, x9, [sp, #472]             // 16-byte Folded Reload
	cmp	x9, x10
	b.eq	.LBB27_1226
.LBB27_1220:                            // %.lr.ph.i.i164.preheader518
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	w9, w3, w8
	ands	x10, x9, #0x7
	mov	x9, x8
	b.eq	.LBB27_1223
// %bb.1221:                            // %.lr.ph.i.i164.prol.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1222:                            // %.lr.ph.i.i164.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	mov	w11, #-8388608                  // =0xff800000
	subs	x10, x10, #1
	str	w11, [x22, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1222
.LBB27_1223:                            // %.lr.ph.i.i164.prol.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	x8, x8, x3
	cmn	x8, #8
	b.hi	.LBB27_1226
// %bb.1224:                            // %.lr.ph.i.i164.preheader1513
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x8, [sp, #336]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x10, [sp, #360]                 // 8-byte Folded Reload
	add	x9, x10, x9, lsl #2
	.p2align	5, , 16
.LBB27_1225:                            // %.lr.ph.i.i164
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	mov	x10, #-36028792732385280        // =0xff800000ff800000
	adds	x8, x8, #8
	stp	x10, x10, [x9, #-16]
	stp	x10, x10, [x9], #32
	b.ne	.LBB27_1225
	.p2align	5, , 16
.LBB27_1226:                            // %._crit_edge.i.i151
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	str	x12, [sp, #736]                 // 8-byte Folded Spill
	add	x8, x8, x12
	ldr	w9, [sp, #592]                  // 4-byte Folded Reload
	cmp	w9, #0
	csel	x25, x2, x8, eq
	cmp	x25, #1
	b.lt	.LBB27_1239
// %bb.1227:                            // %.lr.ph485.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x10, [sp, #656]                 // 8-byte Folded Reload
	ldr	x12, [x1, #248]
	add	x11, x12, x6
	ldr	x9, [x9, #248]
	add	x12, x12, x4
	add	x9, x9, x10
	add	x10, x9, #8
	b	.LBB27_1230
	.p2align	5, , 16
.LBB27_1228:                            //   in Loop: Header=BB27_1230 Depth=5
	fmov	s0, wzr
.LBB27_1229:                            // %ggml_vec_dot_f32.exit.i.i
                                        //   in Loop: Header=BB27_1230 Depth=5
	add	x8, x8, #1
	str	s0, [x17, x13, lsl #2]
	cmp	x8, x25
	b.eq	.LBB27_1239
.LBB27_1230:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1234 Depth 6
                                        //             Child Loop BB27_1237 Depth 6
	sxtw	x13, w8
	cmp	w26, #1
	b.lt	.LBB27_1228
// %bb.1231:                            // %.lr.ph.i393.i.i.preheader
                                        //   in Loop: Header=BB27_1230 Depth=5
	mul	x14, x5, x13
	cmp	x30, #3
	b.hs	.LBB27_1233
// %bb.1232:                            //   in Loop: Header=BB27_1230 Depth=5
	mov	x16, xzr
	fmov	d0, xzr
	cbnz	x0, .LBB27_1236
	b	.LBB27_1238
	.p2align	5, , 16
.LBB27_1233:                            // %.lr.ph.i393.i.i.preheader1494
                                        //   in Loop: Header=BB27_1230 Depth=5
	fmov	d0, xzr
	mov	x15, xzr
	add	x16, x10, x14
	mov	x17, x11
	.p2align	5, , 16
.LBB27_1234:                            // %.lr.ph.i393.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1230 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s1, s2, [x16, #-8]
	sub	x15, x15, #4
	ldp	s3, s4, [x17, #-8]
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	ldp	s3, s4, [x17], #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	ldp	s1, s2, [x16], #16
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	fcvt	d1, s1
	fadd	d0, d0, d1
	cmp	x28, x15
	b.ne	.LBB27_1234
// %bb.1235:                            // %._crit_edge.loopexit.i.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1230 Depth=5
	ldr	x17, [sp, #768]                 // 8-byte Folded Reload
	neg	x16, x15
	cbz	x0, .LBB27_1238
.LBB27_1236:                            // %.lr.ph.i393.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1230 Depth=5
	add	x14, x14, x16, lsl #2
	add	x14, x9, x14
	add	x15, x12, x16, lsl #2
	mov	x16, x0
	.p2align	5, , 16
.LBB27_1237:                            // %.lr.ph.i393.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1230 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s1, [x14], #4
	subs	x16, x16, #1
	ldr	s2, [x15], #4
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_1237
.LBB27_1238:                            // %._crit_edge.loopexit.i.i.i
                                        //   in Loop: Header=BB27_1230 Depth=5
	fcvt	s0, d0
	b	.LBB27_1229
	.p2align	5, , 16
.LBB27_1239:                            // %._crit_edge486.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	w25, #1
	b.lt	.LBB27_1251
// %bb.1240:                            // %.lr.ph.preheader.i.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	and	x8, x25, #0x7fffffff
	cmp	x8, #2
	b.hs	.LBB27_1242
// %bb.1241:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	x9, xzr
	b	.LBB27_1245
	.p2align	5, , 16
.LBB27_1242:                            // %vector.ph485
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x12, [sp, #696]                 // 8-byte Folded Reload
	and	x10, x25, #0x1
	sub	x9, x8, x10
	mov	x11, x9
	.p2align	5, , 16
.LBB27_1243:                            // %vector.body489
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x12, #-4]
	subs	x11, x11, #2
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	stp	s0, s1, [x12, #-4]
	add	x12, x12, #8
	b.ne	.LBB27_1243
// %bb.1244:                            // %middle.block482
                                        //   in Loop: Header=BB27_1216 Depth=4
	cbz	x10, .LBB27_1251
.LBB27_1245:                            // %.lr.ph.i.i.i159.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	w10, w25, w9
	ands	x11, x10, #0x3
	mov	x10, x9
	b.eq	.LBB27_1248
// %bb.1246:                            // %.lr.ph.i.i.i159.prol.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x10, x9
	.p2align	5, , 16
.LBB27_1247:                            // %.lr.ph.i.i.i159.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x22, x10, lsl #2]
	subs	x11, x11, #1
	fmul	s0, s8, s0
	str	s0, [x22, x10, lsl #2]
	add	x10, x10, #1
	b.ne	.LBB27_1247
.LBB27_1248:                            // %.lr.ph.i.i.i159.prol.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	x9, x9, x8
	cmn	x9, #4
	b.hi	.LBB27_1251
// %bb.1249:                            // %.lr.ph.i.i.i159.preheader1512
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	sub	x8, x8, x10
	add	x9, x9, x10, lsl #2
	.p2align	5, , 16
.LBB27_1250:                            // %.lr.ph.i.i.i159
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x9, #-8]
	subs	x8, x8, #4
	ldp	s2, s3, [x9]
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	fmul	s2, s8, s2
	stp	s0, s1, [x9, #-8]
	fmul	s0, s8, s3
	stp	s2, s0, [x9], #16
	b.ne	.LBB27_1250
.LBB27_1251:                            // %ggml_vec_scale_f32.exit.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	subs	x9, x2, x25
	b.le	.LBB27_1262
// %bb.1252:                            // %.lr.ph490.i.i.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x8, x25
	cmp	x9, #1
	b.ls	.LBB27_1256
// %bb.1253:                            // %vector.ph472
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x11, [sp, #696]                 // 8-byte Folded Reload
	and	x10, x9, #0xfffffffffffffffe
	add	x8, x25, x10
	mov	x12, x10
	add	x11, x11, x25, lsl #2
	.p2align	5, , 16
.LBB27_1254:                            // %vector.body477
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	mov	x13, #-36028792732385280        // =0xff800000ff800000
	subs	x12, x12, #2
	stur	x13, [x11, #-4]
	add	x11, x11, #8
	b.ne	.LBB27_1254
// %bb.1255:                            // %middle.block469
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	x9, x10
	b.eq	.LBB27_1262
.LBB27_1256:                            // %.lr.ph490.i.i.preheader517
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	w9, w2, w8
	ands	x10, x9, #0x7
	mov	x9, x8
	b.eq	.LBB27_1259
// %bb.1257:                            // %.lr.ph490.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1258:                            // %.lr.ph490.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	mov	w11, #-8388608                  // =0xff800000
	subs	x10, x10, #1
	str	w11, [x22, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1258
.LBB27_1259:                            // %.lr.ph490.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	x8, x8, x2
	cmn	x8, #8
	b.hi	.LBB27_1262
// %bb.1260:                            // %.lr.ph490.i.i.preheader1511
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x10, [sp, #360]                 // 8-byte Folded Reload
	sub	x8, x2, x9
	add	x9, x10, x9, lsl #2
	.p2align	5, , 16
.LBB27_1261:                            // %.lr.ph490.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	mov	x10, #-36028792732385280        // =0xff800000ff800000
	subs	x8, x8, #8
	stp	x10, x10, [x9, #-16]
	stp	x10, x10, [x9], #32
	b.ne	.LBB27_1261
	.p2align	5, , 16
.LBB27_1262:                            // %._crit_edge491.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	w25, #1
	b.lt	.LBB27_1265
// %bb.1263:                            // %.lr.ph.preheader.i397.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	and	x10, x25, #0x7fffffff
	and	x8, x25, #0x3
	sub	x9, x10, #1
	cmp	x9, #3
	b.hs	.LBB27_1266
// %bb.1264:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	w10, #-8388608                  // =0xff800000
	mov	x9, xzr
	fmov	s9, w10
	cbnz	x8, .LBB27_1269
	b	.LBB27_1271
	.p2align	5, , 16
.LBB27_1265:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	w8, #-8388608                   // =0xff800000
	fmov	s9, w8
	b	.LBB27_1271
	.p2align	5, , 16
.LBB27_1266:                            // %.lr.ph.preheader.i397.i.i.new
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	w11, #-8388608                  // =0xff800000
	mov	x9, xzr
	fmov	s9, w11
	ldr	x11, [sp, #688]                 // 8-byte Folded Reload
	sub	x10, x8, x10
	.p2align	5, , 16
.LBB27_1267:                            // %.lr.ph.i399.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x11, #-8]
	sub	x9, x9, #4
	fcmp	s9, s0
	fcsel	s0, s9, s0, gt
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	ldp	s1, s2, [x11], #16
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s2
	fcsel	s9, s0, s2, gt
	cmp	x10, x9
	b.ne	.LBB27_1267
// %bb.1268:                            // %ggml_vec_max_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	neg	x9, x9
	cbz	x8, .LBB27_1271
.LBB27_1269:                            // %.lr.ph.i399.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	add	x9, x22, x9, lsl #2
	.p2align	5, , 16
.LBB27_1270:                            // %.lr.ph.i399.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x9], #4
	fcmp	s9, s0
	fcsel	s9, s9, s0, gt
	subs	x8, x8, #1
	b.ne	.LBB27_1270
.LBB27_1271:                            // %ggml_vec_max_f32.exit.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	fmov	d10, xzr
	str	x6, [sp, #704]                  // 8-byte Folded Spill
	str	x4, [sp, #712]                  // 8-byte Folded Spill
	cmp	w3, #1
	b.lt	.LBB27_1274
// %bb.1272:                            // %.lr.ph.i405.i.i.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x20, [sp, #408]                 // 8-byte Folded Reload
	mov	x23, x22
	ldr	x27, [sp, #392]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1273:                            // %.lr.ph.i405.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x23]
	fsub	s0, s0, s9
	bl	expf
	add	x19, x23, x27
	fcvt	d1, s0
	str	s0, [x19, #64]
	ldr	s0, [x23, #4]
	fadd	d10, d10, d1
	fsub	s0, s0, s9
	bl	expf
	str	s0, [x19, #68]
	fcvt	d1, s0
	ldr	s0, [x23, #8]
	fadd	d10, d10, d1
	fsub	s0, s0, s9
	bl	expf
	str	s0, [x19, #72]
	fcvt	d1, s0
	ldr	s0, [x23, #12]
	fadd	d10, d10, d1
	fsub	s0, s0, s9
	bl	expf
	fcvt	d1, s0
	add	x23, x23, #16
	subs	x20, x20, #4
	str	s0, [x19, #76]
	fadd	d10, d10, d1
	b.ne	.LBB27_1273
.LBB27_1274:                            // %ggml_vec_soft_max_f32.exit.i.i152
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x20, [sp, #544]                 // 8-byte Folded Reload
	ldr	x19, [sp, #528]                 // 8-byte Folded Reload
	ldp	x27, x23, [sp, #488]            // 16-byte Folded Reload
	cmp	w25, #1
	b.lt	.LBB27_1287
// %bb.1275:                            // %.lr.ph.preheader.i409.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	fmov	d0, #1.00000000
	and	x8, x25, #0x7fffffff
	fdiv	d0, d0, d10
	fcvt	s0, d0
	cmp	x8, #2
	b.hs	.LBB27_1277
// %bb.1276:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	x9, xzr
	b	.LBB27_1280
	.p2align	5, , 16
.LBB27_1277:                            // %vector.ph461
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	and	x10, x25, #0x1
	sub	x9, x8, x10
	mov	x11, x9
	.p2align	5, , 16
.LBB27_1278:                            // %vector.body465
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x12, #-4]
	subs	x11, x11, #2
	fmul	s2, s2, s0
	fmul	s1, s1, s0
	stp	s1, s2, [x12, #-4]
	add	x12, x12, #8
	b.ne	.LBB27_1278
// %bb.1279:                            // %middle.block458
                                        //   in Loop: Header=BB27_1216 Depth=4
	cbz	x10, .LBB27_1286
.LBB27_1280:                            // %.lr.ph.i411.i.i.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	w10, w25, w9
	ands	x11, x10, #0x3
	mov	x10, x9
	b.eq	.LBB27_1283
// %bb.1281:                            // %.lr.ph.i411.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	add	x12, x10, x9, lsl #2
	add	x10, x9, x11
	.p2align	5, , 16
.LBB27_1282:                            // %.lr.ph.i411.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x12]
	subs	x11, x11, #1
	fmul	s1, s1, s0
	str	s1, [x12], #4
	b.ne	.LBB27_1282
.LBB27_1283:                            // %.lr.ph.i411.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	x9, x9, x8
	cmn	x9, #4
	b.hi	.LBB27_1286
// %bb.1284:                            // %.lr.ph.i411.i.i.preheader1510
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #384]                  // 8-byte Folded Reload
	add	x9, x9, x10, lsl #2
	sub	x10, x8, x10
	.p2align	5, , 16
.LBB27_1285:                            // %.lr.ph.i411.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x9, #-12]
	subs	x10, x10, #4
	ldp	s3, s4, [x9, #-4]
	fmul	s2, s2, s0
	fmul	s1, s1, s0
	fmul	s3, s3, s0
	stp	s1, s2, [x9, #-12]
	fmul	s1, s4, s0
	stp	s3, s1, [x9, #-4]
	add	x9, x9, #16
	b.ne	.LBB27_1285
.LBB27_1286:                            // %ggml_vec_scale_f32.exit415.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	lsl	x2, x8, #2
	mov	x0, x22
	mov	w1, wzr
	bl	memset
.LBB27_1287:                            // %ggml_vec_set_f32.exit.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	ldr	x9, [sp, #736]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x2, [sp, #608]                  // 8-byte Folded Reload
	ldr	x4, [sp, #584]                  // 8-byte Folded Reload
	ldr	x5, [sp, #600]                  // 8-byte Folded Reload
	ldr	x6, [sp, #568]                  // 8-byte Folded Reload
	ldr	x7, [sp, #552]                  // 8-byte Folded Reload
	ldr	x3, [sp, #696]                  // 8-byte Folded Reload
	ldr	x30, [sp, #688]                 // 8-byte Folded Reload
	cmp	x26, #1
	b.lt	.LBB27_1302
// %bb.1288:                            // %.lr.ph493.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x12, [x4, #248]
	and	x10, x25, #0x7fffffff
	and	x11, x25, #0x1
	ldr	x15, [sp, #672]                 // 8-byte Folded Reload
	mov	x9, xzr
	add	x13, x12, x8
	ldr	x12, [sp, #416]                 // 8-byte Folded Reload
	add	x13, x13, x15
	ldr	x15, [sp, #664]                 // 8-byte Folded Reload
	ldr	x14, [x12, #248]
	sub	x12, x10, x11
	add	x13, x13, x15
	ldr	x15, [sp, #456]                 // 8-byte Folded Reload
	add	x14, x14, x15
	add	x15, x14, #4
	add	x16, x14, #12
	b	.LBB27_1290
	.p2align	5, , 16
.LBB27_1289:                            // %ggml_vec_mad_f32.exit.i.i
                                        //   in Loop: Header=BB27_1290 Depth=5
	add	x9, x9, #1
	add	x15, x15, x27
	add	x14, x14, x27
	add	x16, x16, x27
	cmp	x9, x26
	b.eq	.LBB27_1302
.LBB27_1290:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1294 Depth 6
                                        //             Child Loop BB27_1298 Depth 6
                                        //             Child Loop BB27_1301 Depth 6
	cmp	w25, #1
	b.lt	.LBB27_1289
// %bb.1291:                            // %.lr.ph.i453.i.i.preheader
                                        //   in Loop: Header=BB27_1290 Depth=5
	mul	x17, x9, x6
	ldr	s0, [x13, x17]
	cmp	x10, #2
	b.hs	.LBB27_1293
// %bb.1292:                            //   in Loop: Header=BB27_1290 Depth=5
	mov	x17, xzr
	b	.LBB27_1296
	.p2align	5, , 16
.LBB27_1293:                            // %vector.body454.preheader
                                        //   in Loop: Header=BB27_1290 Depth=5
	mov	x17, x15
	mov	x0, x3
	mov	x1, x12
	.p2align	5, , 16
.LBB27_1294:                            // %vector.body454
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1290 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s1, s2, [x17, #-4]
	subs	x1, x1, #2
	ldp	s3, s4, [x0, #-4]
	add	x17, x17, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x0, #-4]
	add	x0, x0, #8
	b.ne	.LBB27_1294
// %bb.1295:                            // %middle.block447
                                        //   in Loop: Header=BB27_1290 Depth=5
	mov	x17, x12
	cbz	x11, .LBB27_1289
.LBB27_1296:                            // %.lr.ph.i453.i.i.preheader511
                                        //   in Loop: Header=BB27_1290 Depth=5
	sub	w0, w25, w17
	mov	x1, x17
	ands	x0, x0, #0x3
	b.eq	.LBB27_1299
// %bb.1297:                            // %.lr.ph.i453.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1290 Depth=5
	mov	x1, x17
	.p2align	5, , 16
.LBB27_1298:                            // %.lr.ph.i453.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1290 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s1, [x14, x1, lsl #2]
	subs	x0, x0, #1
	ldr	s2, [x22, x1, lsl #2]
	fmadd	s1, s1, s0, s2
	str	s1, [x22, x1, lsl #2]
	add	x1, x1, #1
	b.ne	.LBB27_1298
.LBB27_1299:                            // %.lr.ph.i453.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1290 Depth=5
	sub	x17, x17, x10
	cmn	x17, #4
	b.hi	.LBB27_1289
// %bb.1300:                            // %.lr.ph.i453.i.i.preheader1493
                                        //   in Loop: Header=BB27_1290 Depth=5
	sub	x17, x10, x1
	add	x0, x30, x1, lsl #2
	add	x1, x16, x1, lsl #2
	.p2align	5, , 16
.LBB27_1301:                            // %.lr.ph.i453.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1290 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldur	s1, [x1, #-12]
	subs	x17, x17, #4
	ldp	s2, s3, [x0, #-8]
	fmadd	s1, s1, s0, s2
	stur	s1, [x0, #-8]
	ldur	s1, [x1, #-8]
	fmadd	s1, s1, s0, s3
	ldp	s2, s3, [x0]
	stur	s1, [x0, #-4]
	ldur	s1, [x1, #-4]
	fmadd	s1, s1, s0, s2
	str	s1, [x0]
	ldr	s1, [x1], #16
	fmadd	s1, s1, s0, s3
	str	s1, [x0, #4]
	add	x0, x0, #16
	b.ne	.LBB27_1301
	b	.LBB27_1289
	.p2align	5, , 16
.LBB27_1302:                            // %._crit_edge494.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	w25, #1
	b.lt	.LBB27_1305
// %bb.1303:                            // %.lr.ph.preheader.i423.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x1, [sp, #624]                  // 8-byte Folded Reload
	and	x11, x25, #0x7fffffff
	and	x9, x25, #0x3
	ldr	x3, [sp, #616]                  // 8-byte Folded Reload
	sub	x10, x11, #1
	ldr	x30, [sp, #520]                 // 8-byte Folded Reload
	cmp	x10, #3
	mov	x10, xzr
	b.hs	.LBB27_1306
// %bb.1304:                            //   in Loop: Header=BB27_1216 Depth=4
	fmov	d0, xzr
	ldr	x11, [sp, #640]                 // 8-byte Folded Reload
	cbnz	x9, .LBB27_1309
	b	.LBB27_1311
	.p2align	5, , 16
.LBB27_1305:                            //   in Loop: Header=BB27_1216 Depth=4
	ldr	x1, [sp, #624]                  // 8-byte Folded Reload
	fmov	s0, wzr
	ldr	x3, [sp, #616]                  // 8-byte Folded Reload
	ldr	x30, [sp, #520]                 // 8-byte Folded Reload
	cmp	w2, #1
	b.ge	.LBB27_1312
	b	.LBB27_1323
	.p2align	5, , 16
.LBB27_1306:                            // %.lr.ph.preheader.i423.i.i.new
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x13, [sp, #384]                 // 8-byte Folded Reload
	fmov	d0, xzr
	sub	x11, x9, x11
	mov	x12, x22
	.p2align	5, , 16
.LBB27_1307:                            // %.lr.ph.i425.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x13, #-12]
	sub	x10, x10, #4
	ldp	s3, s4, [x12]
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	ldp	s3, s4, [x12, #8]
	add	x12, x12, #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	ldp	s1, s2, [x13, #-4]
	add	x13, x13, #16
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	fcvt	d1, s1
	fadd	d0, d0, d1
	cmp	x11, x10
	b.ne	.LBB27_1307
// %bb.1308:                            // %._crit_edge.loopexit.i430.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	neg	x10, x10
	ldr	x11, [sp, #640]                 // 8-byte Folded Reload
	cbz	x9, .LBB27_1311
.LBB27_1309:                            // %.lr.ph.i425.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	add	x10, x22, x10, lsl #2
	.p2align	5, , 16
.LBB27_1310:                            // %.lr.ph.i425.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x10, x11]
	subs	x9, x9, #1
	ldr	s2, [x10], #4
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_1310
.LBB27_1311:                            // %._crit_edge.loopexit.i430.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	fcvt	s0, d0
	cmp	w2, #1
	b.lt	.LBB27_1323
.LBB27_1312:                            // %.lr.ph.i434.i.i.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	cmp	x9, #2
	b.hs	.LBB27_1314
// %bb.1313:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	x9, xzr
	b	.LBB27_1317
	.p2align	5, , 16
.LBB27_1314:                            // %vector.body443.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #400]                  // 8-byte Folded Reload
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1315:                            // %vector.body443
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x10, #-4]
	subs	x9, x9, #2
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	stp	s1, s2, [x10, #-4]
	add	x10, x10, #8
	b.ne	.LBB27_1315
// %bb.1316:                            // %middle.block436
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #400]                  // 8-byte Folded Reload
	ldr	x10, [sp, #352]                 // 8-byte Folded Reload
	cbz	x10, .LBB27_1323
.LBB27_1317:                            // %.lr.ph.i434.i.i.preheader516
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	w10, w2, w9
	ands	x11, x10, #0x3
	mov	x10, x9
	b.eq	.LBB27_1320
// %bb.1318:                            // %.lr.ph.i434.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x10, x9
	.p2align	5, , 16
.LBB27_1319:                            // %.lr.ph.i434.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x22, x10, lsl #2]
	subs	x11, x11, #1
	fsub	s1, s1, s0
	str	s1, [x22, x10, lsl #2]
	add	x10, x10, #1
	b.ne	.LBB27_1319
.LBB27_1320:                            // %.lr.ph.i434.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x11, [sp, #680]                 // 8-byte Folded Reload
	sub	x9, x9, x11
	cmn	x9, #4
	b.hi	.LBB27_1323
// %bb.1321:                            // %.lr.ph.i434.i.i.preheader1509
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	sub	x9, x9, x10
	ldr	x11, [sp, #688]                 // 8-byte Folded Reload
	add	x10, x11, x10, lsl #2
	.p2align	5, , 16
.LBB27_1322:                            // %.lr.ph.i434.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x10, #-8]
	subs	x9, x9, #4
	ldp	s3, s4, [x10]
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	fsub	s3, s3, s0
	stp	s1, s2, [x10, #-8]
	fsub	s1, s4, s0
	stp	s3, s1, [x10], #16
	b.ne	.LBB27_1322
.LBB27_1323:                            // %ggml_vec_acc1_f32.exit.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	w25, #1
	b.lt	.LBB27_1342
// %bb.1324:                            // %.lr.ph.preheader.i438.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	and	x9, x25, #0x7fffffff
	and	x10, x25, #0x3
	sub	x11, x9, #1
	cmp	x11, #3
	b.hs	.LBB27_1326
// %bb.1325:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	x11, xzr
	b	.LBB27_1328
	.p2align	5, , 16
.LBB27_1326:                            // %.lr.ph.preheader.i438.i.i.new
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x11, xzr
	sub	x12, x9, x10
	mov	x13, x22
	.p2align	5, , 16
.LBB27_1327:                            // %.lr.ph.i440.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	add	x14, x24, x11, lsl #2
	ldp	s1, s2, [x13]
	add	x11, x11, #4
	ldr	s0, [x14, #64]
	fmul	s0, s1, s0
	str	s0, [x13]
	ldr	s0, [x14, #68]
	fmul	s0, s2, s0
	ldp	s1, s2, [x13, #8]
	str	s0, [x13, #4]
	ldr	s0, [x14, #72]
	fmul	s0, s1, s0
	str	s0, [x13, #8]
	ldr	s0, [x14, #76]
	fmul	s0, s2, s0
	str	s0, [x13, #12]
	add	x13, x13, #16
	cmp	x12, x11
	b.ne	.LBB27_1327
.LBB27_1328:                            // %.lr.ph.i446.i.i.preheader.unr-lcssa
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x12, [sp, #640]                 // 8-byte Folded Reload
	cbz	x10, .LBB27_1331
// %bb.1329:                            // %.lr.ph.i440.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	add	x11, x22, x11, lsl #2
	.p2align	5, , 16
.LBB27_1330:                            // %.lr.ph.i440.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x11]
	subs	x10, x10, #1
	ldr	s1, [x11, x12]
	fmul	s0, s0, s1
	str	s0, [x11], #4
	b.ne	.LBB27_1330
.LBB27_1331:                            // %.lr.ph.i446.i.i.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	x9, #2
	b.hs	.LBB27_1333
// %bb.1332:                            //   in Loop: Header=BB27_1216 Depth=4
	mov	x10, xzr
	b	.LBB27_1336
	.p2align	5, , 16
.LBB27_1333:                            // %vector.ph428
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x13, [sp, #696]                 // 8-byte Folded Reload
	and	x11, x25, #0x1
	sub	x10, x9, x11
	mov	x12, x10
	.p2align	5, , 16
.LBB27_1334:                            // %vector.body432
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x13, #-4]
	subs	x12, x12, #2
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	stp	s0, s1, [x13, #-4]
	add	x13, x13, #8
	b.ne	.LBB27_1334
// %bb.1335:                            // %middle.block425
                                        //   in Loop: Header=BB27_1216 Depth=4
	cbz	x11, .LBB27_1342
.LBB27_1336:                            // %.lr.ph.i446.i.i.preheader515
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	w11, w25, w10
	ands	x12, x11, #0x3
	mov	x11, x10
	b.eq	.LBB27_1339
// %bb.1337:                            // %.lr.ph.i446.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1216 Depth=4
	mov	x11, x10
	.p2align	5, , 16
.LBB27_1338:                            // %.lr.ph.i446.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s0, [x22, x11, lsl #2]
	subs	x12, x12, #1
	fmul	s0, s8, s0
	str	s0, [x22, x11, lsl #2]
	add	x11, x11, #1
	b.ne	.LBB27_1338
.LBB27_1339:                            // %.lr.ph.i446.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1216 Depth=4
	sub	x10, x10, x9
	cmn	x10, #4
	b.hi	.LBB27_1342
// %bb.1340:                            // %.lr.ph.i446.i.i.preheader1508
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	sub	x9, x9, x11
	add	x10, x10, x11, lsl #2
	.p2align	5, , 16
.LBB27_1341:                            // %.lr.ph.i446.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s0, s1, [x10, #-8]
	subs	x9, x9, #4
	ldp	s2, s3, [x10]
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	fmul	s2, s8, s2
	stp	s0, s1, [x10, #-8]
	fmul	s0, s8, s3
	stp	s2, s0, [x10], #16
	b.ne	.LBB27_1341
.LBB27_1342:                            // %ggml_vec_scale_f32.exit450.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	x25, #1
	b.lt	.LBB27_1371
// %bb.1343:                            // %.lr.ph503.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x10, [sp, #648]                 // 8-byte Folded Reload
	mov	x9, xzr
	ldr	x11, [sp, #656]                 // 8-byte Folded Reload
	ldr	x16, [sp, #760]                 // 8-byte Folded Reload
	ldr	x17, [sp, #768]                 // 8-byte Folded Reload
	ldr	x0, [sp, #720]                  // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	add	x10, x10, x11
	add	x11, x10, #4
	b	.LBB27_1345
	.p2align	5, , 16
.LBB27_1344:                            // %ggml_vec_mad_f32.exit463.i.i
                                        //   in Loop: Header=BB27_1345 Depth=5
	add	x9, x9, #1
	add	x11, x11, x5
	add	x10, x10, x5
	cmp	x9, x25
	b.eq	.LBB27_1357
.LBB27_1345:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1349 Depth 6
                                        //             Child Loop BB27_1353 Depth 6
                                        //             Child Loop BB27_1356 Depth 6
	cmp	w26, #1
	b.lt	.LBB27_1344
// %bb.1346:                            // %.lr.ph.i459.i.i.preheader
                                        //   in Loop: Header=BB27_1345 Depth=5
	ldr	s0, [x17, x9, lsl #2]
	cmp	x19, #2
	b.hs	.LBB27_1348
// %bb.1347:                            //   in Loop: Header=BB27_1345 Depth=5
	mov	x12, xzr
	b	.LBB27_1351
	.p2align	5, , 16
.LBB27_1348:                            // %vector.body421.preheader
                                        //   in Loop: Header=BB27_1345 Depth=5
	mov	x12, x11
	mov	x13, x0
	mov	x14, x16
	.p2align	5, , 16
.LBB27_1349:                            // %vector.body421
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1345 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s1, s2, [x12, #-4]
	subs	x14, x14, #2
	ldp	s3, s4, [x13, #-4]
	add	x12, x12, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x13, #-4]
	add	x13, x13, #8
	b.ne	.LBB27_1349
// %bb.1350:                            // %middle.block414
                                        //   in Loop: Header=BB27_1345 Depth=5
	mov	x12, x16
	cbz	x23, .LBB27_1344
.LBB27_1351:                            // %.lr.ph.i459.i.i.preheader510
                                        //   in Loop: Header=BB27_1345 Depth=5
	sub	w13, w26, w12
	ands	x14, x13, #0x3
	mov	x13, x12
	b.eq	.LBB27_1354
// %bb.1352:                            // %.lr.ph.i459.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1345 Depth=5
	mov	x13, x12
	.p2align	5, , 16
.LBB27_1353:                            // %.lr.ph.i459.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1345 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s1, [x10, x13, lsl #2]
	subs	x14, x14, #1
	ldr	s2, [x21, x13, lsl #2]
	fmadd	s1, s1, s0, s2
	str	s1, [x21, x13, lsl #2]
	add	x13, x13, #1
	b.ne	.LBB27_1353
.LBB27_1354:                            // %.lr.ph.i459.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1345 Depth=5
	sub	x12, x12, x19
	cmn	x12, #4
	b.hi	.LBB27_1344
// %bb.1355:                            // %.lr.ph.i459.i.i.preheader1492
                                        //   in Loop: Header=BB27_1345 Depth=5
	sub	x12, x19, x13
	lsl	x13, x13, #2
	.p2align	5, , 16
.LBB27_1356:                            // %.lr.ph.i459.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1345 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	add	x14, x10, x13
	add	x15, x21, x13
	ldr	s1, [x14]
	ldp	s2, s3, [x15]
	subs	x12, x12, #4
	add	x13, x13, #16
	fmadd	s1, s1, s0, s2
	str	s1, [x15]
	ldr	s1, [x14, #4]
	fmadd	s1, s1, s0, s3
	str	s1, [x15, #4]
	ldp	s2, s3, [x15, #8]
	ldr	s1, [x14, #8]
	fmadd	s1, s1, s0, s2
	str	s1, [x15, #8]
	ldr	s1, [x14, #12]
	fmadd	s1, s1, s0, s3
	str	s1, [x15, #12]
	b.ne	.LBB27_1356
	b	.LBB27_1344
	.p2align	5, , 16
.LBB27_1357:                            // %.lr.ph509.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x12, [x1, #248]
	mov	x9, xzr
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x10, x12, x10
	ldr	x11, [sp, #712]                 // 8-byte Folded Reload
	ldr	x13, [sp, #704]                 // 8-byte Folded Reload
	add	x11, x12, x11
	add	x12, x12, x13
	ldp	x13, x14, [sp, #440]            // 16-byte Folded Reload
	b	.LBB27_1359
	.p2align	5, , 16
.LBB27_1358:                            // %ggml_vec_mad_f32.exit470.i.i
                                        //   in Loop: Header=BB27_1359 Depth=5
	add	x9, x9, #1
	add	x14, x14, x7
	add	x13, x13, x7
	cmp	x9, x25
	b.eq	.LBB27_1371
.LBB27_1359:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1363 Depth 6
                                        //             Child Loop BB27_1367 Depth 6
                                        //             Child Loop BB27_1370 Depth 6
	cmp	w26, #1
	b.lt	.LBB27_1358
// %bb.1360:                            // %.lr.ph.i466.i.i.preheader
                                        //   in Loop: Header=BB27_1359 Depth=5
	ldr	x15, [sp, #768]                 // 8-byte Folded Reload
	ldr	s0, [x15, x9, lsl #2]
	cmp	x19, #2
	b.hs	.LBB27_1362
// %bb.1361:                            //   in Loop: Header=BB27_1359 Depth=5
	mov	x15, xzr
	b	.LBB27_1365
	.p2align	5, , 16
.LBB27_1362:                            // %vector.body410.preheader
                                        //   in Loop: Header=BB27_1359 Depth=5
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	mov	x15, x10
	mov	x16, x14
	mov	x17, x0
	.p2align	5, , 16
.LBB27_1363:                            // %vector.body410
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1359 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s1, s2, [x15, #-4]
	subs	x17, x17, #2
	ldp	s3, s4, [x16, #-4]
	add	x15, x15, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x16, #-4]
	add	x16, x16, #8
	b.ne	.LBB27_1363
// %bb.1364:                            // %middle.block403
                                        //   in Loop: Header=BB27_1359 Depth=5
	mov	x15, x0
	cbz	x23, .LBB27_1358
.LBB27_1365:                            // %.lr.ph.i466.i.i.preheader509
                                        //   in Loop: Header=BB27_1359 Depth=5
	sub	w16, w26, w15
	ands	x17, x16, #0x3
	mov	x16, x15
	b.eq	.LBB27_1368
// %bb.1366:                            // %.lr.ph.i466.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1359 Depth=5
	mov	x16, x15
	.p2align	5, , 16
.LBB27_1367:                            // %.lr.ph.i466.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1359 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s1, [x11, x16, lsl #2]
	subs	x17, x17, #1
	ldr	s2, [x13, x16, lsl #2]
	fmadd	s1, s1, s0, s2
	str	s1, [x13, x16, lsl #2]
	add	x16, x16, #1
	b.ne	.LBB27_1367
.LBB27_1368:                            // %.lr.ph.i466.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1359 Depth=5
	sub	x15, x15, x19
	cmn	x15, #4
	b.hi	.LBB27_1358
// %bb.1369:                            // %.lr.ph.i466.i.i.preheader1491
                                        //   in Loop: Header=BB27_1359 Depth=5
	sub	x15, x19, x16
	lsl	x16, x16, #2
	.p2align	5, , 16
.LBB27_1370:                            // %.lr.ph.i466.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1359 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	add	x17, x12, x16
	add	x0, x13, x16
	ldur	s1, [x17, #-8]
	ldp	s2, s3, [x0]
	subs	x15, x15, #4
	add	x16, x16, #16
	fmadd	s1, s1, s0, s2
	str	s1, [x0]
	ldur	s1, [x17, #-4]
	fmadd	s1, s1, s0, s3
	str	s1, [x0, #4]
	ldp	s2, s3, [x0, #8]
	ldr	s1, [x17]
	fmadd	s1, s1, s0, s2
	str	s1, [x0, #8]
	ldr	s1, [x17, #4]
	fmadd	s1, s1, s0, s3
	str	s1, [x0, #12]
	b.ne	.LBB27_1370
	b	.LBB27_1358
	.p2align	5, , 16
.LBB27_1371:                            // %.preheader.i.i153
                                        //   in Loop: Header=BB27_1216 Depth=4
	cmp	x26, #1
	b.lt	.LBB27_1215
// %bb.1372:                            // %.lr.ph515.i.i
                                        //   in Loop: Header=BB27_1216 Depth=4
	ldr	x11, [x4, #248]
	and	x10, x25, #0x7fffffff
	mov	x9, xzr
	ldr	x12, [sp, #672]                 // 8-byte Folded Reload
	add	x11, x11, x8
	and	x8, x25, #0x1
	ldp	x13, x14, [sp, #424]            // 16-byte Folded Reload
	add	x11, x11, x12
	ldr	x12, [sp, #664]                 // 8-byte Folded Reload
	add	x11, x11, x12
	sub	x12, x10, x8
	b	.LBB27_1374
	.p2align	5, , 16
.LBB27_1373:                            // %ggml_vec_mad_f32.exit477.i.i
                                        //   in Loop: Header=BB27_1374 Depth=5
	add	x9, x9, #1
	add	x14, x14, x20
	add	x13, x13, x20
	cmp	x9, x26
	b.eq	.LBB27_1215
.LBB27_1374:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1378 Depth 6
                                        //             Child Loop BB27_1382 Depth 6
                                        //             Child Loop BB27_1385 Depth 6
	cmp	w25, #1
	b.lt	.LBB27_1373
// %bb.1375:                            // %.lr.ph.i473.i.i.preheader
                                        //   in Loop: Header=BB27_1374 Depth=5
	mul	x15, x9, x6
	ldr	s0, [x11, x15]
	cmp	x10, #2
	b.hs	.LBB27_1377
// %bb.1376:                            //   in Loop: Header=BB27_1374 Depth=5
	mov	x15, xzr
	b	.LBB27_1380
	.p2align	5, , 16
.LBB27_1377:                            // %vector.body399.preheader
                                        //   in Loop: Header=BB27_1374 Depth=5
	ldr	x15, [sp, #752]                 // 8-byte Folded Reload
	mov	x16, x14
	mov	x17, x12
	.p2align	5, , 16
.LBB27_1378:                            // %vector.body399
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1374 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s1, s2, [x15, #-4]
	subs	x17, x17, #2
	ldp	s3, s4, [x16, #-4]
	add	x15, x15, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x16, #-4]
	add	x16, x16, #8
	b.ne	.LBB27_1378
// %bb.1379:                            // %middle.block392
                                        //   in Loop: Header=BB27_1374 Depth=5
	mov	x15, x12
	cbz	x8, .LBB27_1373
.LBB27_1380:                            // %.lr.ph.i473.i.i.preheader508
                                        //   in Loop: Header=BB27_1374 Depth=5
	sub	w16, w25, w15
	ands	x17, x16, #0x3
	mov	x16, x15
	b.eq	.LBB27_1383
// %bb.1381:                            // %.lr.ph.i473.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1374 Depth=5
	ldr	x16, [sp, #744]                 // 8-byte Folded Reload
	add	x0, x16, x15, lsl #2
	mov	x16, x15
	.p2align	5, , 16
.LBB27_1382:                            // %.lr.ph.i473.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1374 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s1, [x13, x16, lsl #2]
	subs	x17, x17, #1
	ldr	s2, [x0], #4
	fmadd	s1, s2, s0, s1
	str	s1, [x13, x16, lsl #2]
	add	x16, x16, #1
	b.ne	.LBB27_1382
.LBB27_1383:                            // %.lr.ph.i473.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1374 Depth=5
	sub	x15, x15, x10
	cmn	x15, #4
	b.hi	.LBB27_1373
// %bb.1384:                            // %.lr.ph.i473.i.i.preheader1490
                                        //   in Loop: Header=BB27_1374 Depth=5
	sub	x15, x10, x16
	lsl	x16, x16, #2
	.p2align	5, , 16
.LBB27_1385:                            // %.lr.ph.i473.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1210 Depth=2
                                        //       Parent Loop BB27_1213 Depth=3
                                        //         Parent Loop BB27_1216 Depth=4
                                        //           Parent Loop BB27_1374 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	add	x17, x24, x16
	add	x0, x13, x16
	ldr	s1, [x17, #64]
	ldp	s2, s3, [x0]
	subs	x15, x15, #4
	add	x16, x16, #16
	fmadd	s1, s1, s0, s2
	str	s1, [x0]
	ldr	s1, [x17, #68]
	fmadd	s1, s1, s0, s3
	str	s1, [x0, #4]
	ldp	s2, s3, [x0, #8]
	ldr	s1, [x17, #72]
	fmadd	s1, s1, s0, s2
	str	s1, [x0, #8]
	ldr	s1, [x17, #76]
	fmadd	s1, s1, s0, s3
	str	s1, [x0, #12]
	b.ne	.LBB27_1385
	b	.LBB27_1373
.LBB27_1386:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x12, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2677
// %bb.1387:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [x8, #24]
	ldr	x9, [x12, #16]
	cmp	x9, w14, sxtw
	b.ne	.LBB27_2678
// %bb.1388:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #48]
	cmp	x9, #4
	b.ne	.LBB27_2679
// %bb.1389:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x12, #160]
	ldr	x10, [x9, #48]
	cmp	x10, #4
	b.ne	.LBB27_2680
// %bb.1390:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [x8, #16]
	ldr	x2, [x8, #56]
	cmp	x2, x11, lsl #2
	b.ne	.LBB27_2681
// %bb.1391:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x15, [x12, #32]
	cmp	w15, #1
	b.lt	.LBB27_7
// %bb.1392:                            // %.preheader73.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	w13, [sp, #788]
	and	x15, x15, #0x7fffffff
	sxtw	x3, w11
	ldr	w12, [sp, #784]
	str	x15, [sp, #760]                 // 8-byte Folded Spill
	mov	x10, xzr
	lsl	x3, x3, #2
	add	w16, w13, w14
	sub	w16, w16, #1
	sdiv	w13, w16, w13
	mul	w16, w13, w12
	ldr	x12, [x9, #16]
	add	w17, w16, w13
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	sxtw	x11, w16
	cmp	w17, w14
	and	x15, x12, #0x7fffffff
	and	x0, x12, #0x3
	sxtw	x4, w12
	csel	w14, w17, w14, lt
	sub	x17, x15, #1
	sub	x1, x0, x15
	mul	x15, x2, x11
	lsl	x4, x4, #2
	sub	w14, w14, w16
	ldr	x13, [x13, #24]
	str	x15, [sp, #752]                 // 8-byte Folded Spill
	and	x16, x13, #0x7fffffff
	b	.LBB27_1394
	.p2align	5, , 16
.LBB27_1393:                            // %._crit_edge80.i.i
                                        //   in Loop: Header=BB27_1394 Depth=2
	ldr	x15, [sp, #760]                 // 8-byte Folded Reload
	add	x10, x10, #1
	cmp	x10, x15
	b.eq	.LBB27_7
.LBB27_1394:                            // %.preheader73.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1397 Depth 3
                                        //         Child Loop BB27_1401 Depth 4
                                        //           Child Loop BB27_1405 Depth 5
                                        //           Child Loop BB27_1408 Depth 5
	cmp	w13, #1
	b.lt	.LBB27_1393
// %bb.1395:                            // %.lr.ph79.i.i
                                        //   in Loop: Header=BB27_1394 Depth=2
	ldr	x6, [x9, #248]
	mov	x5, xzr
	ldr	x7, [x9, #56]
	nop
	madd	x6, x7, x11, x6
	ldr	x21, [sp, #768]                 // 8-byte Folded Reload
	ldr	x19, [x21, #248]
	ldp	x20, x7, [x21, #48]
	nop
	madd	x19, x20, x11, x19
	ldr	x20, [x21, #64]
	ldr	x15, [x8, #248]
	ldr	x2, [x8, #64]
	nop
	madd	x19, x20, x10, x19
	ldr	x20, [sp, #752]                 // 8-byte Folded Reload
	add	x15, x15, x20
	madd	x20, x2, x10, x15
	add	x2, x6, #8
	add	x15, x20, #8
	b	.LBB27_1397
	.p2align	5, , 16
.LBB27_1396:                            // %._crit_edge77.i.i
                                        //   in Loop: Header=BB27_1397 Depth=3
	add	x5, x5, #1
	add	x15, x15, #4
	add	x20, x20, #4
	cmp	x5, x16
	b.eq	.LBB27_1393
.LBB27_1397:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1394 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1401 Depth 4
                                        //           Child Loop BB27_1405 Depth 5
                                        //           Child Loop BB27_1408 Depth 5
	cmp	w14, #1
	b.lt	.LBB27_1396
// %bb.1398:                            // %.preheader.i.i141.preheader
                                        //   in Loop: Header=BB27_1397 Depth=3
	madd	x24, x5, x7, x19
	mov	x23, xzr
	mov	x25, x20
	mov	x26, x6
	mov	x22, x2
	mov	x21, x15
	b	.LBB27_1401
	.p2align	5, , 16
.LBB27_1399:                            //   in Loop: Header=BB27_1401 Depth=4
	fmov	s0, wzr
.LBB27_1400:                            // %._crit_edge.i.i142
                                        //   in Loop: Header=BB27_1401 Depth=4
	str	s0, [x24, x23, lsl #2]
	add	x23, x23, #1
	add	x21, x21, x3
	add	x22, x22, x4
	add	x26, x26, x4
	add	x25, x25, x3
	cmp	x23, x14
	b.eq	.LBB27_1396
.LBB27_1401:                            // %.preheader.i.i141
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1394 Depth=2
                                        //       Parent Loop BB27_1397 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1405 Depth 5
                                        //           Child Loop BB27_1408 Depth 5
	cmp	w12, #1
	b.lt	.LBB27_1399
// %bb.1402:                            // %.lr.ph.i.i143
                                        //   in Loop: Header=BB27_1401 Depth=4
	cmp	x17, #3
	b.hs	.LBB27_1404
// %bb.1403:                            //   in Loop: Header=BB27_1401 Depth=4
	mov	x28, xzr
	fmov	s0, wzr
	cbnz	x0, .LBB27_1407
	b	.LBB27_1400
	.p2align	5, , 16
.LBB27_1404:                            // %.lr.ph.i.i143.new.preheader
                                        //   in Loop: Header=BB27_1401 Depth=4
	fmov	s0, wzr
	mov	x30, xzr
	mov	x27, x22
	mov	x28, x21
	.p2align	5, , 16
.LBB27_1405:                            // %.lr.ph.i.i143.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1394 Depth=2
                                        //       Parent Loop BB27_1397 Depth=3
                                        //         Parent Loop BB27_1401 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x28, #-8]
	sub	x30, x30, #4
	ldp	s3, s4, [x27, #-8]
	fmadd	s0, s1, s3, s0
	fmadd	s0, s2, s4, s0
	ldp	s1, s2, [x28], #16
	ldp	s3, s4, [x27], #16
	fmadd	s0, s1, s3, s0
	fmadd	s0, s2, s4, s0
	cmp	x1, x30
	b.ne	.LBB27_1405
// %bb.1406:                            // %._crit_edge.i.i142.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1401 Depth=4
	neg	x28, x30
	cbz	x0, .LBB27_1400
.LBB27_1407:                            // %.epil.preheader704.preheader
                                        //   in Loop: Header=BB27_1401 Depth=4
	add	x27, x26, x28, lsl #2
	mov	x30, x0
	add	x28, x25, x28, lsl #2
	.p2align	5, , 16
.LBB27_1408:                            // %.epil.preheader704
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1394 Depth=2
                                        //       Parent Loop BB27_1397 Depth=3
                                        //         Parent Loop BB27_1401 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x28], #4
	subs	x30, x30, #1
	ldr	s2, [x27], #4
	fmadd	s0, s1, s2, s0
	b.ne	.LBB27_1408
	b	.LBB27_1400
.LBB27_1409:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	ldr	x24, [x23, #152]
	ldr	w8, [x24]
	cbnz	w8, .LBB27_2682
// %bb.1410:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x0, x8, [x23, #160]
	str	x8, [sp, #528]                  // 8-byte Folded Spill
	ldp	x9, x8, [x23, #176]
	ldr	w21, [sp, #784]
	ldrsw	x22, [sp, #788]
	ldp	x25, x20, [x24, #16]
	str	x0, [sp, #536]                  // 8-byte Folded Spill
	str	x8, [sp, #512]                  // 8-byte Folded Spill
	ldr	x8, [x23, #192]
	str	x9, [sp, #520]                  // 8-byte Folded Spill
	str	x8, [sp, #496]                  // 8-byte Folded Spill
	ldr	x8, [x0, #24]
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ldr	x8, [x24, #32]
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	bl	ggml_nelements
	mov	x19, x0
	mov	x0, x24
	bl	ggml_nelements
	add	x19, x0, x19
	mov	x0, x23
	bl	ggml_nelements
	cmp	x19, x0
	b.ne	.LBB27_2683
// %bb.1411:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x24, #48]
	cmp	x8, #4
	b.ne	.LBB27_2684
// %bb.1412:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2685
// %bb.1413:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2686
// %bb.1414:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2687
// %bb.1415:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2688
// %bb.1416:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #496]                  // 8-byte Folded Reload
	ldr	x8, [x8, #48]
	cmp	x8, #4
	b.ne	.LBB27_2689
// %bb.1417:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x24, #56]
	ldr	x9, [x24, #16]
	cmp	x8, x9, lsl #2
	b.ne	.LBB27_2690
// %bb.1418:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x24, #24]
	mul	x9, x9, x8
	ldr	x10, [x24, #64]
	str	x10, [sp, #488]                 // 8-byte Folded Spill
	cmp	x10, x9
	b.ne	.LBB27_2691
// %bb.1419:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #536]                 // 8-byte Folded Reload
	ldp	x9, x10, [x11, #16]
	ldr	x12, [x11, #72]
	ldr	x11, [x11, #32]
	mul	x9, x9, x10
	stp	x12, x24, [sp, #472]            // 16-byte Folded Spill
	mul	x9, x9, x11
	cmp	x12, x9, lsl #2
	b.ne	.LBB27_2692
// %bb.1420:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #544]                  // 8-byte Folded Reload
	cmp	x9, #1
	b.lt	.LBB27_7
// %bb.1421:                            // %.preheader.lr.ph.i.i124
                                        //   in Loop: Header=BB27_3 Depth=1
	add	x9, x22, x20
	lsl	x26, x25, #32
	str	xzr, [sp, #552]                 // 8-byte Folded Spill
	sub	x9, x9, #1
	str	x25, [sp, #736]                 // 8-byte Folded Spill
	sdiv	x9, x9, x22
	str	x26, [sp, #664]                 // 8-byte Folded Spill
	mul	w10, w21, w9
	add	w9, w10, w9
	cmp	x20, w9, sxtw
	csel	w9, w9, w20, gt
	sub	w21, w9, w10
	sxtw	x9, w10
	mul	x8, x8, x9
	str	x21, [sp, #672]                 // 8-byte Folded Spill
	stp	x8, x9, [sp, #448]              // 16-byte Folded Spill
	sbfiz	x8, x10, #2, #32
	str	x8, [sp, #440]                  // 8-byte Folded Spill
	and	x8, x25, #0x7ffffffffffffffe
	neg	x8, x8
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	b	.LBB27_1423
	.p2align	5, , 16
.LBB27_1422:                            // %._crit_edge151.i.i
                                        //   in Loop: Header=BB27_1423 Depth=2
	ldr	x9, [sp, #552]                  // 8-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	str	x9, [sp, #552]                  // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_1423:                            // %.preheader.i.i126
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1426 Depth 3
                                        //         Child Loop BB27_1430 Depth 4
                                        //           Child Loop BB27_1436 Depth 5
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1422
// %bb.1424:                            // %.lr.ph150.i.i127
                                        //   in Loop: Header=BB27_1423 Depth=2
	ldr	x11, [sp, #536]                 // 8-byte Folded Reload
	mov	x2, xzr
	ldr	x16, [sp, #552]                 // 8-byte Folded Reload
	ldp	x8, x9, [sp, #480]              // 16-byte Folded Reload
	mul	x9, x16, x9
	ldr	x10, [x11, #248]
	ldp	x12, x11, [x11, #56]
	str	x12, [sp, #608]                 // 8-byte Folded Spill
	ldr	x13, [sp, #528]                 // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	ldr	x12, [x13, #248]
	ldp	x14, x13, [x13, #56]
	mul	x11, x11, x16
	str	x14, [sp, #600]                 // 8-byte Folded Spill
	ldr	x15, [sp, #520]                 // 8-byte Folded Reload
	ldp	x1, x0, [sp, #440]              // 16-byte Folded Reload
	add	x8, x8, x0
	ldr	x14, [x15, #248]
	ldr	x15, [x15, #56]
	add	x12, x12, x1
	add	x8, x8, x9
	str	x8, [sp, #616]                  // 8-byte Folded Spill
	add	x10, x10, x1
	madd	x8, x13, x16, x12
	ldr	x17, [sp, #456]                 // 8-byte Folded Reload
	nop
	madd	x24, x15, x17, x14
	ldr	x15, [sp, #512]                 // 8-byte Folded Reload
	str	x8, [sp, #592]                  // 8-byte Folded Spill
	add	x8, x10, x11
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	ldr	x14, [x15, #248]
	ldp	x10, x8, [x15, #56]
	nop
	madd	x12, x8, x16, x14
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	str	x10, [sp, #640]                 // 8-byte Folded Spill
	ldr	x8, [x8, #248]
	str	x12, [sp, #576]                 // 8-byte Folded Spill
	add	x10, x8, x1
	add	x8, x8, x0
	add	x10, x10, x11
	ldr	x11, [sp, #496]                 // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x9, [sp, #472]                  // 8-byte Folded Reload
	str	x10, [sp, #568]                 // 8-byte Folded Spill
	ldr	x10, [x11, #248]
	add	x28, x8, x9
	ldp	x9, x8, [x11, #56]
	nop
	madd	x8, x8, x16, x10
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x8, #4
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	add	x8, x12, #4
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	b	.LBB27_1426
	.p2align	5, , 16
.LBB27_1425:                            // %._crit_edge148.i.i
                                        //   in Loop: Header=BB27_1426 Depth=3
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	ldr	x2, [sp, #648]                  // 8-byte Folded Reload
	add	x2, x2, #1
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	cmp	x2, x8
	b.eq	.LBB27_1422
.LBB27_1426:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1423 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1430 Depth 4
                                        //           Child Loop BB27_1436 Depth 5
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	cmp	x2, #0
	str	x2, [sp, #648]                  // 8-byte Folded Spill
	csel	x22, x8, x28, eq
	cmp	w21, #1
	b.lt	.LBB27_1425
// %bb.1427:                            // %.lr.ph147.i.i.preheader
                                        //   in Loop: Header=BB27_1426 Depth=3
	ldr	x11, [sp, #648]                 // 8-byte Folded Reload
	mov	x19, xzr
	mov	x27, xzr
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	mul	x8, x11, x8
	ldr	x9, [sp, #600]                  // 8-byte Folded Reload
	ldr	x12, [sp, #584]                 // 8-byte Folded Reload
	mul	x9, x11, x9
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	mul	x10, x11, x10
	add	x12, x12, x8
	str	x12, [sp, #744]                 // 8-byte Folded Spill
	ldr	x12, [sp, #592]                 // 8-byte Folded Reload
	add	x9, x12, x9
	str	x9, [sp, #760]                  // 8-byte Folded Spill
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	mul	x9, x11, x9
	ldr	x11, [sp, #576]                 // 8-byte Folded Reload
	add	x10, x11, x10
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	ldr	x10, [sp, #560]                 // 8-byte Folded Reload
	add	x9, x10, x9
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	ldr	x9, [sp, #568]                  // 8-byte Folded Reload
	add	x8, x9, x8
	mov	x9, #4294967296                 // =0x100000000
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	b	.LBB27_1430
	.p2align	5, , 16
.LBB27_1428:                            //   in Loop: Header=BB27_1430 Depth=4
	fmov	s10, wzr
.LBB27_1429:                            // %._crit_edge.i.i129
                                        //   in Loop: Header=BB27_1430 Depth=4
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	add	x9, x9, x26
	add	x19, x19, x26
	str	s10, [x8, x27, lsl #2]
	add	x27, x27, #1
	cmp	x27, x21
	b.eq	.LBB27_1425
.LBB27_1430:                            // %.lr.ph147.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1423 Depth=2
                                        //       Parent Loop BB27_1426 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1436 Depth 5
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	fmov	s0, #20.00000000
	ldr	s8, [x8, x27, lsl #2]
	fcmp	s8, s0
	b.hi	.LBB27_1432
// %bb.1431:                            //   in Loop: Header=BB27_1430 Depth=4
	fmov	s0, s8
	mov	x20, x9
	bl	expf
	bl	log1pf
	fmov	s8, s0
	mov	x9, x20
.LBB27_1432:                            //   in Loop: Header=BB27_1430 Depth=4
	cmp	x25, #1
	b.lt	.LBB27_1428
// %bb.1433:                            // %.lr.ph.i.i130
                                        //   in Loop: Header=BB27_1430 Depth=4
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	ldr	s0, [x8, x27, lsl #2]
	fmul	s9, s8, s0
	cmp	x25, #1
	b.ne	.LBB27_1435
// %bb.1434:                            //   in Loop: Header=BB27_1430 Depth=4
	mov	x20, xzr
	fmov	s10, wzr
	tbz	w25, #0, .LBB27_1429
	b	.LBB27_1438
	.p2align	5, , 16
.LBB27_1435:                            // %.lr.ph.i.i130.new.preheader
                                        //   in Loop: Header=BB27_1430 Depth=4
	str	x27, [sp, #720]                 // 8-byte Folded Spill
	ldr	x27, [sp, #696]                 // 8-byte Folded Reload
	ldr	x20, [sp, #704]                 // 8-byte Folded Reload
	str	x19, [sp, #728]                 // 8-byte Folded Spill
	mov	x23, x19
	fmov	s10, wzr
	ldr	x19, [sp, #656]                 // 8-byte Folded Reload
	mov	x21, xzr
	mov	x26, x9
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	.p2align	5, , 16
.LBB27_1436:                            // %.lr.ph.i.i130.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1423 Depth=2
                                        //       Parent Loop BB27_1426 Depth=3
                                        //         Parent Loop BB27_1430 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	asr	x25, x23, #30
	ldr	s0, [x24, x25]
	ldr	s11, [x22, x25]
	fmul	s0, s8, s0
	bl	expf
	ldur	s1, [x27, #-4]
	fmul	s1, s9, s1
	fmadd	s0, s11, s0, s1
	ldur	s1, [x20, #-4]
	str	s0, [x28, x25]
	asr	x25, x26, #30
	fmadd	s10, s0, s1, s10
	ldr	s0, [x24, x25]
	ldr	s11, [x22, x25]
	fmul	s0, s8, s0
	bl	expf
	ldr	s1, [x27], #8
	mov	x8, #8589934592                 // =0x200000000
	fmul	s1, s9, s1
	fmadd	s0, s11, s0, s1
	add	x26, x26, x8
	ldr	s1, [x20], #8
	sub	x21, x21, #2
	add	x23, x23, x8
	fmadd	s10, s0, s1, s10
	str	s0, [x28, x25]
	cmp	x19, x21
	b.ne	.LBB27_1436
// %bb.1437:                            // %._crit_edge.i.i129.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1430 Depth=4
	neg	x20, x21
	ldr	x25, [sp, #736]                 // 8-byte Folded Reload
	ldr	x21, [sp, #672]                 // 8-byte Folded Reload
	ldr	x26, [sp, #664]                 // 8-byte Folded Reload
	ldr	x19, [sp, #728]                 // 8-byte Folded Reload
	ldr	x27, [sp, #720]                 // 8-byte Folded Reload
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	tbz	w25, #0, .LBB27_1429
.LBB27_1438:                            // %._crit_edge.i.i129.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB27_1430 Depth=4
	mul	x8, x27, x25
	mov	x25, x21
	mov	x23, x9
	add	w21, w20, w8
	ldr	s0, [x24, w21, sxtw #2]
	ldr	s11, [x22, w21, sxtw #2]
	fmul	s0, s8, s0
	bl	expf
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	mov	x9, x23
	ldr	s1, [x8, x20, lsl #2]
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	fmul	s1, s9, s1
	fmadd	s0, s11, s0, s1
	ldr	s1, [x8, x20, lsl #2]
	fmadd	s10, s0, s1, s10
	str	s0, [x28, w21, sxtw #2]
	mov	x21, x25
	ldr	x25, [sp, #736]                 // 8-byte Folded Reload
	b	.LBB27_1429
.LBB27_1439:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x10, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2693
// %bb.1440:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [x10, #88]
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	cmp	w9, #1
	b.lt	.LBB27_7
// %bb.1441:                            // %.preheader85.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	str	xzr, [sp, #672]                 // 8-byte Folded Spill
	str	xzr, [sp, #664]                 // 8-byte Folded Spill
	ldp	x9, x13, [x8, #16]
	ldr	x14, [x8, #32]
	str	xzr, [sp, #656]                 // 8-byte Folded Spill
	lsl	x5, x9, #2
	ldr	w11, [x10, #84]
	ldrsw	x17, [x10, #92]
	str	x11, [sp, #704]                 // 8-byte Folded Spill
	ldr	x12, [x10, #32]
	ldp	x15, x16, [x10, #16]
	sxtw	x10, w11
	mul	x11, x13, x9
	mul	x9, x5, x17
	and	x2, x15, #0x3
	lsl	x21, x15, #2
	str	x17, [sp, #680]                 // 8-byte Folded Spill
	str	x12, [sp, #760]                 // 8-byte Folded Spill
	lsl	x3, x11, #2
	str	x9, [sp, #696]                  // 8-byte Folded Spill
	and	x9, x15, #0x7ffffffffffffffc
	mul	x11, x3, x17
	neg	x7, x9
	mul	x9, x16, x15
	str	x11, [sp, #624]                 // 8-byte Folded Spill
	mul	x11, x12, x9
	lsl	x20, x9, #2
	lsl	x11, x11, #2
	mul	x9, x11, x10
	str	x11, [sp, #688]                 // 8-byte Folded Spill
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	mov	w9, #8                          // =0x8
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	mov	w9, #8                          // =0x8
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	b	.LBB27_1443
	.p2align	5, , 16
.LBB27_1442:                            // %._crit_edge93.i.i
                                        //   in Loop: Header=BB27_1443 Depth=2
	ldr	x11, [sp, #624]                 // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	add	x9, x9, x11
	ldr	x12, [sp, #616]                 // 8-byte Folded Reload
	ldr	x10, [sp, #656]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	str	x10, [sp, #656]                 // 8-byte Folded Spill
	add	x9, x9, x12
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	add	x9, x9, x12
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, x11
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB27_7
.LBB27_1443:                            // %.preheader85.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1446 Depth 3
                                        //         Child Loop BB27_1449 Depth 4
                                        //           Child Loop BB27_1452 Depth 5
                                        //             Child Loop BB27_1457 Depth 6
                                        //             Child Loop BB27_1468 Depth 6
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	cmp	w9, #1
	b.lt	.LBB27_1442
// %bb.1444:                            // %.lr.ph92.i.i
                                        //   in Loop: Header=BB27_1443 Depth=2
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	str	xzr, [sp, #744]                 // 8-byte Folded Spill
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	mul	x9, x9, x10
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	b	.LBB27_1446
	.p2align	5, , 16
.LBB27_1445:                            // %._crit_edge90.i.i113
                                        //   in Loop: Header=BB27_1446 Depth=3
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	ldr	x10, [sp, #712]                 // 8-byte Folded Reload
	add	x10, x10, x9
	ldr	x12, [sp, #720]                 // 8-byte Folded Reload
	ldr	x11, [sp, #744]                 // 8-byte Folded Reload
	add	x11, x11, #1
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	str	x11, [sp, #744]                 // 8-byte Folded Spill
	add	x12, x12, x10
	str	x12, [sp, #720]                 // 8-byte Folded Spill
	ldr	x12, [sp, #728]                 // 8-byte Folded Reload
	add	x12, x12, x10
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	str	x12, [sp, #728]                 // 8-byte Folded Spill
	add	x10, x10, x9
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	cmp	x11, x9
	b.eq	.LBB27_1442
.LBB27_1446:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1443 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1449 Depth 4
                                        //           Child Loop BB27_1452 Depth 5
                                        //             Child Loop BB27_1457 Depth 6
                                        //             Child Loop BB27_1468 Depth 6
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	cmp	x9, #1
	b.lt	.LBB27_1445
// %bb.1447:                            // %.preheader84.lr.ph.i.i
                                        //   in Loop: Header=BB27_1446 Depth=3
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	mov	x4, xzr
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	mul	x22, x10, x9
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	ldr	x24, [sp, #720]                 // 8-byte Folded Reload
	ldr	x26, [sp, #712]                 // 8-byte Folded Reload
	b	.LBB27_1449
	.p2align	5, , 16
.LBB27_1448:                            // %._crit_edge88.i.i
                                        //   in Loop: Header=BB27_1449 Depth=4
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	add	x4, x4, #1
	add	x26, x26, x3
	add	x24, x24, x20
	add	x11, x11, x20
	add	x10, x10, x3
	cmp	x4, x9
	b.eq	.LBB27_1445
.LBB27_1449:                            // %.preheader84.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1443 Depth=2
                                        //       Parent Loop BB27_1446 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1452 Depth 5
                                        //             Child Loop BB27_1457 Depth 6
                                        //             Child Loop BB27_1468 Depth 6
	cmp	x16, #1
	b.lt	.LBB27_1448
// %bb.1450:                            // %.preheader.lr.ph.i.i116
                                        //   in Loop: Header=BB27_1449 Depth=4
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	mov	x12, xzr
	mov	x27, x10
	mov	x28, x11
	mov	x30, x24
	add	x1, x4, x9
	mov	x9, x26
	b	.LBB27_1452
	.p2align	5, , 16
.LBB27_1451:                            // %._crit_edge.i.i119
                                        //   in Loop: Header=BB27_1452 Depth=5
	add	x12, x12, #1
	add	x9, x9, x5
	add	x30, x30, x21
	add	x28, x28, x21
	add	x27, x27, x5
	cmp	x12, x16
	b.eq	.LBB27_1448
.LBB27_1452:                            // %.preheader.i.i118
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1443 Depth=2
                                        //       Parent Loop BB27_1446 Depth=3
                                        //         Parent Loop BB27_1449 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1457 Depth 6
                                        //             Child Loop BB27_1468 Depth 6
	cmp	x15, #1
	b.lt	.LBB27_1451
// %bb.1453:                            // %.lr.ph.i.i121
                                        //   in Loop: Header=BB27_1452 Depth=5
	ldr	x17, [sp, #768]                 // 8-byte Folded Reload
	cmp	x1, x14
	add	x0, x12, x22
	ccmp	x0, x13, #0, lt
	cset	w6, lt
	ldr	x19, [x17, #248]
	cmp	x15, #4
	b.hs	.LBB27_1455
// %bb.1454:                            //   in Loop: Header=BB27_1452 Depth=5
	mov	x23, xzr
	cbnz	x2, .LBB27_1466
	b	.LBB27_1451
	.p2align	5, , 16
.LBB27_1455:                            // %.lr.ph.i.i121.new.preheader
                                        //   in Loop: Header=BB27_1452 Depth=5
	mov	x0, xzr
	add	x23, x19, x30
	mov	x25, x9
	b	.LBB27_1457
	.p2align	5, , 16
.LBB27_1456:                            //   in Loop: Header=BB27_1457 Depth=6
	add	x25, x25, #16
	sub	x0, x0, #4
	str	s0, [x23, #4]
	add	x23, x23, #16
	cmp	x7, x0
	b.eq	.LBB27_1465
.LBB27_1457:                            // %.lr.ph.i.i121.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1443 Depth=2
                                        //       Parent Loop BB27_1446 Depth=3
                                        //         Parent Loop BB27_1449 Depth=4
                                        //           Parent Loop BB27_1452 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	fmov	s0, wzr
	fmov	s1, wzr
	cbz	w6, .LBB27_1459
// %bb.1458:                            //   in Loop: Header=BB27_1457 Depth=6
	ldr	x17, [x8, #248]
	add	x17, x17, x25
	ldur	s1, [x17, #-8]
.LBB27_1459:                            //   in Loop: Header=BB27_1457 Depth=6
	stur	s1, [x23, #-8]
	cbz	w6, .LBB27_1461
// %bb.1460:                            //   in Loop: Header=BB27_1457 Depth=6
	ldr	x17, [x8, #248]
	add	x17, x17, x25
	ldur	s0, [x17, #-4]
.LBB27_1461:                            //   in Loop: Header=BB27_1457 Depth=6
	stur	s0, [x23, #-4]
	fmov	s0, wzr
	fmov	s1, wzr
	cbz	w6, .LBB27_1463
// %bb.1462:                            //   in Loop: Header=BB27_1457 Depth=6
	ldr	x17, [x8, #248]
	ldr	s1, [x17, x25]
.LBB27_1463:                            //   in Loop: Header=BB27_1457 Depth=6
	str	s1, [x23]
	cbz	w6, .LBB27_1456
// %bb.1464:                            //   in Loop: Header=BB27_1457 Depth=6
	ldr	x17, [x8, #248]
	add	x17, x17, x25
	ldr	s0, [x17, #4]
	b	.LBB27_1456
	.p2align	5, , 16
.LBB27_1465:                            // %._crit_edge.i.i119.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1452 Depth=5
	neg	x23, x0
	cbz	x2, .LBB27_1451
.LBB27_1466:                            // %.epil.preheader691.preheader
                                        //   in Loop: Header=BB27_1452 Depth=5
	add	x0, x28, x23, lsl #2
	add	x0, x19, x0
	add	x19, x27, x23, lsl #2
	mov	x23, x2
	b	.LBB27_1468
	.p2align	5, , 16
.LBB27_1467:                            //   in Loop: Header=BB27_1468 Depth=6
	add	x19, x19, #4
	subs	x23, x23, #1
	str	s0, [x0], #4
	b.eq	.LBB27_1451
.LBB27_1468:                            // %.epil.preheader691
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1443 Depth=2
                                        //       Parent Loop BB27_1446 Depth=3
                                        //         Parent Loop BB27_1449 Depth=4
                                        //           Parent Loop BB27_1452 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	fmov	s0, wzr
	cbz	w6, .LBB27_1467
// %bb.1469:                            //   in Loop: Header=BB27_1468 Depth=6
	ldr	x25, [x8, #248]
	ldr	s0, [x25, x19]
	b	.LBB27_1467
.LBB27_1470:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x10, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2694
// %bb.1471:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #32]
	cmp	x9, #1
	b.lt	.LBB27_7
// %bb.1472:                            // %.preheader70.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x16, [sp, #768]                 // 8-byte Folded Reload
	mov	x10, xzr
	mov	x11, xzr
	ldp	x3, x12, [x8, #16]
	mov	w4, #16                         // =0x10
	ldr	x13, [x8, #32]
	lsl	x3, x3, #2
	ldp	x14, x15, [x16, #16]
	ldrsw	x16, [x16, #84]
	sdiv	x17, x15, x16
	neg	x0, x15
	lsl	x2, x14, #2
	mul	x1, x15, x14
	lsl	x1, x1, #2
	madd	x17, x17, x16, x0
	add	x17, x16, x17
	sdiv	x0, x17, x16
	msub	x17, x0, x16, x17
	and	x0, x14, #0x7ffffffffffffff8
	neg	x0, x0
	add	x5, x17, x15
	and	x17, x14, #0x7
	sdiv	x5, x5, x16
	b	.LBB27_1474
	.p2align	5, , 16
.LBB27_1473:                            // %._crit_edge73.i.i
                                        //   in Loop: Header=BB27_1474 Depth=2
	add	x11, x11, #1
	add	x4, x4, x1
	add	x10, x10, x1
	cmp	x11, x9
	b.eq	.LBB27_7
.LBB27_1474:                            // %.preheader70.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1477 Depth 3
                                        //         Child Loop BB27_1481 Depth 4
                                        //         Child Loop BB27_1484 Depth 4
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	cmp	x15, #1
	b.lt	.LBB27_1473
// %bb.1475:                            // %.preheader.lr.ph.i.i105
                                        //   in Loop: Header=BB27_1474 Depth=2
	mov	x6, xzr
	mov	x7, x10
	mov	x19, x4
	b	.LBB27_1477
	.p2align	5, , 16
.LBB27_1476:                            // %._crit_edge.i.i107
                                        //   in Loop: Header=BB27_1477 Depth=3
	add	x6, x6, #1
	add	x19, x19, x2
	add	x7, x7, x2
	cmp	x6, x15
	b.eq	.LBB27_1473
.LBB27_1477:                            // %.preheader.i.i106
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1474 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1481 Depth 4
                                        //         Child Loop BB27_1484 Depth 4
	cmp	x14, #1
	b.lt	.LBB27_1476
// %bb.1478:                            // %.lr.ph.i.i108
                                        //   in Loop: Header=BB27_1477 Depth=3
	sdiv	x20, x11, x16
	msub	x22, x20, x16, x11
	sdiv	x21, x6, x16
	madd	w20, w20, w5, w21
	sxtw	x20, w20
	msub	x21, x21, x16, x6
	madd	x23, x20, x13, x22
	ldr	x20, [x8, #248]
	ldr	x22, [x24, #248]
	nop
	madd	x21, x23, x12, x21
	cmp	x14, #8
	b.hs	.LBB27_1480
// %bb.1479:                            //   in Loop: Header=BB27_1477 Depth=3
	mov	x23, xzr
	cbnz	x17, .LBB27_1483
	b	.LBB27_1476
	.p2align	5, , 16
.LBB27_1480:                            // %.lr.ph.i.i108.new.preheader
                                        //   in Loop: Header=BB27_1477 Depth=3
	madd	x25, x3, x21, x20
	mov	x23, xzr
	add	x24, x22, x19
	add	x25, x25, #16
	.p2align	5, , 16
.LBB27_1481:                            // %.lr.ph.i.i108.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1474 Depth=2
                                        //       Parent Loop BB27_1477 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldur	s0, [x25, #-16]
	sub	x23, x23, #8
	stur	s0, [x24, #-16]
	ldur	s0, [x25, #-12]
	stur	s0, [x24, #-12]
	ldur	s0, [x25, #-8]
	stur	s0, [x24, #-8]
	ldur	s0, [x25, #-4]
	stur	s0, [x24, #-4]
	ldr	s0, [x25]
	str	s0, [x24]
	ldr	s0, [x25, #4]
	str	s0, [x24, #4]
	ldr	s0, [x25, #8]
	str	s0, [x24, #8]
	ldr	s0, [x25, #12]
	add	x25, x25, #32
	str	s0, [x24, #12]
	add	x24, x24, #32
	cmp	x0, x23
	b.ne	.LBB27_1481
// %bb.1482:                            // %._crit_edge.i.i107.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1477 Depth=3
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	neg	x23, x23
	cbz	x17, .LBB27_1476
.LBB27_1483:                            // %.epil.preheader685.preheader
                                        //   in Loop: Header=BB27_1477 Depth=3
	mul	x21, x3, x21
	add	x24, x7, x23, lsl #2
	add	x22, x22, x24
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	add	x21, x21, x23, lsl #2
	add	x20, x20, x21
	mov	x21, x17
	.p2align	5, , 16
.LBB27_1484:                            // %.epil.preheader685
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1474 Depth=2
                                        //       Parent Loop BB27_1477 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x20], #4
	subs	x21, x21, #1
	str	s0, [x22], #4
	b.ne	.LBB27_1484
	b	.LBB27_1476
.LBB27_1485:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x12, [x9, #152]
	ldr	w8, [x12]
	cmp	w8, #30
	ccmp	w8, #1, #4, ne
	b.ne	.LBB27_2770
// %bb.1486:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #32]
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.1487:                            // %.preheader.lr.ph.i.i94
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	mov	x9, xzr
	ldr	x3, [x12, #16]
	lsl	x0, x3, #1
	ldp	x10, x11, [x13, #16]
	ldr	x1, [x12, #248]
	ldr	x12, [x13, #248]
	neg	x3, x3, lsl #1
	sub	x2, x11, #1
	mul	x16, x11, x10
	and	x15, x10, #0x7ffffffffffffff8
	and	x13, x10, #0x7
	add	x14, x12, #8
	lsl	x17, x10, #1
	madd	x1, x0, x2, x1
	neg	x15, x15
	lsl	x16, x16, #1
	add	x2, x1, #8
	b	.LBB27_1489
	.p2align	5, , 16
.LBB27_1488:                            // %._crit_edge66.i.i
                                        //   in Loop: Header=BB27_1489 Depth=2
	add	x9, x9, #1
	add	x14, x14, x16
	add	x2, x2, x0
	add	x12, x12, x16
	add	x1, x1, x0
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_1489:                            // %.preheader.i.i95
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1492 Depth 3
                                        //         Child Loop BB27_1496 Depth 4
                                        //         Child Loop BB27_1499 Depth 4
	cmp	x11, #1
	b.lt	.LBB27_1488
// %bb.1490:                            // %.lr.ph65.i.i
                                        //   in Loop: Header=BB27_1489 Depth=2
	mov	x4, xzr
	mov	x5, x1
	mov	x6, x12
	mov	x7, x2
	mov	x19, x14
	b	.LBB27_1492
	.p2align	5, , 16
.LBB27_1491:                            // %._crit_edge.i.i96
                                        //   in Loop: Header=BB27_1492 Depth=3
	add	x4, x4, #1
	add	x19, x19, x17
	add	x7, x7, x3
	add	x6, x6, x17
	add	x5, x5, x3
	cmp	x4, x11
	b.eq	.LBB27_1488
.LBB27_1492:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1489 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1496 Depth 4
                                        //         Child Loop BB27_1499 Depth 4
	cmp	x10, #1
	b.lt	.LBB27_1491
// %bb.1493:                            // %.lr.ph.i.i97
                                        //   in Loop: Header=BB27_1492 Depth=3
	cmp	x10, #8
	b.hs	.LBB27_1495
// %bb.1494:                            //   in Loop: Header=BB27_1492 Depth=3
	mov	x22, xzr
	cbnz	x13, .LBB27_1498
	b	.LBB27_1491
	.p2align	5, , 16
.LBB27_1495:                            // %.lr.ph.i.i97.new.preheader
                                        //   in Loop: Header=BB27_1492 Depth=3
	mov	x20, xzr
	mov	x21, x7
	mov	x22, x19
	.p2align	5, , 16
.LBB27_1496:                            // %.lr.ph.i.i97.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1489 Depth=2
                                        //       Parent Loop BB27_1492 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w23, [x21, #-8]
	sub	x20, x20, #8
	sturh	w23, [x22, #-8]
	ldurh	w23, [x21, #-6]
	sturh	w23, [x22, #-6]
	ldurh	w23, [x21, #-4]
	sturh	w23, [x22, #-4]
	ldurh	w23, [x21, #-2]
	sturh	w23, [x22, #-2]
	ldrh	w23, [x21]
	strh	w23, [x22]
	ldrh	w23, [x21, #2]
	strh	w23, [x22, #2]
	ldrh	w23, [x21, #4]
	strh	w23, [x22, #4]
	ldrh	w23, [x21, #6]
	add	x21, x21, #16
	strh	w23, [x22, #6]
	add	x22, x22, #16
	cmp	x15, x20
	b.ne	.LBB27_1496
// %bb.1497:                            // %._crit_edge.i.i96.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1492 Depth=3
	neg	x22, x20
	cbz	x13, .LBB27_1491
.LBB27_1498:                            // %.epil.preheader669.preheader
                                        //   in Loop: Header=BB27_1492 Depth=3
	add	x20, x6, x22, lsl #1
	mov	x21, x13
	add	x22, x5, x22, lsl #1
	.p2align	5, , 16
.LBB27_1499:                            // %.epil.preheader669
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1489 Depth=2
                                        //       Parent Loop BB27_1492 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w23, [x22], #2
	subs	x21, x21, #1
	strh	w23, [x20], #2
	b.ne	.LBB27_1499
	b	.LBB27_1491
.LBB27_1500:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x0, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2695
// %bb.1501:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x21, x22, [x0, #160]
	ldr	w9, [x0, #84]
	cbnz	w9, .LBB27_1506
// %bb.1502:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [sp, #784]
	cbnz	w9, .LBB27_1504
// %bb.1503:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x0, #248]
	ldr	x20, [x8, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x19
	mov	x1, x20
	bl	memcpy
.LBB27_1504:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1506
// %bb.1505:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1506:                            // %ggml_barrier.exit.i.i91
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x21, #40]
	ldr	w10, [sp, #788]
	add	w11, w8, w10
	ldrsw	x9, [sp, #784]
	sub	w11, w11, #1
	sdiv	w10, w11, w10
	smull	x11, w9, w10
	add	w9, w11, w10
	str	x11, [sp, #752]                 // 8-byte Folded Spill
	cmp	w9, w8
	csel	w8, w9, w8, lt
	cmp	w11, w8
	b.ge	.LBB27_7
// %bb.1507:                            // %.preheader82.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldp	x12, x13, [x21, #16]
	sxtw	x8, w8
	ldr	x14, [x21, #32]
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	mul	x8, x14, x13
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	str	x14, [sp, #768]                 // 8-byte Folded Spill
	mul	x14, x12, x12
	ldr	x11, [x11, #248]
	ldr	x0, [sp, #752]                  // 8-byte Folded Reload
	sub	x16, x12, #1
	and	x17, x12, #0x7ffffffffffffffe
	lsl	x5, x12, #2
	lsl	x7, x12, #3
	ldr	x9, [x21, #248]
	lsl	x8, x8, #2
	lsl	x4, x14, #2
	ldr	x10, [x22, #248]
	mul	x15, x8, x14
	mul	x8, x8, x12
	str	x15, [sp, #712]                 // 8-byte Folded Spill
	nop
	madd	x15, x15, x0, x11
	str	x15, [sp, #744]                 // 8-byte Folded Spill
	add	x15, x15, #4
	str	x15, [sp, #736]                 // 8-byte Folded Spill
	mul	x15, x13, x14
	mov	x14, #4                         // =0x4
	madd	x8, x8, x0, x14
	lsl	x3, x15, #2
	madd	x8, x12, x8, x11
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	b	.LBB27_1509
	.p2align	5, , 16
.LBB27_1508:                            // %._crit_edge92.i.i
                                        //   in Loop: Header=BB27_1509 Depth=2
	ldr	x14, [sp, #712]                 // 8-byte Folded Reload
	ldr	x15, [sp, #736]                 // 8-byte Folded Reload
	add	x15, x15, x14
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	add	x8, x8, #1
	str	x15, [sp, #736]                 // 8-byte Folded Spill
	ldr	x15, [sp, #728]                 // 8-byte Folded Reload
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	add	x15, x15, x14
	str	x15, [sp, #728]                 // 8-byte Folded Spill
	ldr	x15, [sp, #744]                 // 8-byte Folded Reload
	add	x15, x15, x14
	ldr	x14, [sp, #720]                 // 8-byte Folded Reload
	str	x15, [sp, #744]                 // 8-byte Folded Spill
	cmp	x8, x14
	b.eq	.LBB27_7
.LBB27_1509:                            // %.preheader82.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1512 Depth 3
                                        //         Child Loop BB27_1515 Depth 4
                                        //           Child Loop BB27_1518 Depth 5
                                        //             Child Loop BB27_1521 Depth 6
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1508
// %bb.1510:                            // %.preheader.lr.ph.i.i
                                        //   in Loop: Header=BB27_1509 Depth=2
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	mov	x19, xzr
	ldr	x14, [sp, #768]                 // 8-byte Folded Reload
	mul	x8, x8, x14
	ldr	x1, [sp, #744]                  // 8-byte Folded Reload
	ldr	x6, [sp, #728]                  // 8-byte Folded Reload
	ldr	x14, [sp, #736]                 // 8-byte Folded Reload
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	b	.LBB27_1512
	.p2align	5, , 16
.LBB27_1511:                            // %._crit_edge90.i.i
                                        //   in Loop: Header=BB27_1512 Depth=3
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	add	x19, x19, #1
	add	x14, x14, x3
	add	x6, x6, x3
	add	x1, x1, x3
	cmp	x19, x8
	b.eq	.LBB27_1508
.LBB27_1512:                            // %.preheader.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1509 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1515 Depth 4
                                        //           Child Loop BB27_1518 Depth 5
                                        //             Child Loop BB27_1521 Depth 6
	cmp	x13, #1
	b.lt	.LBB27_1511
// %bb.1513:                            // %.lr.ph89.i.i
                                        //   in Loop: Header=BB27_1512 Depth=3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	mov	x24, xzr
	mov	x20, x1
	mov	x22, x6
	mov	x0, x14
	add	x8, x19, x8
	mul	x25, x8, x13
	b	.LBB27_1515
	.p2align	5, , 16
.LBB27_1514:                            // %._crit_edge87.i.i
                                        //   in Loop: Header=BB27_1515 Depth=4
	add	x24, x24, #1
	add	x0, x0, x4
	add	x22, x22, x4
	add	x20, x20, x4
	cmp	x24, x13
	b.eq	.LBB27_1511
.LBB27_1515:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1509 Depth=2
                                        //       Parent Loop BB27_1512 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1518 Depth 5
                                        //             Child Loop BB27_1521 Depth 6
	cmp	x12, #1
	b.lt	.LBB27_1514
// %bb.1516:                            // %.lr.ph86.i.i.preheader
                                        //   in Loop: Header=BB27_1515 Depth=4
	add	x8, x24, x25
	mov	x30, xzr
	mul	x15, x8, x12
	mov	x26, x20
	mov	x27, x22
	mov	x23, x0
	b	.LBB27_1518
	.p2align	5, , 16
.LBB27_1517:                            // %._crit_edge.i.i93
                                        //   in Loop: Header=BB27_1518 Depth=5
	add	x30, x30, #1
	add	x23, x23, x5
	add	x27, x27, #4
	add	x26, x26, #4
	cmp	x30, x12
	b.eq	.LBB27_1514
.LBB27_1518:                            // %.lr.ph86.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1509 Depth=2
                                        //       Parent Loop BB27_1512 Depth=3
                                        //         Parent Loop BB27_1515 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1521 Depth 6
	add	x2, x30, x15
	ldr	s0, [x9, x2, lsl #2]
	ldr	s1, [x10, x2, lsl #2]
	cmp	x12, #1
	b.ne	.LBB27_1520
// %bb.1519:                            //   in Loop: Header=BB27_1518 Depth=5
	mov	x8, xzr
	b	.LBB27_1522
	.p2align	5, , 16
.LBB27_1520:                            // %.lr.ph86.i.i.new.preheader
                                        //   in Loop: Header=BB27_1518 Depth=5
	mov	x21, xzr
	mov	x8, xzr
	mov	x28, x23
	.p2align	5, , 16
.LBB27_1521:                            // %.lr.ph86.i.i.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1509 Depth=2
                                        //       Parent Loop BB27_1512 Depth=3
                                        //         Parent Loop BB27_1515 Depth=4
                                        //           Parent Loop BB27_1518 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldur	s2, [x28, #-4]
	add	x8, x8, #2
	fadd	s2, s1, s2
	stur	s2, [x28, #-4]
	ldr	s2, [x26, x21]
	fadd	s2, s0, s2
	str	s2, [x26, x21]
	ldr	s2, [x28]
	fadd	s2, s1, s2
	str	s2, [x28], #8
	ldr	s2, [x27, x21]
	fadd	s2, s0, s2
	str	s2, [x27, x21]
	add	x21, x21, x7
	cmp	x17, x8
	b.ne	.LBB27_1521
.LBB27_1522:                            // %._crit_edge.i.i93.unr-lcssa
                                        //   in Loop: Header=BB27_1518 Depth=5
	tbz	w12, #0, .LBB27_1517
// %bb.1523:                            // %._crit_edge.i.i93.epilog-lcssa
                                        //   in Loop: Header=BB27_1518 Depth=5
	mul	x2, x2, x12
	msub	x21, x30, x16, x2
	add	x2, x11, x2, lsl #2
	ldr	s2, [x2, x8, lsl #2]
	fadd	s1, s1, s2
	str	s1, [x2, x8, lsl #2]
	mul	x8, x8, x12
	add	x2, x11, x21, lsl #2
	ldr	s1, [x2, x8, lsl #2]
	fadd	s0, s0, s1
	str	s0, [x2, x8, lsl #2]
	b	.LBB27_1517
.LBB27_1524:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x10, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2696
// %bb.1525:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #160]
	ldrsw	x22, [sp, #784]
	ldr	x19, [x9, #24]
	cmp	x19, x22
	b.le	.LBB27_7
// %bb.1526:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	nop
	madd	x10, x19, x22, x19
	ldrsw	x23, [sp, #788]
	sdiv	x10, x10, x23
	ldr	x13, [x12, #16]
	cmp	x10, x19
	sdiv	x20, x13, x19
	csel	x10, x10, x19, lt
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	nop
	msub	x10, x20, x19, x13
	cbnz	x10, .LBB27_2771
// %bb.1527:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [x9, #32]
	str	x13, [sp, #688]                 // 8-byte Folded Spill
	mul	x27, x13, x14
	ldp	x11, x10, [x12, #184]
	ldr	x24, [x8, #248]
	ldr	x25, [x9, #248]
	ldp	x8, x9, [x12, #168]
	str	x14, [sp, #712]                 // 8-byte Folded Spill
	ldr	x10, [x10, #24]
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	ldr	x21, [x12, #248]
	ldr	x26, [x8, #248]
	ldr	x8, [x9, #248]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	x28, [x11, #248]
	cbnz	w22, .LBB27_1529
// %bb.1528:                            //   in Loop: Header=BB27_3 Depth=1
	lsl	x2, x27, #2
	mov	x0, x21
	mov	w1, wzr
	bl	memset
.LBB27_1529:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1531
// %bb.1530:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1531:                            // %ggml_barrier.exit.i.i81
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.1532:                            // %.lr.ph133.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	mul	x8, x19, x22
	ldr	x14, [sp, #688]                 // 8-byte Folded Reload
	lsl	x13, x20, #2
	add	x9, x21, x27, lsl #2
	add	x11, x21, #4
	mov	x16, xzr
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	mul	x9, x20, x19
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	sdiv	x8, x8, x23
	mul	x9, x20, x14
	lsl	x14, x14, #2
	str	x14, [sp, #664]                 // 8-byte Folded Spill
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	sxtw	x12, w9
	and	x9, x20, #0x7ffffffffffffffe
	neg	x15, x9
	mul	x10, x19, x20
	lsl	x9, x10, #2
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	sxtw	x9, w8
	mul	x14, x20, x20
	lsl	x17, x14, #2
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	mul	x10, x13, x9
	add	x8, x25, x10
	str	x10, [sp, #656]                 // 8-byte Folded Spill
	add	x10, x11, x10
	add	x8, x8, #4
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	nop
	madd	x8, x17, x9, x11
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	lsl	x9, x8, #2
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	ldr	x9, [sp, #736]                  // 8-byte Folded Reload
	sdiv	x8, x8, x9
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	b	.LBB27_1534
.LBB27_1533:                            // %._crit_edge131.i.i
                                        //   in Loop: Header=BB27_1534 Depth=2
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x16, [sp, #736]                 // 8-byte Folded Reload
	add	x16, x16, #1
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	cmp	x16, x8
	b.eq	.LBB27_7
.LBB27_1534:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1539 Depth 3
                                        //         Child Loop BB27_1543 Depth 4
                                        //           Child Loop BB27_1546 Depth 5
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	str	x16, [sp, #736]                 // 8-byte Folded Spill
	sdiv	x9, x16, x8
	msub	x10, x9, x8, x16
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	cbnz	x10, .LBB27_1536
// %bb.1535:                            //   in Loop: Header=BB27_1534 Depth=2
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x8, [x8, #192]
	ldr	x8, [x8, #248]
.LBB27_1536:                            //   in Loop: Header=BB27_1534 Depth=2
	ldr	x10, [sp, #720]                 // 8-byte Folded Reload
	cmp	x10, x12
	b.ge	.LBB27_1533
// %bb.1537:                            // %.lr.ph130.i.i83
                                        //   in Loop: Header=BB27_1534 Depth=2
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	ldr	x11, [sp, #656]                 // 8-byte Folded Reload
	nop
	madd	x10, x10, x9, x11
	ldr	x11, [sp, #640]                 // 8-byte Folded Reload
	ldr	x14, [sp, #672]                 // 8-byte Folded Reload
	ldr	x16, [sp, #680]                 // 8-byte Folded Reload
	nop
	madd	x11, x13, x9, x11
	mul	x9, x14, x9
	ldr	x27, [sp, #752]                 // 8-byte Folded Reload
	ldr	x0, [sp, #720]                  // 8-byte Folded Reload
	mul	x14, x20, x10
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	mul	x7, x16, x10
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x30, x10, x9, lsl #2
	add	x10, x8, x9, lsl #2
	add	x8, x8, x14
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	add	x4, x8, #4
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	nop
	madd	x2, x8, x11, x9
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	b	.LBB27_1539
	.p2align	5, , 16
.LBB27_1538:                            // %._crit_edge127.i.i
                                        //   in Loop: Header=BB27_1539 Depth=3
	add	x0, x0, #1
	add	x8, x8, x13
	add	x27, x27, x13
	add	x4, x4, x17
	add	x2, x2, x17
	cmp	x0, x12
	b.eq	.LBB27_1533
.LBB27_1539:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1534 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1543 Depth 4
                                        //           Child Loop BB27_1546 Depth 5
	cmp	x20, #1
	b.lt	.LBB27_1538
// %bb.1540:                            // %.lr.ph126.i.i
                                        //   in Loop: Header=BB27_1539 Depth=3
	mul	x19, x0, x20
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	mov	x1, xzr
	mov	x5, x2
	mov	x16, x4
	add	x9, x9, x19, lsl #2
	add	x22, x19, x7
	b	.LBB27_1543
	.p2align	5, , 16
.LBB27_1541:                            // %._crit_edge.i.i88.epilog-lcssa
                                        //   in Loop: Header=BB27_1543 Depth=4
	add	x14, x1, x19
	add	x3, x11, x22
	mul	x14, x14, x20
	ldr	s4, [x25, x3, lsl #2]
	ldr	s5, [x21, x3, lsl #2]
	add	x11, x11, x14
	fmul	s2, s2, s4
	ldr	s4, [x10, x11, lsl #2]
	fmadd	s3, s2, s3, s4
	fmadd	s0, s3, s0, s5
	str	s0, [x21, x3, lsl #2]
	fmadd	s0, s4, s1, s2
	str	s0, [x30, x11, lsl #2]
.LBB27_1542:                            // %._crit_edge.i.i88
                                        //   in Loop: Header=BB27_1543 Depth=4
	add	x1, x1, #1
	add	x16, x16, x13
	add	x5, x5, x13
	cmp	x1, x20
	b.eq	.LBB27_1538
.LBB27_1543:                            // %.lr.ph.i.i84
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1534 Depth=2
                                        //       Parent Loop BB27_1539 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1546 Depth 5
	add	x11, x1, x22
	ldr	s3, [x9, x1, lsl #2]
	ldr	s2, [x24, x11, lsl #2]
	ldr	s0, [x26, x11, lsl #2]
	ldr	s1, [x28, x11, lsl #2]
	cmp	x20, #1
	b.ne	.LBB27_1545
// %bb.1544:                            //   in Loop: Header=BB27_1543 Depth=4
	mov	x11, xzr
	tbz	w20, #0, .LBB27_1542
	b	.LBB27_1541
	.p2align	5, , 16
.LBB27_1545:                            // %.lr.ph.i.i84.new.preheader
                                        //   in Loop: Header=BB27_1543 Depth=4
	mov	x6, xzr
	mov	x14, x5
	mov	x11, x16
	mov	x23, x27
	mov	x3, x8
	.p2align	5, , 16
.LBB27_1546:                            // %.lr.ph.i.i84.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1534 Depth=2
                                        //       Parent Loop BB27_1539 Depth=3
                                        //         Parent Loop BB27_1543 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s4, [x3, #-4]
	sub	x6, x6, #2
	fmul	s4, s2, s4
	ldur	s5, [x11, #-4]
	ldur	s7, [x23, #-4]
	fmadd	s6, s4, s3, s5
	fmadd	s4, s5, s1, s4
	fmadd	s5, s6, s0, s7
	stur	s5, [x23, #-4]
	stur	s4, [x14, #-4]
	ldr	s4, [x3], #8
	ldr	s5, [x11], #8
	ldr	s7, [x23]
	fmul	s4, s2, s4
	fmadd	s6, s4, s3, s5
	fmadd	s4, s5, s1, s4
	fmadd	s5, s6, s0, s7
	str	s5, [x23], #8
	str	s4, [x14], #8
	cmp	x15, x6
	b.ne	.LBB27_1546
// %bb.1547:                            // %._crit_edge.i.i88.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1543 Depth=4
	neg	x11, x6
	tbz	w20, #0, .LBB27_1542
	b	.LBB27_1541
.LBB27_1548:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x8, [x10, #152]
	ldr	w9, [x8]
	cbnz	w9, .LBB27_2697
// %bb.1549:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x10, #160]
	ldrsw	x20, [sp, #784]
	ldr	x10, [x9, #24]
	str	x10, [sp, #704]                 // 8-byte Folded Spill
	cmp	x10, x20
	b.le	.LBB27_7
// %bb.1550:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [sp, #704]                 // 8-byte Folded Reload
	nop
	madd	x10, x12, x20, x12
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldrsw	x24, [sp, #788]
	ldr	x13, [x11, #16]
	sdiv	x22, x13, x12
	sdiv	x10, x10, x24
	cmp	x10, x12
	csel	x23, x10, x12, lt
	msub	x10, x22, x12, x13
	cbnz	x10, .LBB27_2772
// %bb.1551:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [x9, #32]
	str	x13, [sp, #696]                 // 8-byte Folded Spill
	mul	x19, x13, x12
	ldr	x10, [x11, #184]
	ldr	x25, [x8, #248]
	ldr	x26, [x9, #248]
	ldp	x8, x9, [x11, #168]
	str	x12, [sp, #728]                 // 8-byte Folded Spill
	ldr	s8, [x11, #84]
	ldr	x10, [x10, #24]
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	ldr	x21, [x11, #248]
	ldr	x27, [x8, #248]
	ldr	x28, [x9, #248]
	cbnz	w20, .LBB27_1553
// %bb.1552:                            //   in Loop: Header=BB27_3 Depth=1
	lsl	x2, x19, #2
	mov	x0, x21
	mov	w1, wzr
	bl	memset
.LBB27_1553:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1555
// %bb.1554:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1555:                            // %ggml_barrier.exit.i.i72
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_7
// %bb.1556:                            // %.lr.ph130.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #704]                 // 8-byte Folded Reload
	add	x10, x21, x19, lsl #2
	lsl	x12, x22, #2
	ldr	x14, [sp, #696]                 // 8-byte Folded Reload
	mul	x16, x22, x22
	add	x15, x21, #4
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	mov	x8, xzr
	sxtw	x11, w23
	mul	x9, x13, x20
	mul	x10, x22, x14
	mul	x13, x13, x22
	lsl	x14, x14, #2
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	lsl	x16, x16, #2
	sdiv	x9, x9, x24
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	and	x10, x22, #0x7ffffffffffffffe
	neg	x14, x10
	lsl	x10, x13, #2
	str	x10, [sp, #720]                 // 8-byte Folded Spill
	sxtw	x10, w9
	mul	x13, x12, x10
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	add	x9, x26, x13
	str	x13, [sp, #672]                 // 8-byte Folded Spill
	add	x13, x15, x13
	add	x9, x9, #4
	str	x13, [sp, #760]                 // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	nop
	madd	x9, x16, x10, x15
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	lsl	x10, x9, #2
	str	x10, [sp, #656]                 // 8-byte Folded Spill
	ldr	x10, [sp, #712]                 // 8-byte Folded Reload
	sdiv	x9, x9, x10
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	b	.LBB27_1558
.LBB27_1557:                            // %._crit_edge128.i.i
                                        //   in Loop: Header=BB27_1558 Depth=2
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	add	x8, x8, #1
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	add	x10, x10, x9
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	add	x10, x10, x9
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	cmp	x8, x9
	b.eq	.LBB27_7
.LBB27_1558:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1563 Depth 3
                                        //         Child Loop BB27_1567 Depth 4
                                        //           Child Loop BB27_1570 Depth 5
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	sdiv	x10, x8, x9
	msub	x13, x10, x9, x8
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	cbnz	x13, .LBB27_1560
// %bb.1559:                            //   in Loop: Header=BB27_1558 Depth=2
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x9, [x9, #184]
	ldr	x9, [x9, #248]
.LBB27_1560:                            //   in Loop: Header=BB27_1558 Depth=2
	ldr	x13, [sp, #736]                 // 8-byte Folded Reload
	cmp	x13, x11
	b.ge	.LBB27_1557
// %bb.1561:                            // %.lr.ph127.i.i
                                        //   in Loop: Header=BB27_1558 Depth=2
	ldr	x13, [sp, #680]                 // 8-byte Folded Reload
	ldr	x15, [sp, #672]                 // 8-byte Folded Reload
	nop
	madd	x13, x13, x10, x15
	ldr	x15, [sp, #656]                 // 8-byte Folded Reload
	ldr	x17, [sp, #688]                 // 8-byte Folded Reload
	ldr	x1, [sp, #760]                  // 8-byte Folded Reload
	nop
	madd	x15, x12, x10, x15
	mul	x10, x17, x10
	ldr	x17, [sp, #704]                 // 8-byte Folded Reload
	ldr	x3, [sp, #752]                  // 8-byte Folded Reload
	mul	x13, x22, x13
	mul	x6, x8, x17
	ldr	x17, [sp, #744]                 // 8-byte Folded Reload
	add	x30, x9, x10, lsl #2
	add	x9, x9, x13
	add	x5, x9, #4
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	add	x23, x17, x10, lsl #2
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	ldr	x17, [sp, #736]                 // 8-byte Folded Reload
	nop
	madd	x15, x9, x15, x10
	b	.LBB27_1563
	.p2align	5, , 16
.LBB27_1562:                            // %._crit_edge124.i.i
                                        //   in Loop: Header=BB27_1563 Depth=3
	add	x17, x17, #1
	add	x3, x3, x12
	add	x1, x1, x12
	add	x5, x5, x16
	add	x15, x15, x16
	cmp	x17, x11
	b.eq	.LBB27_1557
.LBB27_1563:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1558 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1567 Depth 4
                                        //           Child Loop BB27_1570 Depth 5
	cmp	x22, #1
	b.lt	.LBB27_1562
// %bb.1564:                            // %.lr.ph123.i.i.preheader
                                        //   in Loop: Header=BB27_1563 Depth=3
	add	x9, x17, x6
	mul	x19, x17, x22
	mov	x0, xzr
	mul	x20, x9, x22
	mov	x24, x15
	mov	x9, x5
	b	.LBB27_1567
	.p2align	5, , 16
.LBB27_1565:                            // %._crit_edge.i.i77.epilog-lcssa
                                        //   in Loop: Header=BB27_1567 Depth=4
	add	x13, x0, x19
	add	x2, x10, x20
	mul	x13, x13, x22
	ldr	s3, [x26, x2, lsl #2]
	add	x10, x10, x13
	fmul	s1, s1, s3
	ldr	s4, [x30, x10, lsl #2]
	fmadd	s1, s4, s2, s1
	ldr	s2, [x21, x2, lsl #2]
	fmadd	s0, s1, s0, s2
	str	s0, [x21, x2, lsl #2]
	str	s1, [x23, x10, lsl #2]
.LBB27_1566:                            // %._crit_edge.i.i77
                                        //   in Loop: Header=BB27_1567 Depth=4
	add	x0, x0, #1
	add	x9, x9, x12
	add	x24, x24, x12
	cmp	x0, x22
	b.eq	.LBB27_1562
.LBB27_1567:                            // %.lr.ph123.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1558 Depth=2
                                        //       Parent Loop BB27_1563 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1570 Depth 5
	add	x10, x0, x20
	ldr	s0, [x27, x10, lsl #2]
	ldr	s1, [x25, x10, lsl #2]
	fmul	s0, s8, s0
	ldr	s2, [x28, x10, lsl #2]
	cmp	x22, #1
	b.ne	.LBB27_1569
// %bb.1568:                            //   in Loop: Header=BB27_1567 Depth=4
	mov	x10, xzr
	tbz	w22, #0, .LBB27_1566
	b	.LBB27_1565
	.p2align	5, , 16
.LBB27_1569:                            // %.lr.ph123.i.i.new.preheader
                                        //   in Loop: Header=BB27_1567 Depth=4
	mov	x4, xzr
	mov	x13, x24
	mov	x10, x9
	mov	x7, x1
	mov	x2, x3
	.p2align	5, , 16
.LBB27_1570:                            // %.lr.ph123.i.i.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1558 Depth=2
                                        //       Parent Loop BB27_1563 Depth=3
                                        //         Parent Loop BB27_1567 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	s3, [x2, #-4]
	sub	x4, x4, #2
	fmul	s3, s1, s3
	ldur	s4, [x10, #-4]
	fmadd	s3, s4, s2, s3
	ldur	s4, [x7, #-4]
	fmadd	s4, s3, s0, s4
	stur	s4, [x7, #-4]
	stur	s3, [x13, #-4]
	ldr	s3, [x2], #8
	fmul	s3, s1, s3
	ldr	s4, [x10], #8
	fmadd	s3, s4, s2, s3
	ldr	s4, [x7]
	fmadd	s4, s3, s0, s4
	str	s4, [x7], #8
	str	s3, [x13], #8
	cmp	x14, x4
	b.ne	.LBB27_1570
// %bb.1571:                            // %._crit_edge.i.i77.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1567 Depth=4
	neg	x10, x4
	tbz	w22, #0, .LBB27_1566
	b	.LBB27_1565
.LBB27_1572:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	ldr	x9, [x10, #152]
	ldr	w8, [x9]
	cbnz	w8, .LBB27_2698
// %bb.1573:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [x10, #160]
	ldrsw	x8, [sp, #784]
	ldr	x10, [x11, #24]
	str	x10, [sp, #544]                 // 8-byte Folded Spill
	cmp	x10, x8
	b.le	.LBB27_7
// %bb.1574:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [sp, #544]                 // 8-byte Folded Reload
	add	w12, w8, #1
	sxtw	x12, w12
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	mul	x12, x14, x12
	ldrsw	x13, [sp, #788]
	ldr	x15, [x10, #16]
	sdiv	x10, x15, x14
	str	x15, [sp, #536]                 // 8-byte Folded Spill
	sdiv	x12, x12, x13
	cmp	x12, x14
	csel	x12, x12, x14, lt
	msub	x14, x10, x14, x15
	cbnz	x14, .LBB27_2773
// %bb.1575:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [x11, #32]
	str	x14, [sp, #584]                 // 8-byte Folded Spill
	cmp	x14, #1
	b.lt	.LBB27_7
// %bb.1576:                            // %.lr.ph150.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x3, [sp, #544]                  // 8-byte Folded Reload
	sxtw	x12, w12
	lsl	x2, x10, #2
	ldr	x16, [sp, #768]                 // 8-byte Folded Reload
	str	x12, [sp, #680]                 // 8-byte Folded Spill
	and	x12, x10, #0x7ffffffffffffffc
	ldr	x6, [sp, #584]                  // 8-byte Folded Reload
	neg	x4, x12
	and	x5, x10, #0x7ffffffffffffffe
	ldr	x1, [sp, #536]                  // 8-byte Folded Reload
	mov	x19, xzr
	neg	x5, x5
	mul	x8, x3, x8
	ldp	x0, x14, [x16, #192]
	ldr	x20, [x9, #248]
	mul	x15, x1, x6
	mul	x3, x3, x10
	ldr	x21, [x11, #248]
	str	x21, [sp, #744]                 // 8-byte Folded Spill
	str	x20, [sp, #752]                 // 8-byte Folded Spill
	ldp	x9, x11, [x16, #168]
	str	x14, [sp, #488]                 // 8-byte Folded Spill
	ldr	x17, [x16, #184]
	sdiv	x13, x8, x13
	ldr	x8, [x14, #24]
	ldr	x14, [x16, #248]
	ldr	x7, [x11, #248]
	ldr	x12, [x9, #248]
	ldr	x9, [x17, #248]
	ldr	x17, [x0, #248]
	str	x12, [sp, #736]                 // 8-byte Folded Spill
	str	x17, [sp, #728]                 // 8-byte Folded Spill
	sxtw	x13, w13
	sdiv	x8, x6, x8
	str	x13, [sp, #592]                 // 8-byte Folded Spill
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	mul	x16, x10, x1
	str	x16, [sp, #576]                 // 8-byte Folded Spill
	and	x1, x10, #0x3
	mul	x16, x10, x10
	str	x16, [sp, #672]                 // 8-byte Folded Spill
	add	x11, x14, x15, lsl #2
	str	x11, [sp, #568]                 // 8-byte Folded Spill
	lsl	x11, x3, #2
	lsl	x15, x16, #2
	str	x11, [sp, #560]                 // 8-byte Folded Spill
	str	x15, [sp, #664]                 // 8-byte Folded Spill
	mul	x11, x2, x13
	mul	x15, x15, x13
	str	x15, [sp, #528]                 // 8-byte Folded Spill
	mul	x13, x16, x13
	str	x13, [sp, #520]                 // 8-byte Folded Spill
	add	x13, x9, x11
	add	x9, x12, x11
	add	x12, x20, x11
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	add	x9, x21, x11
	add	x11, x17, x11
	str	x13, [sp, #648]                 // 8-byte Folded Spill
	add	x9, x9, #4
	str	x11, [sp, #632]                 // 8-byte Folded Spill
	add	x11, x13, #8
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	add	x9, x12, #4
	str	x11, [sp, #624]                 // 8-byte Folded Spill
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	add	x9, x14, x15
	str	x9, [sp, #512]                  // 8-byte Folded Spill
	lsl	x9, x6, #2
	str	x9, [sp, #496]                  // 8-byte Folded Spill
	b	.LBB27_1578
.LBB27_1577:                            // %._crit_edge147.i.i
                                        //   in Loop: Header=BB27_1578 Depth=2
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x19, [sp, #600]                 // 8-byte Folded Reload
	add	x19, x19, #1
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	ldr	x9, [sp, #616]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	cmp	x19, x8
	b.eq	.LBB27_7
.LBB27_1578:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1583 Depth 3
                                        //         Child Loop BB27_1587 Depth 4
                                        //           Child Loop BB27_1590 Depth 5
                                        //           Child Loop BB27_1593 Depth 5
                                        //           Child Loop BB27_1597 Depth 5
	ldr	x9, [sp, #552]                  // 8-byte Folded Reload
	str	x19, [sp, #600]                 // 8-byte Folded Spill
	sdiv	x11, x19, x9
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	mul	x12, x8, x11
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	nop
	msub	x13, x11, x9, x19
	add	x8, x8, x12, lsl #2
	mov	x9, x8
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	cbnz	x13, .LBB27_1580
// %bb.1579:                            //   in Loop: Header=BB27_1578 Depth=2
	ldr	x8, [sp, #488]                  // 8-byte Folded Reload
	ldr	x9, [x8, #248]
	add	x9, x9, x12, lsl #2
.LBB27_1580:                            //   in Loop: Header=BB27_1578 Depth=2
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	ldr	x12, [sp, #592]                 // 8-byte Folded Reload
	cmp	x12, x8
	b.ge	.LBB27_1577
// %bb.1581:                            // %.lr.ph146.i.i.preheader
                                        //   in Loop: Header=BB27_1578 Depth=2
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	ldr	x12, [sp, #600]                 // 8-byte Folded Reload
	mul	x8, x12, x8
	ldr	x12, [sp, #512]                 // 8-byte Folded Reload
	ldr	x28, [sp, #632]                 // 8-byte Folded Reload
	ldr	x25, [sp, #608]                 // 8-byte Folded Reload
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	ldr	x13, [sp, #616]                 // 8-byte Folded Reload
	ldr	x27, [sp, #640]                 // 8-byte Folded Reload
	ldr	x23, [sp, #648]                 // 8-byte Folded Reload
	ldr	x21, [sp, #624]                 // 8-byte Folded Reload
	add	x8, x9, x8
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	add	x8, x8, #8
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #496]                  // 8-byte Folded Reload
	nop
	madd	x11, x2, x11, x8
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	nop
	madd	x8, x8, x11, x12
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	b	.LBB27_1583
	.p2align	5, , 16
.LBB27_1582:                            // %._crit_edge143.i.i
                                        //   in Loop: Header=BB27_1583 Depth=3
	ldr	x11, [sp, #664]                 // 8-byte Folded Reload
	add	x21, x21, x2
	add	x23, x23, x2
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x27, x27, x2
	add	x13, x13, x2
	ldr	x12, [sp, #696]                 // 8-byte Folded Reload
	add	x25, x25, x2
	add	x28, x28, x2
	ldr	x15, [sp, #688]                 // 8-byte Folded Reload
	add	x8, x8, x11
	add	x15, x15, #1
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	str	x15, [sp, #688]                 // 8-byte Folded Spill
	add	x12, x12, x8
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	x12, [sp, #696]                 // 8-byte Folded Spill
	add	x8, x8, x11
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	add	x8, x8, x11
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	cmp	x15, x8
	b.eq	.LBB27_1577
.LBB27_1583:                            // %.lr.ph146.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1578 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1587 Depth 4
                                        //           Child Loop BB27_1590 Depth 5
                                        //           Child Loop BB27_1593 Depth 5
                                        //           Child Loop BB27_1597 Depth 5
	cmp	x10, #1
	b.lt	.LBB27_1582
// %bb.1584:                            // %.lr.ph142.i.i
                                        //   in Loop: Header=BB27_1583 Depth=3
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	mov	x12, xzr
	ldr	x15, [sp, #688]                 // 8-byte Folded Reload
	add	x11, x15, x8
	mul	x8, x15, x10
	ldr	x26, [sp, #704]                 // 8-byte Folded Reload
	ldr	x30, [sp, #696]                 // 8-byte Folded Reload
	ldr	x0, [sp, #712]                  // 8-byte Folded Reload
	mul	x17, x11, x10
	ldr	x11, [sp, #720]                 // 8-byte Folded Reload
	str	x8, [sp, #768]                  // 8-byte Folded Spill
	b	.LBB27_1587
	.p2align	5, , 16
.LBB27_1585:                            // %.lr.ph138.i.i.epil
                                        //   in Loop: Header=BB27_1587 Depth=4
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	add	x16, x15, x17
	add	x20, x12, x8
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	mul	x20, x20, x10
	ldr	s3, [x8, x16, lsl #2]
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	add	x15, x15, x20
	ldr	s4, [x8, x16, lsl #2]
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	ldr	s5, [x8, x16, lsl #2]
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	ldr	s6, [x8, x16, lsl #2]
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	fmul	s1, s1, s5
	ldr	s5, [x9, x15, lsl #2]
	fmadd	s1, s5, s4, s1
	fmadd	s0, s0, s6, s1
	fmadd	s2, s0, s3, s2
	str	s0, [x8, x15, lsl #2]
.LBB27_1586:                            // %._crit_edge.i.i68
                                        //   in Loop: Header=BB27_1587 Depth=4
	add	x12, x12, #1
	add	x0, x0, x2
	add	x30, x30, x10
	add	x11, x11, x2
	add	x26, x26, x2
	str	s2, [x14, x3, lsl #2]
	cmp	x12, x10
	b.eq	.LBB27_1582
.LBB27_1587:                            // %.lr.ph.i.i66
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1578 Depth=2
                                        //       Parent Loop BB27_1583 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1590 Depth 5
                                        //           Child Loop BB27_1593 Depth 5
                                        //           Child Loop BB27_1597 Depth 5
	cmp	x10, #4
	b.hs	.LBB27_1589
// %bb.1588:                            //   in Loop: Header=BB27_1587 Depth=4
	mov	x3, xzr
	fmov	s0, wzr
	cbnz	x1, .LBB27_1592
	b	.LBB27_1594
	.p2align	5, , 16
.LBB27_1589:                            // %.lr.ph.i.i66.new.preheader
                                        //   in Loop: Header=BB27_1587 Depth=4
	fmov	s0, wzr
	mov	x15, xzr
	mov	x3, x0
	mov	x20, x21
	.p2align	5, , 16
.LBB27_1590:                            // %.lr.ph.i.i66.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1578 Depth=2
                                        //       Parent Loop BB27_1583 Depth=3
                                        //         Parent Loop BB27_1587 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x20, #-8]
	sub	x15, x15, #4
	ldp	s3, s4, [x3, #-8]
	fmadd	s0, s1, s3, s0
	fmadd	s0, s2, s4, s0
	ldp	s1, s2, [x20], #16
	ldp	s3, s4, [x3], #16
	fmadd	s0, s1, s3, s0
	fmadd	s0, s2, s4, s0
	cmp	x4, x15
	b.ne	.LBB27_1590
// %bb.1591:                            // %.lr.ph138.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1587 Depth=4
	neg	x3, x15
	cbz	x1, .LBB27_1594
.LBB27_1592:                            // %.epil.preheader.preheader
                                        //   in Loop: Header=BB27_1587 Depth=4
	add	x15, x3, x30
	add	x3, x23, x3, lsl #2
	mov	x20, x1
	add	x15, x9, x15, lsl #2
	.p2align	5, , 16
.LBB27_1593:                            // %.epil.preheader
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1578 Depth=2
                                        //       Parent Loop BB27_1583 Depth=3
                                        //         Parent Loop BB27_1587 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x3], #4
	subs	x20, x20, #1
	ldr	s2, [x15], #4
	fmadd	s0, s1, s2, s0
	b.ne	.LBB27_1593
.LBB27_1594:                            // %.lr.ph138.i.i.preheader
                                        //   in Loop: Header=BB27_1587 Depth=4
	add	x3, x12, x17
	ldr	s1, [x7, x3, lsl #2]
	cmp	x10, #1
	b.ne	.LBB27_1596
// %bb.1595:                            //   in Loop: Header=BB27_1587 Depth=4
	mov	x15, xzr
	fmov	s2, wzr
	tbz	w10, #0, .LBB27_1586
	b	.LBB27_1585
	.p2align	5, , 16
.LBB27_1596:                            // %.lr.ph138.i.i.preheader1514
                                        //   in Loop: Header=BB27_1587 Depth=4
	fmov	s2, wzr
	mov	x15, xzr
	mov	x20, xzr
	.p2align	5, , 16
.LBB27_1597:                            // %.lr.ph138.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1578 Depth=2
                                        //       Parent Loop BB27_1583 Depth=3
                                        //         Parent Loop BB27_1587 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	add	x6, x13, x15
	add	x19, x27, x15
	ldur	s4, [x6, #-4]
	add	x8, x11, x15
	ldr	s5, [x19]
	add	x24, x28, x15
	ldr	s7, [x8]
	add	x16, x25, x15
	add	x22, x26, x15
	ldr	s6, [x24]
	sub	x20, x20, #2
	add	x15, x15, #8
	ldur	s3, [x16, #-4]
	fmul	s5, s1, s5
	fmadd	s4, s7, s4, s5
	fmadd	s4, s0, s6, s4
	str	s4, [x22]
	fmadd	s2, s4, s3, s2
	ldr	s4, [x6]
	ldr	s5, [x19, #4]
	ldr	s7, [x8, #4]
	ldr	s6, [x24, #4]
	ldr	s3, [x16]
	fmul	s5, s1, s5
	fmadd	s4, s7, s4, s5
	fmadd	s4, s0, s6, s4
	fmadd	s2, s4, s3, s2
	str	s4, [x22, #4]
	cmp	x5, x20
	b.ne	.LBB27_1597
// %bb.1598:                            // %._crit_edge.i.i68.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1587 Depth=4
	neg	x15, x20
	tbz	w10, #0, .LBB27_1586
	b	.LBB27_1585
.LBB27_1599:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x19
	bl	ggml_get_unary_op
	cmp	w0, #13
	b.hi	.LBB27_2774
// %bb.1600:                            //   in Loop: Header=BB27_3 Depth=1
	mov	w8, w0
	adrp	x9, .LJTI27_1
	add	x9, x9, :lo12:.LJTI27_1
.Ltmp1:
	adr	x10, .Ltmp1
	ldrsw	x11, [x9, x8, lsl #2]
	add	x10, x10, x11
	br	x10
.LBB27_1601:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_abs
	b	.LBB27_7
.LBB27_1602:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x8, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2699
// %bb.1603:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1604:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	mov	x0, x19
	ldur	x21, [x8, #84]
	bl	ggml_nrows
	cmp	w0, #1
	b.lt	.LBB27_7
// %bb.1605:                            // %.lr.ph.i.i59
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	w20, [x19, #16]
	mov	x22, xzr
	and	x23, x0, #0x7fffffff
.LBB27_1606:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	mov	w0, w20
	ldr	x8, [x9, #248]
	ldr	x9, [x9, #56]
	nop
	madd	x1, x9, x22, x8
	ldr	x8, [x19, #248]
	ldr	x9, [x19, #56]
	nop
	madd	x2, x9, x22, x8
	blr	x21
	add	x22, x22, #1
	cmp	x23, x22
	b.ne	.LBB27_1606
	b	.LBB27_7
.LBB27_1607:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x8, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2700
// %bb.1608:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1609:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	mov	x0, x19
	ldur	x21, [x8, #84]
	ldr	x22, [x8, #160]
	bl	ggml_nrows
	cmp	w0, #1
	b.lt	.LBB27_7
// %bb.1610:                            // %.lr.ph.i.i52
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	w20, [x19, #16]
	mov	x23, xzr
	and	x24, x0, #0x7fffffff
.LBB27_1611:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	mov	w0, w20
	ldr	x8, [x9, #248]
	ldr	x9, [x9, #56]
	nop
	madd	x1, x9, x23, x8
	ldr	x8, [x19, #248]
	ldr	x9, [x19, #56]
	nop
	madd	x2, x9, x23, x8
	ldr	x8, [x22, #248]
	ldr	x9, [x22, #56]
	nop
	madd	x3, x9, x23, x8
	blr	x21
	add	x23, x23, #1
	cmp	x24, x23
	b.ne	.LBB27_1611
	b	.LBB27_7
.LBB27_1612:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1613:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldur	x8, [x0, #84]
	ldr	x1, [x0, #152]
	blr	x8
	b	.LBB27_7
.LBB27_1614:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1615:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldur	x8, [x0, #84]
	ldp	x1, x2, [x0, #152]
	blr	x8
	b	.LBB27_7
.LBB27_1616:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1617:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldp	x1, x2, [x0, #152]
	ldur	x8, [x0, #84]
	mov	x3, x2
	blr	x8
	b	.LBB27_7
.LBB27_1618:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	w2, [sp, #784]
	ldr	w3, [sp, #788]
	ldr	x1, [x0, #152]
	ldur	x8, [x0, #84]
	ldur	x4, [x0, #100]
	blr	x8
	b	.LBB27_7
.LBB27_1619:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	w3, [sp, #784]
	ldr	w4, [sp, #788]
	ldp	x1, x2, [x0, #152]
	ldur	x8, [x0, #84]
	ldur	x5, [x0, #100]
	blr	x8
	b	.LBB27_7
.LBB27_1620:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	w4, [sp, #784]
	ldr	w5, [sp, #788]
	ldp	x1, x2, [x0, #152]
	ldr	x3, [x0, #168]
	ldur	x8, [x0, #84]
	ldur	x6, [x0, #100]
	blr	x8
	b	.LBB27_7
.LBB27_1621:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	ldr	x19, [x22, #152]
	ldr	w8, [x19]
	cbnz	w8, .LBB27_2701
// %bb.1622:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x22, #160]
	ldr	w8, [x20]
	cbnz	w8, .LBB27_2702
// %bb.1623:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [x19, #48]
	mov	w0, wzr
	bl	ggml_type_size
	cmp	x21, x0
	b.ne	.LBB27_2703
// %bb.1624:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w0, [x20]
	ldr	x21, [x20, #48]
	bl	ggml_type_size
	cmp	x21, x0
	b.ne	.LBB27_2704
// %bb.1625:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_1626
	b	.LBB27_2705
.LBB27_1626:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x22
	bl	ggml_is_scalar
	tbnz	w0, #0, .LBB27_1627
	b	.LBB27_2706
.LBB27_1627:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x22]
	cbnz	w8, .LBB27_2707
// %bb.1628:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x26, [x19, #16]
	mov	x0, x19
	bl	ggml_nrows
	ldrsw	x10, [sp, #788]
	lsl	x9, x26, #2
	add	x9, x9, #4
	ldr	x8, [sp, #792]
	mul	x9, x9, x10
	cmp	x8, x9
	b.lo	.LBB27_2708
// %bb.1629:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #800]
	fmov	s8, wzr
	str	x10, [sp, #648]                 // 8-byte Folded Spill
	ldrsw	x9, [sp, #784]
	str	x0, [sp, #640]                  // 8-byte Folded Spill
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	add	x8, x0, x10
	str	x9, [sp, #656]                  // 8-byte Folded Spill
	sub	x8, x8, #1
	sdiv	x8, x8, x10
	mul	x27, x8, x9
	add	x9, x27, x8
	cmp	x9, x0
	csel	x9, x9, x0, lt
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	cmp	x27, x9
	b.ge	.LBB27_1739
// %bb.1630:                            // %.lr.ph.i.i40
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x19, #56]
	and	x17, x26, #0x7fffffff
	and	x0, x26, #0x3
	ldr	x10, [x20, #56]
	and	x1, x26, #0x1
	sub	x2, x17, #1
	ldr	x16, [sp, #656]                 // 8-byte Folded Reload
	str	x1, [sp, #680]                  // 8-byte Folded Spill
	sub	x1, x17, x1
	ldr	x14, [sp, #648]                 // 8-byte Folded Reload
	sub	x22, x0, x17
	str	x1, [sp, #696]                  // 8-byte Folded Spill
	ldr	x15, [sp, #664]                 // 8-byte Folded Reload
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	mul	x9, x9, x8
	str	x10, [sp, #728]                 // 8-byte Folded Spill
	mul	x8, x10, x8
	mul	x10, x26, x16
	ldr	x11, [x19, #248]
	ldr	x12, [x20, #248]
	add	x13, x15, x14, lsl #2
	str	x17, [sp, #720]                 // 8-byte Folded Spill
	str	x0, [sp, #760]                  // 8-byte Folded Spill
	str	x2, [sp, #704]                  // 8-byte Folded Spill
	str	x26, [sp, #688]                 // 8-byte Folded Spill
	add	x19, x13, x10, lsl #2
	lsl	x10, x10, #2
	madd	x28, x9, x16, x11
	madd	x24, x8, x16, x12
	add	x10, x10, x14, lsl #2
	add	x10, x15, x10
	add	x9, x10, #8
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	add	x9, x10, #4
	add	x20, x28, #8
	add	x21, x24, #8
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	b	.LBB27_1633
.LBB27_1631:                            // %._crit_edge.loopexit.i98.i.i
                                        //   in Loop: Header=BB27_1633 Depth=2
	fcvt	s0, d0
.LBB27_1632:                            // %ggml_vec_sum_f32.exit.i.i
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	fadd	s8, s8, s0
	add	x27, x27, #1
	add	x20, x20, x8
	add	x28, x28, x8
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	add	x21, x21, x8
	add	x24, x24, x8
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	cmp	x27, x8
	b.eq	.LBB27_1739
.LBB27_1633:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1637 Depth 3
                                        //       Child Loop BB27_1640 Depth 3
                                        //       Child Loop BB27_1644 Depth 3
                                        //       Child Loop BB27_1647 Depth 3
                                        //       Child Loop BB27_1651 Depth 3
                                        //       Child Loop BB27_1655 Depth 3
                                        //       Child Loop BB27_1658 Depth 3
                                        //       Child Loop BB27_1662 Depth 3
                                        //       Child Loop BB27_1665 Depth 3
                                        //       Child Loop BB27_1669 Depth 3
                                        //       Child Loop BB27_1672 Depth 3
	fmov	s0, wzr
	cmp	w26, #1
	b.lt	.LBB27_1632
// %bb.1634:                            // %.lr.ph.i.i.i43.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	cmp	x2, #3
	b.hs	.LBB27_1636
// %bb.1635:                            //   in Loop: Header=BB27_1633 Depth=2
	mov	w9, #-8388608                   // =0xff800000
	mov	x8, xzr
	fmov	s9, w9
	cbnz	x0, .LBB27_1639
	b	.LBB27_1641
.LBB27_1636:                            // %.lr.ph.i.i.i43.preheader1537
                                        //   in Loop: Header=BB27_1633 Depth=2
	mov	w9, #-8388608                   // =0xff800000
	mov	x8, xzr
	fmov	s9, w9
	mov	x9, x20
	.p2align	5, , 16
.LBB27_1637:                            // %.lr.ph.i.i.i43
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x9, #-8]
	sub	x8, x8, #4
	fcmp	s9, s0
	fcsel	s0, s9, s0, gt
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	ldp	s1, s2, [x9], #16
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s2
	fcsel	s9, s0, s2, gt
	cmp	x22, x8
	b.ne	.LBB27_1637
// %bb.1638:                            // %.lr.ph.i76.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1633 Depth=2
	neg	x8, x8
	cbz	x0, .LBB27_1641
.LBB27_1639:                            // %.lr.ph.i.i.i43.epil.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	add	x8, x28, x8, lsl #2
	mov	x9, x0
	.p2align	5, , 16
.LBB27_1640:                            // %.lr.ph.i.i.i43.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x8], #4
	fcmp	s9, s0
	fcsel	s9, s9, s0, gt
	subs	x9, x9, #1
	b.ne	.LBB27_1640
.LBB27_1641:                            // %.lr.ph.i76.i.i.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	cmp	x2, #3
	b.hs	.LBB27_1643
// %bb.1642:                            //   in Loop: Header=BB27_1633 Depth=2
	mov	x8, xzr
	fmov	d10, xzr
	cbnz	x0, .LBB27_1646
	b	.LBB27_1648
.LBB27_1643:                            // %.lr.ph.i76.i.i.preheader1536
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x25, [sp, #752]                 // 8-byte Folded Reload
	fmov	d10, xzr
	mov	x23, xzr
	mov	x26, x20
	.p2align	5, , 16
.LBB27_1644:                            // %.lr.ph.i76.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x26, #-8]
	fsub	s0, s0, s9
	stur	s0, [x25, #-8]
	bl	expf
	fcvt	d0, s0
	fadd	d10, d10, d0
	ldur	s0, [x26, #-4]
	fsub	s0, s0, s9
	stur	s0, [x25, #-4]
	bl	expf
	fcvt	d0, s0
	fadd	d10, d10, d0
	ldr	s0, [x26]
	fsub	s0, s0, s9
	str	s0, [x25]
	bl	expf
	fcvt	d0, s0
	fadd	d10, d10, d0
	ldr	s0, [x26, #4]
	fsub	s0, s0, s9
	str	s0, [x25, #4]
	bl	expf
	fcvt	d0, s0
	sub	x23, x23, #4
	add	x26, x26, #16
	add	x25, x25, #16
	fadd	d10, d10, d0
	cmp	x22, x23
	b.ne	.LBB27_1644
// %bb.1645:                            // %ggml_vec_log_soft_max_f32.exit.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x26, [sp, #688]                 // 8-byte Folded Reload
	neg	x8, x23
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	cbz	x0, .LBB27_1648
.LBB27_1646:                            // %.lr.ph.i76.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x25, [sp, #760]                 // 8-byte Folded Reload
	lsl	x23, x8, #2
	.p2align	5, , 16
.LBB27_1647:                            // %.lr.ph.i76.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x28, x23]
	fsub	s0, s0, s9
	str	s0, [x19, x23]
	bl	expf
	fcvt	d0, s0
	add	x23, x23, #4
	subs	x25, x25, #1
	fadd	d10, d10, d0
	b.ne	.LBB27_1647
.LBB27_1648:                            // %ggml_vec_log_soft_max_f32.exit.i.i
                                        //   in Loop: Header=BB27_1633 Depth=2
	fcvt	s0, d10
	bl	logf
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	cmp	x8, #2
	b.hs	.LBB27_1650
// %bb.1649:                            //   in Loop: Header=BB27_1633 Depth=2
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x2, [sp, #704]                  // 8-byte Folded Reload
	b	.LBB27_1653
.LBB27_1650:                            // %vector.body285.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	ldr	x2, [sp, #704]                  // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1651:                            // %vector.body285
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x9, #-4]
	subs	x8, x8, #2
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	stp	s1, s2, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_1651
// %bb.1652:                            // %middle.block278
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_1659
.LBB27_1653:                            // %.lr.ph.i82.i.i.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	sub	w9, w26, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_1656
// %bb.1654:                            // %.lr.ph.i82.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1655:                            // %.lr.ph.i82.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x19, x9, lsl #2]
	subs	x10, x10, #1
	fsub	s1, s1, s0
	str	s1, [x19, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1655
.LBB27_1656:                            // %.lr.ph.i82.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1633 Depth=2
	sub	x8, x2, x8
	cmp	x8, #3
	b.lo	.LBB27_1659
// %bb.1657:                            // %.lr.ph.i82.i.i.preheader1535
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	sub	x8, x8, x9
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	add	x9, x10, x9, lsl #2
	.p2align	5, , 16
.LBB27_1658:                            // %.lr.ph.i82.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x9, #-8]
	subs	x8, x8, #4
	ldp	s3, s4, [x9]
	fsub	s2, s2, s0
	fsub	s1, s1, s0
	fsub	s3, s3, s0
	stp	s1, s2, [x9, #-8]
	fsub	s1, s4, s0
	stp	s3, s1, [x9], #16
	b.ne	.LBB27_1658
.LBB27_1659:                            // %.lr.ph.i88.i.i.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	cmp	x2, #3
	b.hs	.LBB27_1661
// %bb.1660:                            //   in Loop: Header=BB27_1633 Depth=2
	mov	x10, xzr
	cbnz	x0, .LBB27_1664
	b	.LBB27_1666
.LBB27_1661:                            // %.lr.ph.i88.i.i.preheader1534
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	mov	x8, xzr
	mov	x9, x21
	.p2align	5, , 16
.LBB27_1662:                            // %.lr.ph.i88.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x9, #-8]
	sub	x8, x8, #4
	ldp	s1, s2, [x10, #-8]
	fmul	s0, s1, s0
	stur	s0, [x10, #-8]
	ldur	s0, [x9, #-4]
	fmul	s0, s2, s0
	ldp	s1, s2, [x10]
	stur	s0, [x10, #-4]
	ldr	s0, [x9]
	fmul	s0, s1, s0
	str	s0, [x10]
	ldr	s0, [x9, #4]
	add	x9, x9, #16
	fmul	s0, s2, s0
	str	s0, [x10, #4]
	add	x10, x10, #16
	cmp	x22, x8
	b.ne	.LBB27_1662
// %bb.1663:                            // %.lr.ph.i94.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1633 Depth=2
	neg	x10, x8
	cbz	x0, .LBB27_1666
.LBB27_1664:                            // %.lr.ph.i88.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x11, [sp, #712]                 // 8-byte Folded Reload
	add	x8, x24, x10, lsl #2
	mov	x9, x0
	add	x10, x11, x10, lsl #2
	.p2align	5, , 16
.LBB27_1665:                            // %.lr.ph.i88.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x10]
	subs	x9, x9, #1
	ldr	s1, [x8], #4
	fmul	s0, s0, s1
	str	s0, [x10], #4
	b.ne	.LBB27_1665
.LBB27_1666:                            // %.lr.ph.i94.i.i.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	cmp	x2, #3
	b.hs	.LBB27_1668
// %bb.1667:                            //   in Loop: Header=BB27_1633 Depth=2
	mov	x8, xzr
	fmov	d0, xzr
	cbnz	x0, .LBB27_1671
	b	.LBB27_1631
.LBB27_1668:                            // %.lr.ph.i94.i.i.preheader1533
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	fmov	d0, xzr
	mov	x8, xzr
	.p2align	5, , 16
.LBB27_1669:                            // %.lr.ph.i94.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x9, #-8]
	sub	x8, x8, #4
	fcvt	d1, s1
	fadd	d0, d0, d1
	fcvt	d1, s2
	fadd	d0, d0, d1
	ldp	s1, s2, [x9], #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	fcvt	d1, s2
	fadd	d0, d0, d1
	cmp	x22, x8
	b.ne	.LBB27_1669
// %bb.1670:                            // %._crit_edge.loopexit.i98.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1633 Depth=2
	neg	x8, x8
	cbz	x0, .LBB27_1631
.LBB27_1671:                            // %.lr.ph.i94.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1633 Depth=2
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	add	x8, x9, x8, lsl #2
	mov	x9, x0
	.p2align	5, , 16
.LBB27_1672:                            // %.lr.ph.i94.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1633 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x8], #4
	subs	x9, x9, #1
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_1672
	b	.LBB27_1631
.LBB27_1673:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	ldr	x21, [x22, #152]
	ldr	w8, [x21]
	cbnz	w8, .LBB27_2709
// %bb.1674:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x20, x19, [x22, #160]
	mov	x0, x22
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_1675
	b	.LBB27_2710
.LBB27_1675:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_1676
	b	.LBB27_2711
.LBB27_1676:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_1677
	b	.LBB27_2712
.LBB27_1677:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x21
	bl	ggml_is_contiguous
	tbnz	w0, #0, .LBB27_1678
	b	.LBB27_2713
.LBB27_1678:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	mov	x1, x19
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB27_2534
// %bb.1679:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	mov	x1, x22
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB27_2534
// %bb.1680:                            //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x23, [sp, #784]
	mov	x0, x20
	ldrsw	x22, [sp, #788]
	ldr	x27, [x20, #16]
	bl	ggml_nrows
	add	x8, x22, x0
	sub	x8, x8, #1
	sdiv	x8, x8, x22
	mul	x13, x8, x23
	add	x9, x13, x8
	cmp	x9, x0
	csel	x9, x9, x0, lt
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	cmp	x13, x9
	b.ge	.LBB27_7
// %bb.1681:                            // %.lr.ph.i.i35
                                        //   in Loop: Header=BB27_3 Depth=1
	scvtf	s0, x0
	and	x16, x27, #0x7fffffff
	ldr	x9, [x21, #248]
	and	x0, x27, #0x3
	and	x1, x27, #0x1
	ldr	x12, [x20, #56]
	sub	x17, x16, #1
	sub	x28, x16, x1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	sub	x25, x0, x16
	str	x16, [sp, #704]                 // 8-byte Folded Spill
	ldr	s1, [x9]
	str	x12, [sp, #720]                 // 8-byte Folded Spill
	mul	x12, x12, x8
	ldr	x9, [x10, #248]
	str	x1, [sp, #688]                  // 8-byte Folded Spill
	str	x0, [sp, #768]                  // 8-byte Folded Spill
	ldr	x14, [x10, #56]
	str	x27, [sp, #680]                 // 8-byte Folded Spill
	str	x17, [sp, #696]                 // 8-byte Folded Spill
	ldr	x10, [x20, #248]
	str	x14, [sp, #728]                 // 8-byte Folded Spill
	ldr	x15, [x19, #56]
	str	x15, [sp, #712]                 // 8-byte Folded Spill
	nop
	madd	x22, x12, x23, x10
	mul	x10, x14, x8
	mul	x8, x15, x8
	ldr	x11, [x19, #248]
	fdiv	s8, s1, s0
	madd	x19, x10, x23, x9
	madd	x21, x8, x23, x11
	add	x24, x22, #8
	add	x20, x19, #8
	add	x26, x19, #4
	add	x12, x21, #8
	b	.LBB27_1683
	.p2align	5, , 16
.LBB27_1682:                            // %ggml_vec_scale_f32.exit79.i.i
                                        //   in Loop: Header=BB27_1683 Depth=2
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	add	x13, x13, #1
	add	x24, x24, x8
	add	x22, x22, x8
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	add	x20, x20, x8
	add	x19, x19, x8
	add	x26, x26, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x12, x12, x8
	add	x21, x21, x8
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	cmp	x13, x8
	b.eq	.LBB27_7
.LBB27_1683:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1687 Depth 3
                                        //       Child Loop BB27_1690 Depth 3
                                        //       Child Loop BB27_1694 Depth 3
                                        //       Child Loop BB27_1697 Depth 3
                                        //       Child Loop BB27_1701 Depth 3
                                        //       Child Loop BB27_1705 Depth 3
                                        //       Child Loop BB27_1708 Depth 3
                                        //       Child Loop BB27_1712 Depth 3
                                        //       Child Loop BB27_1715 Depth 3
                                        //       Child Loop BB27_1719 Depth 3
                                        //       Child Loop BB27_1723 Depth 3
                                        //       Child Loop BB27_1726 Depth 3
	cmp	w27, #1
	b.lt	.LBB27_1682
// %bb.1684:                            // %.lr.ph.i.i.i.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	cmp	x17, #3
	b.hs	.LBB27_1686
// %bb.1685:                            //   in Loop: Header=BB27_1683 Depth=2
	mov	w9, #-8388608                   // =0xff800000
	mov	x8, xzr
	fmov	s9, w9
	cbnz	x0, .LBB27_1689
	b	.LBB27_1691
.LBB27_1686:                            // %.lr.ph.i.i.i.preheader1532
                                        //   in Loop: Header=BB27_1683 Depth=2
	mov	w9, #-8388608                   // =0xff800000
	mov	x8, xzr
	fmov	s9, w9
	mov	x9, x24
	.p2align	5, , 16
.LBB27_1687:                            // %.lr.ph.i.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x9, #-8]
	sub	x8, x8, #4
	fcmp	s9, s0
	fcsel	s0, s9, s0, gt
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	ldp	s1, s2, [x9], #16
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s2
	fcsel	s9, s0, s2, gt
	cmp	x25, x8
	b.ne	.LBB27_1687
// %bb.1688:                            // %.lr.ph.i57.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1683 Depth=2
	neg	x8, x8
	cbz	x0, .LBB27_1691
.LBB27_1689:                            // %.lr.ph.i.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	add	x8, x22, x8, lsl #2
	mov	x9, x0
	.p2align	5, , 16
.LBB27_1690:                            // %.lr.ph.i.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x8], #4
	fcmp	s9, s0
	fcsel	s9, s9, s0, gt
	subs	x9, x9, #1
	b.ne	.LBB27_1690
.LBB27_1691:                            // %.lr.ph.i57.i.i.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	str	x13, [sp, #760]                 // 8-byte Folded Spill
	str	x24, [sp, #752]                 // 8-byte Folded Spill
	str	x12, [sp, #744]                 // 8-byte Folded Spill
	cmp	x17, #3
	b.hs	.LBB27_1693
// %bb.1692:                            //   in Loop: Header=BB27_1683 Depth=2
	mov	x8, xzr
	fmov	d10, xzr
	cbnz	x0, .LBB27_1696
	b	.LBB27_1698
.LBB27_1693:                            // %.lr.ph.i57.i.i.preheader1531
                                        //   in Loop: Header=BB27_1683 Depth=2
	fmov	d10, xzr
	mov	x27, xzr
	mov	x23, x20
	.p2align	5, , 16
.LBB27_1694:                            // %.lr.ph.i57.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x24, #-8]
	fsub	s0, s0, s9
	bl	expf
	stur	s0, [x23, #-8]
	fcvt	d1, s0
	ldur	s0, [x24, #-4]
	fadd	d10, d10, d1
	fsub	s0, s0, s9
	bl	expf
	stur	s0, [x23, #-4]
	fcvt	d1, s0
	ldr	s0, [x24]
	fadd	d10, d10, d1
	fsub	s0, s0, s9
	bl	expf
	str	s0, [x23]
	fcvt	d1, s0
	ldr	s0, [x24, #4]
	fadd	d10, d10, d1
	fsub	s0, s0, s9
	bl	expf
	fcvt	d1, s0
	sub	x27, x27, #4
	add	x24, x24, #16
	str	s0, [x23, #4]
	add	x23, x23, #16
	fadd	d10, d10, d1
	cmp	x25, x27
	b.ne	.LBB27_1694
// %bb.1695:                            // %ggml_vec_soft_max_f32.exit.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1683 Depth=2
	neg	x8, x27
	ldr	x27, [sp, #680]                 // 8-byte Folded Reload
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	cbz	x0, .LBB27_1698
.LBB27_1696:                            // %.lr.ph.i57.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	lsl	x23, x8, #2
	.p2align	5, , 16
.LBB27_1697:                            // %.lr.ph.i57.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x22, x23]
	fsub	s0, s0, s9
	bl	expf
	fcvt	d1, s0
	str	s0, [x19, x23]
	add	x23, x23, #4
	subs	x24, x24, #1
	fadd	d10, d10, d1
	b.ne	.LBB27_1697
.LBB27_1698:                            // %ggml_vec_soft_max_f32.exit.i.i
                                        //   in Loop: Header=BB27_1683 Depth=2
	fmov	d0, #1.00000000
	ldr	x11, [sp, #704]                 // 8-byte Folded Reload
	fdiv	d0, d0, d10
	fcvt	s0, d0
	cmp	x11, #2
	b.hs	.LBB27_1700
// %bb.1699:                            //   in Loop: Header=BB27_1683 Depth=2
	ldr	x13, [sp, #760]                 // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x17, [sp, #696]                 // 8-byte Folded Reload
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x24, [sp, #752]                 // 8-byte Folded Reload
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	b	.LBB27_1703
.LBB27_1700:                            // %vector.body274.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	ldr	x13, [sp, #760]                 // 8-byte Folded Reload
	mov	x8, x28
	mov	x9, x26
	ldr	x17, [sp, #696]                 // 8-byte Folded Reload
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_1701:                            // %vector.body274
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x9, #-4]
	subs	x8, x8, #2
	fmul	s2, s2, s0
	fmul	s1, s1, s0
	stp	s1, s2, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_1701
// %bb.1702:                            // %middle.block267
                                        //   in Loop: Header=BB27_1683 Depth=2
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	mov	x8, x28
	ldr	x24, [sp, #752]                 // 8-byte Folded Reload
	cbz	x9, .LBB27_1709
.LBB27_1703:                            // %.lr.ph.i63.i.i.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	sub	w9, w27, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_1706
// %bb.1704:                            // %.lr.ph.i63.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1705:                            // %.lr.ph.i63.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x19, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s1, s1, s0
	str	s1, [x19, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1705
.LBB27_1706:                            // %.lr.ph.i63.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1683 Depth=2
	sub	x8, x17, x8
	cmp	x8, #3
	b.lo	.LBB27_1709
// %bb.1707:                            // %.lr.ph.i63.i.i.preheader.new
                                        //   in Loop: Header=BB27_1683 Depth=2
	sub	x8, x11, x9
	lsl	x9, x9, #2
	.p2align	5, , 16
.LBB27_1708:                            // %.lr.ph.i63.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x10, x20, x9
	subs	x8, x8, #4
	ldur	s1, [x10, #-8]
	fmul	s1, s1, s0
	stur	s1, [x10, #-8]
	ldr	s1, [x26, x9]
	fmul	s1, s1, s0
	str	s1, [x26, x9]
	add	x9, x9, #16
	ldp	s1, s2, [x10]
	fmul	s2, s2, s0
	fmul	s1, s1, s0
	stp	s1, s2, [x10]
	b.ne	.LBB27_1708
.LBB27_1709:                            // %.lr.ph.i69.i.i.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	cmp	x17, #3
	b.hs	.LBB27_1711
// %bb.1710:                            //   in Loop: Header=BB27_1683 Depth=2
	mov	x8, xzr
	cbnz	x0, .LBB27_1714
	b	.LBB27_1716
.LBB27_1711:                            // %.lr.ph.i69.i.i.preheader1530
                                        //   in Loop: Header=BB27_1683 Depth=2
	mov	x8, xzr
	mov	x9, x12
	mov	x10, x20
	.p2align	5, , 16
.LBB27_1712:                            // %.lr.ph.i69.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x9, #-8]
	sub	x8, x8, #4
	ldp	s1, s2, [x10, #-8]
	fsub	s0, s1, s0
	stur	s0, [x10, #-8]
	ldur	s0, [x9, #-4]
	fsub	s0, s2, s0
	ldp	s1, s2, [x10]
	stur	s0, [x10, #-4]
	ldr	s0, [x9]
	fsub	s0, s1, s0
	str	s0, [x10]
	ldr	s0, [x9, #4]
	add	x9, x9, #16
	fsub	s0, s2, s0
	str	s0, [x10, #4]
	add	x10, x10, #16
	cmp	x25, x8
	b.ne	.LBB27_1712
// %bb.1713:                            // %.lr.ph.i75.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1683 Depth=2
	neg	x8, x8
	cbz	x0, .LBB27_1716
.LBB27_1714:                            // %.lr.ph.i69.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	lsl	x8, x8, #2
	mov	x9, x0
	.p2align	5, , 16
.LBB27_1715:                            // %.lr.ph.i69.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x19, x8]
	subs	x9, x9, #1
	ldr	s1, [x21, x8]
	fsub	s0, s0, s1
	str	s0, [x19, x8]
	add	x8, x8, #4
	b.ne	.LBB27_1715
.LBB27_1716:                            // %.lr.ph.i75.i.i.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	cmp	x11, #2
	b.hs	.LBB27_1718
// %bb.1717:                            //   in Loop: Header=BB27_1683 Depth=2
	mov	x8, xzr
	b	.LBB27_1721
.LBB27_1718:                            // %vector.body263.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	mov	x8, xzr
	.p2align	5, , 16
.LBB27_1719:                            // %vector.body263
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x19, x8, lsl #2]
	fmul	s0, s8, s0
	ldr	s1, [x26, x8, lsl #2]
	str	s0, [x19, x8, lsl #2]
	fmul	s0, s8, s1
	str	s0, [x26, x8, lsl #2]
	add	x8, x8, #2
	cmp	x28, x8
	b.ne	.LBB27_1719
// %bb.1720:                            // %middle.block256
                                        //   in Loop: Header=BB27_1683 Depth=2
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	mov	x8, x28
	cbz	x9, .LBB27_1682
.LBB27_1721:                            // %.lr.ph.i75.i.i.preheader526
                                        //   in Loop: Header=BB27_1683 Depth=2
	sub	w9, w27, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_1724
// %bb.1722:                            // %.lr.ph.i75.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1683 Depth=2
	mov	x9, x8
	.p2align	5, , 16
.LBB27_1723:                            // %.lr.ph.i75.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x19, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s0, s8, s0
	str	s0, [x19, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_1723
.LBB27_1724:                            // %.lr.ph.i75.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1683 Depth=2
	sub	x8, x8, x11
	cmn	x8, #4
	b.hi	.LBB27_1682
// %bb.1725:                            // %.lr.ph.i75.i.i.preheader526.new
                                        //   in Loop: Header=BB27_1683 Depth=2
	sub	x8, x11, x9
	lsl	x9, x9, #2
	.p2align	5, , 16
.LBB27_1726:                            // %.lr.ph.i75.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1683 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x10, x20, x9
	subs	x8, x8, #4
	ldur	s0, [x10, #-8]
	fmul	s0, s8, s0
	stur	s0, [x10, #-8]
	ldr	s0, [x26, x9]
	fmul	s0, s8, s0
	str	s0, [x26, x9]
	add	x9, x9, #16
	ldp	s0, s1, [x10]
	fmul	s1, s8, s1
	fmul	s0, s8, s0
	stp	s0, s1, [x10]
	b.ne	.LBB27_1726
	b	.LBB27_1682
.LBB27_1727:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	ldr	x20, [x9, #152]
	ldr	w8, [x20]
	cbnz	w8, .LBB27_2714
// %bb.1728:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x22, x21, [x9, #160]
	mov	x0, x20
	ldp	x19, x23, [x9, #176]
	mov	x1, x22
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_1729
	b	.LBB27_2715
.LBB27_1729:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_1730
	b	.LBB27_2716
.LBB27_1730:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x20
	mov	x1, x19
	bl	ggml_are_same_shape
	tbnz	w0, #0, .LBB27_1731
	b	.LBB27_2717
.LBB27_1731:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x23
	bl	ggml_nelements
	cmp	x0, #7
	b.ne	.LBB27_2718
// %bb.1732:                            //   in Loop: Header=BB27_3 Depth=1
	str	x21, [sp, #760]                 // 8-byte Folded Spill
	ldr	w21, [sp, #788]
	mov	x0, x20
	str	x19, [sp, #768]                 // 8-byte Folded Spill
	ldr	w19, [sp, #784]
	bl	ggml_nrows
	ldr	x8, [x20, #48]
	cmp	x8, #4
	b.ne	.LBB27_2719
// %bb.1733:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x20, #32]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	add	w8, w21, w0
	ldp	x24, x25, [x20, #16]
	ldr	x28, [x20, #72]
	ldp	x26, x27, [x20, #56]
	sub	w8, w8, #1
	sdiv	w8, w8, w21
	mul	w19, w8, w19
	add	w8, w19, w8
	cmp	w8, w0
	csel	w21, w8, w0, lt
	mov	x0, x23
	bl	ggml_get_data_f32
	cmp	w19, w21
	b.ge	.LBB27_7
// %bb.1734:                            // %.lr.ph140.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	s16, [x0, #16]
	fmov	s18, #1.00000000
	sxtw	x12, w19
	ldp	s17, s4, [x0]
	sxtw	x13, w21
	ldp	s0, s1, [x0, #8]
	fsub	s5, s18, s4
	ldr	x14, [sp, #752]                 // 8-byte Folded Reload
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	mul	x8, x14, x25
	neg	x14, x14
	fmsub	s16, s17, s16, s18
	ldr	x15, [sp, #768]                 // 8-byte Folded Reload
	fsub	s6, s18, s0
	fneg	s7, s17
	ldr	x9, [x20, #248]
	ldp	s3, s2, [x0, #20]
	ldr	x10, [x22, #248]
	ldr	x11, [x11, #248]
	ldr	x15, [x15, #248]
	b	.LBB27_1736
	.p2align	5, , 16
.LBB27_1735:                            // %._crit_edge.i.i
                                        //   in Loop: Header=BB27_1736 Depth=2
	add	x12, x12, #1
	cmp	x12, x13
	b.eq	.LBB27_7
.LBB27_1736:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1738 Depth 3
	cmp	x24, #1
	b.lt	.LBB27_1735
// %bb.1737:                            // %.lr.ph.i.i.preheader
                                        //   in Loop: Header=BB27_1736 Depth=2
	sdiv	x17, x12, x8
	mov	x16, xzr
	msub	x0, x17, x8, x12
	mul	x1, x14, x17
	mul	x17, x17, x28
	sdiv	x0, x0, x25
	mul	x2, x0, x27
	sub	x0, x1, x0
	madd	x0, x25, x0, x12
	add	x17, x2, x17
	madd	x2, x26, x0, x17
	add	x17, x9, x2
	add	x0, x15, x2
	add	x1, x10, x2
	add	x2, x11, x2
	.p2align	5, , 16
.LBB27_1738:                            // %.lr.ph.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1736 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s17, [x2, x16, lsl #2]
	ldr	s18, [x1, x16, lsl #2]
	fmul	s18, s5, s18
	fmadd	s17, s17, s4, s18
	str	s17, [x2, x16, lsl #2]
	ldr	s18, [x1, x16, lsl #2]
	ldr	s17, [x0, x16, lsl #2]
	fmul	s18, s18, s18
	fmul	s18, s6, s18
	fmadd	s17, s17, s0, s18
	str	s17, [x0, x16, lsl #2]
	fmul	s17, s2, s17
	ldr	s18, [x2, x16, lsl #2]
	ldr	s19, [x17, x16, lsl #2]
	fsqrt	s17, s17
	fmul	s18, s3, s18
	fmul	s18, s18, s7
	fadd	s17, s1, s17
	fdiv	s17, s18, s17
	fmadd	s17, s19, s16, s17
	str	s17, [x17, x16, lsl #2]
	add	x16, x16, #1
	cmp	x24, x16
	b.ne	.LBB27_1738
	b	.LBB27_1735
.LBB27_1739:                            // %._crit_edge.i.i39
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	ldr	x19, [sp, #656]                 // 8-byte Folded Reload
	str	s8, [x8, x19, lsl #2]
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1741
// %bb.1740:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1741:                            // %ggml_barrier.exit.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	cbnz	w19, .LBB27_7
// %bb.1742:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #648]                 // 8-byte Folded Reload
	ldr	x12, [sp, #640]                 // 8-byte Folded Reload
	cmp	w13, #1
	b.lt	.LBB27_2309
// %bb.1743:                            // %.lr.ph.preheader.i100.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	cmp	w13, #4
	b.hs	.LBB27_2312
// %bb.1744:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x9, xzr
	fmov	d0, xzr
	b	.LBB27_2315
.LBB27_1745:                            // %.loopexit.i494
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	x19, [sp, #592]                 // 8-byte Folded Reload
	cbnz	w19, .LBB27_1747
// %bb.1746:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #584]                  // 8-byte Folded Reload
	str	w9, [x8, #256]
.LBB27_1747:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1749
// %bb.1748:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1749:                            // %ggml_barrier.exit.i495
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	mov	w10, #64                        // =0x40
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	ldr	x13, [sp, #384]                 // 8-byte Folded Reload
	ldr	x15, [sp, #424]                 // 8-byte Folded Reload
	mul	x14, x8, x9
	mov	w9, #16                         // =0x10
	subs	x8, x14, #1
	str	x14, [sp, #360]                 // 8-byte Folded Spill
	ccmp	x13, #1, #4, ne
	csel	x10, x10, x9, eq
	sub	x9, x13, #1
	cmp	x13, x14
	add	x11, x10, x9
	add	x12, x10, x8
	csinc	x13, x15, xzr, gt
	csinc	x14, x15, xzr, le
	sdiv	x11, x11, x10
	sdiv	x10, x12, x10
	mul	x12, x10, x11
	cmp	x12, x15, lsl #2
	csel	x10, x14, x10, lt
	csel	x11, x13, x11, lt
	str	x11, [sp, #368]                 // 8-byte Folded Spill
	mul	x12, x11, x10
	cmp	x12, x19
	b.le	.LBB27_7
// %bb.1750:                            // %.lr.ph242.i498
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #368]                 // 8-byte Folded Reload
	add	x8, x10, x8
	str	x12, [sp, #352]                 // 8-byte Folded Spill
	sdiv	x8, x8, x10
	add	x9, x11, x9
	str	x8, [sp, #336]                  // 8-byte Folded Spill
	sdiv	x9, x9, x11
	ldr	x11, [sp, #712]                 // 8-byte Folded Reload
	str	x9, [sp, #392]                  // 8-byte Folded Spill
	ldr	x9, [sp, #384]                  // 8-byte Folded Reload
	orr	w9, w9, w11
	tst	x9, #0x1
	cset	w9, eq
	str	w9, [sp, #344]                  // 4-byte Folded Spill
.LBB27_1751:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1761 Depth 3
                                        //         Child Loop BB27_1763 Depth 4
                                        //           Child Loop BB27_1765 Depth 5
                                        //             Child Loop BB27_1770 Depth 6
                                        //             Child Loop BB27_1775 Depth 6
	ldr	x9, [sp, #368]                  // 8-byte Folded Reload
	sdiv	x8, x19, x9
	msub	x22, x8, x9, x19
	ldr	x9, [sp, #392]                  // 8-byte Folded Reload
	mul	x10, x22, x9
	str	x10, [sp, #416]                 // 8-byte Folded Spill
	add	x9, x10, x9
	ldr	x10, [sp, #384]                 // 8-byte Folded Reload
	cmp	x9, x10
	csel	x10, x9, x10, lt
	ldr	x9, [sp, #336]                  // 8-byte Folded Reload
	mul	x27, x8, x9
	add	x8, x27, x9
	ldr	x9, [sp, #360]                  // 8-byte Folded Reload
	cmp	x8, x9
	csel	x9, x8, x9, lt
	ldr	w8, [sp, #344]                  // 4-byte Folded Reload
	cbz	w8, .LBB27_1754
// %bb.1752:                            //   in Loop: Header=BB27_1751 Depth=2
	ldr	x8, [sp, #416]                  // 8-byte Folded Reload
	sub	w8, w10, w8
	tbnz	w8, #0, .LBB27_1754
// %bb.1753:                            //   in Loop: Header=BB27_1751 Depth=2
	ldr	x11, [sp, #312]                 // 8-byte Folded Reload
	sub	w8, w9, w27
	tbz	w8, #0, .LBB27_1755
.LBB27_1754:                            //   in Loop: Header=BB27_1751 Depth=2
	mov	w11, #1                         // =0x1
.LBB27_1755:                            //   in Loop: Header=BB27_1751 Depth=2
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	str	x11, [sp, #760]                 // 8-byte Folded Spill
	str	x9, [sp, #408]                  // 8-byte Folded Spill
	ldr	x9, [sp, #376]                  // 8-byte Folded Reload
	ldp	x11, x0, [x8, #152]
	ldr	w26, [x9]
	str	x10, [sp, #448]                 // 8-byte Folded Spill
	ldr	x28, [x11, #16]
	ldp	x24, x9, [x11, #56]
	str	x11, [sp, #608]                 // 8-byte Folded Spill
	ldp	x23, x20, [x11, #32]
	str	x0, [sp, #520]                  // 8-byte Folded Spill
	str	x9, [sp, #600]                  // 8-byte Folded Spill
	ldr	x9, [x11, #72]
	str	x9, [sp, #592]                  // 8-byte Folded Spill
	ldp	x19, x9, [x0, #16]
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	ldp	x9, x25, [x0, #32]
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	ldp	x11, x9, [x0, #56]
	stp	x9, x11, [sp, #488]             // 16-byte Folded Spill
	ldr	x9, [x0, #72]
	str	x9, [sp, #480]                  // 8-byte Folded Spill
	ldr	x9, [x8, #24]
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	ldp	x11, x9, [x8, #48]
	str	x9, [sp, #720]                  // 8-byte Folded Spill
	ldp	x9, x8, [x8, #64]
	str	x11, [sp, #712]                 // 8-byte Folded Spill
	str	x9, [sp, #544]                  // 8-byte Folded Spill
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	bl	ggml_is_contiguous
	ldr	x8, [sp, #416]                  // 8-byte Folded Reload
	str	w0, [sp, #616]                  // 4-byte Folded Spill
	ldr	x9, [sp, #448]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.le	.LBB27_1778
// %bb.1756:                            //   in Loop: Header=BB27_1751 Depth=2
	ldr	x8, [sp, #408]                  // 8-byte Folded Reload
	cmp	x8, x27
	b.le	.LBB27_1778
// %bb.1757:                            //   in Loop: Header=BB27_1751 Depth=2
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	add	x8, x8, x26, lsl #5
	mov	x1, x19
	ldr	x9, [x8, #8]
	ldr	w0, [x8, #16]
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	str	x9, [sp, #528]                  // 8-byte Folded Spill
	str	w0, [sp, #512]                  // 4-byte Folded Spill
	ldr	w9, [x8], #248
	cmp	w9, w0
	ldr	x9, [sp, #168]                  // 8-byte Folded Reload
	csel	x8, x8, x9, eq
	ldr	x26, [x8]
	bl	ggml_row_size
	ldr	w9, [sp, #616]                  // 4-byte Folded Reload
	mov	x8, x0
	str	x0, [sp, #552]                  // 8-byte Folded Spill
	tbnz	w9, #0, .LBB27_1759
// %bb.1758:                            //   in Loop: Header=BB27_1751 Depth=2
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	ldr	w9, [sp, #512]                  // 4-byte Folded Reload
	ldr	w8, [x8]
	cmp	w8, w9
	ldr	x8, [sp, #496]                  // 8-byte Folded Reload
	ldr	x9, [sp, #552]                  // 8-byte Folded Reload
	csel	x8, x8, x9, eq
.LBB27_1759:                            // %.preheader185.lr.ph.i.i
                                        //   in Loop: Header=BB27_1751 Depth=2
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	sdiv	x9, x25, x20
	ldr	x14, [sp, #720]                 // 8-byte Folded Reload
	ldr	x10, [sp, #632]                 // 8-byte Folded Reload
	ldr	x25, [sp, #528]                 // 8-byte Folded Reload
	str	x28, [sp, #752]                 // 8-byte Folded Spill
	str	x26, [sp, #744]                 // 8-byte Folded Spill
	cmp	x11, #1
	lsl	x1, x11, #2
	csel	x17, x8, xzr, gt
	and	x8, x11, #0x7ffffffffffffffe
	csel	x16, x24, xzr, gt
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	ldr	x8, [sp, #392]                  // 8-byte Folded Reload
	str	x9, [sp, #584]                  // 8-byte Folded Spill
	mul	x8, x8, x24
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	mul	x8, x8, x22
	str	x8, [sp, #400]                  // 8-byte Folded Spill
	lsl	x8, x24, #4
	str	x8, [sp, #440]                  // 8-byte Folded Spill
	lsl	x8, x14, #1
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	mul	x0, x11, x24
	str	x0, [sp, #736]                  // 8-byte Folded Spill
	mul	x9, x9, x10
	sdiv	x8, x10, x23
	str	x9, [sp, #576]                  // 8-byte Folded Spill
	cset	w9, gt
	ubfiz	x15, x9, #4, #32
	ldr	x9, [sp, #408]                  // 8-byte Folded Reload
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #448]                  // 8-byte Folded Reload
	b	.LBB27_1761
	.p2align	5, , 16
.LBB27_1760:                            // %._crit_edge194.i.i
                                        //   in Loop: Header=BB27_1761 Depth=3
	ldr	x10, [sp, #432]                 // 8-byte Folded Reload
	mov	x27, x10
	ldr	x9, [sp, #408]                  // 8-byte Folded Reload
	cmp	x10, x9
	b.ge	.LBB27_1778
.LBB27_1761:                            // %.preheader184.lr.ph.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1751 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1763 Depth 4
                                        //           Child Loop BB27_1765 Depth 5
                                        //             Child Loop BB27_1770 Depth 6
                                        //             Child Loop BB27_1775 Depth 6
	add	x10, x27, #16
	ldr	x28, [sp, #416]                 // 8-byte Folded Reload
	str	x27, [sp, #456]                 // 8-byte Folded Spill
	cmp	x10, x9
	str	x10, [sp, #432]                 // 8-byte Folded Spill
	csel	x9, x10, x9, lt
	str	x9, [sp, #640]                  // 8-byte Folded Spill
	ldr	x9, [sp, #400]                  // 8-byte Folded Reload
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	b	.LBB27_1763
	.p2align	5, , 16
.LBB27_1762:                            // %._crit_edge192.i.i
                                        //   in Loop: Header=BB27_1763 Depth=4
	ldp	x10, x8, [sp, #440]             // 16-byte Folded Reload
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	add	x9, x9, x10
	ldr	x27, [sp, #456]                 // 8-byte Folded Reload
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	ldr	x9, [sp, #472]                  // 8-byte Folded Reload
	mov	x28, x9
	cmp	x9, x8
	b.ge	.LBB27_1760
.LBB27_1763:                            // %.lr.ph191.i.i503
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1751 Depth=2
                                        //       Parent Loop BB27_1761 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1765 Depth 5
                                        //             Child Loop BB27_1770 Depth 6
                                        //             Child Loop BB27_1775 Depth 6
	add	x9, x28, #16
	str	x28, [sp, #672]                 // 8-byte Folded Spill
	cmp	x9, x8
	str	x9, [sp, #472]                  // 8-byte Folded Spill
	csel	x2, x9, x8, lt
	sub	x8, x2, x28
	lsl	x8, x8, #2
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	b	.LBB27_1765
	.p2align	5, , 16
.LBB27_1764:                            // %._crit_edge.i.i510
                                        //   in Loop: Header=BB27_1765 Depth=5
	ldr	x27, [sp, #680]                 // 8-byte Folded Reload
	add	x27, x27, x10
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	ldr	x14, [sp, #720]                 // 8-byte Folded Reload
	ldr	x28, [sp, #672]                 // 8-byte Folded Reload
	cmp	x27, x8
	b.ge	.LBB27_1762
.LBB27_1765:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1751 Depth=2
                                        //       Parent Loop BB27_1761 Depth=3
                                        //         Parent Loop BB27_1763 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1770 Depth 6
                                        //             Child Loop BB27_1775 Depth 6
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x27, [sp, #680]                 // 8-byte Folded Spill
	sdiv	x13, x27, x8
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	ldr	w11, [sp, #616]                 // 4-byte Folded Reload
	mul	x10, x13, x8
	msub	x8, x10, x9, x27
	sdiv	x3, x8, x9
	msub	x8, x3, x9, x8
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	ldr	x9, [x9, #248]
	tbnz	w11, #0, .LBB27_1768
// %bb.1766:                            //   in Loop: Header=BB27_1765 Depth=5
	ldr	x11, [sp, #520]                 // 8-byte Folded Reload
	ldr	w12, [sp, #512]                 // 4-byte Folded Reload
	ldr	w11, [x11]
	cmp	w11, w12
	b.ne	.LBB27_1768
// %bb.1767:                            //   in Loop: Header=BB27_1765 Depth=5
	ldp	x10, x11, [sp, #480]            // 16-byte Folded Reload
	mul	x10, x13, x10
	madd	x10, x3, x11, x10
	ldr	x11, [sp, #496]                 // 8-byte Folded Reload
	nop
	madd	x21, x8, x11, x10
	b	.LBB27_1769
	.p2align	5, , 16
.LBB27_1768:                            //   in Loop: Header=BB27_1765 Depth=5
	ldr	x11, [sp, #560]                 // 8-byte Folded Reload
	add	x10, x10, x3
	madd	x10, x10, x11, x8
	ldr	x11, [sp, #552]                 // 8-byte Folded Reload
	mul	x21, x10, x11
.LBB27_1769:                            // %.lr.ph.preheader.i.i507
                                        //   in Loop: Header=BB27_1765 Depth=5
	ldr	x10, [sp, #568]                 // 8-byte Folded Reload
	str	x13, [sp, #728]                 // 8-byte Folded Spill
	add	x27, sp, #1072
	ldr	x12, [sp, #648]                 // 8-byte Folded Reload
	str	x3, [sp, #664]                  // 8-byte Folded Spill
	sdiv	x10, x3, x10
	add	x9, x9, x12
	ldr	x12, [sp, #600]                 // 8-byte Folded Reload
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldr	x11, [x11, #248]
	nop
	madd	x8, x8, x14, x11
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	mul	x10, x10, x12
	ldr	x12, [sp, #584]                 // 8-byte Folded Reload
	sdiv	x12, x13, x12
	ldr	x13, [sp, #592]                 // 8-byte Folded Reload
	mul	x12, x12, x13
	add	x10, x12, x10
	add	x26, x9, x10
	.p2align	5, , 16
.LBB27_1770:                            // %.lr.ph.i.i508
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1751 Depth=2
                                        //       Parent Loop BB27_1761 Depth=3
                                        //         Parent Loop BB27_1763 Depth=4
                                        //           Parent Loop BB27_1765 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	mov	x19, x1
	mov	x1, x27
	mov	x24, x2
	mov	x2, x15
	ldr	x0, [sp, #752]                  // 8-byte Folded Reload
	mov	x3, x26
	mov	x4, x16
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	x7, [sp, #760]                  // 8-byte Folded Reload
	mov	x6, x17
	mov	x22, x15
                                        // kill: def $w7 killed $w7 killed $x7
	mov	x23, x16
	add	x5, x8, x21
	mov	x20, x17
	blr	x25
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	mov	x2, x24
	mov	x1, x19
	ldr	x0, [sp, #736]                  // 8-byte Folded Reload
	mov	x17, x20
	mov	x16, x23
	mov	x15, x22
	add	x27, x27, x19
	add	x28, x28, x10
	add	x26, x26, x0
	cmp	x28, x24
	b.lt	.LBB27_1770
// %bb.1771:                            // %.preheader.i.i509
                                        //   in Loop: Header=BB27_1765 Depth=5
	cmp	x10, #1
	b.lt	.LBB27_1764
// %bb.1772:                            // %.lr.ph188.i.i511
                                        //   in Loop: Header=BB27_1765 Depth=5
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	add	x8, x9, x8
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	mul	x9, x11, x9
	add	x8, x8, x9
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x27, x8, x9, lsl #2
	cmp	x10, #1
	b.ne	.LBB27_1774
// %bb.1773:                            //   in Loop: Header=BB27_1765 Depth=5
	mov	x14, xzr
	b	.LBB27_1776
	.p2align	5, , 16
.LBB27_1774:                            // %.lr.ph188.i.i511.new.preheader
                                        //   in Loop: Header=BB27_1765 Depth=5
	ldr	x26, [sp, #504]                 // 8-byte Folded Reload
	mov	x28, xzr
	mov	x14, xzr
	.p2align	5, , 16
.LBB27_1775:                            // %.lr.ph188.i.i511.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1751 Depth=2
                                        //       Parent Loop BB27_1761 Depth=3
                                        //         Parent Loop BB27_1763 Depth=4
                                        //           Parent Loop BB27_1765 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	x25, [sp, #712]                 // 8-byte Folded Reload
	sub	x1, x26, #64
	str	x14, [sp, #728]                 // 8-byte Folded Spill
	ldr	x21, [sp, #704]                 // 8-byte Folded Reload
	udiv	x8, x28, x25
	mov	x2, x21
	add	x0, x27, x8, lsl #2
	bl	memcpy
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	mov	x1, x26
	mov	x2, x21
	add	x8, x8, x28
	udiv	x8, x8, x25
	add	x0, x27, x8, lsl #2
	bl	memcpy
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	add	x26, x26, #128
	add	x28, x28, x8
	ldr	x14, [sp, #728]                 // 8-byte Folded Reload
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	add	x14, x14, #2
	cmp	x8, x14
	b.ne	.LBB27_1775
.LBB27_1776:                            // %._crit_edge.i.i510.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_1765 Depth=5
	ldr	x25, [sp, #528]                 // 8-byte Folded Reload
	mov	x15, x22
	mov	x16, x23
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	mov	x17, x20
	mov	x1, x19
	ldr	x11, [sp, #712]                 // 8-byte Folded Reload
	mov	x2, x24
	tbz	w10, #0, .LBB27_1764
// %bb.1777:                            // %._crit_edge.i.i510.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB27_1765 Depth=5
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	add	x9, sp, #1072
	add	x1, x9, x14, lsl #6
	ldr	x2, [sp, #704]                  // 8-byte Folded Reload
	mul	x8, x14, x8
	udiv	x8, x8, x11
	add	x0, x27, x8, lsl #2
	bl	memcpy
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	mov	x2, x24
	mov	x1, x19
	mov	x17, x20
	mov	x16, x23
	mov	x15, x22
	b	.LBB27_1764
.LBB27_1778:                            // %ggml_compute_forward_mul_mat_one_chunk.exit.i
                                        //   in Loop: Header=BB27_1751 Depth=2
	ldr	x8, [sp, #424]                  // 8-byte Folded Reload
	ldr	x12, [sp, #352]                 // 8-byte Folded Reload
	cmp	x12, x8
	b.le	.LBB27_7
// %bb.1779:                            //   in Loop: Header=BB27_1751 Depth=2
	ldr	x8, [sp, #808]
	mov	w9, #1                          // =0x1
	add	x8, x8, #256
	ldadd	w9, w8, [x8]
	sxtw	x19, w8
	cmp	x12, x19
	b.gt	.LBB27_1751
	b	.LBB27_7
.LBB27_1780:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x9, #160]
	mov	x0, x19
	ldr	x8, [x19, #16]
	ldrsw	x21, [sp, #784]
	ldr	w22, [sp, #788]
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	bl	ggml_nrows
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w8, w8, w22
	smull	x22, w21, w8
	add	w8, w22, w8
	cmp	w8, w0
	csel	w8, w8, w0, lt
	cmp	w22, w8
	b.ge	.LBB27_7
// %bb.1781:                            // %.lr.ph.i6.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	sxtw	x8, w8
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x11, [x24, #248]
	ldr	x14, [x24, #56]
	nop
	madd	x23, x14, x22, x11
	ldr	x9, [x10, #248]
	ldr	x13, [x10, #56]
	str	x14, [sp, #752]                 // 8-byte Folded Spill
	nop
	madd	x26, x13, x22, x9
	ldr	x10, [x19, #248]
	ldr	x8, [x19, #56]
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	nop
	madd	x21, x8, x22, x10
	and	x12, x12, #0x7fffffff
	str	x12, [sp, #728]                 // 8-byte Folded Spill
	str	x13, [sp, #768]                 // 8-byte Folded Spill
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_1783
.LBB27_1782:                            // %ggml_vec_silu_backward_f16.exit.i.i
                                        //   in Loop: Header=BB27_1783 Depth=2
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	add	x22, x22, #1
	add	x26, x26, x8
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	add	x23, x23, x8
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	add	x21, x21, x8
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	cmp	x22, x8
	b.eq	.LBB27_7
.LBB27_1783:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1785 Depth 3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB27_1782
// %bb.1784:                            // %.lr.ph.i.i12.i.preheader
                                        //   in Loop: Header=BB27_1783 Depth=2
	ldr	x24, [sp, #728]                 // 8-byte Folded Reload
	mov	x25, x21
	mov	x28, x23
	mov	x27, x26
	.p2align	5, , 16
.LBB27_1785:                            // %.lr.ph.i.i12.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1783 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w8, [x25], #2
	ldr	s8, [x20, x8, lsl #2]
	ldrh	w19, [x28], #2
	fneg	s0, s8
	bl	expf
	fmov	s1, #1.00000000
	ldr	s2, [x20, x19, lsl #2]
	mov	w8, #2004877312                 // =0x77800000
	mov	w10, #125829120                 // =0x7800000
	mov	w12, #-16777216                 // =0xff000000
	fadd	s0, s0, s1
	fdiv	s0, s1, s0
	fmul	s2, s2, s0
	fsub	s0, s1, s0
	fmadd	s0, s8, s0, s1
	fmul	s0, s2, s0
	fmov	s2, w8
	mov	w8, #142606336                  // =0x8800000
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w8
	fmov	w8, s0
	and	w9, w8, #0x7f800000
	ubfx	w11, w8, #23, #8
	fmul	s1, s1, s2
	add	w9, w9, w10
	cmp	w11, #113
	mov	w10, #1073741824                // =0x40000000
	csel	w9, w10, w9, lo
	fmov	s0, w9
	lsl	w9, w8, #1
	lsr	w8, w8, #31
	cmp	w9, w12
	mov	w9, #32256                      // =0x7e00
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	csel	w9, w9, w10, hi
	subs	x24, x24, #1
	orr	w8, w9, w8, lsl #15
	strh	w8, [x27], #2
	b.ne	.LBB27_1785
	b	.LBB27_1782
.LBB27_1786:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	mov	x1, x24
	ldr	x20, [x24, #160]
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB27_2775
// %bb.1787:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x24
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB27_2720
// %bb.1788:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB27_2720
// %bb.1789:                            //   in Loop: Header=BB27_3 Depth=1
	ldpsw	x9, x8, [x24, #84]
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	ldpsw	x9, x8, [x24, #92]
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	w8, [x24, #100]
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	cbnz	w8, .LBB27_1794
// %bb.1790:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_1792
// %bb.1791:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	mov	x0, x24
	ldr	x21, [x24, #248]
	ldr	x22, [x8, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x21
	mov	x1, x22
	bl	memcpy
.LBB27_1792:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1794
// %bb.1793:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1794:                            // %ggml_barrier.exit.i7.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x8, [sp, #784]
	mov	x0, x20
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	w23, [sp, #788]
	bl	ggml_nrows
	mov	x21, x0
	ldp	x19, x8, [x20, #32]
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldp	x22, x26, [x20, #16]
	ldp	x25, x27, [x20, #48]
	ldp	x28, x24, [x20, #64]
	bl	ggml_element_size
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	subs	x8, x22, #1
	str	x19, [sp, #760]                 // 8-byte Folded Spill
	ldr	x13, [sp, #728]                 // 8-byte Folded Reload
	csel	x8, xzr, x8, lo
	subs	x9, x26, #1
	csel	x9, xzr, x9, lo
	subs	x10, x19, #1
	ldr	x11, [sp, #720]                 // 8-byte Folded Reload
	csel	x10, xzr, x10, lo
	sxtw	x8, w8
	smaddl	x9, w9, w12, x13
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	subs	x11, x11, #1
	csel	x11, xzr, x11, lo
	smaddl	x9, w10, w12, x9
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	nop
	smaddl	x9, w11, w10, x9
	madd	x19, x0, x8, x9
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	ggml_nbytes
	cmp	x19, x0
	b.hi	.LBB27_2776
// %bb.1795:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x25, #4
	b.ne	.LBB27_2777
// %bb.1796:                            //   in Loop: Header=BB27_3 Depth=1
	add	w8, w23, w21
	ldr	x25, [sp, #744]                 // 8-byte Folded Reload
	sub	w8, w8, #1
	ldr	x30, [sp, #736]                 // 8-byte Folded Reload
	sdiv	w9, w8, w23
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x23, [sp, #752]                 // 8-byte Folded Reload
	smull	x8, w8, w9
	add	w9, w8, w9
	cmp	w9, w21
	csel	w10, w9, w21, lt
	cmp	w8, w10
	b.ge	.LBB27_7
// %bb.1797:                            // %.lr.ph.i13.i427
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	and	x13, x22, #0x7fffffff
	and	x12, x22, #0x7
	ldr	x17, [sp, #760]                 // 8-byte Folded Reload
	sxtw	x10, w10
	mul	x9, x17, x26
	ldr	x15, [x11, #248]
	ldr	x16, [sp, #728]                 // 8-byte Folded Reload
	ldr	x14, [x20, #248]
	sub	x11, x13, #1
	sub	x13, x12, x13
	neg	w17, w17
	add	x0, x14, #16
	add	x15, x15, x16
	add	x16, x15, #16
	b	.LBB27_1799
.LBB27_1798:                            // %ggml_vec_cpy_i32.exit.i.i
                                        //   in Loop: Header=BB27_1799 Depth=2
	add	x8, x8, #1
	cmp	x8, x10
	b.eq	.LBB27_7
.LBB27_1799:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1803 Depth 3
                                        //       Child Loop BB27_1807 Depth 3
	cmp	w22, #1
	b.lt	.LBB27_1798
// %bb.1800:                            // %.lr.ph.i.i22.i.preheader
                                        //   in Loop: Header=BB27_1799 Depth=2
	sdiv	x1, x8, x9
	sxtw	x2, w1
	msub	x3, x2, x9, x8
	sdiv	x4, x3, x26
	sxtw	x5, w4
	smull	x3, w2, w30
	mul	x2, x2, x24
	smull	x6, w5, w25
	mul	x5, x5, x28
	cmp	x11, #7
	b.hs	.LBB27_1802
// %bb.1801:                            //   in Loop: Header=BB27_1799 Depth=2
	mov	x7, xzr
	b	.LBB27_1805
.LBB27_1802:                            // %.lr.ph.i.i22.i.preheader1529
                                        //   in Loop: Header=BB27_1799 Depth=2
	mul	w19, w17, w1
	add	x21, x16, x3
	mov	x7, xzr
	sub	w19, w19, w4
	madd	w19, w26, w19, w8
	sxtw	x20, w19
	smaddl	x19, w23, w19, x6
	madd	x20, x27, x20, x5
	add	x19, x21, x19
	add	x21, x0, x2
	add	x20, x21, x20
	.p2align	5, , 16
.LBB27_1803:                            // %.lr.ph.i.i22.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1799 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	w21, [x20, #-16]
	sub	x7, x7, #8
	stur	w21, [x19, #-16]
	ldur	w21, [x20, #-12]
	stur	w21, [x19, #-12]
	ldur	w21, [x20, #-8]
	stur	w21, [x19, #-8]
	ldur	w21, [x20, #-4]
	stur	w21, [x19, #-4]
	ldr	w21, [x20]
	str	w21, [x19]
	ldr	w21, [x20, #4]
	str	w21, [x19, #4]
	ldr	w21, [x20, #8]
	str	w21, [x19, #8]
	ldr	w21, [x20, #12]
	add	x20, x20, #32
	str	w21, [x19, #12]
	add	x19, x19, #32
	cmp	x13, x7
	b.ne	.LBB27_1803
// %bb.1804:                            // %ggml_vec_cpy_i32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1799 Depth=2
	neg	x7, x7
.LBB27_1805:                            // %ggml_vec_cpy_i32.exit.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_1799 Depth=2
	cbz	x12, .LBB27_1798
// %bb.1806:                            // %.lr.ph.i.i22.i.epil.preheader
                                        //   in Loop: Header=BB27_1799 Depth=2
	mul	w1, w17, w1
	sub	w1, w1, w4
	madd	w1, w26, w1, w8
	sxtw	x4, w1
	smaddl	x1, w23, w1, x6
	add	x1, x1, x3
	madd	x3, x27, x4, x5
	add	x1, x1, x7, lsl #2
	add	x1, x15, x1
	add	x2, x3, x2
	mov	x3, x12
	add	x2, x2, x7, lsl #2
	add	x2, x14, x2
	.p2align	5, , 16
.LBB27_1807:                            // %.lr.ph.i.i22.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1799 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w4, [x2], #4
	subs	x3, x3, #1
	str	w4, [x1], #4
	b.ne	.LBB27_1807
	b	.LBB27_1798
.LBB27_1808:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1809:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x21
	ldr	x19, [x21, #160]
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB27_2778
// %bb.1810:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x21, #248]
	mov	x0, x21
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x20
	mov	w1, wzr
	bl	memset
	ldr	x20, [x22, #16]
	mov	x0, x19
	bl	ggml_nelements
	ldr	x8, [x21, #16]
	cmp	x8, w20, sxtw
	b.ne	.LBB27_2779
// %bb.1811:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x22, #48]
	cmp	x8, #4
	b.ne	.LBB27_2780
// %bb.1812:                            // %.preheader.i8.i
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	w0, #1
	b.lt	.LBB27_7
// %bb.1813:                            // %.lr.ph.i9.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	and	x16, x20, #0x7fffffff
	and	x15, x20, #0x3
	ldr	x13, [x22, #248]
	mov	x8, xzr
	and	x12, x0, #0x7fffffff
	ldr	x9, [x19, #248]
	sub	x14, x16, #1
	sub	x16, x15, x16
	ldr	x17, [x22, #56]
	add	x1, x13, #8
	ldr	x10, [x11, #248]
	add	x0, x10, #8
	ldr	x11, [x11, #56]
	b	.LBB27_1815
.LBB27_1814:                            // %ggml_vec_add_f32.exit.i.i
                                        //   in Loop: Header=BB27_1815 Depth=2
	add	x8, x8, #1
	add	x1, x1, x17
	add	x13, x13, x17
	cmp	x8, x12
	b.eq	.LBB27_7
.LBB27_1815:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1819 Depth 3
                                        //       Child Loop BB27_1823 Depth 3
	cmp	w20, #1
	b.lt	.LBB27_1814
// %bb.1816:                            // %.lr.ph.i.i.i404.preheader
                                        //   in Loop: Header=BB27_1815 Depth=2
	ldrsw	x2, [x9, x8, lsl #2]
	mul	x2, x11, x2
	cmp	x14, #3
	b.hs	.LBB27_1818
// %bb.1817:                            //   in Loop: Header=BB27_1815 Depth=2
	mov	x4, xzr
	b	.LBB27_1821
.LBB27_1818:                            // %.lr.ph.i.i.i404.preheader1539
                                        //   in Loop: Header=BB27_1815 Depth=2
	mov	x3, xzr
	add	x4, x0, x2
	mov	x5, x1
	.p2align	5, , 16
.LBB27_1819:                            // %.lr.ph.i.i.i404
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1815 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x5, #-8]
	sub	x3, x3, #4
	ldp	s1, s2, [x4, #-8]
	fadd	s0, s1, s0
	stur	s0, [x4, #-8]
	ldur	s0, [x5, #-4]
	fadd	s0, s2, s0
	ldp	s1, s2, [x4]
	stur	s0, [x4, #-4]
	ldr	s0, [x5]
	fadd	s0, s1, s0
	str	s0, [x4]
	ldr	s0, [x5, #4]
	add	x5, x5, #16
	fadd	s0, s2, s0
	str	s0, [x4, #4]
	add	x4, x4, #16
	cmp	x16, x3
	b.ne	.LBB27_1819
// %bb.1820:                            // %ggml_vec_add_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1815 Depth=2
	neg	x4, x3
.LBB27_1821:                            // %ggml_vec_add_f32.exit.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_1815 Depth=2
	cbz	x15, .LBB27_1814
// %bb.1822:                            // %.lr.ph.i.i.i404.epil.preheader
                                        //   in Loop: Header=BB27_1815 Depth=2
	add	x2, x2, x4, lsl #2
	add	x2, x10, x2
	add	x3, x13, x4, lsl #2
	mov	x4, x15
	.p2align	5, , 16
.LBB27_1823:                            // %.lr.ph.i.i.i404.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1815 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x2]
	subs	x4, x4, #1
	ldr	s1, [x3], #4
	fadd	s0, s0, s1
	str	s0, [x2], #4
	b.ne	.LBB27_1823
	b	.LBB27_1814
.LBB27_1824:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	w2, #1                          // =0x1
	bl	ggml_compute_forward_rope_f32
	b	.LBB27_7
.LBB27_1825:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	w2, wzr
	bl	ggml_compute_forward_rope_f32
	b	.LBB27_7
.LBB27_1826:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [x9, #160]
	ldr	w8, [x11]
	cbnz	w8, .LBB27_2781
// %bb.1827:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x9]
	cbnz	w8, .LBB27_2782
// %bb.1828:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #48]
	cmp	x8, #4
	b.ne	.LBB27_2783
// %bb.1829:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x11, #48]
	cmp	x8, #4
	b.ne	.LBB27_2784
// %bb.1830:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x20, x26, [x10, #16]
	ldr	x21, [x10, #32]
	mul	x8, x21, x20
	ldp	x22, x25, [x11, #16]
	ldr	x23, [x9, #24]
	ldr	x30, [x9, #56]
	mul	x8, x8, x26
	ldr	w24, [sp, #784]
	ldr	w27, [sp, #788]
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	cbnz	w24, .LBB27_2268
// %bb.1831:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x11, #56]
	str	w27, [sp, #720]                 // 4-byte Folded Spill
	str	w24, [sp, #728]                 // 4-byte Folded Spill
	ldr	x0, [sp, #800]
	ldr	x2, [sp, #792]
	mov	w1, wzr
	str	x23, [sp, #736]                 // 8-byte Folded Spill
	str	x30, [sp, #744]                 // 8-byte Folded Spill
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	ldp	x27, x24, [x10, #56]
	str	x11, [sp, #704]                 // 8-byte Folded Spill
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	bl	memset
	ldr	x8, [sp, #800]
	cmp	x21, #1
	b.lt	.LBB27_2238
// %bb.1832:                            // %.preheader.lr.ph.i45.i
                                        //   in Loop: Header=BB27_3 Depth=1
	mov	w12, #12                        // =0xc
	lsl	x14, x21, #2
	add	x0, x8, x21, lsl #3
	madd	x12, x21, x12, x8
	and	x16, x20, #0x7ffffffffffffffc
	mov	x9, xzr
	mul	x15, x14, x20
	mov	x10, xzr
	mov	x11, xzr
	add	x1, x8, x21, lsl #2
	and	x13, x20, #0x3
	neg	x16, x16
	lsl	x17, x21, #4
	mov	w2, #8                          // =0x8
	mov	x3, x8
	b	.LBB27_1834
.LBB27_1833:                            // %._crit_edge170.i49.i
                                        //   in Loop: Header=BB27_1834 Depth=2
	add	x11, x11, #1
	add	x10, x10, #4
	add	x2, x2, x24
	add	x3, x3, #4
	add	x9, x9, x24
	cmp	x11, x21
	b.eq	.LBB27_2238
.LBB27_1834:                            // %.preheader.i46.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1837 Depth 3
                                        //         Child Loop BB27_1841 Depth 4
                                        //         Child Loop BB27_1844 Depth 4
	cmp	x26, #1
	b.lt	.LBB27_1833
// %bb.1835:                            // %.lr.ph169.i51.i
                                        //   in Loop: Header=BB27_1834 Depth=2
	ldr	x5, [sp, #760]                  // 8-byte Folded Reload
	mov	x4, xzr
	mov	x7, x3
	mov	x30, x10
	ldr	x5, [x5, #248]
	add	x28, x5, x2
	add	x6, x5, x9
	b	.LBB27_1837
	.p2align	5, , 16
.LBB27_1836:                            // %._crit_edge.i54.i
                                        //   in Loop: Header=BB27_1837 Depth=3
	add	x4, x4, #1
	add	x30, x30, x15
	add	x28, x28, x27
	add	x7, x7, x15
	add	x6, x6, x27
	cmp	x4, x26
	b.eq	.LBB27_1833
.LBB27_1837:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1834 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1841 Depth 4
                                        //         Child Loop BB27_1844 Depth 4
	cmp	x20, #1
	b.lt	.LBB27_1836
// %bb.1838:                            // %.lr.ph.i56.i.preheader
                                        //   in Loop: Header=BB27_1837 Depth=3
	cmp	x20, #4
	b.hs	.LBB27_1840
// %bb.1839:                            //   in Loop: Header=BB27_1837 Depth=3
	mov	x23, xzr
	cbnz	x13, .LBB27_1843
	b	.LBB27_1836
	.p2align	5, , 16
.LBB27_1840:                            // %.lr.ph.i56.i.preheader1517
                                        //   in Loop: Header=BB27_1837 Depth=3
	mov	x23, xzr
	mov	x5, x28
	mov	x19, x30
	.p2align	5, , 16
.LBB27_1841:                            // %.lr.ph.i56.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1834 Depth=2
                                        //       Parent Loop BB27_1837 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldur	s0, [x5, #-8]
	sub	x23, x23, #4
	str	s0, [x8, x19]
	ldur	s0, [x5, #-4]
	str	s0, [x1, x19]
	ldr	s0, [x5]
	str	s0, [x0, x19]
	ldr	s0, [x5, #4]
	add	x5, x5, #16
	str	s0, [x12, x19]
	add	x19, x19, x17
	cmp	x16, x23
	b.ne	.LBB27_1841
// %bb.1842:                            // %._crit_edge.i54.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1837 Depth=3
	neg	x23, x23
	cbz	x13, .LBB27_1836
.LBB27_1843:                            // %.lr.ph.i56.i.epil.preheader
                                        //   in Loop: Header=BB27_1837 Depth=3
	madd	x5, x14, x23, x7
	mov	x19, x13
	add	x23, x6, x23, lsl #2
	.p2align	5, , 16
.LBB27_1844:                            // %.lr.ph.i56.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1834 Depth=2
                                        //       Parent Loop BB27_1837 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x23], #4
	subs	x19, x19, #1
	str	s0, [x5]
	add	x5, x5, x14
	b.ne	.LBB27_1844
	b	.LBB27_1836
.LBB27_1845:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x17, [x16, #160]
	ldr	w8, [x17]
	cbnz	w8, .LBB27_2785
// %bb.1846:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x16, #152]
	str	x17, [sp, #616]                 // 8-byte Folded Spill
	ldr	w15, [x16, #108]
	cmp	w15, #1
	ldp	x8, x10, [x17, #24]
	ldp	x11, x12, [x17, #40]
	ldr	x13, [x16, #32]
	csel	x15, x11, x10, eq
	ldr	x14, [x9, #24]
	csel	x10, x10, x8, eq
	csinc	x11, x8, xzr, eq
	csinc	x8, x13, xzr, eq
	str	x10, [sp, #760]                 // 8-byte Folded Spill
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	ldr	x8, [x17, #72]
	csinc	x13, x14, xzr, eq
	ldp	x10, x14, [x17, #56]
	csel	x8, x8, x14, eq
	csel	x10, x14, x10, eq
	cmp	x12, #4
	b.ne	.LBB27_2786
// %bb.1847:                            //   in Loop: Header=BB27_3 Depth=1
	str	x15, [sp, #432]                 // 8-byte Folded Spill
	cmp	x15, #1
	b.lt	.LBB27_7
// %bb.1848:                            // %.preheader173.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x15, [x9, #16]
	sxtw	x5, w10
	sxtw	x8, w8
	ldr	x9, [sp, #616]                  // 8-byte Folded Reload
	str	x8, [sp, #440]                  // 8-byte Folded Spill
	str	xzr, [sp, #480]                 // 8-byte Folded Spill
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	str	x5, [sp, #712]                  // 8-byte Folded Spill
	mul	x17, x13, x15
	ldr	x16, [x9, #16]
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	lsl	x10, x16, #2
	ldrsw	x3, [sp, #784]
	ldr	x14, [x12, #24]
	ldr	x19, [x12, #248]
	ldpsw	x6, x7, [x12, #92]
	str	x14, [sp, #656]                 // 8-byte Folded Spill
	str	x19, [sp, #592]                 // 8-byte Folded Spill
	str	x7, [sp, #512]                  // 8-byte Folded Spill
	str	x3, [sp, #664]                  // 8-byte Folded Spill
	mul	x0, x17, x9
	smull	x9, w3, w5
	str	x17, [sp, #720]                 // 8-byte Folded Spill
	str	x6, [sp, #600]                  // 8-byte Folded Spill
	str	x0, [sp, #608]                  // 8-byte Folded Spill
	ldrsw	x4, [sp, #788]
	str	x4, [sp, #768]                  // 8-byte Folded Spill
	ldpsw	x20, x21, [x12, #100]
	add	x8, x9, x20, lsl #2
	mul	x28, x10, x21
	ldpsw	x1, x2, [x12, #84]
	mul	x12, x10, x7
	sub	x8, x8, x12
	sub	x9, x9, x12
	lsl	x30, x20, #1
	str	x2, [sp, #520]                  // 8-byte Folded Spill
	sub	x8, x8, x6, lsl #2
	str	x1, [sp, #672]                  // 8-byte Folded Spill
	str	x8, [sp, #472]                  // 8-byte Folded Spill
	mul	x8, x10, x2
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	lsl	x8, x1, #2
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	smull	x8, w4, w5
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	sub	x8, x20, x6
	str	x8, [sp, #496]                  // 8-byte Folded Spill
	and	x8, x15, #0x7ffffffffffffffe
	neg	x23, x8
	lsl	x8, x17, #2
	madd	x10, x8, x3, x19
	mul	x8, x8, x4
	lsl	x19, x15, #2
	add	x10, x10, #4
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	sub	x8, x9, x6, lsl #2
	str	x10, [sp, #456]                 // 8-byte Folded Spill
	lsl	x10, x0, #2
	mul	x14, x10, x14
	str	x10, [sp, #640]                 // 8-byte Folded Spill
	ldr	x10, [sp, #552]                 // 8-byte Folded Reload
	str	x8, [sp, #448]                  // 8-byte Folded Spill
	neg	x8, x6
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	mul	x10, x14, x10
	str	x14, [sp, #536]                 // 8-byte Folded Spill
	str	x10, [sp, #424]                 // 8-byte Folded Spill
	b	.LBB27_1850
.LBB27_1849:                            // %._crit_edge191.i.i
                                        //   in Loop: Header=BB27_1850 Depth=2
	ldp	x10, x9, [sp, #472]             // 16-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #440]                  // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x12, [sp, #424]                 // 8-byte Folded Reload
	stp	x10, x9, [sp, #472]             // 16-byte Folded Spill
	ldr	x10, [sp, #456]                 // 8-byte Folded Reload
	add	x10, x10, x12
	str	x10, [sp, #456]                 // 8-byte Folded Spill
	ldr	x10, [sp, #448]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #432]                  // 8-byte Folded Reload
	str	x10, [sp, #448]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_1850:                            // %.preheader173.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1853 Depth 3
                                        //         Child Loop BB27_1856 Depth 4
                                        //           Child Loop BB27_1859 Depth 5
                                        //             Child Loop BB27_1863 Depth 6
                                        //               Child Loop BB27_1868 Depth 7
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1849
// %bb.1851:                            // %.preheader172.lr.ph.i.i
                                        //   in Loop: Header=BB27_1850 Depth=2
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	xzr, [sp, #584]                 // 8-byte Folded Spill
	ldr	x9, [sp, #480]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #528]                  // 8-byte Folded Spill
	ldp	x10, x8, [sp, #448]             // 16-byte Folded Reload
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #440]                  // 8-byte Folded Reload
	str	x10, [sp, #576]                 // 8-byte Folded Spill
	mul	x8, x9, x8
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ldr	x8, [sp, #472]                  // 8-byte Folded Reload
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	b	.LBB27_1853
	.p2align	5, , 16
.LBB27_1852:                            // %._crit_edge188.i.i
                                        //   in Loop: Header=BB27_1853 Depth=3
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x12, [sp, #568]                 // 8-byte Folded Reload
	ldr	x10, [sp, #584]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	str	x10, [sp, #584]                 // 8-byte Folded Spill
	add	x12, x12, x9
	ldr	x9, [sp, #576]                  // 8-byte Folded Reload
	str	x12, [sp, #568]                 // 8-byte Folded Spill
	add	x9, x9, x8
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x9, [sp, #576]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB27_1849
.LBB27_1853:                            // %.preheader172.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1850 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1856 Depth 4
                                        //           Child Loop BB27_1859 Depth 5
                                        //             Child Loop BB27_1863 Depth 6
                                        //               Child Loop BB27_1868 Depth 7
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1852
// %bb.1854:                            // %.lr.ph187.i.i
                                        //   in Loop: Header=BB27_1853 Depth=3
	ldr	x10, [sp, #584]                 // 8-byte Folded Reload
	str	xzr, [sp, #704]                 // 8-byte Folded Spill
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	add	x8, x10, x8
	ldr	x9, [sp, #520]                  // 8-byte Folded Reload
	mul	x9, x10, x9
	ldr	x10, [sp, #576]                 // 8-byte Folded Reload
	ldp	x12, x22, [sp, #488]            // 16-byte Folded Reload
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	ldr	x10, [sp, #656]                 // 8-byte Folded Reload
	mul	x8, x8, x10
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	sub	x7, x9, x8
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	b	.LBB27_1856
	.p2align	5, , 16
.LBB27_1855:                            // %._crit_edge184.i.i
                                        //   in Loop: Header=BB27_1856 Depth=4
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	ldr	x17, [sp, #688]                 // 8-byte Folded Reload
	ldr	x14, [sp, #704]                 // 8-byte Folded Reload
	add	x17, x17, x10
	add	x14, x14, #1
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	ldr	x8, [sp, #672]                  // 8-byte Folded Reload
	str	x17, [sp, #688]                 // 8-byte Folded Spill
	str	x14, [sp, #704]                 // 8-byte Folded Spill
	add	x22, x22, x8
	ldr	x10, [sp, #696]                 // 8-byte Folded Reload
	add	x12, x12, x8
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	add	x10, x10, x9
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	cmp	x14, x8
	b.eq	.LBB27_1852
.LBB27_1856:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1850 Depth=2
                                        //       Parent Loop BB27_1853 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1859 Depth 5
                                        //             Child Loop BB27_1863 Depth 6
                                        //               Child Loop BB27_1868 Depth 7
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.le	.LBB27_1855
// %bb.1857:                            // %.lr.ph183.i.i
                                        //   in Loop: Header=BB27_1856 Depth=4
	ldr	x9, [sp, #616]                  // 8-byte Folded Reload
	ldr	x10, [sp, #624]                 // 8-byte Folded Reload
	ldr	x14, [sp, #704]                 // 8-byte Folded Reload
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	add	x8, x14, x8
	ldr	x9, [x9, #248]
	add	x10, x9, x10
	ldr	x26, [sp, #688]                 // 8-byte Folded Reload
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	ldr	x10, [sp, #672]                 // 8-byte Folded Reload
	mul	x10, x14, x10
	ldr	x14, [sp, #600]                 // 8-byte Folded Reload
	sub	x17, x10, x14
	ldr	x10, [sp, #608]                 // 8-byte Folded Reload
	ldr	x14, [sp, #696]                 // 8-byte Folded Reload
	mul	x8, x10, x8
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	add	x0, x9, x14
	add	x10, x9, x10
	ldr	x9, [sp, #592]                  // 8-byte Folded Reload
	add	x8, x9, x8, lsl #2
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	b	.LBB27_1859
	.p2align	5, , 16
.LBB27_1858:                            // %._crit_edge179.i.i
                                        //   in Loop: Header=BB27_1859 Depth=5
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	add	x26, x26, x14
	add	x10, x10, x9
	add	x0, x0, x9
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.ge	.LBB27_1855
.LBB27_1859:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1850 Depth=2
                                        //       Parent Loop BB27_1853 Depth=3
                                        //         Parent Loop BB27_1856 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1863 Depth 6
                                        //               Child Loop BB27_1868 Depth 7
	cmp	x13, #1
	b.lt	.LBB27_1858
// %bb.1860:                            // %.preheader.lr.ph.i8.i
                                        //   in Loop: Header=BB27_1859 Depth=5
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	mov	x2, xzr
	mov	x4, x0
	ldr	x14, [sp, #736]                 // 8-byte Folded Reload
	mov	x24, x10
	madd	x25, x8, x9, x14
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	ldr	x14, [sp, #728]                 // 8-byte Folded Reload
	mul	x9, x8, x9
	add	x6, x14, x9, lsl #2
	mov	x14, x26
	b	.LBB27_1863
	.p2align	5, , 16
.LBB27_1861:                            // %._crit_edge.i11.i.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB27_1863 Depth=6
	mul	x1, x2, x15
	add	x1, x6, x1, lsl #2
	str	s0, [x1, x9, lsl #2]
.LBB27_1862:                            // %._crit_edge.i11.i
                                        //   in Loop: Header=BB27_1863 Depth=6
	add	x2, x2, #1
	add	x24, x24, x28
	add	x14, x14, x19
	add	x4, x4, x28
	cmp	x2, x13
	b.eq	.LBB27_1858
.LBB27_1863:                            // %.preheader.i10.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1850 Depth=2
                                        //       Parent Loop BB27_1853 Depth=3
                                        //         Parent Loop BB27_1856 Depth=4
                                        //           Parent Loop BB27_1859 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_1868 Depth 7
	cmp	x15, #1
	b.lt	.LBB27_1862
// %bb.1864:                            // %.lr.ph.i12.i
                                        //   in Loop: Header=BB27_1863 Depth=6
	mul	x9, x2, x21
	add	x5, x9, x7
	cmp	x15, #1
	b.ne	.LBB27_1866
// %bb.1865:                            //   in Loop: Header=BB27_1863 Depth=6
	mov	x9, xzr
	tbz	w15, #0, .LBB27_1862
	b	.LBB27_1879
	.p2align	5, , 16
.LBB27_1866:                            // %.lr.ph.i12.i.new.preheader
                                        //   in Loop: Header=BB27_1863 Depth=6
	mov	x1, xzr
	mov	x3, xzr
	mov	x9, x14
	b	.LBB27_1868
	.p2align	5, , 16
.LBB27_1867:                            //   in Loop: Header=BB27_1868 Depth=7
	str	s0, [x9], #8
	add	x3, x3, x30
	sub	x1, x1, #2
	cmp	x23, x1
	b.eq	.LBB27_1878
.LBB27_1868:                            // %.lr.ph.i12.i.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1850 Depth=2
                                        //       Parent Loop BB27_1853 Depth=3
                                        //         Parent Loop BB27_1856 Depth=4
                                        //           Parent Loop BB27_1859 Depth=5
                                        //             Parent Loop BB27_1863 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	fmov	s0, wzr
	fmov	s1, wzr
	tbnz	x5, #63, .LBB27_1873
// %bb.1869:                            //   in Loop: Header=BB27_1868 Depth=7
	cmp	x5, x11
	b.ge	.LBB27_1873
// %bb.1870:                            //   in Loop: Header=BB27_1868 Depth=7
	add	x27, x12, x3
	tbnz	x27, #63, .LBB27_1873
// %bb.1871:                            //   in Loop: Header=BB27_1868 Depth=7
	cmp	x27, x16
	b.ge	.LBB27_1873
// %bb.1872:                            //   in Loop: Header=BB27_1868 Depth=7
	ldr	s1, [x4, x3, lsl #2]
.LBB27_1873:                            //   in Loop: Header=BB27_1868 Depth=7
	stur	s1, [x9, #-4]
	tbnz	x5, #63, .LBB27_1867
// %bb.1874:                            //   in Loop: Header=BB27_1868 Depth=7
	cmp	x5, x11
	b.ge	.LBB27_1867
// %bb.1875:                            //   in Loop: Header=BB27_1868 Depth=7
	add	x27, x22, x3
	tbnz	x27, #63, .LBB27_1867
// %bb.1876:                            //   in Loop: Header=BB27_1868 Depth=7
	cmp	x27, x16
	b.ge	.LBB27_1867
// %bb.1877:                            //   in Loop: Header=BB27_1868 Depth=7
	ldr	s0, [x24, x3, lsl #2]
	b	.LBB27_1867
	.p2align	5, , 16
.LBB27_1878:                            // %._crit_edge.i11.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1863 Depth=6
	neg	x9, x1
	tbz	w15, #0, .LBB27_1862
.LBB27_1879:                            // %.epil.preheader818
                                        //   in Loop: Header=BB27_1863 Depth=6
	fmov	s0, wzr
	tbnz	x5, #63, .LBB27_1861
// %bb.1880:                            //   in Loop: Header=BB27_1863 Depth=6
	cmp	x5, x11
	b.ge	.LBB27_1861
// %bb.1881:                            //   in Loop: Header=BB27_1863 Depth=6
	mul	x1, x9, x20
	add	x1, x1, x17
	tbnz	x1, #63, .LBB27_1861
// %bb.1882:                            //   in Loop: Header=BB27_1863 Depth=6
	cmp	x1, x16
	b.ge	.LBB27_1861
// %bb.1883:                            //   in Loop: Header=BB27_1863 Depth=6
	mul	x3, x5, x16
	add	x3, x25, x3, lsl #2
	ldr	s0, [x3, x1, lsl #2]
	b	.LBB27_1861
.LBB27_1884:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1885:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	bl	ggml_nrows
	cmp	w0, #1
	b.lt	.LBB27_7
// %bb.1886:                            // %.lr.ph.i8.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	mov	x8, xzr
	and	x14, x0, #0x7fffffff
	ldr	x9, [x19, #16]
	and	x13, x9, #0x7fffffff
	ldr	s0, [x11, #84]
	ldr	x10, [x11, #248]
	ldr	x11, [x11, #56]
	ldr	x12, [x19, #248]
	ldr	x15, [x19, #56]
	b	.LBB27_1888
.LBB27_1887:                            // %ggml_vec_leaky_relu_f16.exit.i.i
                                        //   in Loop: Header=BB27_1888 Depth=2
	add	x8, x8, #1
	add	x10, x10, x11
	add	x12, x12, x15
	cmp	x8, x14
	b.eq	.LBB27_7
.LBB27_1888:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1890 Depth 3
	cmp	w9, #1
	b.lt	.LBB27_1887
// %bb.1889:                            // %.lr.ph.i.i14.i.preheader
                                        //   in Loop: Header=BB27_1888 Depth=2
	mov	x16, x12
	mov	x17, x10
	mov	x0, x13
	.p2align	5, , 16
.LBB27_1890:                            // %.lr.ph.i.i14.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1888 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w1, [x16], #2
	fmov	s2, wzr
	mov	w3, #125829120                  // =0x7800000
	mov	w5, #-16777216                  // =0xff000000
	ldr	s1, [x20, x1, lsl #2]
	mov	w1, #2004877312                 // =0x77800000
	fmaxnm	s3, s1, s2
	fminnm	s1, s1, s2
	fmadd	s1, s0, s1, s3
	fmov	s3, w1
	mov	w1, #142606336                  // =0x8800000
	fabs	s2, s1
	fmul	s2, s2, s3
	fmov	s3, w1
	fmov	w1, s1
	and	w2, w1, #0x7f800000
	ubfx	w4, w1, #23, #8
	fmul	s2, s2, s3
	add	w2, w2, w3
	cmp	w4, #113
	mov	w3, #1073741824                 // =0x40000000
	csel	w2, w3, w2, lo
	fmov	s1, w2
	lsl	w2, w1, #1
	lsr	w1, w1, #31
	cmp	w2, w5
	mov	w2, #32256                      // =0x7e00
	fadd	s1, s2, s1
	fmov	w3, s1
	lsr	w4, w3, #13
	and	w3, w3, #0xfff
	and	w4, w4, #0x7c00
	add	w3, w4, w3
	csel	w2, w2, w3, hi
	subs	x0, x0, #1
	orr	w1, w2, w1, lsl #15
	strh	w1, [x17], #2
	b.ne	.LBB27_1890
	b	.LBB27_1887
.LBB27_1891:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x21, xzr
.LBB27_1892:                            // %._crit_edge136.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #800]
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	cbz	w8, .LBB27_2072
// %bb.1893:                            //   in Loop: Header=BB27_3 Depth=1
	str	x21, [x19, x8, lsl #3]
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_7
// %bb.1894:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
	b	.LBB27_7
.LBB27_1895:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x22
	bl	ggml_nelements
	mov	x1, x0
	mov	w0, w19
	bl	ggml_row_size
	add	x8, x21, #7
	ldr	x21, [sp, #800]
	and	x8, x8, #0xfffffffffffffff8
	add	x9, x8, x0
	ldr	x8, [x26, #16]
.LBB27_1896:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #552]                 // 8-byte Folded Reload
	add	x9, x9, #7
	str	x28, [sp, #752]                 // 8-byte Folded Spill
	and	x9, x9, #0xfffffffffffffff8
	str	x20, [sp, #544]                 // 8-byte Folded Spill
	sbfiz	x12, x11, #3, #32
	str	x9, [sp, #448]                  // 8-byte Folded Spill
	str	x26, [sp, #672]                 // 8-byte Folded Spill
	str	x21, [sp, #584]                 // 8-byte Folded Spill
	mul	x8, x8, x12
	add	x10, x9, x12
	ldr	x9, [x26, #24]
	str	x12, [sp, #528]                 // 8-byte Folded Spill
	nop
	madd	x8, x8, x9, x10
	lsl	w9, w11, #6
	str	x10, [sp, #664]                 // 8-byte Folded Spill
	add	x8, x8, #63
	and	x8, x8, #0xffffffffffffffc0
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	add	x8, x8, w9, sxtw
	ldr	x9, [sp, #792]
	sub	x8, x8, x21
	cmp	x9, x8
	b.lo	.LBB27_2721
// %bb.1897:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #480]                  // 8-byte Folded Reload
	str	x22, [sp, #640]                 // 8-byte Folded Spill
	sxtw	x8, w8
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	ldr	w8, [x22]
	cmp	w8, w19
	b.eq	.LBB27_1908
// %bb.1898:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #568]                 // 8-byte Folded Reload
	mov	w0, w19
	bl	ggml_type_size
	ldr	x1, [sp, #496]                  // 8-byte Folded Reload
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	mov	w0, w19
	bl	ggml_row_size
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	str	x0, [sp, #696]                  // 8-byte Folded Spill
	ldr	w8, [x8]
	cbnz	w8, .LBB27_2787
// %bb.1899:                            // %.preheader284.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1908
// %bb.1900:                            // %.preheader283.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	xzr, [sp, #608]                 // 8-byte Folded Spill
	ldr	x9, [sp, #696]                  // 8-byte Folded Reload
	mul	x9, x9, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldr	x9, [sp, #496]                  // 8-byte Folded Reload
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #472]                  // 8-byte Folded Reload
	mul	x10, x9, x8
	add	w8, w8, #1
	sxtw	x8, w8
	mul	x8, x9, x8
	str	x10, [sp, #680]                 // 8-byte Folded Spill
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	b	.LBB27_1902
.LBB27_1901:                            // %._crit_edge288.i
                                        //   in Loop: Header=BB27_1902 Depth=2
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_1908
.LBB27_1902:                            // %.preheader283.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1905 Depth 3
                                        //         Child Loop BB27_1907 Depth 4
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1901
// %bb.1903:                            // %.preheader282.lr.ph.i
                                        //   in Loop: Header=BB27_1902 Depth=2
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	str	xzr, [sp, #728]                 // 8-byte Folded Spill
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x10, [sp, #576]                 // 8-byte Folded Reload
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	nop
	madd	x8, x10, x9, x8
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	b	.LBB27_1905
	.p2align	5, , 16
.LBB27_1904:                            // %._crit_edge.i490
                                        //   in Loop: Header=BB27_1905 Depth=3
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x9, x9, #1
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_1901
.LBB27_1905:                            // %.preheader282.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1902 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1907 Depth 4
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	ldr	x24, [sp, #568]                 // 8-byte Folded Reload
	ldr	x27, [sp, #560]                 // 8-byte Folded Reload
	ldr	x20, [sp, #688]                 // 8-byte Folded Reload
	ldr	x21, [sp, #696]                 // 8-byte Folded Reload
	ldr	x28, [sp, #680]                 // 8-byte Folded Reload
	ldr	x26, [sp, #648]                 // 8-byte Folded Reload
	ldr	x25, [sp, #704]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1904
// %bb.1906:                            // %.lr.ph.i491
                                        //   in Loop: Header=BB27_1905 Depth=3
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	mov	x23, xzr
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	ldr	x10, [sp, #632]                 // 8-byte Folded Reload
	ldr	x19, [sp, #720]                 // 8-byte Folded Reload
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	nop
	madd	x22, x9, x8, x10
	.p2align	5, , 16
.LBB27_1907:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1902 Depth=2
                                        //       Parent Loop BB27_1905 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	mov	w0, w24
	bl	ggml_blck_size
	udiv	x8, x28, x0
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	add	x11, x25, x11
	udiv	x9, x8, x27
	udiv	x8, x26, x0
	udiv	x10, x8, x27
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	add	x8, x8, x11
	ldr	x11, [sp, #744]                 // 8-byte Folded Reload
	nop
	madd	x8, x23, x11, x8
	ldr	x11, [sp, #752]                 // 8-byte Folded Reload
	mul	x11, x0, x11
	madd	x8, x11, x9, x8
	madd	x11, x23, x21, x22
	madd	x1, x9, x20, x11
	sub	x9, x10, x9
	mul	x2, x9, x0
	mov	x0, x8
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	blr	x8
	add	x23, x23, #1
	subs	x19, x19, #1
	b.ne	.LBB27_1907
	b	.LBB27_1904
.LBB27_1908:                            // %.loopexit285.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #672]                 // 8-byte Folded Reload
	ldp	x26, x22, [sp, #448]            // 16-byte Folded Reload
	ldr	x23, [sp, #472]                 // 8-byte Folded Reload
	ldr	x28, [sp, #664]                 // 8-byte Folded Reload
	ldr	x20, [sp, #544]                 // 8-byte Folded Reload
	cbz	w23, .LBB27_2100
.LBB27_1909:                            // %.loopexit.i476
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	ldr	x24, [sp, #480]                 // 8-byte Folded Reload
	ldr	x27, [sp, #560]                 // 8-byte Folded Reload
	cmp	w23, w8
	b.ge	.LBB27_1912
// %bb.1910:                            // %.lr.ph296.preheader.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	lsl	x10, x27, #6
	mov	x11, x23
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	lsl	x8, x8, #32
	add	x9, x9, x23, lsl #6
	asr	x8, x8, #32
	.p2align	5, , 16
.LBB27_1911:                            // %.lr.ph296.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x11, x11, x27
	stlr	w24, [x9]
	add	x9, x9, x10
	cmp	x11, x8
	b.lt	.LBB27_1911
.LBB27_1912:                            // %._crit_edge297.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_1914
// %bb.1913:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_1914:                            // %ggml_barrier.exit.i477
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	ldr	x25, [sp, #568]                 // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB27_7
// %bb.1915:                            // %.lr.ph299.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	mov	x9, xzr
	mov	x14, xzr
	add	x8, x8, #248
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	ldr	x8, [sp, #440]                  // 8-byte Folded Reload
	sub	x8, x8, #1
	str	x8, [sp, #432]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	and	x8, x8, #0x7fffffff
	str	x8, [sp, #520]                  // 8-byte Folded Spill
	b	.LBB27_1918
.LBB27_1916:                            // %ggml_compute_forward_mul_mat_id_one_chunk.exit.i
                                        //   in Loop: Header=BB27_1918 Depth=2
	ldp	x26, x22, [sp, #448]            // 16-byte Folded Reload
	ldr	x25, [sp, #568]                 // 8-byte Folded Reload
	ldp	x23, x24, [sp, #472]            // 16-byte Folded Reload
	ldr	x27, [sp, #560]                 // 8-byte Folded Reload
	ldr	x9, [sp, #528]                  // 8-byte Folded Reload
.LBB27_1917:                            //   in Loop: Header=BB27_1918 Depth=2
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	add	x14, x14, #1
	add	x9, x9, x22
	cmp	x14, x8
	b.eq	.LBB27_7
.LBB27_1918:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1923 Depth 3
                                        //         Child Loop BB27_1925 Depth 4
                                        //           Child Loop BB27_1926 Depth 5
                                        //             Child Loop BB27_1931 Depth 6
	ldr	x20, [x26, x14, lsl #3]
	cbz	x20, .LBB27_1917
// %bb.1919:                            //   in Loop: Header=BB27_1918 Depth=2
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	mov	w0, w25
	str	x9, [sp, #528]                  // 8-byte Folded Spill
	ldp	x10, x1, [sp, #488]             // 16-byte Folded Reload
	str	x14, [sp, #696]                 // 8-byte Folded Spill
	ldr	x19, [x8, #248]
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	ldr	w8, [x8]
	cmp	w8, w25
	ldr	x8, [sp, #168]                  // 8-byte Folded Reload
	csel	x8, x10, x8, eq
	ldr	x21, [x8]
	bl	ggml_row_size
	ldr	x14, [sp, #696]                 // 8-byte Folded Reload
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	ldr	x9, [sp, #528]                  // 8-byte Folded Reload
	cmp	w24, w23
	b.le	.LBB27_1917
// %bb.1920:                            //   in Loop: Header=BB27_1918 Depth=2
	ldr	x13, [sp, #440]                 // 8-byte Folded Reload
	cmp	x13, x20
	csinc	x10, x27, xzr, le
	csinc	x9, x27, xzr, gt
	add	x8, x20, x10
	sdiv	x12, x23, x9
	sub	x11, x8, #1
	ldr	x8, [sp, #432]                  // 8-byte Folded Reload
	add	x8, x8, x9
	sdiv	x10, x11, x10
	mul	x27, x12, x10
	add	x10, x27, x10
	sdiv	x8, x8, x9
	msub	x9, x12, x9, x23
	mul	x15, x9, x8
	add	x11, x15, x8
	str	x15, [sp, #544]                 // 8-byte Folded Spill
	cmp	x11, x13
	csel	x13, x11, x13, lt
	cmp	x10, x20
	csel	x10, x10, x20, lt
	str	x10, [sp, #552]                 // 8-byte Folded Spill
	cmp	x27, x10
	b.ge	.LBB27_1916
// %bb.1921:                            // %.preheader117.lr.ph.i.i
                                        //   in Loop: Header=BB27_1918 Depth=2
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	str	x13, [sp, #592]                 // 8-byte Folded Spill
	ldr	x11, [sp, #512]                 // 8-byte Folded Reload
	ldr	x12, [x10, #24]
	ldr	x20, [x11, #16]
	ldr	x24, [x11, #56]
	str	x12, [sp, #736]                 // 8-byte Folded Spill
	ldp	x12, x10, [x10, #56]
	mul	x8, x24, x8
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	str	x12, [sp, #624]                 // 8-byte Folded Spill
	ldp	x12, x10, [x10, #56]
	str	x10, [sp, #680]                 // 8-byte Folded Spill
	ldr	w10, [x11]
	adrp	x11, type_traits_cpu
	add	x11, x11, :lo12:type_traits_cpu
	str	x12, [sp, #688]                 // 8-byte Folded Spill
	add	x10, x11, x10, lsl #5
	ldr	x23, [x10, #8]
	ldr	w10, [x10, #16]
	str	w10, [sp, #632]                 // 4-byte Folded Spill
	ldr	x10, [sp, #528]                 // 8-byte Folded Reload
	nop
	madd	x8, x8, x9, x10
	add	x8, x19, x8
	str	x8, [sp, #536]                  // 8-byte Folded Spill
	lsl	x8, x24, #4
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	b	.LBB27_1923
	.p2align	5, , 16
.LBB27_1922:                            // %._crit_edge124.i.i479
                                        //   in Loop: Header=BB27_1923 Depth=3
	ldr	x9, [sp, #576]                  // 8-byte Folded Reload
	mov	x27, x9
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.ge	.LBB27_1916
.LBB27_1923:                            // %.preheader117.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1918 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1925 Depth 4
                                        //           Child Loop BB27_1926 Depth 5
                                        //             Child Loop BB27_1931 Depth 6
	add	x8, x27, #16
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #544]                  // 8-byte Folded Reload
	cmp	x8, x13
	b.ge	.LBB27_1922
// %bb.1924:                            // %.preheader.lr.ph.i.i480
                                        //   in Loop: Header=BB27_1923 Depth=3
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x27, [sp, #600]                 // 8-byte Folded Spill
	ldr	x9, [sp, #576]                  // 8-byte Folded Reload
	cmp	x9, x8
	ldr	x25, [sp, #544]                 // 8-byte Folded Reload
	csel	x8, x9, x8, lt
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #536]                  // 8-byte Folded Reload
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	.p2align	5, , 16
.LBB27_1925:                            // %.lr.ph121.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1918 Depth=2
                                        //       Parent Loop BB27_1923 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1926 Depth 5
                                        //             Child Loop BB27_1931 Depth 6
	add	x8, x25, #16
	str	x25, [sp, #720]                 // 8-byte Folded Spill
	cmp	x8, x13
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	csel	x19, x8, x13, lt
	sub	x8, x19, x25
	lsl	x8, x8, #2
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	.p2align	5, , 16
.LBB27_1926:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1918 Depth=2
                                        //       Parent Loop BB27_1923 Depth=3
                                        //         Parent Loop BB27_1925 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1931 Depth 6
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldp	x8, x9, [x9, #16]
	mul	x8, x8, x14
	mul	x8, x8, x9
	add	x8, x28, x8, lsl #3
	add	x9, x8, x27, lsl #3
	ldpsw	x8, x12, [x9]
	str	x12, [sp, #760]                 // 8-byte Folded Spill
	sdiv	x9, x8, x10
	msub	x9, x9, x10, x8
	ldr	w10, [sp, #656]                 // 4-byte Folded Reload
	tbnz	w10, #0, .LBB27_1929
// %bb.1927:                            //   in Loop: Header=BB27_1926 Depth=5
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	ldr	w11, [sp, #632]                 // 4-byte Folded Reload
	ldr	w10, [x10]
	cmp	w10, w11
	b.ne	.LBB27_1929
// %bb.1928:                            //   in Loop: Header=BB27_1926 Depth=5
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	mul	x10, x10, x12
	ldr	x11, [sp, #624]                 // 8-byte Folded Reload
	nop
	madd	x26, x9, x11, x10
	b	.LBB27_1930
	.p2align	5, , 16
.LBB27_1929:                            //   in Loop: Header=BB27_1926 Depth=5
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	nop
	madd	x9, x10, x12, x9
	ldr	x10, [sp, #648]                 // 8-byte Folded Reload
	mul	x26, x9, x10
.LBB27_1930:                            // %.lr.ph.preheader.i.i
                                        //   in Loop: Header=BB27_1926 Depth=5
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	add	x28, sp, #1072
	ldr	x22, [sp, #728]                 // 8-byte Folded Reload
	ldr	x9, [x9, #248]
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	ldr	x9, [sp, #688]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	.p2align	5, , 16
.LBB27_1931:                            // %.lr.ph.i.i483
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1918 Depth=2
                                        //       Parent Loop BB27_1923 Depth=3
                                        //         Parent Loop BB27_1925 Depth=4
                                        //           Parent Loop BB27_1926 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	add	x5, x21, x26
	mov	w0, w20
	mov	x1, x28
	mov	x2, xzr
	mov	x3, x22
	mov	x4, xzr
	mov	x6, xzr
	mov	w7, #1                          // =0x1
	blr	x23
	add	x25, x25, #1
	add	x22, x22, x24
	add	x28, x28, #4
	cmp	x25, x19
	b.lt	.LBB27_1931
// %bb.1932:                            // %._crit_edge.i.i484
                                        //   in Loop: Header=BB27_1926 Depth=5
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	add	x1, sp, #1072
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	ldr	x25, [sp, #720]                 // 8-byte Folded Reload
	mul	x9, x9, x10
	ldr	x2, [sp, #712]                  // 8-byte Folded Reload
	add	x8, x8, x9
	add	x0, x8, x25, lsl #2
	bl	memcpy
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	add	x27, x27, #1
	ldr	x28, [sp, #664]                 // 8-byte Folded Reload
	ldr	x14, [sp, #696]                 // 8-byte Folded Reload
	cmp	x27, x8
	b.lt	.LBB27_1926
// %bb.1933:                            // %._crit_edge122.i.i
                                        //   in Loop: Header=BB27_1925 Depth=4
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	ldr	x13, [sp, #592]                 // 8-byte Folded Reload
	ldr	x27, [sp, #600]                 // 8-byte Folded Reload
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	mov	x25, x8
	cmp	x8, x13
	b.lt	.LBB27_1925
	b	.LBB27_1922
.LBB27_1934:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x20, #160]
	bl	ggml_type_size
	cmp	x0, #2
	b.ne	.LBB27_2788
// %bb.1935:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w14, [x20, #84]
	cmp	w14, #4
	b.hs	.LBB27_2789
// %bb.1936:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x1, x0, [x19, #64]
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	ldp	x0, x7, [x20, #32]
	ldr	x3, [sp, #760]                  // 8-byte Folded Reload
	ldp	x8, x9, [x3, #16]!
	str	x1, [sp, #712]                  // 8-byte Folded Spill
	ldp	x1, x2, [x20, #16]
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .LCPI27_0
	str	x7, [sp, #664]                  // 8-byte Folded Spill
	ldp	x10, x11, [x3, #16]
	ldr	q0, [x0, :lo12:.LCPI27_0]
	add	x0, sp, #1072
	ldp	x12, x13, [x3, #32]
	ldp	x17, x15, [x3, #48]
	str	x15, [sp, #672]                 // 8-byte Folded Spill
	ldp	x15, x16, [x19, #48]
	stp	q0, q0, [x0]
	ldp	x0, x4, [x20, #64]
	str	x4, [sp, #656]                  // 8-byte Folded Spill
	ldr	x3, [x3, x14, lsl #3]
	add	x4, sp, #1072
	ldp	x5, x6, [x20, #48]
	str	x3, [x4, x14, lsl #3]
	ldrsw	x14, [sp, #784]
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	ldrsw	x14, [sp, #788]
	str	x14, [sp, #736]                 // 8-byte Folded Spill
	cmp	x7, #1
	b.lt	.LBB27_7
// %bb.1937:                            // %.preheader123.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [sp, #680]                 // 8-byte Folded Reload
	mov	x23, xzr
	mul	x3, x17, x14
	mul	x14, x0, x14
	ldr	x25, [sp, #1072]
	ldr	x26, [sp, #1080]
	str	x3, [sp, #696]                  // 8-byte Folded Spill
	ldr	x3, [sp, #736]                  // 8-byte Folded Reload
	str	x14, [sp, #688]                 // 8-byte Folded Spill
	mul	x14, x0, x3
	mul	x17, x17, x3
	str	x14, [sp, #720]                 // 8-byte Folded Spill
	ldr	x14, [sp, #1088]
	str	x17, [sp, #728]                 // 8-byte Folded Spill
	str	x14, [sp, #704]                 // 8-byte Folded Spill
	ldr	x14, [sp, #1096]
	str	x14, [sp, #640]                 // 8-byte Folded Spill
	b	.LBB27_1939
.LBB27_1938:                            // %._crit_edge131.i.i623
                                        //   in Loop: Header=BB27_1939 Depth=2
	ldr	x14, [sp, #672]                 // 8-byte Folded Reload
	add	x23, x23, #1
	ldr	x17, [sp, #696]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #656]                 // 8-byte Folded Reload
	str	x17, [sp, #696]                 // 8-byte Folded Spill
	ldr	x17, [sp, #688]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	str	x17, [sp, #688]                 // 8-byte Folded Spill
	cmp	x23, x14
	b.eq	.LBB27_7
.LBB27_1939:                            // %.preheader123.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1942 Depth 3
                                        //         Child Loop BB27_1945 Depth 4
                                        //           Child Loop BB27_1949 Depth 5
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	ldr	x17, [sp, #680]                 // 8-byte Folded Reload
	cmp	x14, x17
	b.le	.LBB27_1938
// %bb.1940:                            // %.preheader122.lr.ph.i.i
                                        //   in Loop: Header=BB27_1939 Depth=2
	ldr	x14, [sp, #640]                 // 8-byte Folded Reload
	sub	x17, x23, x14
	ldr	x14, [sp, #688]                 // 8-byte Folded Reload
	ldr	x27, [sp, #696]                 // 8-byte Folded Reload
	ldr	x21, [sp, #680]                 // 8-byte Folded Reload
	str	x14, [sp, #752]                 // 8-byte Folded Spill
	ldr	x14, [sp, #648]                 // 8-byte Folded Reload
	mul	x4, x17, x14
	b	.LBB27_1942
	.p2align	5, , 16
.LBB27_1941:                            // %._crit_edge129.i.i
                                        //   in Loop: Header=BB27_1942 Depth=3
	ldr	x14, [sp, #736]                 // 8-byte Folded Reload
	add	x21, x21, x14
	ldr	x14, [sp, #728]                 // 8-byte Folded Reload
	ldr	x17, [sp, #752]                 // 8-byte Folded Reload
	add	x27, x27, x14
	ldr	x14, [sp, #720]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	str	x17, [sp, #752]                 // 8-byte Folded Spill
	cmp	x14, x21
	b.le	.LBB27_1938
.LBB27_1942:                            // %.preheader122.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1939 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1945 Depth 4
                                        //           Child Loop BB27_1949 Depth 5
	cmp	x2, #1
	b.lt	.LBB27_1941
// %bb.1943:                            // %.preheader.lr.ph.i.i624
                                        //   in Loop: Header=BB27_1942 Depth=3
	ldr	x14, [sp, #704]                 // 8-byte Folded Reload
	mov	x20, xzr
	sub	x17, x21, x14
	ldr	x14, [sp, #712]                 // 8-byte Folded Reload
	ldr	x28, [sp, #752]                 // 8-byte Folded Reload
	mul	x7, x17, x14
	mov	x17, x27
	b	.LBB27_1945
	.p2align	5, , 16
.LBB27_1944:                            // %._crit_edge.i.i626
                                        //   in Loop: Header=BB27_1945 Depth=4
	add	x20, x20, #1
	add	x17, x17, x13
	add	x28, x28, x6
	cmp	x20, x2
	b.eq	.LBB27_1941
.LBB27_1945:                            // %.preheader.i.i625
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1939 Depth=2
                                        //       Parent Loop BB27_1942 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1949 Depth 5
	cmp	x1, #1
	b.lt	.LBB27_1944
// %bb.1946:                            // %.lr.ph.i.i627
                                        //   in Loop: Header=BB27_1945 Depth=4
	ldr	x14, [sp, #768]                 // 8-byte Folded Reload
	sub	x3, x20, x26
	mov	x0, xzr
	mul	x3, x3, x16
	mov	x24, x17
	ldr	x22, [x14, #248]
	add	x22, x22, x28
	b	.LBB27_1949
	.p2align	5, , 16
.LBB27_1947:                            //   in Loop: Header=BB27_1949 Depth=5
	ldr	x30, [x19, #248]
	sub	x14, x0, x25
	madd	x14, x14, x15, x30
	add	x30, x3, x7
	add	x30, x30, x4
	add	x30, x14, x30
.LBB27_1948:                            //   in Loop: Header=BB27_1949 Depth=5
	ldrh	w14, [x30]
	add	x0, x0, #1
	add	x24, x24, x12
	strh	w14, [x22]
	add	x22, x22, x5
	cmp	x1, x0
	b.eq	.LBB27_1944
.LBB27_1949:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1939 Depth=2
                                        //       Parent Loop BB27_1942 Depth=3
                                        //         Parent Loop BB27_1945 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	cmp	x8, x0
	b.le	.LBB27_1947
// %bb.1950:                            //   in Loop: Header=BB27_1949 Depth=5
	cmp	x9, x20
	b.le	.LBB27_1947
// %bb.1951:                            //   in Loop: Header=BB27_1949 Depth=5
	cmp	x10, x21
	b.le	.LBB27_1947
// %bb.1952:                            //   in Loop: Header=BB27_1949 Depth=5
	cmp	x11, x23
	b.le	.LBB27_1947
// %bb.1953:                            //   in Loop: Header=BB27_1949 Depth=5
	ldr	x14, [sp, #760]                 // 8-byte Folded Reload
	ldr	x30, [x14, #248]
	add	x30, x30, x24
	b	.LBB27_1948
.LBB27_1954:                            //   in Loop: Header=BB27_3 Depth=1
	mov	w9, #1                          // =0x1
	movk	w9, #1024, lsl #16
	tst	w8, w9
	b.eq	.LBB27_2790
// %bb.1955:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [sp, #784]
	cbnz	w8, .LBB27_7
// %bb.1956:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x21
	mov	x1, x19
	bl	ggml_can_repeat
	tbz	w0, #0, .LBB27_2791
// %bb.1957:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB27_2792
// %bb.1958:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x21, #48]
	cmp	x8, #4
	b.ne	.LBB27_2793
// %bb.1959:                            // %.preheader108.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x21, #40]
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	ldr	x8, [x19, #40]
	sdiv	x8, x8, x9
	cmp	w8, #1
	b.lt	.LBB27_7
// %bb.1960:                            // %.preheader107.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x15, [sp, #768]                 // 8-byte Folded Reload
	and	x8, x8, #0x7fffffff
	str	xzr, [sp, #576]                 // 8-byte Folded Spill
	ldr	x16, [x21, #32]
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	str	xzr, [sp, #560]                 // 8-byte Folded Spill
	ldp	x11, x12, [x21, #16]
	ldr	x13, [x15, #32]
	ldp	x9, x10, [x15, #16]
	and	x24, x11, #0x7
	lsl	x4, x11, #2
	str	x16, [sp, #720]                 // 8-byte Folded Spill
	sdiv	x8, x13, x16
	ldp	x14, x17, [x21, #56]
	str	x17, [sp, #712]                 // 8-byte Folded Spill
	ldr	x17, [x21, #72]
	str	x17, [sp, #600]                 // 8-byte Folded Spill
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	sdiv	x10, x10, x12
	and	x8, x8, #0x7fffffff
	str	x10, [sp, #696]                 // 8-byte Folded Spill
	ldp	x17, x0, [x15, #56]
	ldr	x15, [x15, #72]
	str	x15, [sp, #592]                 // 8-byte Folded Spill
	str	x0, [sp, #704]                  // 8-byte Folded Spill
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	and	x8, x10, #0x7fffffff
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	mul	x30, x12, x17
	mul	x8, x8, x15
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	mul	x8, x16, x0
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	mov	w8, #16                         // =0x10
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	sdiv	x2, x9, x11
	and	x9, x11, #0x7fffffff
	and	x20, x2, #0x7fffffff
	sub	x22, x9, #1
	sub	x25, x24, x9
	b	.LBB27_1962
.LBB27_1961:                            // %._crit_edge119.i.i
                                        //   in Loop: Header=BB27_1962 Depth=2
	ldr	x10, [sp, #544]                 // 8-byte Folded Reload
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	add	x8, x8, x10
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x8, x10
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_1962:                            // %.preheader107.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_1965 Depth 3
                                        //         Child Loop BB27_1968 Depth 4
                                        //           Child Loop BB27_1971 Depth 5
                                        //             Child Loop BB27_1974 Depth 6
                                        //               Child Loop BB27_1977 Depth 7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_1961
// %bb.1963:                            // %.preheader106.lr.ph.i.i
                                        //   in Loop: Header=BB27_1962 Depth=2
	mov	w8, #16                         // =0x10
	mov	x10, xzr
	str	xzr, [sp, #648]                 // 8-byte Folded Spill
	str	x8, [sp, #640]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	b	.LBB27_1965
	.p2align	5, , 16
.LBB27_1964:                            // %._crit_edge117.i.i
                                        //   in Loop: Header=BB27_1965 Depth=3
	ldr	x9, [sp, #592]                  // 8-byte Folded Reload
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x13, [sp, #640]                 // 8-byte Folded Reload
	ldr	x10, [sp, #616]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	add	x13, x13, x8
	str	x13, [sp, #640]                 // 8-byte Folded Spill
	ldr	x13, [sp, #632]                 // 8-byte Folded Reload
	add	x13, x13, x9
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	str	x13, [sp, #632]                 // 8-byte Folded Spill
	add	x9, x9, x8
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB27_1961
.LBB27_1965:                            // %.preheader106.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_1968 Depth 4
                                        //           Child Loop BB27_1971 Depth 5
                                        //             Child Loop BB27_1974 Depth 6
                                        //               Child Loop BB27_1977 Depth 7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	str	x10, [sp, #616]                 // 8-byte Folded Spill
	cmp	w8, #1
	b.lt	.LBB27_1964
// %bb.1966:                            // %.preheader105.lr.ph.i.i
                                        //   in Loop: Header=BB27_1965 Depth=3
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	mov	x9, xzr
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	b	.LBB27_1968
	.p2align	5, , 16
.LBB27_1967:                            // %._crit_edge115.i.i
                                        //   in Loop: Header=BB27_1968 Depth=4
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #680]                 // 8-byte Folded Spill
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_1964
.LBB27_1968:                            // %.preheader105.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_1971 Depth 5
                                        //             Child Loop BB27_1974 Depth 6
                                        //               Child Loop BB27_1977 Depth 7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB27_1967
// %bb.1969:                            // %.preheader104.lr.ph.i.i
                                        //   in Loop: Header=BB27_1968 Depth=4
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	mov	x10, xzr
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	ldr	x23, [sp, #640]                 // 8-byte Folded Reload
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_1971
	.p2align	5, , 16
.LBB27_1970:                            // %._crit_edge113.i.i
                                        //   in Loop: Header=BB27_1971 Depth=5
	ldr	x9, [sp, #704]                  // 8-byte Folded Reload
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	add	x8, x8, x9
	ldr	x13, [sp, #744]                 // 8-byte Folded Reload
	add	x13, x13, x9
	ldr	x9, [sp, #752]                  // 8-byte Folded Reload
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	str	x13, [sp, #744]                 // 8-byte Folded Spill
	add	x23, x23, x8
	add	x9, x9, x8
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB27_1967
.LBB27_1971:                            // %.preheader104.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        //         Parent Loop BB27_1968 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_1974 Depth 6
                                        //               Child Loop BB27_1977 Depth 7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	str	x10, [sp, #728]                 // 8-byte Folded Spill
	cmp	w8, #1
	b.lt	.LBB27_1970
// %bb.1972:                            // %.preheader103.lr.ph.i.i
                                        //   in Loop: Header=BB27_1971 Depth=5
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	mov	x7, xzr
	ldr	x26, [sp, #736]                 // 8-byte Folded Reload
	b	.LBB27_1974
	.p2align	5, , 16
.LBB27_1973:                            // %._crit_edge111.i.i
                                        //   in Loop: Header=BB27_1974 Depth=6
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	add	x7, x7, #1
	add	x26, x26, x30
	add	x8, x8, x30
	cmp	x7, x9
	b.eq	.LBB27_1970
.LBB27_1974:                            // %.preheader103.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        //         Parent Loop BB27_1968 Depth=4
                                        //           Parent Loop BB27_1971 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_1977 Depth 7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	cmp	x12, #1
	b.lt	.LBB27_1973
// %bb.1975:                            // %.preheader.lr.ph.i8.i666
                                        //   in Loop: Header=BB27_1974 Depth=6
	ldr	x5, [sp, #752]                  // 8-byte Folded Reload
	mov	x27, xzr
	mov	x10, x8
	mov	x9, x23
	mov	x28, x26
	b	.LBB27_1977
	.p2align	5, , 16
.LBB27_1976:                            // %._crit_edge.i10.i667
                                        //   in Loop: Header=BB27_1977 Depth=7
	add	x27, x27, #1
	add	x28, x28, x17
	add	x9, x9, x14
	add	x10, x10, x17
	add	x5, x5, x14
	cmp	x27, x12
	b.eq	.LBB27_1973
.LBB27_1977:                            // %.preheader.i9.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        //         Parent Loop BB27_1968 Depth=4
                                        //           Parent Loop BB27_1971 Depth=5
                                        //             Parent Loop BB27_1974 Depth=6
                                        // =>            This Loop Header: Depth=7
                                        //                 Child Loop BB27_1980 Depth 8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	cmp	w2, #1
	b.lt	.LBB27_1976
// %bb.1978:                            // %.lr.ph.i11.i668
                                        //   in Loop: Header=BB27_1977 Depth=7
	ldr	x15, [sp, #768]                 // 8-byte Folded Reload
	mov	x13, xzr
	ldr	x16, [x21, #248]
	add	x19, x16, x9
	ldr	x15, [x15, #248]
	add	x3, x16, x5
	add	x1, x15, x28
	add	x6, x15, x10
	b	.LBB27_1980
	.p2align	5, , 16
.LBB27_1979:                            // %ggml_vec_cpy_f32.exit.i.i670
                                        //   in Loop: Header=BB27_1980 Depth=8
	add	x13, x13, #1
	add	x1, x1, x4
	add	x6, x6, x4
	cmp	x13, x20
	b.eq	.LBB27_1976
.LBB27_1980:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        //         Parent Loop BB27_1968 Depth=4
                                        //           Parent Loop BB27_1971 Depth=5
                                        //             Parent Loop BB27_1974 Depth=6
                                        //               Parent Loop BB27_1977 Depth=7
                                        // =>              This Loop Header: Depth=8
                                        //                   Child Loop BB27_1984 Depth 9
                                        //                   Child Loop BB27_1987 Depth 9
	cmp	w11, #1
	b.lt	.LBB27_1979
// %bb.1981:                            // %.lr.ph.i.i.i673.preheader
                                        //   in Loop: Header=BB27_1980 Depth=8
	cmp	x22, #7
	b.hs	.LBB27_1983
// %bb.1982:                            //   in Loop: Header=BB27_1980 Depth=8
	mov	x0, xzr
	cbnz	x24, .LBB27_1986
	b	.LBB27_1979
	.p2align	5, , 16
.LBB27_1983:                            // %.lr.ph.i.i.i673.preheader1484
                                        //   in Loop: Header=BB27_1980 Depth=8
	mov	x16, xzr
	mov	x0, x19
	mov	x15, x1
	.p2align	5, , 16
.LBB27_1984:                            // %.lr.ph.i.i.i673
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        //         Parent Loop BB27_1968 Depth=4
                                        //           Parent Loop BB27_1971 Depth=5
                                        //             Parent Loop BB27_1974 Depth=6
                                        //               Parent Loop BB27_1977 Depth=7
                                        //                 Parent Loop BB27_1980 Depth=8
                                        // =>                This Inner Loop Header: Depth=9
	ldur	s0, [x0, #-16]
	sub	x16, x16, #8
	stur	s0, [x15, #-16]
	ldur	s0, [x0, #-12]
	stur	s0, [x15, #-12]
	ldur	s0, [x0, #-8]
	stur	s0, [x15, #-8]
	ldur	s0, [x0, #-4]
	stur	s0, [x15, #-4]
	ldr	s0, [x0]
	str	s0, [x15]
	ldr	s0, [x0, #4]
	str	s0, [x15, #4]
	ldr	s0, [x0, #8]
	str	s0, [x15, #8]
	ldr	s0, [x0, #12]
	add	x0, x0, #32
	str	s0, [x15, #12]
	add	x15, x15, #32
	cmp	x25, x16
	b.ne	.LBB27_1984
// %bb.1985:                            // %ggml_vec_cpy_f32.exit.i.i670.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1980 Depth=8
	neg	x0, x16
	cbz	x24, .LBB27_1979
.LBB27_1986:                            // %.lr.ph.i.i.i673.epil.preheader
                                        //   in Loop: Header=BB27_1980 Depth=8
	add	x15, x6, x0, lsl #2
	mov	x16, x24
	add	x0, x3, x0, lsl #2
	.p2align	5, , 16
.LBB27_1987:                            // %.lr.ph.i.i.i673.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1962 Depth=2
                                        //       Parent Loop BB27_1965 Depth=3
                                        //         Parent Loop BB27_1968 Depth=4
                                        //           Parent Loop BB27_1971 Depth=5
                                        //             Parent Loop BB27_1974 Depth=6
                                        //               Parent Loop BB27_1977 Depth=7
                                        //                 Parent Loop BB27_1980 Depth=8
                                        // =>                This Inner Loop Header: Depth=9
	ldr	s0, [x0], #4
	subs	x16, x16, #1
	str	s0, [x15], #4
	b.ne	.LBB27_1987
	b	.LBB27_1979
.LBB27_1988:                            //   in Loop: Header=BB27_3 Depth=1
	str	wzr, [sp, #640]                 // 4-byte Folded Spill
.LBB27_1989:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, w9
	b.ge	.LBB27_7
// %bb.1990:                            // %.lr.ph168.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #768]                 // 8-byte Folded Reload
	sxtw	x10, w26
	sxtw	x16, w8
	ldr	x11, [x19, #248]
	add	x10, x10, #16
	sxtw	x9, w9
	ldr	x14, [x19, #56]
	mul	x8, x10, x21
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	ldr	x9, [sp, #800]
	and	x15, x26, #0x7fffffff
	and	x10, x26, #0x7
	ldr	x12, [x13, #248]
	str	x14, [sp, #720]                 // 8-byte Folded Spill
	nop
	madd	x14, x14, x16, x11
	ldr	x13, [x13, #56]
	and	x17, x26, #0x1
	and	x0, x26, #0x3
	sub	x1, x15, #1
	str	x17, [sp, #632]                 // 8-byte Folded Spill
	sub	x17, x15, x17
	add	x19, x9, x8, lsl #2
	add	x8, x9, x8, lsl #2
	sub	x24, x10, x15
	madd	x27, x13, x16, x12
	str	x15, [sp, #760]                 // 8-byte Folded Spill
	sub	x21, x0, x15
	add	x9, x8, #16
	add	x15, x14, #16
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	add	x9, x8, #4
	add	x8, x8, #8
	str	x17, [sp, #736]                 // 8-byte Folded Spill
	str	x10, [sp, #728]                 // 8-byte Folded Spill
	str	x0, [sp, #768]                  // 8-byte Folded Spill
	str	x9, [sp, #600]                  // 8-byte Folded Spill
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	str	x13, [sp, #712]                 // 8-byte Folded Spill
	add	x28, x27, #8
	add	x22, x27, #4
	str	x1, [sp, #680]                  // 8-byte Folded Spill
	str	x25, [sp, #696]                 // 8-byte Folded Spill
	str	x26, [sp, #688]                 // 8-byte Folded Spill
	b	.LBB27_1992
	.p2align	5, , 16
.LBB27_1991:                            // %ggml_vec_scale_f32.exit159.i.i
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	add	x16, x16, #1
	add	x15, x15, x8
	add	x14, x14, x8
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x28, x28, x8
	add	x27, x27, x8
	add	x22, x22, x8
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	cmp	x16, x8
	b.eq	.LBB27_7
.LBB27_1992:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2003 Depth 3
                                        //       Child Loop BB27_2006 Depth 3
                                        //       Child Loop BB27_2010 Depth 3
                                        //       Child Loop BB27_2014 Depth 3
                                        //       Child Loop BB27_2017 Depth 3
                                        //       Child Loop BB27_2033 Depth 3
                                        //       Child Loop BB27_2037 Depth 3
                                        //       Child Loop BB27_2027 Depth 3
                                        //       Child Loop BB27_2031 Depth 3
                                        //       Child Loop BB27_2042 Depth 3
                                        //       Child Loop BB27_2045 Depth 3
                                        //       Child Loop BB27_2049 Depth 3
                                        //       Child Loop BB27_2052 Depth 3
                                        //       Child Loop BB27_2056 Depth 3
                                        //       Child Loop BB27_2060 Depth 3
                                        //       Child Loop BB27_2063 Depth 3
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	fmov	s0, #1.00000000
	fcmp	s11, #0.0
	sdiv	x23, x16, x8
	b.le	.LBB27_1997
// %bb.1993:                            //   in Loop: Header=BB27_1992 Depth=2
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	str	x28, [sp, #672]                 // 8-byte Folded Spill
	mov	x28, x24
	mov	x24, x15
	mov	x26, x14
	mov	x25, x16
	sdiv	x8, x23, x9
	msub	w8, w8, w9, w23
	ldr	w9, [sp, #616]                  // 4-byte Folded Reload
	subs	w9, w8, w9
	b.hs	.LBB27_1995
// %bb.1994:                            //   in Loop: Header=BB27_1992 Depth=2
	add	w8, w8, #1
	fmov	s0, s8
	b	.LBB27_1996
.LBB27_1995:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	w8, #1                          // =0x1
	fmov	s0, s9
	orr	w8, w8, w9, lsl #1
.LBB27_1996:                            //   in Loop: Header=BB27_1992 Depth=2
	ucvtf	s1, w8
	bl	powf
	mov	x16, x25
	ldr	x1, [sp, #680]                  // 8-byte Folded Reload
	mov	x14, x26
	mov	x15, x24
	mov	x24, x28
	ldr	x28, [sp, #672]                 // 8-byte Folded Reload
	ldr	x25, [sp, #696]                 // 8-byte Folded Reload
	ldr	x26, [sp, #688]                 // 8-byte Folded Reload
.LBB27_1997:                            //   in Loop: Header=BB27_1992 Depth=2
	cbz	x25, .LBB27_1999
// %bb.1998:                            //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	nop
	msub	x8, x23, x8, x16
	ldr	x9, [x25, #248]
	mul	x10, x8, x26
	add	x8, x9, x10, lsl #1
	add	x9, x9, x10, lsl #2
	cmp	w26, #1
	b.ge	.LBB27_2000
	b	.LBB27_2018
.LBB27_1999:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	x8, xzr
	mov	x9, xzr
	cmp	w26, #1
	b.lt	.LBB27_2018
.LBB27_2000:                            // %.lr.ph.i.i.i384.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	x1, #7
	b.hs	.LBB27_2002
// %bb.2001:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	x12, xzr
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cbnz	x10, .LBB27_2005
	b	.LBB27_2007
.LBB27_2002:                            // %.lr.ph.i.i.i384.preheader1546
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x12, [sp, #608]                 // 8-byte Folded Reload
	mov	x10, xzr
	mov	x11, x15
	.p2align	5, , 16
.LBB27_2003:                            // %.lr.ph.i.i.i384
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s1, [x11, #-16]
	sub	x10, x10, #8
	stur	s1, [x12, #-16]
	ldur	s1, [x11, #-12]
	stur	s1, [x12, #-12]
	ldur	s1, [x11, #-8]
	stur	s1, [x12, #-8]
	ldur	s1, [x11, #-4]
	stur	s1, [x12, #-4]
	ldr	s1, [x11]
	str	s1, [x12]
	ldr	s1, [x11, #4]
	str	s1, [x12, #4]
	ldr	s1, [x11, #8]
	str	s1, [x12, #8]
	ldr	s1, [x11, #12]
	add	x11, x11, #32
	str	s1, [x12, #12]
	add	x12, x12, #32
	cmp	x24, x10
	b.ne	.LBB27_2003
// %bb.2004:                            // %.lr.ph.i137.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	neg	x12, x10
	ldr	x10, [sp, #728]                 // 8-byte Folded Reload
	cbz	x10, .LBB27_2007
.LBB27_2005:                            // %.lr.ph.i.i.i384.epil.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	add	x10, x10, x12, lsl #2
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	add	x12, x14, x12, lsl #2
	.p2align	5, , 16
.LBB27_2006:                            // %.lr.ph.i.i.i384.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x12], #4
	subs	x11, x11, #1
	str	s1, [x10], #4
	b.ne	.LBB27_2006
.LBB27_2007:                            // %.lr.ph.i137.i.i.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	cmp	x10, #2
	b.hs	.LBB27_2009
// %bb.2008:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	x10, xzr
	b	.LBB27_2012
.LBB27_2009:                            // %vector.body307.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldr	x11, [sp, #600]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2010:                            // %vector.body307
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x11, #-4]
	subs	x10, x10, #2
	fmul	s2, s10, s2
	fmul	s1, s10, s1
	stp	s1, s2, [x11, #-4]
	add	x11, x11, #8
	b.ne	.LBB27_2010
// %bb.2011:                            // %middle.block300
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	ldr	x11, [sp, #632]                 // 8-byte Folded Reload
	cbz	x11, .LBB27_2018
.LBB27_2012:                            // %.lr.ph.i137.i.i.preheader528
                                        //   in Loop: Header=BB27_1992 Depth=2
	sub	w11, w26, w10
	ands	x12, x11, #0x3
	mov	x11, x10
	b.eq	.LBB27_2015
// %bb.2013:                            // %.lr.ph.i137.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	mov	x11, x10
	.p2align	5, , 16
.LBB27_2014:                            // %.lr.ph.i137.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x19, x11, lsl #2]
	subs	x12, x12, #1
	fmul	s1, s10, s1
	str	s1, [x19, x11, lsl #2]
	add	x11, x11, #1
	b.ne	.LBB27_2014
.LBB27_2015:                            // %.lr.ph.i137.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	sub	x10, x1, x10
	cmp	x10, #3
	b.lo	.LBB27_2018
// %bb.2016:                            // %.lr.ph.i137.i.i.preheader1545
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	sub	x10, x10, x11
	ldr	x12, [sp, #648]                 // 8-byte Folded Reload
	add	x11, x12, x11, lsl #2
	.p2align	5, , 16
.LBB27_2017:                            // %.lr.ph.i137.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x11, #-8]
	subs	x10, x10, #4
	ldp	s3, s4, [x11]
	fmul	s2, s10, s2
	fmul	s1, s10, s1
	fmul	s3, s10, s3
	stp	s1, s2, [x11, #-8]
	fmul	s1, s10, s4
	stp	s3, s1, [x11], #16
	b.ne	.LBB27_2017
.LBB27_2018:                            // %ggml_vec_scale_f32.exit.i.i371
                                        //   in Loop: Header=BB27_1992 Depth=2
	cbz	x9, .LBB27_2038
// %bb.2019:                            //   in Loop: Header=BB27_1992 Depth=2
	ldr	w10, [sp, #640]                 // 4-byte Folded Reload
	tbz	w10, #0, .LBB27_2023
// %bb.2020:                            // %.preheader.i.i381
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	w26, #1
	b.lt	.LBB27_1991
// %bb.2021:                            // %.lr.ph166.i.i.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	x1, #3
	b.hs	.LBB27_2026
// %bb.2022:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	x11, xzr
	b	.LBB27_2029
.LBB27_2023:                            // %.preheader162.i.i
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	w26, #1
	b.lt	.LBB27_1991
// %bb.2024:                            // %.lr.ph.i.i372.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	x1, #3
	b.hs	.LBB27_2032
// %bb.2025:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	x11, xzr
	b	.LBB27_2035
.LBB27_2026:                            // %.lr.ph166.i.i.preheader1542
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x11, [sp, #648]                 // 8-byte Folded Reload
	mov	x9, xzr
	add	x10, x8, #4
	.p2align	5, , 16
.LBB27_2027:                            // %.lr.ph166.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldurh	w12, [x10, #-4]
	sub	x9, x9, #4
	ldr	s1, [x20, x12, lsl #2]
	ldp	s2, s3, [x11, #-8]
	fmadd	s1, s0, s1, s2
	stur	s1, [x11, #-8]
	ldurh	w12, [x10, #-2]
	ldr	s1, [x20, x12, lsl #2]
	fmadd	s1, s0, s1, s3
	ldp	s2, s3, [x11]
	stur	s1, [x11, #-4]
	ldrh	w12, [x10]
	ldr	s1, [x20, x12, lsl #2]
	fmadd	s1, s0, s1, s2
	str	s1, [x11]
	ldrh	w12, [x10, #2]
	add	x10, x10, #8
	ldr	s1, [x20, x12, lsl #2]
	fmadd	s1, s0, s1, s3
	str	s1, [x11, #4]
	add	x11, x11, #16
	cmp	x21, x9
	b.ne	.LBB27_2027
// %bb.2028:                            // %.loopexit.i.i376.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	neg	x11, x9
.LBB27_2029:                            // %.loopexit.i.i376.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_2038
// %bb.2030:                            // %.lr.ph166.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	add	x8, x8, x11, lsl #1
	add	x9, x9, x11, lsl #2
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2031:                            // %.lr.ph166.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w11, [x8], #2
	subs	x10, x10, #1
	ldr	s1, [x9]
	ldr	s2, [x20, x11, lsl #2]
	fmadd	s1, s0, s2, s1
	str	s1, [x9], #4
	b.ne	.LBB27_2031
	b	.LBB27_2038
.LBB27_2032:                            // %.lr.ph.i.i372.preheader1544
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x11, [sp, #648]                 // 8-byte Folded Reload
	mov	x8, xzr
	add	x10, x9, #8
	.p2align	5, , 16
.LBB27_2033:                            // %.lr.ph.i.i372
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s1, [x10, #-8]
	sub	x8, x8, #4
	ldp	s2, s3, [x11, #-8]
	fmadd	s1, s0, s1, s2
	stur	s1, [x11, #-8]
	ldur	s1, [x10, #-4]
	fmadd	s1, s0, s1, s3
	ldp	s2, s3, [x11]
	stur	s1, [x11, #-4]
	ldr	s1, [x10]
	fmadd	s1, s0, s1, s2
	str	s1, [x11]
	ldr	s1, [x10, #4]
	add	x10, x10, #16
	fmadd	s1, s0, s1, s3
	str	s1, [x11, #4]
	add	x11, x11, #16
	cmp	x21, x8
	b.ne	.LBB27_2033
// %bb.2034:                            // %.loopexit.i.i376.loopexit527.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	neg	x11, x8
.LBB27_2035:                            // %.loopexit.i.i376.loopexit527.unr-lcssa
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_2038
// %bb.2036:                            // %.lr.ph.i.i372.epil.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	add	x9, x9, x11, lsl #2
	add	x8, x8, x11, lsl #2
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2037:                            // %.lr.ph.i.i372.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x8]
	subs	x10, x10, #1
	ldr	s2, [x9], #4
	fmadd	s1, s0, s2, s1
	str	s1, [x8], #4
	b.ne	.LBB27_2037
	.p2align	5, , 16
.LBB27_2038:                            // %.loopexit.i.i376
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	w26, #1
	b.lt	.LBB27_1991
// %bb.2039:                            // %.lr.ph.i143.i.i.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	cmp	x1, #3
	b.hs	.LBB27_2041
// %bb.2040:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	w9, #-8388608                   // =0xff800000
	mov	x8, xzr
	fmov	s12, w9
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	cbnz	x9, .LBB27_2044
	b	.LBB27_2046
.LBB27_2041:                            // %.lr.ph.i143.i.i.preheader1541
                                        //   in Loop: Header=BB27_1992 Depth=2
	mov	w9, #-8388608                   // =0xff800000
	mov	x8, xzr
	fmov	s12, w9
	ldr	x9, [sp, #648]                  // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2042:                            // %.lr.ph.i143.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s0, s1, [x9, #-8]
	sub	x8, x8, #4
	fcmp	s12, s0
	fcsel	s0, s12, s0, gt
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	ldp	s1, s2, [x9], #16
	fcmp	s0, s1
	fcsel	s0, s0, s1, gt
	fcmp	s0, s2
	fcsel	s12, s0, s2, gt
	cmp	x21, x8
	b.ne	.LBB27_2042
// %bb.2043:                            // %.lr.ph.i149.i.i.preheader.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	neg	x8, x8
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_2046
.LBB27_2044:                            // %.lr.ph.i143.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	add	x8, x9, x8, lsl #2
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2045:                            // %.lr.ph.i143.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x8], #4
	fcmp	s12, s0
	fcsel	s12, s12, s0, gt
	subs	x9, x9, #1
	b.ne	.LBB27_2045
.LBB27_2046:                            // %.lr.ph.i149.i.i.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	str	x16, [sp, #672]                 // 8-byte Folded Spill
	str	x14, [sp, #664]                 // 8-byte Folded Spill
	str	x15, [sp, #656]                 // 8-byte Folded Spill
	cmp	x1, #3
	b.hs	.LBB27_2048
// %bb.2047:                            //   in Loop: Header=BB27_1992 Depth=2
	mov	x8, xzr
	fmov	d13, xzr
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	cbnz	x9, .LBB27_2051
	b	.LBB27_2053
.LBB27_2048:                            // %.lr.ph.i149.i.i.preheader1540
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x26, [sp, #648]                 // 8-byte Folded Reload
	fmov	d13, xzr
	mov	x25, xzr
	mov	x23, x28
	.p2align	5, , 16
.LBB27_2049:                            // %.lr.ph.i149.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x26, #-8]
	fsub	s0, s0, s12
	bl	expf
	stur	s0, [x23, #-8]
	fcvt	d1, s0
	ldur	s0, [x26, #-4]
	fadd	d13, d13, d1
	fsub	s0, s0, s12
	bl	expf
	stur	s0, [x23, #-4]
	fcvt	d1, s0
	ldr	s0, [x26]
	fadd	d13, d13, d1
	fsub	s0, s0, s12
	bl	expf
	str	s0, [x23]
	fcvt	d1, s0
	ldr	s0, [x26, #4]
	fadd	d13, d13, d1
	fsub	s0, s0, s12
	bl	expf
	fcvt	d1, s0
	sub	x25, x25, #4
	add	x26, x26, #16
	str	s0, [x23, #4]
	add	x23, x23, #16
	fadd	d13, d13, d1
	cmp	x21, x25
	b.ne	.LBB27_2049
// %bb.2050:                            // %ggml_vec_soft_max_f32.exit.i.i380.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	neg	x8, x25
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_2053
.LBB27_2051:                            // %.lr.ph.i149.i.i.epil.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	add	x23, x27, x8, lsl #2
	add	x26, x9, x8, lsl #2
	ldr	x25, [sp, #768]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2052:                            // %.lr.ph.i149.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x26], #4
	fsub	s0, s0, s12
	bl	expf
	str	s0, [x23], #4
	fcvt	d0, s0
	subs	x25, x25, #1
	fadd	d13, d13, d0
	b.ne	.LBB27_2052
.LBB27_2053:                            // %ggml_vec_soft_max_f32.exit.i.i380
                                        //   in Loop: Header=BB27_1992 Depth=2
	fmov	d0, #1.00000000
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	fdiv	d0, d0, d13
	fcvt	s0, d0
	cmp	x8, #2
	b.hs	.LBB27_2055
// %bb.2054:                            //   in Loop: Header=BB27_1992 Depth=2
	ldr	x25, [sp, #696]                 // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x26, [sp, #688]                 // 8-byte Folded Reload
	ldr	x16, [sp, #672]                 // 8-byte Folded Reload
	ldr	x1, [sp, #680]                  // 8-byte Folded Reload
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	ldr	x15, [sp, #656]                 // 8-byte Folded Reload
	b	.LBB27_2058
.LBB27_2055:                            // %vector.body296.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	mov	x9, x22
	ldr	x25, [sp, #696]                 // 8-byte Folded Reload
	ldr	x26, [sp, #688]                 // 8-byte Folded Reload
	ldr	x16, [sp, #672]                 // 8-byte Folded Reload
	ldr	x1, [sp, #680]                  // 8-byte Folded Reload
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	ldr	x15, [sp, #656]                 // 8-byte Folded Reload
	.p2align	5, , 16
.LBB27_2056:                            // %vector.body296
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	s1, s2, [x9, #-4]
	subs	x8, x8, #2
	fmul	s2, s2, s0
	fmul	s1, s1, s0
	stp	s1, s2, [x9, #-4]
	add	x9, x9, #8
	b.ne	.LBB27_2056
// %bb.2057:                            // %middle.block289
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	cbz	x9, .LBB27_1991
.LBB27_2058:                            // %.lr.ph.i155.i.i.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	sub	w9, w26, w8
	ands	x10, x9, #0x3
	mov	x9, x8
	b.eq	.LBB27_2061
// %bb.2059:                            // %.lr.ph.i155.i.i.prol.preheader
                                        //   in Loop: Header=BB27_1992 Depth=2
	mov	x9, x8
	.p2align	5, , 16
.LBB27_2060:                            // %.lr.ph.i155.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x27, x9, lsl #2]
	subs	x10, x10, #1
	fmul	s1, s1, s0
	str	s1, [x27, x9, lsl #2]
	add	x9, x9, #1
	b.ne	.LBB27_2060
.LBB27_2061:                            // %.lr.ph.i155.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x10, [sp, #760]                 // 8-byte Folded Reload
	sub	x8, x8, x10
	cmn	x8, #4
	b.hi	.LBB27_1991
// %bb.2062:                            // %.lr.ph.i155.i.i.preheader.new
                                        //   in Loop: Header=BB27_1992 Depth=2
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	sub	x8, x8, x9
	lsl	x9, x9, #2
	.p2align	5, , 16
.LBB27_2063:                            // %.lr.ph.i155.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_1992 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x10, x28, x9
	subs	x8, x8, #4
	ldur	s1, [x10, #-8]
	fmul	s1, s1, s0
	stur	s1, [x10, #-8]
	ldr	s1, [x22, x9]
	fmul	s1, s1, s0
	str	s1, [x22, x9]
	add	x9, x9, #16
	ldp	s1, s2, [x10]
	fmul	s2, s2, s0
	fmul	s1, s1, s0
	stp	s1, s2, [x10]
	b.ne	.LBB27_2063
	b	.LBB27_1991
.LBB27_2064:                            // %._crit_edge226.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x5, [sp, #632]                  // 8-byte Folded Reload
	ldr	w23, [sp, #600]                 // 4-byte Folded Reload
	ldr	w26, [sp, #592]                 // 4-byte Folded Reload
	ldr	x6, [sp, #584]                  // 8-byte Folded Reload
	ldr	x7, [sp, #576]                  // 8-byte Folded Reload
	ldr	x19, [sp, #568]                 // 8-byte Folded Reload
	cmp	x5, #1
	b.lt	.LBB27_2077
// %bb.2065:                            // %.preheader213.lr.ph.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #624]                 // 8-byte Folded Reload
	mov	x8, xzr
	mov	x9, xzr
	ldr	x11, [sp, #616]                 // 8-byte Folded Reload
	add	x10, x11, x10, asr #31
	lsl	x11, x5, #1
	mul	x12, x11, x25
	b	.LBB27_2067
.LBB27_2066:                            // %._crit_edge236.i
                                        //   in Loop: Header=BB27_2067 Depth=2
	add	x9, x9, #1
	add	x10, x10, #2
	add	x8, x8, x19
	cmp	x9, x5
	b.eq	.LBB27_2077
.LBB27_2067:                            // %.preheader213.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2070 Depth 3
                                        //         Child Loop BB27_2071 Depth 4
	ldr	x13, [sp, #760]                 // 8-byte Folded Reload
	cmp	x13, #1
	b.lt	.LBB27_2066
// %bb.2068:                            // %.lr.ph235.i
                                        //   in Loop: Header=BB27_2067 Depth=2
	ldr	x14, [x6, #248]
	mov	x13, xzr
	mov	x15, x10
	add	x14, x14, x8
	b	.LBB27_2070
	.p2align	5, , 16
.LBB27_2069:                            // %._crit_edge231.i
                                        //   in Loop: Header=BB27_2070 Depth=3
	ldr	x16, [sp, #760]                 // 8-byte Folded Reload
	add	x13, x13, #1
	add	x15, x15, x12
	add	x14, x14, x7
	cmp	x13, x16
	b.eq	.LBB27_2066
.LBB27_2070:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2067 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2071 Depth 4
	mov	x16, x14
	mov	x17, x15
	mov	x0, x25
	cmp	x25, #1
	b.lt	.LBB27_2069
	.p2align	5, , 16
.LBB27_2071:                            // %.lr.ph230.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2067 Depth=2
                                        //       Parent Loop BB27_2070 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	mov	w1, #2004877312                 // =0x77800000
	ldr	s0, [x16], #4
	fmov	s2, w1
	fabs	s1, s0
	mov	w1, #142606336                  // =0x8800000
	mov	w4, #125829120                  // =0x7800000
	fmul	s1, s1, s2
	fmov	s2, w1
	fmov	w1, s0
	and	w3, w1, #0x7f800000
	fmul	s1, s1, s2
	lsl	w2, w1, #1
	add	w3, w3, w4
	ubfx	w4, w1, #23, #8
	lsr	w1, w1, #31
	cmp	w4, #113
	mov	w4, #1073741824                 // =0x40000000
	csel	w3, w4, w3, lo
	fmov	s0, w3
	fadd	s0, s1, s0
	fmov	w3, s0
	lsr	w4, w3, #13
	and	w3, w3, #0xfff
	and	w4, w4, #0x7c00
	add	w3, w4, w3
	mov	w4, #-16777216                  // =0xff000000
	cmp	w2, w4
	mov	w2, #32256                      // =0x7e00
	csel	w2, w2, w3, hi
	subs	x0, x0, #1
	orr	w1, w2, w1, lsl #15
	strh	w1, [x17]
	add	x17, x17, x11
	b.ne	.LBB27_2071
	b	.LBB27_2069
.LBB27_2072:                            // %.critedge.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2074
// %bb.2073:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_2074:                            // %ggml_barrier.exit129.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x17, [sp, #680]                 // 8-byte Folded Reload
	ldr	x16, [sp, #768]                 // 8-byte Folded Reload
	cmp	w17, #2
	b.lt	.LBB27_2407
// %bb.2075:                            // %.lr.ph140.preheader.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	w17, #2
	b.ne	.LBB27_2320
// %bb.2076:                            //   in Loop: Header=BB27_3 Depth=1
	mov	w8, #1                          // =0x1
	b	.LBB27_2323
.LBB27_2077:                            // %._crit_edge238.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x0, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x19
	mov	w1, wzr
	bl	memset
	ldr	x19, [sp, #608]                 // 8-byte Folded Reload
.LBB27_2078:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2080
// %bb.2079:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_2080:                            // %ggml_barrier.exit.i
                                        //   in Loop: Header=BB27_3 Depth=1
	add	w8, w19, w26
	sub	w8, w8, #1
	sdiv	w9, w8, w26
	mul	w8, w9, w23
	add	w9, w8, w9
	cmp	w9, w19
	csel	w9, w9, w19, lt
	str	w9, [sp, #744]                  // 4-byte Folded Spill
	cmp	w8, w9
	b.ge	.LBB27_7
// %bb.2081:                            // %.lr.ph256.i
                                        //   in Loop: Header=BB27_3 Depth=1
	lsl	x14, x24, #1
	ldr	x12, [sp, #800]
	sxtw	x8, w8
	mul	x15, x14, x21
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	and	x16, x24, #0x7fffffff
	add	x9, x12, x9, asr #31
	ldr	x11, [sp, #632]                 // 8-byte Folded Reload
	ldrsw	x10, [x10, #84]
	lsl	x11, x11, #32
	mul	x13, x15, x22
	madd	x8, x13, x8, x12
	str	x13, [sp, #736]                 // 8-byte Folded Spill
	b	.LBB27_2083
	.p2align	5, , 16
.LBB27_2082:                            // %._crit_edge253.i
                                        //   in Loop: Header=BB27_2083 Depth=2
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	add	x8, x8, x12
	ldr	x13, [sp, #752]                 // 8-byte Folded Reload
	ldr	w12, [sp, #744]                 // 4-byte Folded Reload
	add	x13, x13, #1
	str	x13, [sp, #752]                 // 8-byte Folded Spill
	cmp	w12, w13
	b.eq	.LBB27_7
.LBB27_2083:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2086 Depth 3
                                        //         Child Loop BB27_2089 Depth 4
                                        //           Child Loop BB27_2092 Depth 5
                                        //             Child Loop BB27_2096 Depth 6
                                        //               Child Loop BB27_2098 Depth 7
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	cmp	x12, #1
	b.lt	.LBB27_2082
// %bb.2084:                            // %.preheader212.i.preheader
                                        //   in Loop: Header=BB27_2083 Depth=2
	ldr	x13, [sp, #656]                 // 8-byte Folded Reload
	mov	x0, xzr
	ldr	x17, [sp, #752]                 // 8-byte Folded Reload
	mul	x17, x17, x13
	ldr	x12, [sp, #768]                 // 8-byte Folded Reload
	ldr	x12, [x12, #248]
	add	x1, x12, x17
	b	.LBB27_2086
	.p2align	5, , 16
.LBB27_2085:                            // %._crit_edge251.i
                                        //   in Loop: Header=BB27_2086 Depth=3
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	add	x0, x0, #1
	cmp	x0, x12
	b.eq	.LBB27_2082
.LBB27_2086:                            // %.preheader212.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2083 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2089 Depth 4
                                        //           Child Loop BB27_2092 Depth 5
                                        //             Child Loop BB27_2096 Depth 6
                                        //               Child Loop BB27_2098 Depth 7
	cmp	x25, #1
	b.lt	.LBB27_2085
// %bb.2087:                            // %.lr.ph250.i
                                        //   in Loop: Header=BB27_2086 Depth=3
	mul	x3, x0, x25
	mov	x2, xzr
	mul	x4, x0, x10
	b	.LBB27_2089
	.p2align	5, , 16
.LBB27_2088:                            // %._crit_edge247.i
                                        //   in Loop: Header=BB27_2089 Depth=4
	add	x2, x2, #1
	cmp	x2, x25
	b.eq	.LBB27_2085
.LBB27_2089:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2083 Depth=2
                                        //       Parent Loop BB27_2086 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2092 Depth 5
                                        //             Child Loop BB27_2096 Depth 6
                                        //               Child Loop BB27_2098 Depth 7
	cmp	x22, #1
	b.lt	.LBB27_2088
// %bb.2090:                            // %.preheader.lr.ph.i268
                                        //   in Loop: Header=BB27_2089 Depth=4
	add	x12, x2, x3
	mov	x5, xzr
	mul	x12, x11, x12
	mov	x17, x8
	add	x6, x9, x12, asr #31
	mul	x12, x2, x10
	add	x7, x1, x12, lsl #2
	b	.LBB27_2092
	.p2align	5, , 16
.LBB27_2091:                            // %._crit_edge243.i
                                        //   in Loop: Header=BB27_2092 Depth=5
	add	x5, x5, #1
	add	x17, x17, x15
	cmp	x5, x22
	b.eq	.LBB27_2088
.LBB27_2092:                            // %.preheader.i270
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2083 Depth=2
                                        //       Parent Loop BB27_2086 Depth=3
                                        //         Parent Loop BB27_2089 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_2096 Depth 6
                                        //               Child Loop BB27_2098 Depth 7
	cmp	x21, #1
	b.lt	.LBB27_2091
// %bb.2093:                            // %.lr.ph242.i
                                        //   in Loop: Header=BB27_2092 Depth=5
	add	x12, x5, x4
	mov	x23, xzr
	mul	x12, x12, x27
	mov	x19, x17
	add	x26, x7, x12, lsl #2
	b	.LBB27_2096
	.p2align	5, , 16
.LBB27_2094:                            //   in Loop: Header=BB27_2096 Depth=6
	fmov	s0, wzr
.LBB27_2095:                            // %ggml_vec_dot_f16.exit.i
                                        //   in Loop: Header=BB27_2096 Depth=6
	ldr	s1, [x26, x23, lsl #2]
	add	x19, x19, x14
	fadd	s0, s0, s1
	str	s0, [x26, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x21
	b.eq	.LBB27_2091
.LBB27_2096:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2083 Depth=2
                                        //       Parent Loop BB27_2086 Depth=3
                                        //         Parent Loop BB27_2089 Depth=4
                                        //           Parent Loop BB27_2092 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_2098 Depth 7
	cmp	w24, #1
	b.lt	.LBB27_2094
// %bb.2097:                            // %.lr.ph.i.i271.preheader
                                        //   in Loop: Header=BB27_2096 Depth=6
	fmov	d0, xzr
	mov	x30, x6
	mov	x28, x19
	mov	x12, x16
	.p2align	5, , 16
.LBB27_2098:                            // %.lr.ph.i.i271
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2083 Depth=2
                                        //       Parent Loop BB27_2086 Depth=3
                                        //         Parent Loop BB27_2089 Depth=4
                                        //           Parent Loop BB27_2092 Depth=5
                                        //             Parent Loop BB27_2096 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	//APP
	// loop body
	//NO_APP
	ldrh	w13, [x30], #2
	subs	x12, x12, #1
	ldr	s1, [x20, x13, lsl #2]
	ldrh	w13, [x28], #2
	ldr	s2, [x20, x13, lsl #2]
	//APP
	// loop body end
	//NO_APP
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_2098
// %bb.2099:                            // %._crit_edge.loopexit.i.i275
                                        //   in Loop: Header=BB27_2096 Depth=6
	fcvt	s0, d0
	b	.LBB27_2095
.LBB27_2100:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x2, [sp, #528]                  // 8-byte Folded Reload
	mov	x0, x26
	mov	w1, wzr
	bl	memset
	ldr	x12, [x19, #24]
	cmp	x12, #1
	b.lt	.LBB27_1909
// %bb.2101:                            // %.preheader.lr.ph.i485
                                        //   in Loop: Header=BB27_3 Depth=1
	and	x9, x20, #0x7fffffff
	and	x10, x20, #0x1
	mov	x8, xzr
	sub	x11, x9, x10
	b	.LBB27_2104
.LBB27_2102:                            // %._crit_edge292.loopexit.i
                                        //   in Loop: Header=BB27_2104 Depth=2
	ldr	x12, [x19, #24]
.LBB27_2103:                            // %._crit_edge292.i
                                        //   in Loop: Header=BB27_2104 Depth=2
	add	x8, x8, #1
	cmp	x8, x12
	b.ge	.LBB27_1909
.LBB27_2104:                            // %.preheader.i487
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2108 Depth 3
	cmp	w20, #1
	b.lt	.LBB27_2103
// %bb.2105:                            // %.lr.ph291.i
                                        //   in Loop: Header=BB27_2104 Depth=2
	ldr	x13, [x19, #248]
	cmp	x9, #1
	b.ne	.LBB27_2107
// %bb.2106:                            //   in Loop: Header=BB27_2104 Depth=2
	mov	x12, xzr
	b	.LBB27_2109
.LBB27_2107:                            // %.lr.ph291.i.new.preheader
                                        //   in Loop: Header=BB27_2104 Depth=2
	mov	x12, xzr
	.p2align	5, , 16
.LBB27_2108:                            // %.lr.ph291.i.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2104 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	x15, x14, [x19, #48]
	nop
	madd	x14, x14, x8, x13
	mul	x15, x15, x12
	ldrsw	x14, [x14, x15]
	ldp	x15, x16, [x19, #16]
	mul	x15, x15, x14
	mul	x15, x15, x16
	ldr	x16, [x26, x14, lsl #3]
	add	x15, x28, x15, lsl #3
	add	x15, x15, x16, lsl #3
	add	x16, x16, #1
	stp	w12, w8, [x15]
	str	x16, [x26, x14, lsl #3]
	add	x16, x12, #1
	add	x12, x12, #2
	ldp	x15, x14, [x19, #48]
	nop
	madd	x14, x14, x8, x13
	mul	x15, x15, x16
	ldrsw	x14, [x14, x15]
	ldp	x15, x17, [x19, #16]
	mul	x15, x15, x14
	mul	x15, x15, x17
	ldr	x17, [x26, x14, lsl #3]
	add	x15, x28, x15, lsl #3
	add	x15, x15, x17, lsl #3
	add	x17, x17, #1
	stp	w16, w8, [x15]
	str	x17, [x26, x14, lsl #3]
	cmp	x12, x11
	b.ne	.LBB27_2108
.LBB27_2109:                            // %._crit_edge292.loopexit.i.unr-lcssa
                                        //   in Loop: Header=BB27_2104 Depth=2
	cbz	x10, .LBB27_2102
// %bb.2110:                            // %._crit_edge292.loopexit.i.epilog-lcssa
                                        //   in Loop: Header=BB27_2104 Depth=2
	ldp	x15, x14, [x19, #48]
	nop
	madd	x13, x14, x8, x13
	mul	x14, x15, x12
	ldrsw	x13, [x13, x14]
	ldp	x14, x15, [x19, #16]
	mul	x14, x14, x13
	mul	x14, x14, x15
	ldr	x15, [x26, x13, lsl #3]
	add	x14, x28, x14, lsl #3
	add	x14, x14, x15, lsl #3
	stp	w12, w8, [x14]
	add	x12, x15, #1
	str	x12, [x26, x13, lsl #3]
	b	.LBB27_2102
.LBB27_2111:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [sp, #784]
	cbnz	w9, .LBB27_7
// %bb.2112:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #40]
	cmp	x9, #1
	b.lt	.LBB27_2410
// %bb.2113:                            // %.preheader40.lr.ph.i42.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x17, [x8, #16]
	fmov	s0, wzr
	mov	x10, xzr
	ldp	x16, x12, [x8, #24]
	mov	x11, xzr
	ldp	x13, x14, [x8, #56]
	mov	w3, #4                          // =0x4
	ldr	x15, [x8, #72]
	and	x2, x17, #0x7fffffff
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	and	x0, x17, #0x3
	sub	x1, x2, #1
	sub	x2, x0, x2
	b	.LBB27_2115
.LBB27_2114:                            // %._crit_edge47.i47.i
                                        //   in Loop: Header=BB27_2115 Depth=2
	add	x11, x11, #1
	add	x3, x3, x15
	add	x10, x10, x15
	cmp	x11, x9
	b.eq	.LBB27_2411
.LBB27_2115:                            // %.preheader40.i44.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2118 Depth 3
                                        //         Child Loop BB27_2122 Depth 4
                                        //           Child Loop BB27_2126 Depth 5
                                        //           Child Loop BB27_2129 Depth 5
	cmp	x12, #1
	b.lt	.LBB27_2114
// %bb.2116:                            // %.preheader.lr.ph.i50.i
                                        //   in Loop: Header=BB27_2115 Depth=2
	mov	x4, xzr
	mov	x5, x10
	mov	x6, x3
	b	.LBB27_2118
	.p2align	5, , 16
.LBB27_2117:                            // %._crit_edge.i54.i757
                                        //   in Loop: Header=BB27_2118 Depth=3
	add	x4, x4, #1
	add	x6, x6, x14
	add	x5, x5, x14
	cmp	x4, x12
	b.eq	.LBB27_2114
.LBB27_2118:                            // %.preheader.i51.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2115 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2122 Depth 4
                                        //           Child Loop BB27_2126 Depth 5
                                        //           Child Loop BB27_2129 Depth 5
	cmp	x16, #1
	b.lt	.LBB27_2117
// %bb.2119:                            // %.lr.ph.i57.i
                                        //   in Loop: Header=BB27_2118 Depth=3
	ldr	x20, [x8, #248]
	mov	x7, xzr
	add	x19, x20, x6
	add	x20, x20, x5
	b	.LBB27_2122
	.p2align	5, , 16
.LBB27_2120:                            //   in Loop: Header=BB27_2122 Depth=4
	fmov	s1, wzr
.LBB27_2121:                            // %ggml_vec_sum_bf16_ggf.exit.i.i
                                        //   in Loop: Header=BB27_2122 Depth=4
	fadd	s0, s0, s1
	add	x7, x7, #1
	add	x19, x19, x13
	add	x20, x20, x13
	cmp	x7, x16
	b.eq	.LBB27_2117
.LBB27_2122:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2115 Depth=2
                                        //       Parent Loop BB27_2118 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2126 Depth 5
                                        //           Child Loop BB27_2129 Depth 5
	cmp	w17, #1
	b.lt	.LBB27_2120
// %bb.2123:                            // %.lr.ph.i.i65.i.preheader
                                        //   in Loop: Header=BB27_2122 Depth=4
	cmp	x1, #3
	b.hs	.LBB27_2125
// %bb.2124:                            //   in Loop: Header=BB27_2122 Depth=4
	mov	x21, xzr
	fmov	s1, wzr
	cbnz	x0, .LBB27_2128
	b	.LBB27_2121
	.p2align	5, , 16
.LBB27_2125:                            // %.lr.ph.i.i65.i.preheader1497
                                        //   in Loop: Header=BB27_2122 Depth=4
	fmov	s1, wzr
	mov	x21, xzr
	mov	x22, x19
	.p2align	5, , 16
.LBB27_2126:                            // %.lr.ph.i.i65.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2115 Depth=2
                                        //       Parent Loop BB27_2118 Depth=3
                                        //         Parent Loop BB27_2122 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldurh	w23, [x22, #-4]
	sub	x21, x21, #4
	lsl	w23, w23, #16
	fmov	s2, w23
	ldurh	w23, [x22, #-2]
	lsl	w23, w23, #16
	fadd	s1, s1, s2
	fmov	s2, w23
	ldrh	w23, [x22]
	lsl	w23, w23, #16
	fadd	s1, s1, s2
	fmov	s2, w23
	ldrh	w23, [x22, #2]
	add	x22, x22, #8
	lsl	w23, w23, #16
	fadd	s1, s1, s2
	fmov	s2, w23
	fadd	s1, s1, s2
	cmp	x2, x21
	b.ne	.LBB27_2126
// %bb.2127:                            // %ggml_vec_sum_bf16_ggf.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2122 Depth=4
	neg	x21, x21
	cbz	x0, .LBB27_2121
.LBB27_2128:                            // %.lr.ph.i.i65.i.epil.preheader
                                        //   in Loop: Header=BB27_2122 Depth=4
	add	x21, x20, x21, lsl #1
	mov	x22, x0
	.p2align	5, , 16
.LBB27_2129:                            // %.lr.ph.i.i65.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2115 Depth=2
                                        //       Parent Loop BB27_2118 Depth=3
                                        //         Parent Loop BB27_2122 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldrh	w23, [x21], #2
	subs	x22, x22, #1
	lsl	w23, w23, #16
	fmov	s2, w23
	fadd	s1, s1, s2
	b.ne	.LBB27_2129
	b	.LBB27_2121
.LBB27_2130:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w9, [sp, #784]
	cbnz	w9, .LBB27_7
// %bb.2131:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x8, #40]
	cmp	x9, #1
	b.lt	.LBB27_2414
// %bb.2132:                            // %.preheader40.lr.ph.i11.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x17, [x8, #16]
	fmov	s0, wzr
	mov	x10, xzr
	ldp	x16, x12, [x8, #24]
	mov	x11, xzr
	ldp	x13, x14, [x8, #56]
	mov	w3, #4                          // =0x4
	ldr	x15, [x8, #72]
	and	x2, x17, #0x7fffffff
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	and	x0, x17, #0x3
	sub	x1, x2, #1
	sub	x2, x0, x2
	b	.LBB27_2134
.LBB27_2133:                            // %._crit_edge47.i16.i
                                        //   in Loop: Header=BB27_2134 Depth=2
	add	x11, x11, #1
	add	x3, x3, x15
	add	x10, x10, x15
	cmp	x11, x9
	b.eq	.LBB27_2415
.LBB27_2134:                            // %.preheader40.i13.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2137 Depth 3
                                        //         Child Loop BB27_2141 Depth 4
                                        //           Child Loop BB27_2145 Depth 5
                                        //           Child Loop BB27_2148 Depth 5
	cmp	x12, #1
	b.lt	.LBB27_2133
// %bb.2135:                            // %.preheader.lr.ph.i19.i
                                        //   in Loop: Header=BB27_2134 Depth=2
	mov	x4, xzr
	mov	x5, x10
	mov	x6, x3
	b	.LBB27_2137
	.p2align	5, , 16
.LBB27_2136:                            // %._crit_edge.i23.i
                                        //   in Loop: Header=BB27_2137 Depth=3
	add	x4, x4, #1
	add	x6, x6, x14
	add	x5, x5, x14
	cmp	x4, x12
	b.eq	.LBB27_2133
.LBB27_2137:                            // %.preheader.i20.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2134 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2141 Depth 4
                                        //           Child Loop BB27_2145 Depth 5
                                        //           Child Loop BB27_2148 Depth 5
	cmp	x16, #1
	b.lt	.LBB27_2136
// %bb.2138:                            // %.lr.ph.i26.i
                                        //   in Loop: Header=BB27_2137 Depth=3
	ldr	x21, [x8, #248]
	mov	x7, xzr
	add	x19, x21, x6
	add	x21, x21, x5
	b	.LBB27_2141
	.p2align	5, , 16
.LBB27_2139:                            //   in Loop: Header=BB27_2141 Depth=4
	fmov	s1, wzr
.LBB27_2140:                            // %ggml_vec_sum_f16_ggf.exit.i.i
                                        //   in Loop: Header=BB27_2141 Depth=4
	fadd	s0, s0, s1
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	add	x7, x7, #1
	add	x19, x19, x13
	add	x21, x21, x13
	cmp	x7, x16
	b.eq	.LBB27_2136
.LBB27_2141:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2134 Depth=2
                                        //       Parent Loop BB27_2137 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2145 Depth 5
                                        //           Child Loop BB27_2148 Depth 5
	cmp	w17, #1
	b.lt	.LBB27_2139
// %bb.2142:                            // %.lr.ph.i.i34.i.preheader
                                        //   in Loop: Header=BB27_2141 Depth=4
	cmp	x1, #3
	b.hs	.LBB27_2144
// %bb.2143:                            //   in Loop: Header=BB27_2141 Depth=4
	mov	x22, xzr
	fmov	s1, wzr
	cbnz	x0, .LBB27_2147
	b	.LBB27_2140
	.p2align	5, , 16
.LBB27_2144:                            // %.lr.ph.i.i34.i.preheader1496
                                        //   in Loop: Header=BB27_2141 Depth=4
	fmov	s1, wzr
	mov	x22, xzr
	mov	x23, x19
	.p2align	5, , 16
.LBB27_2145:                            // %.lr.ph.i.i34.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2134 Depth=2
                                        //       Parent Loop BB27_2137 Depth=3
                                        //         Parent Loop BB27_2141 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldurh	w24, [x23, #-4]
	sub	x22, x22, #4
	ldr	s2, [x20, x24, lsl #2]
	ldurh	w24, [x23, #-2]
	fadd	s1, s1, s2
	ldr	s2, [x20, x24, lsl #2]
	ldrh	w24, [x23]
	fadd	s1, s1, s2
	ldr	s2, [x20, x24, lsl #2]
	ldrh	w24, [x23, #2]
	add	x23, x23, #8
	fadd	s1, s1, s2
	ldr	s2, [x20, x24, lsl #2]
	fadd	s1, s1, s2
	cmp	x2, x22
	b.ne	.LBB27_2145
// %bb.2146:                            // %ggml_vec_sum_f16_ggf.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2141 Depth=4
	neg	x22, x22
	cbz	x0, .LBB27_2140
.LBB27_2147:                            // %.lr.ph.i.i34.i.epil.preheader
                                        //   in Loop: Header=BB27_2141 Depth=4
	add	x22, x21, x22, lsl #1
	mov	x23, x0
	.p2align	5, , 16
.LBB27_2148:                            // %.lr.ph.i.i34.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2134 Depth=2
                                        //       Parent Loop BB27_2137 Depth=3
                                        //         Parent Loop BB27_2141 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldrh	w24, [x22], #2
	subs	x23, x23, #1
	ldr	s2, [x20, x24, lsl #2]
	fadd	s1, s1, s2
	b.ne	.LBB27_2148
	b	.LBB27_2140
.LBB27_2149:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	mov	x0, x19
	ldrsw	x20, [sp, #784]
	ldrsw	x21, [sp, #788]
	ldp	s8, s9, [x22, #84]
	bl	ggml_nrows
	ldr	x8, [x22, #48]
	cmp	x8, #4
	b.ne	.LBB27_2794
// %bb.2150:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB27_2795
// %bb.2151:                            // %.preheader.i.i325
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	w20, w0
	b.ge	.LBB27_7
// %bb.2152:                            // %.lr.ph49.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	sxtw	x9, w0
	ldr	x12, [x19, #56]
	ldr	x11, [x19, #248]
	nop
	madd	x11, x12, x20, x11
	ldr	x1, [x8, #56]
	ldr	x16, [x8, #248]
	mul	x12, x12, x21
	madd	x16, x1, x20, x16
	ldr	x8, [x19, #16]
	mul	x0, x1, x21
	and	x14, x8, #0x7fffffff
	and	x10, x8, #0x3
	sub	x13, x14, #1
	sub	x14, x10, x14
	add	x15, x11, #8
	add	x17, x16, #8
	b	.LBB27_2154
.LBB27_2153:                            // %._crit_edge.i.i328
                                        //   in Loop: Header=BB27_2154 Depth=2
	add	x20, x20, x21
	add	x15, x15, x12
	add	x17, x17, x0
	add	x16, x16, x0
	add	x11, x11, x12
	cmp	x20, x9
	b.ge	.LBB27_7
.LBB27_2154:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2158 Depth 3
                                        //       Child Loop BB27_2162 Depth 3
	cmp	w8, #1
	b.lt	.LBB27_2153
// %bb.2155:                            // %.lr.ph.i.i329.preheader
                                        //   in Loop: Header=BB27_2154 Depth=2
	cmp	x13, #3
	b.hs	.LBB27_2157
// %bb.2156:                            //   in Loop: Header=BB27_2154 Depth=2
	mov	x3, xzr
	b	.LBB27_2160
.LBB27_2157:                            // %.lr.ph.i.i329.preheader1550
                                        //   in Loop: Header=BB27_2154 Depth=2
	mov	x1, xzr
	mov	x2, x17
	mov	x3, x15
	.p2align	5, , 16
.LBB27_2158:                            // %.lr.ph.i.i329
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2154 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x3, #-8]
	sub	x1, x1, #4
	fcmp	s0, s9
	fcsel	s0, s0, s9, mi
	fcmp	s0, s8
	fcsel	s0, s0, s8, gt
	stur	s0, [x2, #-8]
	ldur	s0, [x3, #-4]
	fcmp	s0, s9
	fcsel	s0, s0, s9, mi
	fcmp	s0, s8
	fcsel	s0, s0, s8, gt
	stur	s0, [x2, #-4]
	ldr	s0, [x3]
	fcmp	s0, s9
	fcsel	s0, s0, s9, mi
	fcmp	s0, s8
	fcsel	s0, s0, s8, gt
	str	s0, [x2]
	ldr	s0, [x3, #4]
	add	x3, x3, #16
	fcmp	s0, s9
	fcsel	s0, s0, s9, mi
	fcmp	s0, s8
	fcsel	s0, s0, s8, gt
	str	s0, [x2, #4]
	add	x2, x2, #16
	cmp	x14, x1
	b.ne	.LBB27_2158
// %bb.2159:                            // %._crit_edge.i.i328.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2154 Depth=2
	neg	x3, x1
.LBB27_2160:                            // %._crit_edge.i.i328.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2154 Depth=2
	cbz	x10, .LBB27_2153
// %bb.2161:                            // %.lr.ph.i.i329.epil.preheader
                                        //   in Loop: Header=BB27_2154 Depth=2
	add	x1, x16, x3, lsl #2
	mov	x2, x10
	add	x3, x11, x3, lsl #2
	.p2align	5, , 16
.LBB27_2162:                            // %.lr.ph.i.i329.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2154 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x3], #4
	fcmp	s0, s9
	fcsel	s0, s0, s9, mi
	fcmp	s0, s8
	fcsel	s0, s0, s8, gt
	subs	x2, x2, #1
	str	s0, [x1], #4
	b.ne	.LBB27_2162
	b	.LBB27_2153
.LBB27_2163:                            // %vector.ph338
                                        //   in Loop: Header=BB27_3 Depth=1
	and	x11, x10, #0xfffffffffffffffe
	add	x13, x8, x19, lsl #2
	lsl	x12, x19, #1
	madd	x9, x11, x19, x21
	mov	x14, x11
.LBB27_2164:                            // %vector.body343
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	scvtf	s0, x21
	add	x15, x19, x21
	scvtf	s1, x15
	subs	x14, x14, #2
	fmadd	s0, s9, s0, s8
	str	s0, [x8, x21, lsl #2]
	fmadd	s0, s9, s1, s8
	str	s0, [x13, x21, lsl #2]
	add	x21, x21, x12
	b.ne	.LBB27_2164
// %bb.2165:                            // %middle.block335
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	x10, x11
	b.eq	.LBB27_7
	.p2align	5, , 16
.LBB27_2166:                            // %scalar.ph336
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	scvtf	s0, x9
	fmadd	s0, s9, s0, s8
	str	s0, [x8, x9, lsl #2]
	add	x9, x9, x19
	cmp	x9, x20
	b.lt	.LBB27_2166
	b	.LBB27_7
.LBB27_2167:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	w0, #24
	b.ne	.LBB27_2290
// %bb.2168:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x20, #160]
	bl	ggml_type_size
	cmp	x0, #1
	b.ne	.LBB27_2796
// %bb.2169:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w14, [x20, #84]
	cmp	w14, #4
	b.hs	.LBB27_2797
// %bb.2170:                            //   in Loop: Header=BB27_3 Depth=1
	ldp	x1, x0, [x19, #64]
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	ldp	x0, x7, [x20, #32]
	ldr	x3, [sp, #760]                  // 8-byte Folded Reload
	ldp	x8, x9, [x3, #16]!
	str	x1, [sp, #712]                  // 8-byte Folded Spill
	ldp	x1, x2, [x20, #16]
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .LCPI27_0
	str	x7, [sp, #664]                  // 8-byte Folded Spill
	ldp	x10, x11, [x3, #16]
	ldr	q0, [x0, :lo12:.LCPI27_0]
	add	x0, sp, #1072
	ldp	x12, x13, [x3, #32]
	ldp	x17, x15, [x3, #48]
	str	x15, [sp, #672]                 // 8-byte Folded Spill
	ldp	x15, x16, [x19, #48]
	stp	q0, q0, [x0]
	ldp	x0, x4, [x20, #64]
	str	x4, [sp, #656]                  // 8-byte Folded Spill
	ldr	x3, [x3, x14, lsl #3]
	add	x4, sp, #1072
	ldp	x5, x6, [x20, #48]
	str	x3, [x4, x14, lsl #3]
	ldrsw	x14, [sp, #784]
	str	x14, [sp, #680]                 // 8-byte Folded Spill
	ldrsw	x14, [sp, #788]
	str	x14, [sp, #736]                 // 8-byte Folded Spill
	cmp	x7, #1
	b.lt	.LBB27_7
// %bb.2171:                            // %.preheader123.lr.ph.i11.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x14, [sp, #680]                 // 8-byte Folded Reload
	mov	x23, xzr
	mul	x3, x17, x14
	mul	x14, x0, x14
	ldr	x25, [sp, #1072]
	ldr	x26, [sp, #1080]
	str	x3, [sp, #696]                  // 8-byte Folded Spill
	ldr	x3, [sp, #736]                  // 8-byte Folded Reload
	str	x14, [sp, #688]                 // 8-byte Folded Spill
	mul	x14, x0, x3
	mul	x17, x17, x3
	str	x14, [sp, #720]                 // 8-byte Folded Spill
	ldr	x14, [sp, #1088]
	str	x17, [sp, #728]                 // 8-byte Folded Spill
	str	x14, [sp, #704]                 // 8-byte Folded Spill
	ldr	x14, [sp, #1096]
	str	x14, [sp, #640]                 // 8-byte Folded Spill
	b	.LBB27_2173
.LBB27_2172:                            // %._crit_edge128.i.i620
                                        //   in Loop: Header=BB27_2173 Depth=2
	ldr	x14, [sp, #672]                 // 8-byte Folded Reload
	add	x23, x23, #1
	ldr	x17, [sp, #696]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #656]                 // 8-byte Folded Reload
	str	x17, [sp, #696]                 // 8-byte Folded Spill
	ldr	x17, [sp, #688]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	str	x17, [sp, #688]                 // 8-byte Folded Spill
	cmp	x23, x14
	b.eq	.LBB27_7
.LBB27_2173:                            // %.preheader123.i12.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2176 Depth 3
                                        //         Child Loop BB27_2179 Depth 4
                                        //           Child Loop BB27_2183 Depth 5
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	ldr	x17, [sp, #680]                 // 8-byte Folded Reload
	cmp	x14, x17
	b.le	.LBB27_2172
// %bb.2174:                            // %.preheader122.lr.ph.i15.i
                                        //   in Loop: Header=BB27_2173 Depth=2
	ldr	x17, [sp, #688]                 // 8-byte Folded Reload
	str	x17, [sp, #752]                 // 8-byte Folded Spill
	ldr	x14, [sp, #640]                 // 8-byte Folded Reload
	ldr	x17, [sp, #648]                 // 8-byte Folded Reload
	sub	x14, x23, x14
	ldr	x27, [sp, #696]                 // 8-byte Folded Reload
	ldr	x21, [sp, #680]                 // 8-byte Folded Reload
	mul	x4, x14, x17
	b	.LBB27_2176
	.p2align	5, , 16
.LBB27_2175:                            // %._crit_edge126.i.i
                                        //   in Loop: Header=BB27_2176 Depth=3
	ldr	x14, [sp, #736]                 // 8-byte Folded Reload
	add	x21, x21, x14
	ldr	x14, [sp, #728]                 // 8-byte Folded Reload
	ldr	x17, [sp, #752]                 // 8-byte Folded Reload
	add	x27, x27, x14
	ldr	x14, [sp, #720]                 // 8-byte Folded Reload
	add	x17, x17, x14
	ldr	x14, [sp, #744]                 // 8-byte Folded Reload
	str	x17, [sp, #752]                 // 8-byte Folded Spill
	cmp	x14, x21
	b.le	.LBB27_2172
.LBB27_2176:                            // %.preheader122.i16.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2173 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2179 Depth 4
                                        //           Child Loop BB27_2183 Depth 5
	cmp	x2, #1
	b.lt	.LBB27_2175
// %bb.2177:                            // %.preheader.lr.ph.i17.i
                                        //   in Loop: Header=BB27_2176 Depth=3
	ldr	x14, [sp, #704]                 // 8-byte Folded Reload
	mov	x20, xzr
	sub	x14, x21, x14
	ldr	x17, [sp, #712]                 // 8-byte Folded Reload
	mul	x7, x14, x17
	ldr	x14, [sp, #752]                 // 8-byte Folded Reload
	mov	x17, x27
	b	.LBB27_2179
	.p2align	5, , 16
.LBB27_2178:                            // %._crit_edge.i19.i
                                        //   in Loop: Header=BB27_2179 Depth=4
	add	x20, x20, #1
	add	x17, x17, x13
	add	x14, x14, x6
	cmp	x20, x2
	b.eq	.LBB27_2175
.LBB27_2179:                            // %.preheader.i18.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2173 Depth=2
                                        //       Parent Loop BB27_2176 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2183 Depth 5
	cmp	x1, #1
	b.lt	.LBB27_2178
// %bb.2180:                            // %.lr.ph.i20.i
                                        //   in Loop: Header=BB27_2179 Depth=4
	sub	x3, x20, x26
	mov	x0, xzr
	mul	x3, x3, x16
	mov	x28, x14
	mov	x24, x17
	b	.LBB27_2183
	.p2align	5, , 16
.LBB27_2181:                            //   in Loop: Header=BB27_2183 Depth=5
	ldr	x30, [x19, #248]
	sub	x22, x0, x25
	madd	x22, x22, x15, x30
	add	x30, x3, x7
	add	x30, x30, x4
	add	x30, x22, x30
.LBB27_2182:                            //   in Loop: Header=BB27_2183 Depth=5
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	add	x0, x0, #1
	add	x24, x24, x12
	ldrb	w30, [x30]
	ldr	x22, [x22, #248]
	strb	w30, [x22, x28]
	add	x28, x28, x5
	cmp	x1, x0
	b.eq	.LBB27_2178
.LBB27_2183:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2173 Depth=2
                                        //       Parent Loop BB27_2176 Depth=3
                                        //         Parent Loop BB27_2179 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	cmp	x8, x0
	b.le	.LBB27_2181
// %bb.2184:                            //   in Loop: Header=BB27_2183 Depth=5
	cmp	x9, x20
	b.le	.LBB27_2181
// %bb.2185:                            //   in Loop: Header=BB27_2183 Depth=5
	cmp	x10, x21
	b.le	.LBB27_2181
// %bb.2186:                            //   in Loop: Header=BB27_2183 Depth=5
	cmp	x11, x23
	b.le	.LBB27_2181
// %bb.2187:                            //   in Loop: Header=BB27_2183 Depth=5
	ldr	x22, [sp, #760]                 // 8-byte Folded Reload
	ldr	x30, [x22, #248]
	add	x30, x30, x24
	b	.LBB27_2182
.LBB27_2188:                            // %.preheader152.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	cmp	x23, #1
	b.lt	.LBB27_2204
// %bb.2189:                            // %.preheader151.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	and	x8, x26, #0x3
	mov	x10, xzr
	str	xzr, [sp, #680]                 // 8-byte Folded Spill
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	and	x8, x26, #0x7ffffffffffffffc
	ubfiz	x19, x25, #2, #31
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	add	x8, x28, x28, lsl #1
	str	x28, [sp, #656]                 // 8-byte Folded Spill
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	lsl	x8, x28, #2
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	lsl	x8, x28, #1
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	b	.LBB27_2191
.LBB27_2190:                            // %._crit_edge158.i.i651
                                        //   in Loop: Header=BB27_2191 Depth=2
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x10, [sp, #648]                 // 8-byte Folded Reload
	ldr	x23, [sp, #608]                 // 8-byte Folded Reload
	add	x10, x10, #1
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [sp, #656]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #656]                  // 8-byte Folded Spill
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	cmp	x10, x23
	b.eq	.LBB27_2204
.LBB27_2191:                            // %.preheader151.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2194 Depth 3
                                        //         Child Loop BB27_2202 Depth 4
                                        //         Child Loop BB27_2199 Depth 4
	str	x10, [sp, #648]                 // 8-byte Folded Spill
	cmp	x22, #1
	b.lt	.LBB27_2190
// %bb.2192:                            // %.preheader150.i.i.preheader
                                        //   in Loop: Header=BB27_2191 Depth=2
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	mov	x9, xzr
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x27, [sp, #680]                 // 8-byte Folded Reload
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	ldr	x24, [sp, #672]                 // 8-byte Folded Reload
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_2194
	.p2align	5, , 16
.LBB27_2193:                            // %._crit_edge.i.i653
                                        //   in Loop: Header=BB27_2194 Depth=3
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	add	x24, x24, x8
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	ldr	x22, [sp, #720]                 // 8-byte Folded Reload
	add	x9, x9, #1
	add	x27, x27, x8
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	ldr	x10, [sp, #744]                 // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	cmp	x9, x22
	b.eq	.LBB27_2190
.LBB27_2194:                            // %.preheader150.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2191 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2202 Depth 4
                                        //         Child Loop BB27_2199 Depth 4
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	cmp	x26, #1
	b.lt	.LBB27_2193
// %bb.2195:                            // %.lr.ph.i.i654
                                        //   in Loop: Header=BB27_2194 Depth=3
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	mov	x22, xzr
	ldr	x23, [x8, #248]
	str	x23, [sp, #688]                 // 8-byte Folded Spill
	cmp	x26, #4
	b.hs	.LBB27_2202
.LBB27_2196:                            // %._crit_edge.i.i653.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2194 Depth=3
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_2193
// %bb.2197:                            // %.epil.preheader1091.preheader
                                        //   in Loop: Header=BB27_2194 Depth=3
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	nop
	madd	x22, x28, x22, x8
	ldr	x23, [sp, #696]                 // 8-byte Folded Reload
	b	.LBB27_2199
	.p2align	5, , 16
.LBB27_2198:                            // %ggml_vec_set_f32.exit138.i.i.epil
                                        //   in Loop: Header=BB27_2199 Depth=4
	add	x22, x22, x28
	subs	x23, x23, #1
	b.eq	.LBB27_2193
.LBB27_2199:                            // %.epil.preheader1091
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2191 Depth=2
                                        //       Parent Loop BB27_2194 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	cmp	w25, #1
	b.lt	.LBB27_2198
// %bb.2200:                            // %.lr.ph.i134.preheader.i.i.epil
                                        //   in Loop: Header=BB27_2199 Depth=4
	add	x0, x22, x27
	mov	w1, wzr
	mov	x2, x19
	bl	memset
	b	.LBB27_2198
	.p2align	5, , 16
.LBB27_2201:                            // %ggml_vec_set_f32.exit138.i.i.3
                                        //   in Loop: Header=BB27_2202 Depth=4
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	add	x22, x22, #4
	add	x23, x23, x8
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	x8, x22
	b.eq	.LBB27_2196
.LBB27_2202:                            // %.lr.ph.i.i654.new
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2191 Depth=2
                                        //       Parent Loop BB27_2194 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	cmp	w25, #1
	b.lt	.LBB27_2201
// %bb.2203:                            // %.lr.ph.i134.preheader.i.i
                                        //   in Loop: Header=BB27_2202 Depth=4
	add	x0, x23, x27
	mov	w1, wzr
	mov	x2, x19
	bl	memset
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	mov	w1, wzr
	mov	x2, x19
	add	x0, x23, x8
	bl	memset
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	mov	w1, wzr
	mov	x2, x19
	add	x0, x23, x8
	bl	memset
	add	x0, x23, x24
	mov	w1, wzr
	mov	x2, x19
	bl	memset
	b	.LBB27_2201
.LBB27_2204:                            // %ggml_vec_set_f32.exit.i.i638
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	sdiv	x8, x8, x23
	cmp	w8, #1
	b.lt	.LBB27_7
// %bb.2205:                            // %.preheader149.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #616]                  // 8-byte Folded Reload
	and	x8, x8, #0x7fffffff
	mul	x6, x26, x20
	str	x8, [sp, #552]                  // 8-byte Folded Spill
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	and	x1, x25, #0x3
	lsl	x12, x25, #2
	str	xzr, [sp, #576]                 // 8-byte Folded Spill
	str	xzr, [sp, #560]                 // 8-byte Folded Spill
	sdiv	x10, x9, x25
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	and	x17, x10, #0x7fffffff
	sdiv	x8, x8, x22
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	and	x8, x8, #0x7fffffff
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	sdiv	x11, x9, x26
	and	x9, x25, #0x7fffffff
	sub	x0, x9, #1
	sub	x2, x1, x9
	and	x8, x11, #0x7fffffff
	str	x11, [sp, #696]                 // 8-byte Folded Spill
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	mul	x8, x23, x8
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	mul	x8, x22, x8
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	mov	w8, #8                          // =0x8
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	b	.LBB27_2207
.LBB27_2206:                            // %._crit_edge172.i.i640
                                        //   in Loop: Header=BB27_2207 Depth=2
	ldr	x11, [sp, #544]                 // 8-byte Folded Reload
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	add	x8, x8, x11
	ldr	x9, [sp, #560]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x8, [sp, #568]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x9, [sp, #560]                  // 8-byte Folded Spill
	add	x8, x8, x11
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_2207:                            // %.preheader149.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2210 Depth 3
                                        //         Child Loop BB27_2213 Depth 4
                                        //           Child Loop BB27_2216 Depth 5
                                        //             Child Loop BB27_2219 Depth 6
                                        //               Child Loop BB27_2222 Depth 7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	cmp	x23, #1
	b.lt	.LBB27_2206
// %bb.2208:                            // %.preheader148.lr.ph.i.i
                                        //   in Loop: Header=BB27_2207 Depth=2
	mov	w8, #8                          // =0x8
	mov	x13, xzr
	str	xzr, [sp, #648]                 // 8-byte Folded Spill
	str	x8, [sp, #640]                  // 8-byte Folded Spill
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x8, [sp, #632]                  // 8-byte Folded Spill
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x8, [sp, #624]                  // 8-byte Folded Spill
	b	.LBB27_2210
	.p2align	5, , 16
.LBB27_2209:                            // %._crit_edge170.i.i641
                                        //   in Loop: Header=BB27_2210 Depth=3
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x11, [sp, #640]                 // 8-byte Folded Reload
	ldr	x13, [sp, #616]                 // 8-byte Folded Reload
	ldr	x23, [sp, #608]                 // 8-byte Folded Reload
	add	x13, x13, #1
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	ldr	x9, [sp, #600]                  // 8-byte Folded Reload
	add	x11, x11, x9
	str	x11, [sp, #640]                 // 8-byte Folded Spill
	ldr	x11, [sp, #648]                 // 8-byte Folded Reload
	add	x11, x11, x9
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	str	x11, [sp, #648]                 // 8-byte Folded Spill
	add	x9, x9, x8
	str	x9, [sp, #632]                  // 8-byte Folded Spill
	cmp	x13, x23
	b.eq	.LBB27_2206
.LBB27_2210:                            // %.preheader148.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2213 Depth 4
                                        //           Child Loop BB27_2216 Depth 5
                                        //             Child Loop BB27_2219 Depth 6
                                        //               Child Loop BB27_2222 Depth 7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	str	x13, [sp, #616]                 // 8-byte Folded Spill
	cmp	w8, #1
	b.lt	.LBB27_2209
// %bb.2211:                            // %.preheader147.lr.ph.i.i
                                        //   in Loop: Header=BB27_2210 Depth=3
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	mov	x9, xzr
	str	x8, [sp, #688]                  // 8-byte Folded Spill
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	str	x8, [sp, #680]                  // 8-byte Folded Spill
	b	.LBB27_2213
	.p2align	5, , 16
.LBB27_2212:                            // %._crit_edge168.i.i
                                        //   in Loop: Header=BB27_2213 Depth=4
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	ldr	x11, [sp, #680]                 // 8-byte Folded Reload
	add	x11, x11, x8
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x11, [sp, #680]                 // 8-byte Folded Spill
	ldr	x11, [sp, #688]                 // 8-byte Folded Reload
	add	x11, x11, x8
	ldr	x8, [sp, #664]                  // 8-byte Folded Reload
	str	x11, [sp, #688]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_2209
.LBB27_2213:                            // %.preheader147.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2216 Depth 5
                                        //             Child Loop BB27_2219 Depth 6
                                        //               Child Loop BB27_2222 Depth 7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	cmp	x22, #1
	b.lt	.LBB27_2212
// %bb.2214:                            // %.preheader146.lr.ph.i.i
                                        //   in Loop: Header=BB27_2213 Depth=4
	ldr	x8, [sp, #688]                  // 8-byte Folded Reload
	mov	x11, xzr
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	ldr	x23, [sp, #640]                 // 8-byte Folded Reload
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	b	.LBB27_2216
	.p2align	5, , 16
.LBB27_2215:                            // %._crit_edge166.i.i
                                        //   in Loop: Header=BB27_2216 Depth=5
	ldr	x8, [sp, #704]                  // 8-byte Folded Reload
	ldr	x9, [sp, #736]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x13, [sp, #752]                 // 8-byte Folded Reload
	ldr	x11, [sp, #728]                 // 8-byte Folded Reload
	ldr	x22, [sp, #720]                 // 8-byte Folded Reload
	add	x11, x11, #1
	str	x9, [sp, #736]                  // 8-byte Folded Spill
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	add	x23, x23, x9
	add	x13, x13, x9
	ldr	x9, [sp, #744]                  // 8-byte Folded Reload
	str	x13, [sp, #752]                 // 8-byte Folded Spill
	add	x9, x9, x8
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	cmp	x11, x22
	b.eq	.LBB27_2212
.LBB27_2216:                            // %.preheader146.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        //         Parent Loop BB27_2213 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_2219 Depth 6
                                        //               Child Loop BB27_2222 Depth 7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	str	x11, [sp, #728]                 // 8-byte Folded Spill
	cmp	w8, #1
	b.lt	.LBB27_2215
// %bb.2217:                            // %.preheader145.lr.ph.i.i
                                        //   in Loop: Header=BB27_2216 Depth=5
	ldr	x13, [sp, #744]                 // 8-byte Folded Reload
	mov	x15, xzr
	ldr	x19, [sp, #736]                 // 8-byte Folded Reload
	b	.LBB27_2219
	.p2align	5, , 16
.LBB27_2218:                            // %._crit_edge164.i.i
                                        //   in Loop: Header=BB27_2219 Depth=6
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	add	x15, x15, #1
	add	x19, x19, x6
	add	x13, x13, x6
	cmp	x15, x8
	b.eq	.LBB27_2215
.LBB27_2219:                            // %.preheader145.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        //         Parent Loop BB27_2213 Depth=4
                                        //           Parent Loop BB27_2216 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_2222 Depth 7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	cmp	x26, #1
	b.lt	.LBB27_2218
// %bb.2220:                            // %.preheader.lr.ph.i.i646
                                        //   in Loop: Header=BB27_2219 Depth=6
	ldr	x7, [sp, #752]                  // 8-byte Folded Reload
	mov	x4, xzr
	mov	x8, x13
	mov	x30, x23
	mov	x5, x19
	b	.LBB27_2222
	.p2align	5, , 16
.LBB27_2221:                            // %._crit_edge162.i.i
                                        //   in Loop: Header=BB27_2222 Depth=7
	add	x4, x4, #1
	add	x5, x5, x20
	add	x30, x30, x28
	add	x7, x7, x28
	add	x8, x8, x20
	cmp	x4, x26
	b.eq	.LBB27_2218
.LBB27_2222:                            // %.preheader.i.i647
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        //         Parent Loop BB27_2213 Depth=4
                                        //           Parent Loop BB27_2216 Depth=5
                                        //             Parent Loop BB27_2219 Depth=6
                                        // =>            This Loop Header: Depth=7
                                        //                 Child Loop BB27_2225 Depth 8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	cmp	w10, #1
	b.lt	.LBB27_2221
// %bb.2223:                            // %.lr.ph161.i.i
                                        //   in Loop: Header=BB27_2222 Depth=7
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	mov	x11, xzr
	ldr	x22, [x21, #248]
	add	x3, x22, x5
	ldr	x9, [x9, #248]
	add	x27, x22, x8
	add	x16, x9, x30
	add	x14, x9, x7
	b	.LBB27_2225
	.p2align	5, , 16
.LBB27_2224:                            // %ggml_vec_acc_f32.exit.i.i
                                        //   in Loop: Header=BB27_2225 Depth=8
	add	x11, x11, #1
	add	x3, x3, x12
	add	x27, x27, x12
	cmp	x11, x17
	b.eq	.LBB27_2221
.LBB27_2225:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        //         Parent Loop BB27_2213 Depth=4
                                        //           Parent Loop BB27_2216 Depth=5
                                        //             Parent Loop BB27_2219 Depth=6
                                        //               Parent Loop BB27_2222 Depth=7
                                        // =>              This Loop Header: Depth=8
                                        //                   Child Loop BB27_2229 Depth 9
                                        //                   Child Loop BB27_2232 Depth 9
	cmp	w25, #1
	b.lt	.LBB27_2224
// %bb.2226:                            // %.lr.ph.i141.i.i.preheader
                                        //   in Loop: Header=BB27_2225 Depth=8
	cmp	x0, #3
	b.hs	.LBB27_2228
// %bb.2227:                            //   in Loop: Header=BB27_2225 Depth=8
	mov	x24, xzr
	cbnz	x1, .LBB27_2231
	b	.LBB27_2224
	.p2align	5, , 16
.LBB27_2228:                            // %.lr.ph.i141.i.i.preheader1485
                                        //   in Loop: Header=BB27_2225 Depth=8
	mov	x9, xzr
	mov	x24, x16
	mov	x22, x3
	.p2align	5, , 16
.LBB27_2229:                            // %.lr.ph.i141.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        //         Parent Loop BB27_2213 Depth=4
                                        //           Parent Loop BB27_2216 Depth=5
                                        //             Parent Loop BB27_2219 Depth=6
                                        //               Parent Loop BB27_2222 Depth=7
                                        //                 Parent Loop BB27_2225 Depth=8
                                        // =>                This Inner Loop Header: Depth=9
	ldur	s0, [x22, #-8]
	sub	x9, x9, #4
	ldp	s1, s2, [x24, #-8]
	fadd	s0, s0, s1
	stur	s0, [x24, #-8]
	ldur	s0, [x22, #-4]
	fadd	s0, s0, s2
	ldp	s1, s2, [x24]
	stur	s0, [x24, #-4]
	ldr	s0, [x22]
	fadd	s0, s0, s1
	str	s0, [x24]
	ldr	s0, [x22, #4]
	add	x22, x22, #16
	fadd	s0, s0, s2
	str	s0, [x24, #4]
	add	x24, x24, #16
	cmp	x2, x9
	b.ne	.LBB27_2229
// %bb.2230:                            // %ggml_vec_acc_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2225 Depth=8
	neg	x24, x9
	cbz	x1, .LBB27_2224
.LBB27_2231:                            // %.lr.ph.i141.i.i.epil.preheader
                                        //   in Loop: Header=BB27_2225 Depth=8
	add	x9, x14, x24, lsl #2
	mov	x22, x1
	add	x24, x27, x24, lsl #2
	.p2align	5, , 16
.LBB27_2232:                            // %.lr.ph.i141.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2207 Depth=2
                                        //       Parent Loop BB27_2210 Depth=3
                                        //         Parent Loop BB27_2213 Depth=4
                                        //           Parent Loop BB27_2216 Depth=5
                                        //             Parent Loop BB27_2219 Depth=6
                                        //               Parent Loop BB27_2222 Depth=7
                                        //                 Parent Loop BB27_2225 Depth=8
                                        // =>                This Inner Loop Header: Depth=9
	ldr	s0, [x9]
	subs	x22, x22, #1
	ldr	s1, [x24], #4
	fadd	s0, s1, s0
	str	s0, [x9], #4
	b.ne	.LBB27_2232
	b	.LBB27_2224
.LBB27_2233:                            // %._crit_edge172.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x1, [sp, #744]                  // 8-byte Folded Reload
	ldr	x23, [sp, #728]                 // 8-byte Folded Reload
	ldr	w25, [sp, #712]                 // 4-byte Folded Reload
	ldr	w26, [sp, #704]                 // 4-byte Folded Reload
	ldr	x2, [sp, #696]                  // 8-byte Folded Reload
	cmp	x1, #1
	b.lt	.LBB27_2250
// %bb.2234:                            // %.lr.ph180.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #736]                 // 8-byte Folded Reload
	mov	x9, xzr
	lsl	x11, x1, #1
	add	x8, x8, x10, asr #31
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	b	.LBB27_2236
.LBB27_2235:                            // %._crit_edge177.i.i
                                        //   in Loop: Header=BB27_2236 Depth=2
	add	x9, x9, #1
	add	x8, x8, #2
	add	x10, x10, x2
	cmp	x9, x1
	b.eq	.LBB27_2250
.LBB27_2236:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2237 Depth 3
	mov	x12, x10
	mov	x13, x8
	mov	x14, x24
	cmp	x24, #1
	b.lt	.LBB27_2235
	.p2align	5, , 16
.LBB27_2237:                            // %.lr.ph176.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2236 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov	w15, #2004877312                // =0x77800000
	ldr	s0, [x12], #4
	fmov	s2, w15
	fabs	s1, s0
	mov	w15, #142606336                 // =0x8800000
	mov	w0, #125829120                  // =0x7800000
	fmul	s1, s1, s2
	fmov	s2, w15
	fmov	w15, s0
	and	w17, w15, #0x7f800000
	fmul	s1, s1, s2
	lsl	w16, w15, #1
	add	w17, w17, w0
	ubfx	w0, w15, #23, #8
	lsr	w15, w15, #31
	cmp	w0, #113
	mov	w0, #1073741824                 // =0x40000000
	csel	w17, w0, w17, lo
	fmov	s0, w17
	fadd	s0, s1, s0
	fmov	w17, s0
	lsr	w0, w17, #13
	and	w17, w17, #0xfff
	and	w0, w0, #0x7c00
	add	w17, w0, w17
	mov	w0, #-16777216                  // =0xff000000
	cmp	w16, w0
	mov	w16, #32256                     // =0x7e00
	csel	w16, w16, w17, hi
	subs	x14, x14, #1
	orr	w15, w16, w15, lsl #15
	strh	w15, [x13]
	add	x13, x13, x11
	b.ne	.LBB27_2237
	b	.LBB27_2235
.LBB27_2238:                            // %._crit_edge172.i33.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x23, [sp, #736]                 // 8-byte Folded Reload
	ldr	w24, [sp, #728]                 // 4-byte Folded Reload
	ldr	w27, [sp, #720]                 // 4-byte Folded Reload
	ldr	x4, [sp, #712]                  // 8-byte Folded Reload
	cmp	x25, #1
	b.lt	.LBB27_2267
// %bb.2239:                            // %.lr.ph180.i36.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x13, [sp, #704]                 // 8-byte Folded Reload
	add	x12, x25, x25, lsl #1
	and	x11, x22, #0x7ffffffffffffffc
	ldr	x10, [sp, #752]                 // 8-byte Folded Reload
	mov	x9, xzr
	neg	x11, x11
	lsl	x12, x12, #2
	lsl	x14, x25, #4
	lsl	x16, x25, #3
	lsl	x17, x25, #2
	ldr	x13, [x13, #248]
	lsl	x10, x10, #32
	add	x8, x8, x10, asr #30
	and	x10, x22, #0x3
	add	x15, x13, #8
	b	.LBB27_2241
.LBB27_2240:                            // %._crit_edge177.i39.i
                                        //   in Loop: Header=BB27_2241 Depth=2
	add	x9, x9, #1
	add	x8, x8, #4
	add	x15, x15, x4
	add	x13, x13, x4
	cmp	x9, x25
	b.eq	.LBB27_2267
.LBB27_2241:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2245 Depth 3
                                        //       Child Loop BB27_2249 Depth 3
	cmp	x22, #1
	b.lt	.LBB27_2240
// %bb.2242:                            // %.lr.ph176.i41.i.preheader
                                        //   in Loop: Header=BB27_2241 Depth=2
	cmp	x22, #4
	b.hs	.LBB27_2244
// %bb.2243:                            //   in Loop: Header=BB27_2241 Depth=2
	mov	x2, xzr
	b	.LBB27_2247
.LBB27_2244:                            // %.lr.ph176.i41.i.preheader1551
                                        //   in Loop: Header=BB27_2241 Depth=2
	mov	x3, xzr
	mov	x1, x15
	mov	x2, x8
	.p2align	5, , 16
.LBB27_2245:                            // %.lr.ph176.i41.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2241 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x1, #-8]
	sub	x3, x3, #4
	str	s0, [x2]
	ldur	s0, [x1, #-4]
	str	s0, [x2, x25, lsl #2]
	ldr	s0, [x1]
	str	s0, [x2, x16]
	ldr	s0, [x1, #4]
	add	x1, x1, #16
	str	s0, [x2, x12]
	add	x2, x2, x14
	cmp	x11, x3
	b.ne	.LBB27_2245
// %bb.2246:                            // %._crit_edge177.i39.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2241 Depth=2
	neg	x2, x3
.LBB27_2247:                            // %._crit_edge177.i39.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2241 Depth=2
	cbz	x10, .LBB27_2240
// %bb.2248:                            // %.lr.ph176.i41.i.epil.preheader
                                        //   in Loop: Header=BB27_2241 Depth=2
	mul	x3, x17, x2
	mov	x1, x10
	add	x2, x13, x2, lsl #2
	.p2align	5, , 16
.LBB27_2249:                            // %.lr.ph176.i41.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2241 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x2], #4
	subs	x1, x1, #1
	str	s0, [x8, x3]
	add	x3, x3, x17
	b.ne	.LBB27_2249
	b	.LBB27_2240
.LBB27_2250:                            // %._crit_edge181.i.i314
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	ldr	x19, [x0, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x19
	mov	w1, wzr
	bl	memset
	ldr	x19, [sp, #720]                 // 8-byte Folded Reload
.LBB27_2251:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2253
// %bb.2252:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_2253:                            // %ggml_barrier.exit.i.i300
                                        //   in Loop: Header=BB27_3 Depth=1
	add	w8, w19, w26
	sub	w8, w8, #1
	sdiv	w8, w8, w26
	mul	w12, w8, w25
	add	w8, w12, w8
	cmp	w8, w19
	csel	w8, w8, w19, lt
	cmp	w12, w8
	b.ge	.LBB27_7
// %bb.2254:                            // %.lr.ph191.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	lsl	x14, x22, #1
	ldr	x16, [sp, #800]
	sxtw	x12, w12
	mul	x15, x14, x21
	ldr	x9, [sp, #736]                  // 8-byte Folded Reload
	and	x11, x22, #0x7fffffff
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	add	x9, x16, x9, asr #31
	ldr	x13, [sp, #744]                 // 8-byte Folded Reload
	ldrsw	x10, [x10, #84]
	lsl	x13, x13, #32
	madd	x16, x15, x12, x16
	b	.LBB27_2256
.LBB27_2255:                            // %._crit_edge189.i.i
                                        //   in Loop: Header=BB27_2256 Depth=2
	add	x12, x12, #1
	add	x16, x16, x15
	cmp	w8, w12
	b.eq	.LBB27_7
.LBB27_2256:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2259 Depth 3
                                        //         Child Loop BB27_2263 Depth 4
                                        //           Child Loop BB27_2265 Depth 5
	cmp	x24, #1
	b.lt	.LBB27_2255
// %bb.2257:                            // %.lr.ph188.i.i.preheader
                                        //   in Loop: Header=BB27_2256 Depth=2
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	mul	x1, x12, x23
	mov	x17, xzr
	ldr	x0, [x0, #248]
	add	x0, x0, x1
	b	.LBB27_2259
	.p2align	5, , 16
.LBB27_2258:                            // %._crit_edge185.i.i
                                        //   in Loop: Header=BB27_2259 Depth=3
	add	x17, x17, #1
	cmp	x17, x24
	b.eq	.LBB27_2255
.LBB27_2259:                            // %.lr.ph188.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2256 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2263 Depth 4
                                        //           Child Loop BB27_2265 Depth 5
	cmp	x21, #1
	b.lt	.LBB27_2258
// %bb.2260:                            // %.lr.ph184.i.i
                                        //   in Loop: Header=BB27_2259 Depth=3
	mul	x2, x13, x17
	mov	x1, xzr
	mov	x4, x16
	mul	x3, x17, x10
	add	x2, x9, x2, asr #31
	add	x3, x0, x3, lsl #2
	b	.LBB27_2263
	.p2align	5, , 16
.LBB27_2261:                            //   in Loop: Header=BB27_2263 Depth=4
	fmov	s0, wzr
.LBB27_2262:                            // %ggml_vec_dot_f16.exit.i.i
                                        //   in Loop: Header=BB27_2263 Depth=4
	ldr	s1, [x3, x1, lsl #2]
	add	x4, x4, x14
	fadd	s0, s0, s1
	str	s0, [x3, x1, lsl #2]
	add	x1, x1, #1
	cmp	x1, x21
	b.eq	.LBB27_2258
.LBB27_2263:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2256 Depth=2
                                        //       Parent Loop BB27_2259 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2265 Depth 5
	cmp	w22, #1
	b.lt	.LBB27_2261
// %bb.2264:                            // %.lr.ph.i.i.i307.preheader
                                        //   in Loop: Header=BB27_2263 Depth=4
	fmov	d0, xzr
	mov	x5, x2
	mov	x6, x4
	mov	x7, x11
	.p2align	5, , 16
.LBB27_2265:                            // %.lr.ph.i.i.i307
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2256 Depth=2
                                        //       Parent Loop BB27_2259 Depth=3
                                        //         Parent Loop BB27_2263 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	//APP
	// loop body
	//NO_APP
	ldrh	w19, [x5], #2
	subs	x7, x7, #1
	ldr	s1, [x20, x19, lsl #2]
	ldrh	w19, [x6], #2
	ldr	s2, [x20, x19, lsl #2]
	//APP
	// loop body end
	//NO_APP
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_2265
// %bb.2266:                            // %._crit_edge.loopexit.i.i.i312
                                        //   in Loop: Header=BB27_2263 Depth=4
	fcvt	s0, d0
	b	.LBB27_2262
.LBB27_2267:                            // %._crit_edge181.i35.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x0, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x19
	mov	w1, wzr
	bl	memset
	ldr	x30, [sp, #744]                 // 8-byte Folded Reload
.LBB27_2268:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2270
// %bb.2269:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	mov	x19, x30
	bl	__kmpc_barrier
	mov	x30, x19
.LBB27_2270:                            // %ggml_barrier.exit.i6.i
                                        //   in Loop: Header=BB27_3 Depth=1
	add	w8, w23, w27
	sub	w8, w8, #1
	sdiv	w8, w8, w27
	mul	w10, w8, w24
	add	w8, w10, w8
	cmp	w8, w23
	csel	w11, w8, w23, lt
	cmp	w10, w11
	b.ge	.LBB27_7
// %bb.2271:                            // %.lr.ph191.i8.i
                                        //   in Loop: Header=BB27_3 Depth=1
	lsl	x17, x21, #2
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	sxtw	x10, w10
	mul	x0, x17, x20
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	and	x15, x21, #0x7fffffff
	ldr	x3, [sp, #800]
	and	x14, x21, #0x3
	sxtw	x11, w11
	lsl	x12, x25, #32
	sub	x13, x15, #1
	sub	x15, x14, x15
	sbfiz	x4, x8, #2, #32
	ldrsw	x8, [x9, #84]
	ldr	x9, [x9, #248]
	add	x1, x3, #8
	add	x16, x1, x4
	mul	x2, x0, x10
	add	x1, x1, x2
	add	x2, x3, x2
	add	x3, x3, x4
	b	.LBB27_2273
.LBB27_2272:                            // %._crit_edge189.i11.i
                                        //   in Loop: Header=BB27_2273 Depth=2
	add	x10, x10, #1
	add	x1, x1, x0
	add	x2, x2, x0
	cmp	x10, x11
	b.eq	.LBB27_7
.LBB27_2273:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2276 Depth 3
                                        //         Child Loop BB27_2280 Depth 4
                                        //           Child Loop BB27_2284 Depth 5
                                        //           Child Loop BB27_2287 Depth 5
	cmp	x22, #1
	b.lt	.LBB27_2272
// %bb.2274:                            // %.lr.ph188.i14.i.preheader
                                        //   in Loop: Header=BB27_2273 Depth=2
	mul	x5, x10, x30
	mov	x4, xzr
	add	x5, x9, x5
	b	.LBB27_2276
	.p2align	5, , 16
.LBB27_2275:                            // %._crit_edge185.i16.i
                                        //   in Loop: Header=BB27_2276 Depth=3
	add	x4, x4, #1
	cmp	x4, x22
	b.eq	.LBB27_2272
.LBB27_2276:                            // %.lr.ph188.i14.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2273 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2280 Depth 4
                                        //           Child Loop BB27_2284 Depth 5
                                        //           Child Loop BB27_2287 Depth 5
	cmp	x20, #1
	b.lt	.LBB27_2275
// %bb.2277:                            // %.lr.ph184.i19.i
                                        //   in Loop: Header=BB27_2276 Depth=3
	mul	x7, x12, x4
	mov	x6, xzr
	mov	x24, x2
	mul	x23, x4, x8
	mov	x25, x1
	asr	x19, x7, #30
	add	x23, x5, x23, lsl #2
	add	x7, x16, x19
	add	x19, x3, x19
	b	.LBB27_2280
	.p2align	5, , 16
.LBB27_2278:                            //   in Loop: Header=BB27_2280 Depth=4
	fmov	s0, wzr
.LBB27_2279:                            // %ggml_vec_dot_f32.exit.i.i299
                                        //   in Loop: Header=BB27_2280 Depth=4
	ldr	s1, [x23, x6, lsl #2]
	add	x25, x25, x17
	add	x24, x24, x17
	fadd	s0, s0, s1
	str	s0, [x23, x6, lsl #2]
	add	x6, x6, #1
	cmp	x6, x20
	b.eq	.LBB27_2275
.LBB27_2280:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2273 Depth=2
                                        //       Parent Loop BB27_2276 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2284 Depth 5
                                        //           Child Loop BB27_2287 Depth 5
	cmp	w21, #1
	b.lt	.LBB27_2278
// %bb.2281:                            // %.lr.ph.i.i27.i.preheader
                                        //   in Loop: Header=BB27_2280 Depth=4
	cmp	x13, #3
	b.hs	.LBB27_2283
// %bb.2282:                            //   in Loop: Header=BB27_2280 Depth=4
	mov	x28, xzr
	fmov	d0, xzr
	cbnz	x14, .LBB27_2286
	b	.LBB27_2288
	.p2align	5, , 16
.LBB27_2283:                            // %.lr.ph.i.i27.i.preheader1506
                                        //   in Loop: Header=BB27_2280 Depth=4
	fmov	d0, xzr
	mov	x26, xzr
	mov	x27, x25
	mov	x28, x7
	.p2align	5, , 16
.LBB27_2284:                            // %.lr.ph.i.i27.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2273 Depth=2
                                        //       Parent Loop BB27_2276 Depth=3
                                        //         Parent Loop BB27_2280 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldp	s1, s2, [x28, #-8]
	sub	x26, x26, #4
	ldp	s3, s4, [x27, #-8]
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	ldp	s3, s4, [x27], #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	ldp	s1, s2, [x28], #16
	fmul	s1, s1, s3
	fcvt	d1, s1
	fadd	d0, d0, d1
	fmul	s1, s2, s4
	fcvt	d1, s1
	fadd	d0, d0, d1
	cmp	x15, x26
	b.ne	.LBB27_2284
// %bb.2285:                            // %._crit_edge.loopexit.i.i32.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2280 Depth=4
	neg	x28, x26
	cbz	x14, .LBB27_2288
.LBB27_2286:                            // %.lr.ph.i.i27.i.epil.preheader
                                        //   in Loop: Header=BB27_2280 Depth=4
	add	x26, x24, x28, lsl #2
	mov	x27, x14
	add	x28, x19, x28, lsl #2
	.p2align	5, , 16
.LBB27_2287:                            // %.lr.ph.i.i27.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2273 Depth=2
                                        //       Parent Loop BB27_2276 Depth=3
                                        //         Parent Loop BB27_2280 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	s1, [x28], #4
	subs	x27, x27, #1
	ldr	s2, [x26], #4
	fmul	s1, s1, s2
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_2287
.LBB27_2288:                            // %._crit_edge.loopexit.i.i32.i
                                        //   in Loop: Header=BB27_2280 Depth=4
	fcvt	s0, d0
	b	.LBB27_2279
.LBB27_2289:                            //   in Loop: Header=BB27_3 Depth=1
	mov	w9, #1                          // =0x1
	lsl	x8, x9, x8
	mov	x9, #65484                      // =0xffcc
	movk	x9, #32767, lsl #16
	movk	x9, #140, lsl #32
	tst	x8, x9
	b.eq	.LBB27_7
	b	.LBB27_2529
.LBB27_2290:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x20, #160]
	bl	ggml_type_size
	ldr	w9, [x20, #84]
	str	x0, [sp, #752]                  // 8-byte Folded Spill
	cmp	w9, #4
	b.hs	.LBB27_2798
// %bb.2291:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	str	x19, [sp, #696]                 // 8-byte Folded Spill
	ldp	x22, x8, [x11, #16]!
	str	x8, [sp, #744]                  // 8-byte Folded Spill
	ldp	x10, x8, [x11, #16]
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	ldp	x26, x8, [x11, #32]
	str	x10, [sp, #736]                 // 8-byte Folded Spill
	str	x8, [sp, #648]                  // 8-byte Folded Spill
	ldp	x8, x10, [x11, #48]
	str	x10, [sp, #528]                 // 8-byte Folded Spill
	ldr	x10, [x19, #48]
	str	x10, [sp, #688]                 // 8-byte Folded Spill
	ldr	x10, [x19, #56]
	str	x10, [sp, #632]                 // 8-byte Folded Spill
	ldr	x10, [x19, #64]
	str	x10, [sp, #568]                 // 8-byte Folded Spill
	ldr	x10, [x19, #72]
	str	x10, [sp, #496]                 // 8-byte Folded Spill
	ldp	x27, x10, [x20, #16]
	str	x10, [sp, #656]                 // 8-byte Folded Spill
	ldp	x10, x13, [x20, #32]
	str	x10, [sp, #600]                 // 8-byte Folded Spill
	adrp	x10, .LCPI27_0
	str	x13, [sp, #520]                 // 8-byte Folded Spill
	ldr	q0, [x10, :lo12:.LCPI27_0]
	add	x10, sp, #1072
	stp	q0, q0, [x10]
	ldp	x21, x10, [x20, #48]
	str	x10, [sp, #640]                 // 8-byte Folded Spill
	ldp	x10, x12, [x20, #64]
	str	x12, [sp, #512]                 // 8-byte Folded Spill
	ldr	x11, [x11, x9, lsl #3]
	add	x12, sp, #1072
	str	x11, [x12, x9, lsl #3]
	ldrsw	x9, [sp, #784]
	str	x9, [sp, #536]                  // 8-byte Folded Spill
	ldrsw	x9, [sp, #788]
	str	x9, [sp, #592]                  // 8-byte Folded Spill
	cmp	x13, #1
	b.lt	.LBB27_7
// %bb.2292:                            // %.preheader124.lr.ph.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	str	xzr, [sp, #728]                 // 8-byte Folded Spill
	mul	x11, x8, x9
	str	x11, [sp, #552]                 // 8-byte Folded Spill
	ldr	x11, [sp, #1072]
	str	x11, [sp, #680]                 // 8-byte Folded Spill
	ldr	x11, [sp, #1080]
	str	x11, [sp, #624]                 // 8-byte Folded Spill
	ldr	x11, [sp, #592]                 // 8-byte Folded Reload
	mul	x8, x8, x11
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	mul	x8, x10, x9
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	mul	x8, x10, x11
	str	x8, [sp, #576]                  // 8-byte Folded Spill
	ldr	x8, [sp, #1088]
	str	x8, [sp, #560]                  // 8-byte Folded Spill
	ldr	x8, [sp, #1096]
	str	x8, [sp, #488]                  // 8-byte Folded Spill
	b	.LBB27_2294
.LBB27_2293:                            // %._crit_edge129.i60.i
                                        //   in Loop: Header=BB27_2294 Depth=2
	ldr	x8, [sp, #528]                  // 8-byte Folded Reload
	ldr	x10, [sp, #552]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldr	x8, [sp, #512]                  // 8-byte Folded Reload
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #552]                 // 8-byte Folded Spill
	ldr	x10, [sp, #544]                 // 8-byte Folded Reload
	str	x9, [sp, #728]                  // 8-byte Folded Spill
	add	x10, x10, x8
	ldr	x8, [sp, #520]                  // 8-byte Folded Reload
	str	x10, [sp, #544]                 // 8-byte Folded Spill
	cmp	x9, x8
	b.eq	.LBB27_7
.LBB27_2294:                            // %.preheader124.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2297 Depth 3
                                        //         Child Loop BB27_2300 Depth 4
                                        //           Child Loop BB27_2304 Depth 5
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.le	.LBB27_2293
// %bb.2295:                            // %.preheader123.lr.ph.i61.i
                                        //   in Loop: Header=BB27_2294 Depth=2
	ldr	x8, [sp, #728]                  // 8-byte Folded Reload
	ldr	x9, [sp, #488]                  // 8-byte Folded Reload
	sub	x8, x8, x9
	ldr	x9, [sp, #544]                  // 8-byte Folded Reload
	ldr	x25, [sp, #536]                 // 8-byte Folded Reload
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	ldr	x9, [sp, #496]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #704]                  // 8-byte Folded Spill
	ldr	x8, [sp, #552]                  // 8-byte Folded Reload
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	b	.LBB27_2297
	.p2align	5, , 16
.LBB27_2296:                            // %._crit_edge127.i.i634
                                        //   in Loop: Header=BB27_2297 Depth=3
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	add	x25, x25, x8
	ldr	x8, [sp, #584]                  // 8-byte Folded Reload
	ldr	x9, [sp, #608]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #576]                  // 8-byte Folded Reload
	str	x9, [sp, #608]                  // 8-byte Folded Spill
	ldr	x9, [sp, #616]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	str	x9, [sp, #616]                  // 8-byte Folded Spill
	cmp	x8, x25
	b.le	.LBB27_2293
.LBB27_2297:                            // %.preheader123.i62.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2294 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2300 Depth 4
                                        //           Child Loop BB27_2304 Depth 5
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB27_2296
// %bb.2298:                            // %.preheader.lr.ph.i63.i
                                        //   in Loop: Header=BB27_2297 Depth=3
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	mov	x20, xzr
	sub	x8, x25, x8
	ldr	x9, [sp, #568]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	str	x8, [sp, #712]                  // 8-byte Folded Spill
	ldr	x8, [sp, #616]                  // 8-byte Folded Reload
	str	x8, [sp, #672]                  // 8-byte Folded Spill
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	b	.LBB27_2300
	.p2align	5, , 16
.LBB27_2299:                            // %._crit_edge.i65.i
                                        //   in Loop: Header=BB27_2300 Depth=4
	ldr	x8, [sp, #648]                  // 8-byte Folded Reload
	add	x20, x20, #1
	ldr	x9, [sp, #664]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	str	x9, [sp, #664]                  // 8-byte Folded Spill
	ldr	x9, [sp, #672]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #656]                  // 8-byte Folded Reload
	str	x9, [sp, #672]                  // 8-byte Folded Spill
	cmp	x20, x8
	b.eq	.LBB27_2296
.LBB27_2300:                            // %.preheader.i64.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2294 Depth=2
                                        //       Parent Loop BB27_2297 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2304 Depth 5
	cmp	x27, #1
	b.lt	.LBB27_2299
// %bb.2301:                            // %.lr.ph.i66.i
                                        //   in Loop: Header=BB27_2300 Depth=4
	ldr	x8, [sp, #624]                  // 8-byte Folded Reload
	mov	x28, xzr
	sub	x8, x20, x8
	ldr	x9, [sp, #632]                  // 8-byte Folded Reload
	ldr	x19, [sp, #672]                 // 8-byte Folded Reload
	ldr	x24, [sp, #664]                 // 8-byte Folded Reload
	mul	x23, x8, x9
	b	.LBB27_2304
	.p2align	5, , 16
.LBB27_2302:                            //   in Loop: Header=BB27_2304 Depth=5
	ldr	x8, [sp, #696]                  // 8-byte Folded Reload
	ldr	x9, [sp, #680]                  // 8-byte Folded Reload
	sub	x9, x28, x9
	ldr	x8, [x8, #248]
	ldr	x10, [sp, #688]                 // 8-byte Folded Reload
	nop
	madd	x8, x9, x10, x8
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	ldr	x10, [sp, #704]                 // 8-byte Folded Reload
	add	x9, x23, x9
	add	x9, x9, x10
	add	x1, x8, x9
.LBB27_2303:                            //   in Loop: Header=BB27_2304 Depth=5
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	ldr	x2, [sp, #752]                  // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	add	x0, x8, x19
	bl	memcpy
	add	x28, x28, #1
	add	x24, x24, x26
	add	x19, x19, x21
	cmp	x27, x28
	b.eq	.LBB27_2299
.LBB27_2304:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2294 Depth=2
                                        //       Parent Loop BB27_2297 Depth=3
                                        //         Parent Loop BB27_2300 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	cmp	x22, x28
	b.le	.LBB27_2302
// %bb.2305:                            //   in Loop: Header=BB27_2304 Depth=5
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	cmp	x8, x20
	b.le	.LBB27_2302
// %bb.2306:                            //   in Loop: Header=BB27_2304 Depth=5
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	cmp	x8, x25
	b.le	.LBB27_2302
// %bb.2307:                            //   in Loop: Header=BB27_2304 Depth=5
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	ldr	x9, [sp, #728]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.le	.LBB27_2302
// %bb.2308:                            //   in Loop: Header=BB27_2304 Depth=5
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	add	x1, x8, x24
	b	.LBB27_2303
.LBB27_2309:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	fmov	s0, wzr
	b	.LBB27_2319
.LBB27_2310:                            //   in Loop: Header=BB27_3 Depth=1
	mov	w9, #1                          // =0x1
	lsl	x8, x9, x8
	mov	w9, #3                          // =0x3
	movk	w9, #16384, lsl #16
	tst	x8, x9
	b.eq	.LBB27_2799
// %bb.2311:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x20
	bl	ggml_compute_forward_add_non_quantized
	b	.LBB27_7
.LBB27_2312:                            // %.lr.ph.preheader.i100.i.i.new
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	fmov	d0, xzr
	and	x9, x13, #0x7ffffffc
	mov	x8, xzr
	neg	x9, x9
	add	x10, x10, #8
.LBB27_2313:                            // %.lr.ph.i102.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	s1, s2, [x10, #-8]
	sub	x8, x8, #4
	fcvt	d1, s1
	fadd	d0, d0, d1
	fcvt	d1, s2
	fadd	d0, d0, d1
	ldp	s1, s2, [x10], #16
	fcvt	d1, s1
	fadd	d0, d0, d1
	fcvt	d1, s2
	fadd	d0, d0, d1
	cmp	x9, x8
	b.ne	.LBB27_2313
// %bb.2314:                            // %._crit_edge.loopexit.i107.i.i.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_3 Depth=1
	neg	x9, x8
.LBB27_2315:                            // %._crit_edge.loopexit.i107.i.i.unr-lcssa
                                        //   in Loop: Header=BB27_3 Depth=1
	and	x8, x13, #0x3
	cbz	x8, .LBB27_2318
// %bb.2316:                            // %.lr.ph.i102.i.i.epil.preheader
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #664]                 // 8-byte Folded Reload
	add	x9, x10, x9, lsl #2
.LBB27_2317:                            // %.lr.ph.i102.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x8, x8, #1
	fcvt	d1, s1
	fadd	d0, d0, d1
	b.ne	.LBB27_2317
.LBB27_2318:                            // %._crit_edge.loopexit.i107.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	fcvt	s0, d0
.LBB27_2319:                            // %ggml_vec_sum_f32.exit108.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	scvtf	s1, x12
	fmov	s2, #-1.00000000
	ldr	x8, [x11, #248]
	fdiv	s1, s2, s1
	fmul	s0, s1, s0
	str	s0, [x8]
	b	.LBB27_7
.LBB27_2320:                            // %vector.ph114
                                        //   in Loop: Header=BB27_3 Depth=1
	sub	x9, x17, #1
	mov	x11, xzr
	add	x12, x19, #16
	and	x10, x9, #0xfffffffffffffffe
	orr	x8, x9, #0x1
	mov	x13, x10
.LBB27_2321:                            // %vector.body118
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x14, x15, [x12, #-8]
	add	x12, x12, #16
	subs	x13, x13, #2
	add	x21, x14, x21
	add	x11, x15, x11
	b.ne	.LBB27_2321
// %bb.2322:                            // %middle.block111
                                        //   in Loop: Header=BB27_3 Depth=1
	add	x21, x11, x21
	cmp	x9, x10
	b.eq	.LBB27_2407
.LBB27_2323:                            // %.lr.ph140.i.i701.preheader
                                        //   in Loop: Header=BB27_3 Depth=1
	sub	w9, w17, w8
	ands	x10, x9, #0x7
	b.eq	.LBB27_2403
// %bb.2324:                            // %.lr.ph140.i.i701.prol.preheader
                                        //   in Loop: Header=BB27_3 Depth=1
	mov	x9, x8
.LBB27_2325:                            // %.lr.ph140.i.i701.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x11, [x19, x9, lsl #3]
	add	x9, x9, #1
	subs	x10, x10, #1
	add	x21, x11, x21
	b.ne	.LBB27_2325
	b	.LBB27_2404
.LBB27_2326:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, #1
	b.eq	.LBB27_2474
// %bb.2327:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, #30
	b.ne	.LBB27_2477
// %bb.2328:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x19]
	cbz	w8, .LBB27_2518
// %bb.2329:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #30
	b.ne	.LBB27_2800
// %bb.2330:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x24
	bl	ggml_compute_forward_add1_bf16_bf16
	b	.LBB27_7
.LBB27_2331:                            // %._crit_edge51.loopexit.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	fcvt	s0, d0
	b	.LBB27_2409
.LBB27_2332:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, #26
	b.eq	.LBB27_2346
// %bb.2333:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	x8, #30
	b.ne	.LBB27_2339
// %bb.2334:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	ldr	x19, [x11, #160]
	mov	x0, x19
	ldp	x10, x9, [x8, #16]
	ldr	x22, [x11, #72]
	ldp	x25, x28, [x19, #16]
	str	x10, [sp, #720]                 // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	ldp	x10, x9, [x8, #56]
	ldr	x8, [x8, #72]
	ldp	x21, x20, [x11, #56]
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	ldp	x9, x8, [x19, #48]
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [x19, #64]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	bl	ggml_nelements
	ldrsw	x9, [sp, #788]
	add	x10, x0, x9
	ldrsw	x8, [sp, #784]
	sub	x10, x10, #1
	sdiv	x9, x10, x9
	smull	x23, w8, w9
	add	w8, w23, w9
	cmp	x0, w8, sxtw
	csel	w8, w8, w0, gt
	cmp	w23, w8
	b.ge	.LBB27_7
// %bb.2335:                            // %.lr.ph.i13.i
                                        //   in Loop: Header=BB27_3 Depth=1
	mul	x26, x28, x25
	neg	x27, x28
	sxtw	x24, w8
	mneg	x28, x28, x25
.LBB27_2336:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sdiv	x8, x23, x26
	ldr	x11, [x19, #248]
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	nop
	madd	x9, x28, x8, x23
	mul	x10, x27, x8
	sdiv	x9, x9, x25
	sub	x10, x10, x9
	madd	x10, x25, x10, x23
	madd	x11, x10, x12, x11
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	nop
	madd	x11, x9, x12, x11
	ldr	x12, [sp, #728]                 // 8-byte Folded Reload
	mul	x12, x8, x12
	ldrsw	x11, [x11, x12]
	tbnz	w11, #31, .LBB27_2801
// %bb.2337:                            //   in Loop: Header=BB27_2336 Depth=2
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	cmp	x12, x11
	b.le	.LBB27_2801
// %bb.2338:                            //   in Loop: Header=BB27_2336 Depth=2
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	ldr	x13, [sp, #712]                 // 8-byte Folded Reload
	ldr	x2, [sp, #720]                  // 8-byte Folded Reload
	ldr	x12, [x12, #248]
	nop
	madd	x11, x13, x11, x12
	ldr	x12, [sp, #704]                 // 8-byte Folded Reload
	nop
	madd	x11, x9, x12, x11
	ldr	x12, [sp, #696]                 // 8-byte Folded Reload
	nop
	madd	x0, x8, x12, x11
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldr	x11, [x11, #248]
	nop
	madd	x10, x10, x21, x11
	madd	x9, x9, x20, x10
	madd	x1, x8, x22, x9
	bl	ggml_bf16_to_fp32_row
	add	x23, x23, #1
	cmp	x24, x23
	b.ne	.LBB27_2336
	b	.LBB27_7
.LBB27_2339:                            //   in Loop: Header=BB27_3 Depth=1
	cbz	w8, .LBB27_2346
// %bb.2340:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2802
// %bb.2341:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	ldr	x19, [x11, #160]
	mov	x0, x19
	ldp	x10, x9, [x8, #16]
	ldr	x22, [x11, #72]
	ldp	x25, x28, [x19, #16]
	str	x10, [sp, #720]                 // 8-byte Folded Spill
	str	x9, [sp, #752]                  // 8-byte Folded Spill
	ldp	x10, x9, [x8, #56]
	ldr	x8, [x8, #72]
	ldp	x21, x20, [x11, #56]
	str	x9, [sp, #704]                  // 8-byte Folded Spill
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	str	x10, [sp, #712]                 // 8-byte Folded Spill
	ldp	x9, x8, [x19, #48]
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x8, [x19, #64]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	bl	ggml_nelements
	ldrsw	x9, [sp, #788]
	add	x10, x0, x9
	ldrsw	x8, [sp, #784]
	sub	x10, x10, #1
	sdiv	x9, x10, x9
	smull	x23, w8, w9
	add	w8, w23, w9
	cmp	x0, w8, sxtw
	csel	w8, w8, w0, gt
	cmp	w23, w8
	b.ge	.LBB27_7
// %bb.2342:                            // %.lr.ph.i10.i
                                        //   in Loop: Header=BB27_3 Depth=1
	mul	x26, x28, x25
	neg	x27, x28
	sxtw	x24, w8
	mneg	x28, x28, x25
.LBB27_2343:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sdiv	x8, x23, x26
	ldr	x11, [x19, #248]
	ldr	x12, [sp, #744]                 // 8-byte Folded Reload
	nop
	madd	x9, x28, x8, x23
	mul	x10, x27, x8
	sdiv	x9, x9, x25
	sub	x10, x10, x9
	madd	x10, x25, x10, x23
	madd	x11, x10, x12, x11
	ldr	x12, [sp, #736]                 // 8-byte Folded Reload
	nop
	madd	x11, x9, x12, x11
	ldr	x12, [sp, #728]                 // 8-byte Folded Reload
	mul	x12, x8, x12
	ldrsw	x11, [x11, x12]
	tbnz	w11, #31, .LBB27_2803
// %bb.2344:                            //   in Loop: Header=BB27_2343 Depth=2
	ldr	x12, [sp, #752]                 // 8-byte Folded Reload
	cmp	x12, x11
	b.le	.LBB27_2803
// %bb.2345:                            //   in Loop: Header=BB27_2343 Depth=2
	ldr	x12, [sp, #760]                 // 8-byte Folded Reload
	ldr	x13, [sp, #712]                 // 8-byte Folded Reload
	ldr	x2, [sp, #720]                  // 8-byte Folded Reload
	ldr	x12, [x12, #248]
	nop
	madd	x11, x13, x11, x12
	ldr	x12, [sp, #704]                 // 8-byte Folded Reload
	nop
	madd	x11, x9, x12, x11
	ldr	x12, [sp, #696]                 // 8-byte Folded Reload
	nop
	madd	x0, x8, x12, x11
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldr	x11, [x11, #248]
	nop
	madd	x10, x10, x21, x11
	madd	x9, x9, x20, x10
	madd	x1, x8, x22, x9
	bl	ggml_fp16_to_fp32_row
	add	x23, x23, #1
	cmp	x24, x23
	b.ne	.LBB27_2343
	b	.LBB27_7
.LBB27_2346:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	ldr	x19, [x11, #160]
	mov	x0, x19
	ldp	x20, x21, [x8, #16]
	ldr	x23, [x19, #64]
	ldp	x10, x9, [x8, #56]
	str	x10, [sp, #752]                 // 8-byte Folded Spill
	ldr	x8, [x8, #72]
	str	x8, [sp, #736]                  // 8-byte Folded Spill
	ldr	x25, [x11, #72]
	ldp	x24, x8, [x11, #56]
	str	x9, [sp, #744]                  // 8-byte Folded Spill
	ldp	x26, x22, [x19, #16]
	str	x8, [sp, #728]                  // 8-byte Folded Spill
	ldp	x27, x28, [x19, #48]
	bl	ggml_nelements
	ldrsw	x9, [sp, #788]
	add	x10, x0, x9
	ldrsw	x8, [sp, #784]
	sub	x10, x10, #1
	sdiv	x9, x10, x9
	smull	x8, w8, w9
	add	w9, w8, w9
	cmp	x0, w9, sxtw
	csel	w9, w9, w0, gt
	cmp	w8, w9
	b.ge	.LBB27_7
// %bb.2347:                            // %.lr.ph.i17.i
                                        //   in Loop: Header=BB27_3 Depth=1
	mul	x10, x22, x26
	ldr	x13, [x19, #248]
	and	x14, x20, #0x7fffffff
	and	x12, x20, #0x7
	sxtw	x9, w9
	sub	x11, x14, #1
	sub	x14, x12, x14
	neg	x15, x22
	b	.LBB27_2349
.LBB27_2348:                            // %ggml_vec_cpy_f32.exit.i.i
                                        //   in Loop: Header=BB27_2349 Depth=2
	add	x8, x8, #1
	cmp	x8, x9
	b.eq	.LBB27_7
.LBB27_2349:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2355 Depth 3
                                        //       Child Loop BB27_2359 Depth 3
	sdiv	x16, x8, x10
	msub	x0, x16, x10, x8
	mul	x1, x16, x23
	sdiv	x17, x0, x26
	msub	x0, x17, x26, x0
	madd	x0, x0, x27, x13
	madd	x0, x17, x28, x0
	ldrsw	x2, [x0, x1]
	tbnz	w2, #31, .LBB27_2535
// %bb.2350:                            //   in Loop: Header=BB27_2349 Depth=2
	cmp	x21, x2
	b.le	.LBB27_2535
// %bb.2351:                            //   in Loop: Header=BB27_2349 Depth=2
	cmp	w20, #1
	b.lt	.LBB27_2348
// %bb.2352:                            // %.lr.ph.i.i.i418.preheader
                                        //   in Loop: Header=BB27_2349 Depth=2
	ldr	x3, [sp, #752]                  // 8-byte Folded Reload
	mul	x6, x16, x25
	mul	x2, x3, x2
	ldr	x1, [sp, #728]                  // 8-byte Folded Reload
	ldr	x3, [sp, #744]                  // 8-byte Folded Reload
	ldr	x5, [sp, #736]                  // 8-byte Folded Reload
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	mul	x4, x17, x1
	mul	x5, x16, x5
	mul	x3, x17, x3
	ldr	x1, [sp, #760]                  // 8-byte Folded Reload
	ldr	x0, [x0, #248]
	ldr	x1, [x1, #248]
	cmp	x11, #7
	b.hs	.LBB27_2354
// %bb.2353:                            //   in Loop: Header=BB27_2349 Depth=2
	mov	x7, xzr
	b	.LBB27_2357
.LBB27_2354:                            // %.lr.ph.i.i.i418.preheader1538
                                        //   in Loop: Header=BB27_2349 Depth=2
	neg	x19, x17
	add	x22, x6, x4
	madd	x19, x15, x16, x19
	mov	x7, xzr
	madd	x19, x26, x19, x8
	madd	x19, x24, x19, x22
	add	x22, x5, x3
	add	x22, x1, x22
	add	x22, x22, x2
	add	x22, x22, #16
	add	x19, x0, x19
	add	x19, x19, #16
	.p2align	5, , 16
.LBB27_2355:                            // %.lr.ph.i.i.i418
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2349 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s0, [x22, #-16]
	sub	x7, x7, #8
	stur	s0, [x19, #-16]
	ldur	s0, [x22, #-12]
	stur	s0, [x19, #-12]
	ldur	s0, [x22, #-8]
	stur	s0, [x19, #-8]
	ldur	s0, [x22, #-4]
	stur	s0, [x19, #-4]
	ldr	s0, [x22]
	str	s0, [x19]
	ldr	s0, [x22, #4]
	str	s0, [x19, #4]
	ldr	s0, [x22, #8]
	str	s0, [x19, #8]
	ldr	s0, [x22, #12]
	add	x22, x22, #32
	str	s0, [x19, #12]
	add	x19, x19, #32
	cmp	x14, x7
	b.ne	.LBB27_2355
// %bb.2356:                            // %ggml_vec_cpy_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2349 Depth=2
	neg	x7, x7
.LBB27_2357:                            // %ggml_vec_cpy_f32.exit.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2349 Depth=2
	cbz	x12, .LBB27_2348
// %bb.2358:                            // %.lr.ph.i.i.i418.epil.preheader
                                        //   in Loop: Header=BB27_2349 Depth=2
	mul	x16, x15, x16
	sub	x16, x16, x17
	add	x17, x6, x4
	madd	x16, x26, x16, x8
	madd	x16, x24, x16, x17
	add	x17, x5, x3
	add	x17, x17, x2
	add	x17, x17, x7, lsl #2
	add	x17, x1, x17
	add	x16, x16, x7, lsl #2
	add	x16, x0, x16
	mov	x0, x12
	.p2align	5, , 16
.LBB27_2359:                            // %.lr.ph.i.i.i418.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2349 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x17], #4
	subs	x0, x0, #1
	str	s0, [x16], #4
	b.ne	.LBB27_2359
	b	.LBB27_2348
.LBB27_2360:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_sgn
	b	.LBB27_7
.LBB27_2361:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_neg
	b	.LBB27_7
.LBB27_2362:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_step
	b	.LBB27_7
.LBB27_2363:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_tanh
	b	.LBB27_7
.LBB27_2364:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_elu
	b	.LBB27_7
.LBB27_2365:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_relu
	b	.LBB27_7
.LBB27_2366:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_sigmoid
	b	.LBB27_7
.LBB27_2367:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x19, #152]
	adrp	x21, ggml_table_gelu_f16
	add	x21, x21, :lo12:ggml_table_gelu_f16
	ldr	w8, [x19]
	cmp	w8, #1
	b.eq	.LBB27_2494
// %bb.2368:                            //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2804
// %bb.2369:                            //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x23, [sp, #784]
	mov	x0, x19
	ldr	w24, [sp, #788]
	ldr	x22, [x19, #16]
	bl	ggml_nrows
	add	w8, w24, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w24
	smull	x8, w23, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w12, w9, w0, lt
	cmp	w8, w12
	b.ge	.LBB27_7
// %bb.2370:                            // %.lr.ph.i.i.i99
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	and	x11, x22, #0x7fffffff
	sxtw	x12, w12
	ldr	x14, [x19, #248]
	ldr	x10, [x19, #56]
	nop
	madd	x14, x10, x8, x14
	ldr	x13, [x9, #248]
	ldr	x9, [x9, #56]
	nop
	madd	x13, x9, x8, x13
	b	.LBB27_2372
.LBB27_2371:                            // %ggml_vec_gelu_f32.exit.i.i.i
                                        //   in Loop: Header=BB27_2372 Depth=2
	add	x8, x8, #1
	add	x13, x13, x9
	add	x14, x14, x10
	cmp	x8, x12
	b.eq	.LBB27_7
.LBB27_2372:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2376 Depth 3
	cmp	w22, #1
	b.lt	.LBB27_2371
// %bb.2373:                            // %.lr.ph.i.i.i.i.preheader
                                        //   in Loop: Header=BB27_2372 Depth=2
	mov	x15, x14
	mov	x16, x13
	mov	x17, x11
	b	.LBB27_2376
.LBB27_2374:                            //   in Loop: Header=BB27_2376 Depth=3
	mov	w0, #2004877312                 // =0x77800000
	fabs	s1, s0
	mov	w3, #125829120                  // =0x7800000
	fmov	s2, w0
	mov	w0, #142606336                  // =0x8800000
	fmul	s1, s1, s2
	fmov	s2, w0
	fmov	w0, s0
	and	w2, w0, #0x7f800000
	fmul	s1, s1, s2
	lsl	w1, w0, #1
	add	w2, w2, w3
	ubfx	w3, w0, #23, #8
	lsr	w0, w0, #31
	cmp	w3, #113
	mov	w3, #1073741824                 // =0x40000000
	csel	w2, w3, w2, lo
	fmov	s0, w2
	fadd	s0, s1, s0
	fmov	w2, s0
	lsr	w3, w2, #13
	and	w2, w2, #0xfff
	and	w3, w3, #0x7c00
	add	w2, w3, w2
	mov	w3, #-16777216                  // =0xff000000
	cmp	w1, w3
	mov	w1, #32256                      // =0x7e00
	csel	w1, w1, w2, hi
	orr	w0, w1, w0, lsl #15
	ldrh	w0, [x21, w0, uxtw #1]
	ldr	s1, [x20, x0, lsl #2]
.LBB27_2375:                            //   in Loop: Header=BB27_2376 Depth=3
	subs	x17, x17, #1
	add	x15, x15, #4
	str	s1, [x16], #4
	b.eq	.LBB27_2371
.LBB27_2376:                            // %.lr.ph.i.i.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2372 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s0, [x15]
	fmov	s2, #-10.00000000
	fmov	s1, wzr
	fcmp	s0, s2
	b.ls	.LBB27_2375
// %bb.2377:                            //   in Loop: Header=BB27_2376 Depth=3
	fmov	s1, #10.00000000
	fcmp	s0, s1
	b.lt	.LBB27_2374
// %bb.2378:                            //   in Loop: Header=BB27_2376 Depth=3
	fmov	s1, s0
	b	.LBB27_2375
.LBB27_2379:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x19, #152]
	ldr	w8, [x19]
	cmp	w8, #1
	b.eq	.LBB27_2506
// %bb.2380:                            //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2805
// %bb.2381:                            //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x22, [sp, #784]
	mov	x0, x19
	ldr	w23, [sp, #788]
	ldr	x21, [x19, #16]
	bl	ggml_nrows
	add	w8, w23, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w23
	smull	x8, w22, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w12, w9, w0, lt
	cmp	w8, w12
	b.ge	.LBB27_7
// %bb.2382:                            // %.lr.ph.i.i39.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	and	x11, x21, #0x7fffffff
	sxtw	x12, w12
	ldr	x14, [x19, #248]
	ldr	x10, [x19, #56]
	nop
	madd	x14, x10, x8, x14
	ldr	x13, [x9, #248]
	ldr	x9, [x9, #56]
	nop
	madd	x13, x9, x8, x13
	b	.LBB27_2384
.LBB27_2383:                            // %ggml_vec_gelu_quick_f32.exit.i.i.i
                                        //   in Loop: Header=BB27_2384 Depth=2
	add	x8, x8, #1
	add	x13, x13, x9
	add	x14, x14, x10
	cmp	x8, x12
	b.eq	.LBB27_7
.LBB27_2384:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2386 Depth 3
	cmp	w21, #1
	b.lt	.LBB27_2383
// %bb.2385:                            // %.lr.ph.i.i.i45.i.preheader
                                        //   in Loop: Header=BB27_2384 Depth=2
	mov	x15, x14
	mov	x16, x13
	mov	x17, x11
	.p2align	5, , 16
.LBB27_2386:                            // %.lr.ph.i.i.i45.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2384 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov	w0, #2004877312                 // =0x77800000
	ldr	s0, [x15], #4
	fmov	s2, w0
	fabs	s1, s0
	mov	w0, #142606336                  // =0x8800000
	mov	w1, #125829120                  // =0x7800000
	fmul	s1, s1, s2
	fmov	s2, w0
	fmov	w0, s0
	and	w2, w0, #0x7f800000
	ubfx	w3, w0, #23, #8
	fmul	s0, s1, s2
	add	w1, w2, w1
	mov	w2, #1073741824                 // =0x40000000
	cmp	w3, #113
	lsl	w3, w0, #1
	lsr	w0, w0, #31
	csel	w1, w2, w1, lo
	mov	w2, #-16777216                  // =0xff000000
	fmov	s1, w1
	cmp	w3, w2
	mov	w3, #32256                      // =0x7e00
	fadd	s0, s0, s1
	fmov	w1, s0
	lsr	w2, w1, #13
	and	w1, w1, #0xfff
	and	w2, w2, #0x7c00
	add	w1, w2, w1
	adrp	x2, ggml_table_gelu_quick_f16
	add	x2, x2, :lo12:ggml_table_gelu_quick_f16
	csel	w1, w3, w1, hi
	subs	x17, x17, #1
	orr	w0, w1, w0, lsl #15
	ldrh	w0, [x2, w0, uxtw #1]
	ldr	s0, [x20, x0, lsl #2]
	str	s0, [x16], #4
	b.ne	.LBB27_2386
	b	.LBB27_2383
.LBB27_2387:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x19, #152]
	ldr	w8, [x19]
	cmp	w8, #1
	b.eq	.LBB27_2512
// %bb.2388:                            //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2806
// %bb.2389:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #16]
	mov	x0, x19
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldrsw	x20, [sp, #784]
	ldr	w21, [sp, #788]
	bl	ggml_nrows
	add	w8, w21, w0
	sub	w8, w8, #1
	sdiv	w8, w8, w21
	smull	x21, w20, w8
	add	w8, w21, w8
	cmp	w8, w0
	csel	w8, w8, w0, lt
	cmp	w21, w8
	b.ge	.LBB27_7
// %bb.2390:                            // %.lr.ph.i.i59.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	sxtw	x26, w8
	ldr	x11, [x19, #248]
	str	x11, [sp, #736]                 // 8-byte Folded Spill
	ldr	x10, [x9, #248]
	ldr	x23, [x9, #56]
	ldr	x9, [sp, #760]                  // 8-byte Folded Reload
	and	x12, x9, #0x7fffffff
	ldr	x19, [x19, #56]
	and	x8, x9, #0x1
	str	x10, [sp, #744]                 // 8-byte Folded Spill
	str	x8, [sp, #752]                  // 8-byte Folded Spill
	sub	x28, x8, x12
	madd	x8, x19, x21, x11
	str	x12, [sp, #768]                 // 8-byte Folded Spill
	add	x20, x8, #4
	madd	x8, x23, x21, x10
	add	x27, x8, #4
	b	.LBB27_2392
.LBB27_2391:                            // %ggml_vec_silu_f32.exit.i.i.i
                                        //   in Loop: Header=BB27_2392 Depth=2
	add	x21, x21, #1
	add	x20, x20, x19
	add	x27, x27, x23
	cmp	x21, x26
	b.eq	.LBB27_7
.LBB27_2392:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2396 Depth 3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB27_2391
// %bb.2393:                            // %.lr.ph.i.i.i65.i.preheader
                                        //   in Loop: Header=BB27_2392 Depth=2
	ldr	x8, [sp, #768]                  // 8-byte Folded Reload
	cmp	x8, #1
	b.ne	.LBB27_2395
// %bb.2394:                            //   in Loop: Header=BB27_2392 Depth=2
	mov	x22, xzr
	b	.LBB27_2398
.LBB27_2395:                            // %.lr.ph.i.i.i65.i.preheader1556
                                        //   in Loop: Header=BB27_2392 Depth=2
	mov	x25, xzr
	mov	x24, x27
	mov	x22, x20
.LBB27_2396:                            // %.lr.ph.i.i.i65.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2392 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s8, [x22, #-4]
	fneg	s0, s8
	bl	expf
	fmov	s9, #1.00000000
	fadd	s0, s0, s9
	fdiv	s0, s8, s0
	stur	s0, [x24, #-4]
	ldr	s8, [x22], #8
	fneg	s0, s8
	bl	expf
	fadd	s0, s0, s9
	sub	x25, x25, #2
	fdiv	s0, s8, s0
	str	s0, [x24], #8
	cmp	x28, x25
	b.ne	.LBB27_2396
// %bb.2397:                            // %ggml_vec_silu_f32.exit.i.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2392 Depth=2
	neg	x22, x25
.LBB27_2398:                            // %ggml_vec_silu_f32.exit.i.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2392 Depth=2
	ldr	x8, [sp, #752]                  // 8-byte Folded Reload
	cbz	x8, .LBB27_2391
// %bb.2399:                            // %.lr.ph.i.i.i65.i.epil
                                        //   in Loop: Header=BB27_2392 Depth=2
	ldr	x8, [sp, #744]                  // 8-byte Folded Reload
	nop
	madd	x24, x21, x23, x8
	ldr	x8, [sp, #736]                  // 8-byte Folded Reload
	nop
	madd	x8, x21, x19, x8
	ldr	s8, [x8, x22, lsl #2]
	fneg	s0, s8
	bl	expf
	fmov	s1, #1.00000000
	fadd	s0, s0, s1
	fdiv	s0, s8, s0
	str	s0, [x24, x22, lsl #2]
	b	.LBB27_2391
.LBB27_2400:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_hardswish
	b	.LBB27_7
.LBB27_2401:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_hardsigmoid
	b	.LBB27_7
.LBB27_2402:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x19
	bl	ggml_compute_forward_exp
	b	.LBB27_7
.LBB27_2403:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x9, x8
.LBB27_2404:                            // %.lr.ph140.i.i701.prol.loopexit
                                        //   in Loop: Header=BB27_3 Depth=1
	sub	x8, x8, x17
	cmn	x8, #8
	b.hi	.LBB27_2407
// %bb.2405:                            // %.lr.ph140.i.i701.preheader.new
                                        //   in Loop: Header=BB27_3 Depth=1
	add	x10, x19, x9, lsl #3
	sub	x8, x17, x9
	add	x9, x10, #32
.LBB27_2406:                            // %.lr.ph140.i.i701
                                        //   Parent Loop BB27_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x10, x11, [x9, #-32]
	subs	x8, x8, #8
	ldp	x12, x13, [x9, #-16]
	add	x11, x12, x11
	ldp	x12, x14, [x9]
	add	x10, x10, x21
	add	x10, x11, x10
	add	x12, x12, x13
	add	x11, x14, x12
	add	x10, x11, x10
	ldp	x11, x12, [x9, #16]
	add	x9, x9, #64
	add	x11, x12, x11
	add	x21, x11, x10
	b.ne	.LBB27_2406
.LBB27_2407:                            // %._crit_edge141.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x16, #248]
	str	x21, [x8]
	b	.LBB27_7
.LBB27_2408:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x23, [sp, #768]                 // 8-byte Folded Reload
	fmov	s0, wzr
.LBB27_2409:                            // %._crit_edge51.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x23, #248]
	str	s0, [x8]
	b	.LBB27_7
.LBB27_2410:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x24, [sp, #768]                 // 8-byte Folded Reload
	fmov	s0, wzr
.LBB27_2411:                            // %._crit_edge51.i40.i
                                        //   in Loop: Header=BB27_3 Depth=1
	fmov	w9, s0
	mov	w11, #1                         // =0x1
	movk	w11, #32640, lsl #16
	ldr	x8, [x24, #248]
	and	w10, w9, #0x7fffffff
	cmp	w10, w11
	b.lo	.LBB27_2413
// %bb.2412:                            //   in Loop: Header=BB27_3 Depth=1
	lsr	w9, w9, #16
	orr	w9, w9, #0x40
	strh	w9, [x8]
	b	.LBB27_7
.LBB27_2413:                            //   in Loop: Header=BB27_3 Depth=1
	ubfx	w10, w9, #16, #1
	add	w9, w9, w10
	mov	w10, #32767                     // =0x7fff
	add	w9, w9, w10
	lsr	w9, w9, #16
	strh	w9, [x8]
	b	.LBB27_7
.LBB27_2414:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x22, [sp, #768]                 // 8-byte Folded Reload
	fmov	s0, wzr
.LBB27_2415:                            // %._crit_edge51.i9.i
                                        //   in Loop: Header=BB27_3 Depth=1
	mov	w8, #2004877312                 // =0x77800000
	fabs	s1, s0
	mov	w11, #125829120                 // =0x7800000
	fmov	s2, w8
	mov	w8, #142606336                  // =0x8800000
	fmul	s1, s1, s2
	fmov	s2, w8
	fmov	w8, s0
	and	w10, w8, #0x7f800000
	fmul	s1, s1, s2
	lsl	w9, w8, #1
	add	w10, w10, w11
	ubfx	w11, w8, #23, #8
	lsr	w8, w8, #31
	cmp	w11, #113
	mov	w11, #1073741824                // =0x40000000
	csel	w10, w11, w10, lo
	fmov	s0, w10
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	mov	w11, #-16777216                 // =0xff000000
	cmp	w9, w11
	mov	w9, #32256                      // =0x7e00
	csel	w9, w9, w10, hi
	orr	w8, w9, w8, lsl #15
	ldr	x9, [x22, #248]
	strh	w8, [x9]
	b	.LBB27_7
.LBB27_2416:                            //   in Loop: Header=BB27_3 Depth=1
	cbnz	x19, .LBB27_2807
// %bb.2417:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x10]
	cbnz	w8, .LBB27_2809
// %bb.2418:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x12, [x10, #160]
	ldr	w8, [x12]
	cbnz	w8, .LBB27_2810
// %bb.2419:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x21, [x11, #16]
	ldr	x8, [x10, #16]
	cmp	x8, x21
	b.ne	.LBB27_2811
// %bb.2420:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [x12, #16]
	str	x9, [sp, #680]                  // 8-byte Folded Spill
	ldr	x8, [x10, #24]
	cmp	x8, x9
	b.ne	.LBB27_2812
// %bb.2421:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x19, [x12, #32]
	ldr	x8, [x10, #32]
	cmp	x8, x19
	b.ne	.LBB27_2813
// %bb.2422:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x20, [x12, #40]
	ldr	x8, [x10, #40]
	cmp	x8, x20
	b.ne	.LBB27_2814
// %bb.2423:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	ldr	x8, [x9, #32]
	sdiv	x11, x19, x8
	str	x11, [sp, #568]                 // 8-byte Folded Spill
	nop
	msub	x8, x11, x8, x19
	cbnz	x8, .LBB27_2815
// %bb.2424:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #40]
	sdiv	x11, x20, x8
	str	x11, [sp, #560]                 // 8-byte Folded Spill
	nop
	msub	x8, x11, x8, x20
	cbnz	x8, .LBB27_2816
// %bb.2425:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x9, #48]
	cmp	x8, #4
	b.ne	.LBB27_2817
// %bb.2426:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x10, #48]
	cmp	x8, #4
	b.ne	.LBB27_2818
// %bb.2427:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #640]                  // 8-byte Folded Reload
	str	x12, [sp, #576]                 // 8-byte Folded Spill
	ldrsw	x22, [sp, #784]
	ldrsw	x23, [sp, #788]
	ldr	x9, [x8, #24]
	str	x9, [sp, #352]                  // 8-byte Folded Spill
	ldp	x11, x9, [x8, #56]
	ldr	x8, [x8, #72]
	str	x9, [sp, #552]                  // 8-byte Folded Spill
	str	x8, [sp, #544]                  // 8-byte Folded Spill
	str	x11, [sp, #592]                 // 8-byte Folded Spill
	ldp	x9, x8, [x12, #48]
	str	x9, [sp, #536]                  // 8-byte Folded Spill
	str	x8, [sp, #584]                  // 8-byte Folded Spill
	ldp	x9, x8, [x12, #64]
	str	x9, [sp, #528]                  // 8-byte Folded Spill
	str	x8, [sp, #520]                  // 8-byte Folded Spill
	ldr	x8, [x10, #72]
	ldp	x9, x11, [x10, #56]
	str	x9, [sp, #512]                  // 8-byte Folded Spill
	stp	x8, x11, [sp, #488]             // 16-byte Folded Spill
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	mul	x8, x19, x8
	str	x8, [sp, #600]                  // 8-byte Folded Spill
	cbnz	w22, .LBB27_2430
// %bb.2428:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	mul	x8, x8, x21
	mul	x8, x8, x20
	cmp	w8, #1
	b.lt	.LBB27_2430
// %bb.2429:                            // %.lr.ph.preheader.i.i11.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x0, [x10, #248]
	ubfiz	x2, x8, #2, #31
	mov	w1, wzr
	bl	memset
.LBB27_2430:                            // %ggml_vec_set_f32.exit.i6.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #808]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2432
// %bb.2431:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w1, [sp, #300]                  // 4-byte Folded Reload
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_2432:                            // %ggml_barrier.exit.i7.i460
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	mul	x8, x8, x20
	add	x9, x8, x23
	sub	x9, x9, #1
	sdiv	x9, x9, x23
	mul	x10, x9, x22
	add	x9, x10, x9
	str	x10, [sp, #360]                 // 8-byte Folded Spill
	cmp	x9, x8
	csel	x8, x9, x8, lt
	str	x8, [sp, #344]                  // 8-byte Folded Spill
	cmp	x10, x8
	b.ge	.LBB27_7
// %bb.2433:                            // %.lr.ph246.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #584]                  // 8-byte Folded Reload
	and	x13, x21, #0x7fffffff
	and	x14, x21, #0x1
	ldr	x8, [sp, #592]                  // 8-byte Folded Reload
	str	x13, [sp, #480]                 // 8-byte Folded Spill
	sub	x13, x13, x14
	str	x13, [sp, #472]                 // 8-byte Folded Spill
	neg	x13, x19
	mov	w12, w21
	str	x13, [sp, #456]                 // 8-byte Folded Spill
	sub	x15, x12, x14
	str	x14, [sp, #704]                 // 8-byte Folded Spill
	sxtw	x11, w9
	sxtw	x10, w8
	lsl	x9, x9, #5
	lsl	x13, x11, #1
	str	x9, [sp, #712]                  // 8-byte Folded Spill
	lsl	x9, x10, #1
	str	x13, [sp, #272]                 // 8-byte Folded Spill
	add	x13, x13, x11
	lsl	x8, x8, #5
	stp	x9, x13, [sp, #248]             // 16-byte Folded Spill
	add	x9, x9, x10
	stp	x11, x10, [sp, #304]            // 16-byte Folded Spill
	lsl	x3, x11, #2
	lsl	x7, x10, #2
	str	x9, [sp, #240]                  // 8-byte Folded Spill
	str	x8, [sp, #696]                  // 8-byte Folded Spill
	b	.LBB27_2435
.LBB27_2434:                            // %.loopexit224.i.i
                                        //   in Loop: Header=BB27_2435 Depth=2
	ldp	x9, x8, [sp, #336]              // 16-byte Folded Reload
	str	x9, [sp, #360]                  // 8-byte Folded Spill
	cmp	x9, x8
	b.ge	.LBB27_7
.LBB27_2435:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2438 Depth 3
                                        //         Child Loop BB27_2440 Depth 4
                                        //           Child Loop BB27_2443 Depth 5
                                        //             Child Loop BB27_2444 Depth 6
                                        //             Child Loop BB27_2447 Depth 6
                                        //               Child Loop BB27_2451 Depth 7
                                        //               Child Loop BB27_2455 Depth 7
                                        //               Child Loop BB27_2458 Depth 7
                                        //           Child Loop BB27_2462 Depth 5
                                        //             Child Loop BB27_2466 Depth 6
                                        //             Child Loop BB27_2470 Depth 6
                                        //             Child Loop BB27_2473 Depth 6
	ldr	x8, [sp, #360]                  // 8-byte Folded Reload
	add	x9, x8, #16
	ldr	x8, [sp, #344]                  // 8-byte Folded Reload
	ldr	x22, [sp, #704]                 // 8-byte Folded Reload
	ldr	x25, [sp, #696]                 // 8-byte Folded Reload
	str	x9, [sp, #336]                  // 8-byte Folded Spill
	cmp	x9, x8
	csel	x8, x9, x8, lt
	ldr	x9, [sp, #352]                  // 8-byte Folded Reload
	str	x8, [sp, #608]                  // 8-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB27_2434
// %bb.2436:                            // %.lr.ph241.i.i.preheader
                                        //   in Loop: Header=BB27_2435 Depth=2
	ldr	x10, [sp, #304]                 // 8-byte Folded Reload
	stp	xzr, xzr, [sp, #440]            // 16-byte Folded Spill
	mov	x11, xzr
	mov	w8, #32                         // =0x20
	str	x10, [sp, #432]                 // 8-byte Folded Spill
	ldr	x10, [sp, #312]                 // 8-byte Folded Reload
	str	x10, [sp, #424]                 // 8-byte Folded Spill
	ldr	x10, [sp, #272]                 // 8-byte Folded Reload
	str	x10, [sp, #416]                 // 8-byte Folded Spill
	ldr	x10, [sp, #248]                 // 8-byte Folded Reload
	str	x10, [sp, #408]                 // 8-byte Folded Spill
	ldr	x10, [sp, #240]                 // 8-byte Folded Reload
	str	x10, [sp, #400]                 // 8-byte Folded Spill
	ldr	x10, [sp, #256]                 // 8-byte Folded Reload
	str	x10, [sp, #392]                 // 8-byte Folded Spill
	b	.LBB27_2438
	.p2align	5, , 16
.LBB27_2437:                            // %.loopexit.i.i463
                                        //   in Loop: Header=BB27_2438 Depth=3
	ldr	x8, [sp, #712]                  // 8-byte Folded Reload
	ldr	x9, [sp, #392]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #392]                  // 8-byte Folded Spill
	ldr	x9, [sp, #400]                  // 8-byte Folded Reload
	add	x9, x9, x25
	str	x9, [sp, #400]                  // 8-byte Folded Spill
	ldr	x9, [sp, #408]                  // 8-byte Folded Reload
	add	x9, x9, x25
	str	x9, [sp, #408]                  // 8-byte Folded Spill
	ldr	x9, [sp, #440]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #440]                  // 8-byte Folded Spill
	ldr	x9, [sp, #416]                  // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #416]                  // 8-byte Folded Spill
	ldr	x9, [sp, #424]                  // 8-byte Folded Reload
	add	x9, x9, x25
	str	x9, [sp, #424]                  // 8-byte Folded Spill
	ldr	x9, [sp, #432]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #448]                  // 8-byte Folded Reload
	str	x9, [sp, #432]                  // 8-byte Folded Spill
	ldr	x9, [sp, #352]                  // 8-byte Folded Reload
	add	x8, x8, x25
	str	x8, [sp, #448]                  // 8-byte Folded Spill
	ldp	x11, x8, [sp, #368]             // 16-byte Folded Reload
	add	x8, x8, #32
	cmp	x11, x9
	b.ge	.LBB27_2434
.LBB27_2438:                            // %.lr.ph241.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB27_2440 Depth 4
                                        //           Child Loop BB27_2443 Depth 5
                                        //             Child Loop BB27_2444 Depth 6
                                        //             Child Loop BB27_2447 Depth 6
                                        //               Child Loop BB27_2451 Depth 7
                                        //               Child Loop BB27_2455 Depth 7
                                        //               Child Loop BB27_2458 Depth 7
                                        //           Child Loop BB27_2462 Depth 5
                                        //             Child Loop BB27_2466 Depth 6
                                        //             Child Loop BB27_2470 Depth 6
                                        //             Child Loop BB27_2473 Depth 6
	cmp	x9, x8
	str	x8, [sp, #376]                  // 8-byte Folded Spill
	ldr	x26, [sp, #360]                 // 8-byte Folded Reload
	csel	x8, x9, x8, lt
	str	x11, [sp, #632]                 // 8-byte Folded Spill
	ubfx	x8, x8, #5, #58
	mul	x8, x25, x8
	str	x8, [sp, #384]                  // 8-byte Folded Spill
	add	x8, x11, #32
	cmp	x8, x9
	str	x8, [sp, #368]                  // 8-byte Folded Spill
	csel	x24, x8, x9, lt
	and	x8, x24, #0x7fffffffffffffe0
	str	x24, [sp, #616]                 // 8-byte Folded Spill
	str	x8, [sp, #720]                  // 8-byte Folded Spill
	b	.LBB27_2440
	.p2align	5, , 16
.LBB27_2439:                            // %._crit_edge.i8.i
                                        //   in Loop: Header=BB27_2440 Depth=4
	ldr	x8, [sp, #608]                  // 8-byte Folded Reload
	add	x26, x26, #1
	cmp	x26, x8
	b.ge	.LBB27_2437
.LBB27_2440:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB27_2443 Depth 5
                                        //             Child Loop BB27_2444 Depth 6
                                        //             Child Loop BB27_2447 Depth 6
                                        //               Child Loop BB27_2451 Depth 7
                                        //               Child Loop BB27_2455 Depth 7
                                        //               Child Loop BB27_2458 Depth 7
                                        //           Child Loop BB27_2462 Depth 5
                                        //             Child Loop BB27_2466 Depth 6
                                        //             Child Loop BB27_2470 Depth 6
                                        //             Child Loop BB27_2473 Depth 6
	ldr	x8, [sp, #600]                  // 8-byte Folded Reload
	str	x26, [sp, #688]                 // 8-byte Folded Spill
	sdiv	x10, x26, x8
	str	x10, [sp, #672]                 // 8-byte Folded Spill
	nop
	msub	x9, x10, x8, x26
	ldr	x8, [sp, #680]                  // 8-byte Folded Reload
	str	x9, [sp, #624]                  // 8-byte Folded Spill
	sdiv	x9, x9, x8
	ldr	x8, [sp, #568]                  // 8-byte Folded Reload
	str	x9, [sp, #648]                  // 8-byte Folded Spill
	sdiv	x8, x9, x8
	ldr	x9, [sp, #552]                  // 8-byte Folded Reload
	mul	x8, x8, x9
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	str	x8, [sp, #664]                  // 8-byte Folded Spill
	ldr	x8, [sp, #560]                  // 8-byte Folded Reload
	sdiv	x8, x10, x8
	str	x8, [sp, #656]                  // 8-byte Folded Spill
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	cmp	x8, x9
	b.hs	.LBB27_2459
// %bb.2441:                            // %.lr.ph.i10.i464
                                        //   in Loop: Header=BB27_2440 Depth=4
	ldr	x1, [sp, #648]                  // 8-byte Folded Reload
	neg	x8, x1
	ldr	x9, [sp, #456]                  // 8-byte Folded Reload
	ldr	x2, [sp, #672]                  // 8-byte Folded Reload
	ldr	x10, [sp, #680]                 // 8-byte Folded Reload
	ldr	x11, [sp, #688]                 // 8-byte Folded Reload
	nop
	madd	x8, x9, x2, x8
	ldp	x13, x14, [sp, #392]            // 16-byte Folded Reload
	nop
	madd	x8, x10, x8, x11
	ldr	x10, [sp, #640]                 // 8-byte Folded Reload
	ldr	x9, [sp, #496]                  // 8-byte Folded Reload
	mul	x9, x1, x9
	ldr	x11, [sp, #576]                 // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	ldr	x11, [x11, #248]
	add	x16, x10, x14
	ldr	x14, [sp, #488]                 // 8-byte Folded Reload
	add	x13, x11, x13
	madd	x9, x2, x14, x9
	ldr	x14, [sp, #408]                 // 8-byte Folded Reload
	add	x17, x10, x14
	ldr	x14, [sp, #440]                 // 8-byte Folded Reload
	add	x4, x11, x14
	ldr	x14, [sp, #416]                 // 8-byte Folded Reload
	add	x5, x11, x14
	ldr	x14, [sp, #424]                 // 8-byte Folded Reload
	add	x0, x10, x14
	ldr	x14, [sp, #528]                 // 8-byte Folded Reload
	mul	x1, x1, x14
	ldr	x14, [sp, #432]                 // 8-byte Folded Reload
	add	x19, x11, x14
	ldr	x11, [sp, #448]                 // 8-byte Folded Reload
	ldr	x14, [sp, #664]                 // 8-byte Folded Reload
	add	x10, x10, x11
	ldr	x11, [sp, #512]                 // 8-byte Folded Reload
	add	x6, x16, x14
	add	x27, x17, x14
	ldr	x17, [sp, #656]                 // 8-byte Folded Reload
	add	x23, x10, x14
	madd	x9, x11, x8, x9
	ldr	x11, [sp, #768]                 // 8-byte Folded Reload
	ldr	x22, [x11, #248]
	ldr	x11, [sp, #520]                 // 8-byte Folded Reload
	nop
	madd	x16, x2, x11, x1
	ldr	x11, [sp, #544]                 // 8-byte Folded Reload
	add	x26, x22, x9
	ldr	x9, [sp, #536]                  // 8-byte Folded Reload
	add	x30, x26, #4
	mul	x20, x17, x11
	mul	x24, x9, x8
	ldr	x8, [sp, #632]                  // 8-byte Folded Reload
	add	x17, x0, x14
	add	x0, x13, x16
	add	x11, x4, x16
	add	x13, x5, x16
	add	x10, x19, x16
	add	x4, x26, #8
	b	.LBB27_2443
	.p2align	5, , 16
.LBB27_2442:                            // %ggml_vec_mad_f32_unroll.exit.i.i
                                        //   in Loop: Header=BB27_2443 Depth=5
	ldr	x9, [sp, #712]                  // 8-byte Folded Reload
	add	x8, x8, #32
	add	x6, x6, x25
	ldr	x17, [sp, #744]                 // 8-byte Folded Reload
	add	x27, x27, x25
	add	x0, x0, x9
	ldr	x23, [sp, #736]                 // 8-byte Folded Reload
	add	x11, x11, x9
	add	x13, x13, x9
	add	x10, x10, x9
	ldr	x9, [sp, #720]                  // 8-byte Folded Reload
	add	x17, x17, x25
	add	x23, x23, x25
	cmp	x8, x9
	b.hs	.LBB27_2459
.LBB27_2443:                            // %vector.ph240
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_2444 Depth 6
                                        //             Child Loop BB27_2447 Depth 6
                                        //               Child Loop BB27_2451 Depth 7
                                        //               Child Loop BB27_2455 Depth 7
                                        //               Child Loop BB27_2458 Depth 7
	str	x6, [sp, #760]                  // 8-byte Folded Spill
	mov	x19, x6
	ldr	x6, [sp, #464]                  // 8-byte Folded Reload
	mov	x16, xzr
	mov	x9, x10
	mov	x22, x13
	mov	x28, x11
	mov	x25, x27
	str	x23, [sp, #736]                 // 8-byte Folded Spill
	mov	x5, x0
	str	x17, [sp, #744]                 // 8-byte Folded Spill
	str	x27, [sp, #752]                 // 8-byte Folded Spill
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	.p2align	5, , 16
.LBB27_2444:                            // %vector.body242
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2443 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	add	x27, sp, #1072
	add	x14, x23, x20
	add	x2, x17, x20
	add	x27, x27, x16
	stp	x14, x2, [x27]
	add	x0, x28, x24
	add	x2, sp, #816
	add	x1, x9, x24
	str	x0, [x2, x16]
	add	x0, x25, x20
	add	x2, x19, x20
	stp	x0, x2, [x27, #16]
	add	x14, x6, x16
	add	x0, x22, x24
	add	x2, x5, x24
	add	x5, x5, x3
	stp	x1, x0, [x14, #-8]
	add	x19, x19, x7
	add	x25, x25, x7
	str	x2, [x14, #8]
	add	x28, x28, x3
	add	x22, x22, x3
	add	x16, x16, #32
	add	x17, x17, x7
	add	x9, x9, x3
	add	x23, x23, x7
	cmp	x16, #256
	b.ne	.LBB27_2444
// %bb.2445:                            // %.preheader.i.i.i.preheader
                                        //   in Loop: Header=BB27_2443 Depth=5
	ldr	x22, [sp, #704]                 // 8-byte Folded Reload
	mov	x23, xzr
	ldr	x25, [sp, #696]                 // 8-byte Folded Reload
	ldr	x6, [sp, #760]                  // 8-byte Folded Reload
	ldr	x27, [sp, #752]                 // 8-byte Folded Reload
	ldr	x0, [sp, #728]                  // 8-byte Folded Reload
	b	.LBB27_2447
	.p2align	5, , 16
.LBB27_2446:                            // %._crit_edge.i.i.i
                                        //   in Loop: Header=BB27_2447 Depth=6
	add	x23, x23, #1
	cmp	x23, #32
	b.eq	.LBB27_2442
.LBB27_2447:                            // %.preheader.i.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2443 Depth=5
                                        // =>          This Loop Header: Depth=6
                                        //               Child Loop BB27_2451 Depth 7
                                        //               Child Loop BB27_2455 Depth 7
                                        //               Child Loop BB27_2458 Depth 7
	cmp	w21, #1
	b.lt	.LBB27_2446
// %bb.2448:                            // %.lr.ph.i215.i.i
                                        //   in Loop: Header=BB27_2447 Depth=6
	add	x9, sp, #1072
	ldr	x16, [x9, x23, lsl #3]
	add	x9, sp, #816
	ldr	x9, [x9, x23, lsl #3]
	ldr	s0, [x9]
	cmp	x12, #2
	b.hs	.LBB27_2450
// %bb.2449:                            //   in Loop: Header=BB27_2447 Depth=6
	mov	x9, xzr
	b	.LBB27_2453
	.p2align	5, , 16
.LBB27_2450:                            // %vector.body234.preheader
                                        //   in Loop: Header=BB27_2447 Depth=6
	add	x9, x16, #4
	mov	x17, x30
	mov	x5, x15
	.p2align	5, , 16
.LBB27_2451:                            // %vector.body234
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2443 Depth=5
                                        //             Parent Loop BB27_2447 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	ldp	s1, s2, [x9, #-4]
	subs	x5, x5, #2
	ldp	s3, s4, [x17, #-4]
	add	x9, x9, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x17, #-4]
	add	x17, x17, #8
	b.ne	.LBB27_2451
// %bb.2452:                            // %middle.block227
                                        //   in Loop: Header=BB27_2447 Depth=6
	mov	x9, x15
	cbz	x22, .LBB27_2446
.LBB27_2453:                            // %scalar.ph228.preheader
                                        //   in Loop: Header=BB27_2447 Depth=6
	sub	w14, w21, w9
	mov	x5, x9
	ands	x17, x14, #0x3
	b.eq	.LBB27_2456
// %bb.2454:                            // %scalar.ph228.prol.preheader
                                        //   in Loop: Header=BB27_2447 Depth=6
	add	x19, x26, x9, lsl #2
	mov	x5, x9
	.p2align	5, , 16
.LBB27_2455:                            // %scalar.ph228.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2443 Depth=5
                                        //             Parent Loop BB27_2447 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	ldr	s1, [x16, x5, lsl #2]
	add	x5, x5, #1
	subs	x17, x17, #1
	ldr	s2, [x19]
	fmadd	s1, s1, s0, s2
	str	s1, [x19], #4
	b.ne	.LBB27_2455
.LBB27_2456:                            // %scalar.ph228.prol.loopexit
                                        //   in Loop: Header=BB27_2447 Depth=6
	sub	x9, x9, x12
	cmn	x9, #4
	b.hi	.LBB27_2446
// %bb.2457:                            // %scalar.ph228.preheader1486
                                        //   in Loop: Header=BB27_2447 Depth=6
	add	x14, x16, x5, lsl #2
	sub	x9, x12, x5
	add	x16, x14, #8
	add	x17, x4, x5, lsl #2
	.p2align	5, , 16
.LBB27_2458:                            // %scalar.ph228
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2443 Depth=5
                                        //             Parent Loop BB27_2447 Depth=6
                                        // =>            This Inner Loop Header: Depth=7
	ldur	s1, [x16, #-8]
	subs	x9, x9, #4
	ldp	s2, s3, [x17, #-8]
	fmadd	s1, s1, s0, s2
	stur	s1, [x17, #-8]
	ldur	s1, [x16, #-4]
	fmadd	s1, s1, s0, s3
	ldp	s2, s3, [x17]
	stur	s1, [x17, #-4]
	ldr	s1, [x16]
	fmadd	s1, s1, s0, s2
	str	s1, [x17]
	ldr	s1, [x16, #4]
	add	x16, x16, #16
	fmadd	s1, s1, s0, s3
	str	s1, [x17, #4]
	add	x17, x17, #16
	b.ne	.LBB27_2458
	b	.LBB27_2446
	.p2align	5, , 16
.LBB27_2459:                            // %.preheader.i.i462
                                        //   in Loop: Header=BB27_2440 Depth=4
	ldr	x24, [sp, #616]                 // 8-byte Folded Reload
	ldr	x8, [sp, #720]                  // 8-byte Folded Reload
	ldr	x14, [sp, #768]                 // 8-byte Folded Reload
	ldr	x0, [sp, #592]                  // 8-byte Folded Reload
	ldr	x2, [sp, #584]                  // 8-byte Folded Reload
	ldr	x26, [sp, #688]                 // 8-byte Folded Reload
	ldp	x23, x6, [sp, #472]             // 16-byte Folded Reload
	cmp	x8, x24
	b.ge	.LBB27_2439
// %bb.2460:                            // %.lr.ph232.i.i
                                        //   in Loop: Header=BB27_2440 Depth=4
	ldr	x16, [sp, #648]                 // 8-byte Folded Reload
	neg	x8, x16
	ldr	x9, [sp, #456]                  // 8-byte Folded Reload
	ldr	x5, [sp, #672]                  // 8-byte Folded Reload
	ldr	x13, [sp, #680]                 // 8-byte Folded Reload
	ldr	x10, [sp, #576]                 // 8-byte Folded Reload
	nop
	madd	x8, x9, x5, x8
	ldr	x9, [sp, #624]                  // 8-byte Folded Reload
	nop
	msub	x9, x16, x13, x9
	ldr	x10, [x10, #248]
	ldr	x11, [sp, #496]                 // 8-byte Folded Reload
	mul	x11, x16, x11
	ldr	x17, [sp, #656]                 // 8-byte Folded Reload
	ldr	x20, [sp, #720]                 // 8-byte Folded Reload
	nop
	madd	x8, x13, x8, x26
	ldr	x13, [sp, #536]                 // 8-byte Folded Reload
	nop
	madd	x9, x9, x13, x10
	ldr	x10, [sp, #488]                 // 8-byte Folded Reload
	ldr	x13, [sp, #544]                 // 8-byte Folded Reload
	nop
	madd	x10, x5, x10, x11
	ldr	x11, [sp, #528]                 // 8-byte Folded Reload
	nop
	madd	x11, x16, x11, x9
	ldr	x16, [sp, #664]                 // 8-byte Folded Reload
	ldr	x9, [sp, #640]                  // 8-byte Folded Reload
	nop
	madd	x13, x17, x13, x16
	ldr	x16, [sp, #512]                 // 8-byte Folded Reload
	ldr	x9, [x9, #248]
	nop
	madd	x10, x16, x8, x10
	ldr	x16, [x14, #248]
	ldr	x8, [sp, #384]                  // 8-byte Folded Reload
	add	x8, x9, x8
	add	x17, x16, x10
	ldr	x10, [sp, #520]                 // 8-byte Folded Reload
	add	x8, x8, x13
	add	x9, x8, #4
	add	x1, x17, #4
	add	x4, x17, #8
	add	x19, x8, #12
	madd	x5, x5, x10, x11
	b	.LBB27_2462
	.p2align	5, , 16
.LBB27_2461:                            // %ggml_vec_mad_f32.exit.i9.i
                                        //   in Loop: Header=BB27_2462 Depth=5
	add	x20, x20, #1
	add	x9, x9, x0
	add	x8, x8, x0
	add	x19, x19, x0
	cmp	x20, x24
	b.ge	.LBB27_2439
.LBB27_2462:                            //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        // =>        This Loop Header: Depth=5
                                        //             Child Loop BB27_2466 Depth 6
                                        //             Child Loop BB27_2470 Depth 6
                                        //             Child Loop BB27_2473 Depth 6
	cmp	w21, #1
	b.lt	.LBB27_2461
// %bb.2463:                            // %.lr.ph.i219.i.i.preheader
                                        //   in Loop: Header=BB27_2462 Depth=5
	mul	x10, x20, x2
	ldr	s0, [x5, x10]
	cmp	x6, #2
	b.hs	.LBB27_2465
// %bb.2464:                            //   in Loop: Header=BB27_2462 Depth=5
	mov	x10, xzr
	b	.LBB27_2468
	.p2align	5, , 16
.LBB27_2465:                            // %vector.body223.preheader
                                        //   in Loop: Header=BB27_2462 Depth=5
	mov	x10, x9
	mov	x11, x1
	mov	x13, x23
	.p2align	5, , 16
.LBB27_2466:                            // %vector.body223
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2462 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldp	s1, s2, [x10, #-4]
	subs	x13, x13, #2
	ldp	s3, s4, [x11, #-4]
	add	x10, x10, #8
	fmadd	s2, s2, s0, s4
	fmadd	s1, s1, s0, s3
	stp	s1, s2, [x11, #-4]
	add	x11, x11, #8
	b.ne	.LBB27_2466
// %bb.2467:                            // %middle.block216
                                        //   in Loop: Header=BB27_2462 Depth=5
	mov	x10, x23
	cbz	x22, .LBB27_2461
.LBB27_2468:                            // %.lr.ph.i219.i.i.preheader507
                                        //   in Loop: Header=BB27_2462 Depth=5
	sub	w11, w21, w10
	mov	x13, x10
	ands	x11, x11, #0x3
	b.eq	.LBB27_2471
// %bb.2469:                            // %.lr.ph.i219.i.i.prol.preheader
                                        //   in Loop: Header=BB27_2462 Depth=5
	add	x16, x17, x10, lsl #2
	mov	x13, x10
	.p2align	5, , 16
.LBB27_2470:                            // %.lr.ph.i219.i.i.prol
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2462 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldr	s1, [x8, x13, lsl #2]
	add	x13, x13, #1
	subs	x11, x11, #1
	ldr	s2, [x16]
	fmadd	s1, s1, s0, s2
	str	s1, [x16], #4
	b.ne	.LBB27_2470
.LBB27_2471:                            // %.lr.ph.i219.i.i.prol.loopexit
                                        //   in Loop: Header=BB27_2462 Depth=5
	sub	x10, x10, x6
	cmn	x10, #4
	b.hi	.LBB27_2461
// %bb.2472:                            // %.lr.ph.i219.i.i.preheader1489
                                        //   in Loop: Header=BB27_2462 Depth=5
	sub	x10, x6, x13
	add	x11, x4, x13, lsl #2
	add	x13, x19, x13, lsl #2
	.p2align	5, , 16
.LBB27_2473:                            // %.lr.ph.i219.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2435 Depth=2
                                        //       Parent Loop BB27_2438 Depth=3
                                        //         Parent Loop BB27_2440 Depth=4
                                        //           Parent Loop BB27_2462 Depth=5
                                        // =>          This Inner Loop Header: Depth=6
	ldur	s1, [x13, #-12]
	subs	x10, x10, #4
	ldp	s2, s3, [x11, #-8]
	fmadd	s1, s1, s0, s2
	stur	s1, [x11, #-8]
	ldur	s1, [x13, #-8]
	fmadd	s1, s1, s0, s3
	ldp	s2, s3, [x11]
	stur	s1, [x11, #-4]
	ldur	s1, [x13, #-4]
	fmadd	s1, s1, s0, s2
	str	s1, [x11]
	ldr	s1, [x13], #16
	fmadd	s1, s1, s0, s3
	str	s1, [x11, #4]
	add	x11, x11, #16
	b.ne	.LBB27_2473
	b	.LBB27_2461
.LBB27_2474:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	w8, [x19]
	cbz	w8, .LBB27_2519
// %bb.2475:                            //   in Loop: Header=BB27_3 Depth=1
	cmp	w8, #1
	b.ne	.LBB27_2819
// %bb.2476:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x24
	bl	ggml_compute_forward_add1_f16_f16
	b	.LBB27_7
.LBB27_2477:                            //   in Loop: Header=BB27_3 Depth=1
	cbnz	w8, .LBB27_2820
// %bb.2478:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x28
	mov	x1, x24
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB27_2821
// %bb.2479:                            //   in Loop: Header=BB27_3 Depth=1
	mov	x0, x19
	mov	x21, x19
	bl	ggml_is_scalar
	tbz	w0, #0, .LBB27_2822
// %bb.2480:                            //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x19, [sp, #784]
	mov	x0, x28
	ldr	w20, [sp, #788]
	bl	ggml_nrows
	ldr	x8, [x24, #48]
	cmp	x8, #4
	b.ne	.LBB27_2823
// %bb.2481:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x28, #48]
	cmp	x8, #4
	b.ne	.LBB27_2824
// %bb.2482:                            //   in Loop: Header=BB27_3 Depth=1
	add	w8, w20, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w20
	smull	x8, w19, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w0, w9, w0, lt
	cmp	w8, w0
	b.ge	.LBB27_7
// %bb.2483:                            // %.lr.ph.i.i797
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x2, [sp, #768]                  // 8-byte Folded Reload
	mov	x10, x28
	sxtw	x0, w0
	ldr	x5, [x28, #248]
	add	x6, x5, #8
	ldr	x7, [x2, #32]
	ldp	x12, x13, [x2, #16]
	ldr	x17, [x2, #72]
	str	x6, [sp, #768]                  // 8-byte Folded Spill
	ldp	x14, x15, [x2, #56]
	mul	x16, x7, x13
	ldr	x2, [x2, #248]
	ldr	x11, [x28, #72]
	ldp	x9, x10, [x10, #56]
	and	x4, x12, #0x7fffffff
	and	x3, x12, #0x3
	neg	w7, w7
	add	x19, x2, #8
	sub	x1, x4, #1
	ldr	x20, [x21, #248]
	sub	x4, x3, x4
	b	.LBB27_2485
.LBB27_2484:                            // %ggml_vec_add1_f32.exit.i.i
                                        //   in Loop: Header=BB27_2485 Depth=2
	add	x8, x8, #1
	cmp	x8, x0
	b.eq	.LBB27_7
.LBB27_2485:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2489 Depth 3
                                        //       Child Loop BB27_2493 Depth 3
	cmp	w12, #1
	b.lt	.LBB27_2484
// %bb.2486:                            // %.lr.ph.i.i.i804.preheader
                                        //   in Loop: Header=BB27_2485 Depth=2
	sdiv	x24, x8, x16
	ldr	s0, [x20]
	sxtw	x22, w24
	msub	x21, x22, x16, x8
	sdiv	x25, x21, x13
	sxtw	x23, w25
	mul	x21, x22, x17
	mul	x22, x22, x11
	mul	x26, x23, x15
	mul	x23, x23, x10
	cmp	x1, #3
	b.hs	.LBB27_2488
// %bb.2487:                            //   in Loop: Header=BB27_2485 Depth=2
	mov	x27, xzr
	b	.LBB27_2491
.LBB27_2488:                            // %.lr.ph.i.i.i804.preheader1522
                                        //   in Loop: Header=BB27_2485 Depth=2
	mul	w28, w7, w24
	ldr	x6, [sp, #768]                  // 8-byte Folded Reload
	mov	x27, xzr
	sub	w28, w28, w25
	madd	w28, w13, w28, w8
	sxtw	x30, w28
	add	x28, x6, x22
	madd	x6, x9, x30, x23
	add	x28, x28, x6
	madd	x6, x14, x30, x26
	add	x30, x19, x21
	add	x30, x30, x6
.LBB27_2489:                            // %.lr.ph.i.i.i804
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2485 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	s1, [x28, #-8]
	sub	x27, x27, #4
	fadd	s1, s0, s1
	stur	s1, [x30, #-8]
	ldur	s1, [x28, #-4]
	fadd	s1, s0, s1
	stur	s1, [x30, #-4]
	ldr	s1, [x28]
	fadd	s1, s0, s1
	str	s1, [x30]
	ldr	s1, [x28, #4]
	add	x28, x28, #16
	fadd	s1, s0, s1
	str	s1, [x30, #4]
	add	x30, x30, #16
	cmp	x4, x27
	b.ne	.LBB27_2489
// %bb.2490:                            // %ggml_vec_add1_f32.exit.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2485 Depth=2
	neg	x27, x27
.LBB27_2491:                            // %ggml_vec_add1_f32.exit.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2485 Depth=2
	cbz	x3, .LBB27_2484
// %bb.2492:                            // %.lr.ph.i.i.i804.epil.preheader
                                        //   in Loop: Header=BB27_2485 Depth=2
	mul	w6, w7, w24
	sub	w6, w6, w25
	madd	w6, w13, w6, w8
	sxtw	x6, w6
	madd	x24, x14, x6, x26
	madd	x6, x9, x6, x23
	mov	x23, x3
	add	x21, x24, x21
	add	x6, x6, x22
	add	x21, x21, x27, lsl #2
	add	x6, x6, x27, lsl #2
	add	x21, x2, x21
	add	x22, x5, x6
.LBB27_2493:                            // %.lr.ph.i.i.i804.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2485 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	s1, [x22], #4
	subs	x23, x23, #1
	fadd	s1, s0, s1
	str	s1, [x21], #4
	b.ne	.LBB27_2493
	b	.LBB27_2484
.LBB27_2494:                            //   in Loop: Header=BB27_3 Depth=1
	ldrsw	x22, [sp, #784]
	mov	x0, x19
	ldr	w23, [sp, #788]
	ldr	x20, [x19, #16]
	bl	ggml_nrows
	add	w8, w23, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w23
	smull	x8, w22, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w11, w9, w0, lt
	cmp	w8, w11
	b.ge	.LBB27_7
// %bb.2495:                            // %.lr.ph.i6.i.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x9, [sp, #768]                  // 8-byte Folded Reload
	and	x14, x20, #0x7fffffff
	and	x13, x20, #0x3
	ldr	x15, [x19, #248]
	sxtw	x11, w11
	sub	x12, x14, #1
	ldr	x10, [x19, #56]
	sub	x14, x13, x14
	madd	x15, x10, x8, x15
	ldr	x17, [x9, #248]
	ldr	x9, [x9, #56]
	nop
	madd	x17, x9, x8, x17
	add	x16, x15, #4
	add	x0, x17, #4
	b	.LBB27_2497
.LBB27_2496:                            // %ggml_vec_gelu_f16.exit.i.i.i
                                        //   in Loop: Header=BB27_2497 Depth=2
	add	x8, x8, #1
	add	x16, x16, x10
	add	x0, x0, x9
	add	x17, x17, x9
	add	x15, x15, x10
	cmp	x8, x11
	b.eq	.LBB27_7
.LBB27_2497:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2501 Depth 3
                                        //       Child Loop BB27_2505 Depth 3
	cmp	w20, #1
	b.lt	.LBB27_2496
// %bb.2498:                            // %.lr.ph.i.i12.i.i.preheader
                                        //   in Loop: Header=BB27_2497 Depth=2
	cmp	x12, #3
	b.hs	.LBB27_2500
// %bb.2499:                            //   in Loop: Header=BB27_2497 Depth=2
	mov	x3, xzr
	b	.LBB27_2503
.LBB27_2500:                            // %.lr.ph.i.i12.i.i.preheader1555
                                        //   in Loop: Header=BB27_2497 Depth=2
	mov	x1, xzr
	mov	x2, x0
	mov	x3, x16
.LBB27_2501:                            // %.lr.ph.i.i12.i.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2497 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldurh	w4, [x3, #-4]
	sub	x1, x1, #4
	ldrh	w4, [x21, x4, lsl #1]
	sturh	w4, [x2, #-4]
	ldurh	w4, [x3, #-2]
	ldrh	w4, [x21, x4, lsl #1]
	sturh	w4, [x2, #-2]
	ldrh	w4, [x3]
	ldrh	w4, [x21, x4, lsl #1]
	strh	w4, [x2]
	ldrh	w4, [x3, #2]
	add	x3, x3, #8
	ldrh	w4, [x21, x4, lsl #1]
	strh	w4, [x2, #2]
	add	x2, x2, #8
	cmp	x14, x1
	b.ne	.LBB27_2501
// %bb.2502:                            // %ggml_vec_gelu_f16.exit.i.i.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB27_2497 Depth=2
	neg	x3, x1
.LBB27_2503:                            // %ggml_vec_gelu_f16.exit.i.i.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB27_2497 Depth=2
	cbz	x13, .LBB27_2496
// %bb.2504:                            // %.lr.ph.i.i12.i.i.epil.preheader
                                        //   in Loop: Header=BB27_2497 Depth=2
	add	x1, x17, x3, lsl #1
	mov	x2, x13
	add	x3, x15, x3, lsl #1
.LBB27_2505:                            // %.lr.ph.i.i12.i.i.epil
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2497 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w4, [x3], #2
	subs	x2, x2, #1
	ldrh	w4, [x21, x4, lsl #1]
	strh	w4, [x1], #2
	b.ne	.LBB27_2505
	b	.LBB27_2496
.LBB27_2506:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #16]
	mov	x0, x19
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldrsw	x21, [sp, #784]
	ldr	w22, [sp, #788]
	bl	ggml_nrows
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w8, w8, w22
	smull	x22, w21, w8
	add	w8, w22, w8
	cmp	w8, w0
	csel	w8, w8, w0, lt
	cmp	w22, w8
	b.ge	.LBB27_7
// %bb.2507:                            // %.lr.ph.i6.i29.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	sxtw	x25, w8
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	and	x11, x11, #0x7fffffff
	ldr	x9, [x10, #248]
	ldr	x23, [x10, #56]
	ldr	x10, [x19, #248]
	str	x11, [sp, #768]                 // 8-byte Folded Spill
	ldr	x19, [x19, #56]
	nop
	madd	x24, x23, x22, x9
	madd	x27, x19, x22, x10
	b	.LBB27_2509
.LBB27_2508:                            // %ggml_vec_gelu_quick_f16.exit.i.i.i
                                        //   in Loop: Header=BB27_2509 Depth=2
	add	x22, x22, #1
	add	x24, x24, x23
	add	x27, x27, x19
	cmp	x22, x25
	b.eq	.LBB27_7
.LBB27_2509:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2511 Depth 3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB27_2508
// %bb.2510:                            // %.lr.ph.i.i12.i35.i.preheader
                                        //   in Loop: Header=BB27_2509 Depth=2
	ldr	x21, [sp, #768]                 // 8-byte Folded Reload
	mov	x28, x27
	mov	x26, x24
	.p2align	5, , 16
.LBB27_2511:                            // %.lr.ph.i.i12.i35.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2509 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w8, [x28], #2
	ldr	s8, [x20, x8, lsl #2]
	mov	w8, #56099                      // =0xdb23
	movk	w8, #49113, lsl #16
	fmov	s0, w8
	fmul	s0, s8, s0
	bl	expf
	fmov	s1, #1.00000000
	mov	w8, #2004877312                 // =0x77800000
	mov	w10, #125829120                 // =0x7800000
	fmov	s2, w8
	mov	w8, #142606336                  // =0x8800000
	mov	w12, #-16777216                 // =0xff000000
	fadd	s0, s0, s1
	fdiv	s0, s1, s0
	fmul	s0, s8, s0
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w8
	fmov	w8, s0
	and	w9, w8, #0x7f800000
	ubfx	w11, w8, #23, #8
	fmul	s1, s1, s2
	add	w9, w9, w10
	cmp	w11, #113
	mov	w10, #1073741824                // =0x40000000
	csel	w9, w10, w9, lo
	fmov	s0, w9
	lsl	w9, w8, #1
	lsr	w8, w8, #31
	cmp	w9, w12
	mov	w9, #32256                      // =0x7e00
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	csel	w9, w9, w10, hi
	subs	x21, x21, #1
	orr	w8, w9, w8, lsl #15
	strh	w8, [x26], #2
	b.ne	.LBB27_2511
	b	.LBB27_2508
.LBB27_2512:                            //   in Loop: Header=BB27_3 Depth=1
	ldr	x8, [x19, #16]
	mov	x0, x19
	str	x8, [sp, #760]                  // 8-byte Folded Spill
	ldrsw	x21, [sp, #784]
	ldr	w22, [sp, #788]
	bl	ggml_nrows
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w8, w8, w22
	smull	x22, w21, w8
	add	w8, w22, w8
	cmp	w8, w0
	csel	w8, w8, w0, lt
	cmp	w22, w8
	b.ge	.LBB27_7
// %bb.2513:                            // %.lr.ph.i6.i49.i
                                        //   in Loop: Header=BB27_3 Depth=1
	ldr	x10, [sp, #768]                 // 8-byte Folded Reload
	sxtw	x25, w8
	ldr	x11, [sp, #760]                 // 8-byte Folded Reload
	and	x11, x11, #0x7fffffff
	ldr	x9, [x10, #248]
	ldr	x23, [x10, #56]
	ldr	x10, [x19, #248]
	str	x11, [sp, #768]                 // 8-byte Folded Spill
	ldr	x19, [x19, #56]
	nop
	madd	x24, x23, x22, x9
	madd	x27, x19, x22, x10
	b	.LBB27_2515
.LBB27_2514:                            // %ggml_vec_silu_f16.exit.i.i.i
                                        //   in Loop: Header=BB27_2515 Depth=2
	add	x22, x22, #1
	add	x24, x24, x23
	add	x27, x27, x19
	cmp	x22, x25
	b.eq	.LBB27_7
.LBB27_2515:                            //   Parent Loop BB27_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB27_2517 Depth 3
	ldr	x8, [sp, #760]                  // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB27_2514
// %bb.2516:                            // %.lr.ph.i.i12.i55.i.preheader
                                        //   in Loop: Header=BB27_2515 Depth=2
	ldr	x21, [sp, #768]                 // 8-byte Folded Reload
	mov	x28, x27
	mov	x26, x24
	.p2align	5, , 16
.LBB27_2517:                            // %.lr.ph.i.i12.i55.i
                                        //   Parent Loop BB27_3 Depth=1
                                        //     Parent Loop BB27_2515 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldrh	w8, [x28], #2
	ldr	s8, [x20, x8, lsl #2]
	fneg	s0, s8
	bl	expf
	fmov	s1, #1.00000000
	mov	w8, #2004877312                 // =0x77800000
	mov	w10, #125829120                 // =0x7800000
	fmov	s2, w8
	mov	w8, #142606336                  // =0x8800000
	mov	w12, #-16777216                 // =0xff000000
	fadd	s0, s0, s1
	fdiv	s0, s8, s0
	fabs	s1, s0
	fmul	s1, s1, s2
	fmov	s2, w8
	fmov	w8, s0
	and	w9, w8, #0x7f800000
	ubfx	w11, w8, #23, #8
	fmul	s1, s1, s2
	add	w9, w9, w10
	cmp	w11, #113
	mov	w10, #1073741824                // =0x40000000
	csel	w9, w10, w9, lo
	fmov	s0, w9
	lsl	w9, w8, #1
	lsr	w8, w8, #31
	cmp	w9, w12
	mov	w9, #32256                      // =0x7e00
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	csel	w9, w9, w10, hi
	subs	x21, x21, #1
	orr	w8, w9, w8, lsl #15
	strh	w8, [x26], #2
	b.ne	.LBB27_2517
	b	.LBB27_2514
.LBB27_2518:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x24
	bl	ggml_compute_forward_add1_bf16_f32
	b	.LBB27_7
.LBB27_2519:                            //   in Loop: Header=BB27_3 Depth=1
	add	x0, sp, #784
	mov	x1, x24
	bl	ggml_compute_forward_add1_f16_f32
	b	.LBB27_7
.LBB27_2520:                            // %.critedge
	ldr	x8, [sp, #320]                  // 8-byte Folded Reload
	ldr	x8, [x8]
	ldr	w8, [x8, #284]
	cmp	w8, #1
	b.eq	.LBB27_2522
// %bb.2521:
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB27_2522:                            // %ggml_barrier.exit
	add	sp, sp, #1344
	.cfi_def_cfa wsp, 160
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d15, d14, [sp], #160            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB27_2523:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9833                       // =0x2669
	bl	ggml_abort
.LBB27_2524:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9840                       // =0x2670
	bl	ggml_abort
.LBB27_2525:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9741                       // =0x260d
	bl	ggml_abort
.LBB27_2526:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.115
	add	x3, x3, :lo12:.L.str.115
	mov	w1, #9961                       // =0x26e9
	bl	ggml_abort
.LBB27_2527:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9817                       // =0x2659
	bl	ggml_abort
.LBB27_2528:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.93
	add	x3, x3, :lo12:.L.str.93
	mov	w1, #7820                       // =0x1e8c
	bl	ggml_abort
.LBB27_2529:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8621                       // =0x21ad
	bl	ggml_abort
.LBB27_2530:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9734                       // =0x2606
	bl	ggml_abort
.LBB27_2531:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.29
	add	x3, x3, :lo12:.L.str.29
	mov	w1, #4319                       // =0x10df
	bl	ggml_abort
.LBB27_2532:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.26
	add	x3, x3, :lo12:.L.str.26
	mov	w1, #4819                       // =0x12d3
	bl	ggml_abort
.LBB27_2533:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.72
	add	x3, x3, :lo12:.L.str.72
	mov	w1, #6345                       // =0x18c9
	bl	ggml_abort
.LBB27_2534:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.157
	add	x3, x3, :lo12:.L.str.157
	mov	w1, #12206                      // =0x2fae
	bl	ggml_abort
.LBB27_2535:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.93
	add	x3, x3, :lo12:.L.str.93
	mov	w1, #7943                       // =0x1f07
	bl	ggml_abort
.LBB27_2536:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #12739                      // =0x31c3
	bl	ggml_abort
.LBB27_2537:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.30
	add	x3, x3, :lo12:.L.str.30
	mov	w1, #4334                       // =0x10ee
	bl	ggml_abort
.LBB27_2538:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #4335                       // =0x10ef
	bl	ggml_abort
.LBB27_2539:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	w1, #4338                       // =0x10f2
	bl	ggml_abort
.LBB27_2540:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.33
	add	x3, x3, :lo12:.L.str.33
	mov	w1, #4339                       // =0x10f3
	bl	ggml_abort
.LBB27_2541:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	w1, #4340                       // =0x10f4
	bl	ggml_abort
.LBB27_2542:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.35
	add	x3, x3, :lo12:.L.str.35
	mov	w1, #4342                       // =0x10f6
	bl	ggml_abort
.LBB27_2543:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #4343                       // =0x10f7
	bl	ggml_abort
.LBB27_2544:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4587                       // =0x11eb
	bl	ggml_abort
.LBB27_2545:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.38
	add	x3, x3, :lo12:.L.str.38
	mov	w1, #4588                       // =0x11ec
	bl	ggml_abort
.LBB27_2546:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.30
	add	x3, x3, :lo12:.L.str.30
	mov	w1, #4605                       // =0x11fd
	bl	ggml_abort
.LBB27_2547:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	w1, #4608                       // =0x1200
	bl	ggml_abort
.LBB27_2548:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.33
	add	x3, x3, :lo12:.L.str.33
	mov	w1, #4609                       // =0x1201
	bl	ggml_abort
.LBB27_2549:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	w1, #4610                       // =0x1202
	bl	ggml_abort
.LBB27_2550:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.35
	add	x3, x3, :lo12:.L.str.35
	mov	w1, #4612                       // =0x1204
	bl	ggml_abort
.LBB27_2551:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.51
	add	x3, x3, :lo12:.L.str.51
	mov	w1, #4613                       // =0x1205
	bl	ggml_abort
.LBB27_2552:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #4614                       // =0x1206
	bl	ggml_abort
.LBB27_2553:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4928                       // =0x1340
	bl	ggml_abort
.LBB27_2554:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4818                       // =0x12d2
	bl	ggml_abort
.LBB27_2555:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.52
	add	x3, x3, :lo12:.L.str.52
	mov	w1, #4858                       // =0x12fa
	bl	ggml_abort
.LBB27_2556:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.53
	add	x3, x3, :lo12:.L.str.53
	mov	w1, #4859                       // =0x12fb
	bl	ggml_abort
.LBB27_2557:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #4861                       // =0x12fd
	bl	ggml_abort
.LBB27_2558:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5107                       // =0x13f3
	bl	ggml_abort
.LBB27_2559:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5164                       // =0x142c
	bl	ggml_abort
.LBB27_2560:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5212                       // =0x145c
	bl	ggml_abort
.LBB27_2561:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5292                       // =0x14ac
	bl	ggml_abort
.LBB27_2562:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.61
	add	x3, x3, :lo12:.L.str.61
	mov	w1, #5229                       // =0x146d
	bl	ggml_abort
.LBB27_2563:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.62
	add	x3, x3, :lo12:.L.str.62
	mov	w1, #5230                       // =0x146e
	bl	ggml_abort
.LBB27_2564:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.63
	add	x3, x3, :lo12:.L.str.63
	mov	w1, #5231                       // =0x146f
	bl	ggml_abort
.LBB27_2565:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.64
	add	x3, x3, :lo12:.L.str.64
	mov	w1, #5232                       // =0x1470
	bl	ggml_abort
.LBB27_2566:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5488                       // =0x1570
	bl	ggml_abort
.LBB27_2567:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6265                       // =0x1879
	bl	ggml_abort
.LBB27_2568:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #6207                       // =0x183f
	bl	ggml_abort
.LBB27_2569:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #6209                       // =0x1841
	bl	ggml_abort
.LBB27_2570:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.71
	add	x3, x3, :lo12:.L.str.71
	mov	w1, #6219                       // =0x184b
	bl	ggml_abort
.LBB27_2571:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6333                       // =0x18bd
	bl	ggml_abort
.LBB27_2572:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #6278                       // =0x1886
	bl	ggml_abort
.LBB27_2573:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #6280                       // =0x1888
	bl	ggml_abort
.LBB27_2574:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.71
	add	x3, x3, :lo12:.L.str.71
	mov	w1, #6290                       // =0x1892
	bl	ggml_abort
.LBB27_2575:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6508                       // =0x196c
	bl	ggml_abort
.LBB27_2576:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #6347                       // =0x18cb
	bl	ggml_abort
.LBB27_2577:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.73
	add	x3, x3, :lo12:.L.str.73
	mov	w1, #6348                       // =0x18cc
	bl	ggml_abort
.LBB27_2578:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6603                       // =0x19cb
	bl	ggml_abort
.LBB27_2579:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #6521                       // =0x1979
	bl	ggml_abort
.LBB27_2580:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #6523                       // =0x197b
	bl	ggml_abort
.LBB27_2581:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6666                       // =0x1a0a
	bl	ggml_abort
.LBB27_2582:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #6616                       // =0x19d8
	bl	ggml_abort
.LBB27_2583:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #6618                       // =0x19da
	bl	ggml_abort
.LBB27_2584:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.71
	add	x3, x3, :lo12:.L.str.71
	mov	w1, #6628                       // =0x19e4
	bl	ggml_abort
.LBB27_2585:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.74
	add	x3, x3, :lo12:.L.str.74
	mov	w1, #6779                       // =0x1a7b
	bl	ggml_abort
.LBB27_2586:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.75
	add	x3, x3, :lo12:.L.str.75
	mov	w1, #6780                       // =0x1a7c
	bl	ggml_abort
.LBB27_2587:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.76
	add	x3, x3, :lo12:.L.str.76
	mov	w1, #6781                       // =0x1a7d
	bl	ggml_abort
.LBB27_2588:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.77
	add	x3, x3, :lo12:.L.str.77
	mov	w1, #6782                       // =0x1a7e
	bl	ggml_abort
.LBB27_2589:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.78
	add	x3, x3, :lo12:.L.str.78
	mov	w1, #6785                       // =0x1a81
	bl	ggml_abort
.LBB27_2590:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.79
	add	x3, x3, :lo12:.L.str.79
	mov	w1, #6786                       // =0x1a82
	bl	ggml_abort
.LBB27_2591:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #6789                       // =0x1a85
	bl	ggml_abort
.LBB27_2592:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	w1, #6790                       // =0x1a86
	bl	ggml_abort
.LBB27_2593:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.33
	add	x3, x3, :lo12:.L.str.33
	mov	w1, #6791                       // =0x1a87
	bl	ggml_abort
.LBB27_2594:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	w1, #6792                       // =0x1a88
	bl	ggml_abort
.LBB27_2595:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.30
	add	x3, x3, :lo12:.L.str.30
	mov	w1, #7058                       // =0x1b92
	bl	ggml_abort
.LBB27_2596:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.79
	add	x3, x3, :lo12:.L.str.79
	mov	w1, #7059                       // =0x1b93
	bl	ggml_abort
.LBB27_2597:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #7062                       // =0x1b96
	bl	ggml_abort
.LBB27_2598:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	w1, #7063                       // =0x1b97
	bl	ggml_abort
.LBB27_2599:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.33
	add	x3, x3, :lo12:.L.str.33
	mov	w1, #7064                       // =0x1b98
	bl	ggml_abort
.LBB27_2600:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	w1, #7065                       // =0x1b99
	bl	ggml_abort
.LBB27_2601:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.81
	add	x3, x3, :lo12:.L.str.81
	mov	w1, #7355                       // =0x1cbb
	bl	ggml_abort
.LBB27_2602:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.82
	add	x3, x3, :lo12:.L.str.82
	mov	w1, #7356                       // =0x1cbc
	bl	ggml_abort
.LBB27_2603:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.76
	add	x3, x3, :lo12:.L.str.76
	mov	w1, #7357                       // =0x1cbd
	bl	ggml_abort
.LBB27_2604:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.77
	add	x3, x3, :lo12:.L.str.77
	mov	w1, #7358                       // =0x1cbe
	bl	ggml_abort
.LBB27_2605:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.30
	add	x3, x3, :lo12:.L.str.30
	mov	w1, #7361                       // =0x1cc1
	bl	ggml_abort
.LBB27_2606:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #7364                       // =0x1cc4
	bl	ggml_abort
.LBB27_2607:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.83
	add	x3, x3, :lo12:.L.str.83
	mov	w1, #7369                       // =0x1cc9
	bl	ggml_abort
.LBB27_2608:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.84
	add	x3, x3, :lo12:.L.str.84
	mov	w1, #7370                       // =0x1cca
	bl	ggml_abort
.LBB27_2609:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #7531                       // =0x1d6b
	bl	ggml_abort
.LBB27_2610:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.89
	add	x3, x3, :lo12:.L.str.89
	mov	w1, #7484                       // =0x1d3c
	bl	ggml_abort
.LBB27_2611:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.90
	add	x3, x3, :lo12:.L.str.90
	mov	w1, #7485                       // =0x1d3d
	bl	ggml_abort
.LBB27_2612:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #7486                       // =0x1d3e
	bl	ggml_abort
.LBB27_2613:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.26
	add	x3, x3, :lo12:.L.str.26
	mov	w1, #7546                       // =0x1d7a
	bl	ggml_abort
.LBB27_2614:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8184                       // =0x1ff8
	bl	ggml_abort
.LBB27_2615:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8254                       // =0x203e
	bl	ggml_abort
.LBB27_2616:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8272                       // =0x2050
	bl	ggml_abort
.LBB27_2617:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8390                       // =0x20c6
	bl	ggml_abort
.LBB27_2618:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8495                       // =0x212f
	bl	ggml_abort
.LBB27_2619:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.89
	add	x3, x3, :lo12:.L.str.89
	mov	w1, #8405                       // =0x20d5
	bl	ggml_abort
.LBB27_2620:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.102
	add	x3, x3, :lo12:.L.str.102
	mov	w1, #8406                       // =0x20d6
	bl	ggml_abort
.LBB27_2621:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.90
	add	x3, x3, :lo12:.L.str.90
	mov	w1, #8407                       // =0x20d7
	bl	ggml_abort
.LBB27_2622:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #8408                       // =0x20d8
	bl	ggml_abort
.LBB27_2623:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.103
	add	x3, x3, :lo12:.L.str.103
	mov	w1, #8409                       // =0x20d9
	bl	ggml_abort
.LBB27_2624:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.104
	add	x3, x3, :lo12:.L.str.104
	mov	w1, #8417                       // =0x20e1
	bl	ggml_abort
.LBB27_2625:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.86
	add	x3, x3, :lo12:.L.str.86
	mov	w1, #9523                       // =0x2533
	bl	ggml_abort
.LBB27_2626:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #9524                       // =0x2534
	bl	ggml_abort
.LBB27_2627:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #9525                       // =0x2535
	bl	ggml_abort
.LBB27_2628:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #9554                       // =0x2552
	bl	ggml_abort
.LBB27_2629:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.41
	add	x3, x3, :lo12:.L.str.41
	mov	w1, #9618                       // =0x2592
	bl	ggml_abort
.LBB27_2630:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #9619                       // =0x2593
	bl	ggml_abort
.LBB27_2631:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #9620                       // =0x2594
	bl	ggml_abort
.LBB27_2632:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #9629                       // =0x259d
	bl	ggml_abort
.LBB27_2633:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #9630                       // =0x259e
	bl	ggml_abort
.LBB27_2634:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.112
	add	x3, x3, :lo12:.L.str.112
	mov	w1, #9768                       // =0x2628
	bl	ggml_abort
.LBB27_2635:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.113
	add	x3, x3, :lo12:.L.str.113
	mov	w1, #9769                       // =0x2629
	bl	ggml_abort
.LBB27_2636:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10026                      // =0x272a
	bl	ggml_abort
.LBB27_2637:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10084                      // =0x2764
	bl	ggml_abort
.LBB27_2638:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #10040                      // =0x2738
	bl	ggml_abort
.LBB27_2639:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.55
	add	x3, x3, :lo12:.L.str.55
	mov	w1, #10041                      // =0x2739
	bl	ggml_abort
.LBB27_2640:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.86
	add	x3, x3, :lo12:.L.str.86
	mov	w1, #10097                      // =0x2771
	bl	ggml_abort
.LBB27_2641:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #10098                      // =0x2772
	bl	ggml_abort
.LBB27_2642:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10159                      // =0x27af
	bl	ggml_abort
.LBB27_2643:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.55
	add	x3, x3, :lo12:.L.str.55
	mov	w1, #10130                      // =0x2792
	bl	ggml_abort
.LBB27_2644:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.116
	add	x3, x3, :lo12:.L.str.116
	mov	w1, #10141                      // =0x279d
	bl	ggml_abort
.LBB27_2645:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10210                      // =0x27e2
	bl	ggml_abort
.LBB27_2646:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #10170                      // =0x27ba
	bl	ggml_abort
.LBB27_2647:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10269                      // =0x281d
	bl	ggml_abort
.LBB27_2648:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #10225                      // =0x27f1
	bl	ggml_abort
.LBB27_2649:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10507                      // =0x290b
	bl	ggml_abort
.LBB27_2650:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.117
	add	x3, x3, :lo12:.L.str.117
	mov	w1, #10300                      // =0x283c
	bl	ggml_abort
.LBB27_2651:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.118
	add	x3, x3, :lo12:.L.str.118
	mov	w1, #10301                      // =0x283d
	bl	ggml_abort
.LBB27_2652:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.119
	add	x3, x3, :lo12:.L.str.119
	mov	w1, #10304                      // =0x2840
	bl	ggml_abort
.LBB27_2653:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.120
	add	x3, x3, :lo12:.L.str.120
	mov	w1, #10305                      // =0x2841
	bl	ggml_abort
.LBB27_2654:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.121
	add	x3, x3, :lo12:.L.str.121
	mov	w1, #10306                      // =0x2842
	bl	ggml_abort
.LBB27_2655:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.122
	add	x3, x3, :lo12:.L.str.122
	mov	w1, #10308                      // =0x2844
	bl	ggml_abort
.LBB27_2656:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #10315                      // =0x284b
	bl	ggml_abort
.LBB27_2657:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	w1, #10316                      // =0x284c
	bl	ggml_abort
.LBB27_2658:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.33
	add	x3, x3, :lo12:.L.str.33
	mov	w1, #10317                      // =0x284d
	bl	ggml_abort
.LBB27_2659:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	w1, #10318                      // =0x284e
	bl	ggml_abort
.LBB27_2660:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.127
	add	x3, x3, :lo12:.L.str.127
	mov	w1, #10362                      // =0x287a
	bl	ggml_abort
.LBB27_2661:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.129
	add	x3, x3, :lo12:.L.str.129
	mov	w1, #10363                      // =0x287b
	bl	ggml_abort
.LBB27_2662:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.23
	add	x3, x3, :lo12:.L.str.23
	mov	w1, #12624                      // =0x3150
	bl	ggml_abort
.LBB27_2663:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10843                      // =0x2a5b
	bl	ggml_abort
.LBB27_2664:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.130
	add	x3, x3, :lo12:.L.str.130
	mov	w1, #10548                      // =0x2934
	bl	ggml_abort
.LBB27_2665:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.131
	add	x3, x3, :lo12:.L.str.131
	mov	w1, #10550                      // =0x2936
	bl	ggml_abort
.LBB27_2666:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.132
	add	x3, x3, :lo12:.L.str.132
	mov	w1, #10551                      // =0x2937
	bl	ggml_abort
.LBB27_2667:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.133
	add	x3, x3, :lo12:.L.str.133
	mov	w1, #10552                      // =0x2938
	bl	ggml_abort
.LBB27_2668:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.135
	add	x3, x3, :lo12:.L.str.135
	mov	w1, #10555                      // =0x293b
	bl	ggml_abort
.LBB27_2669:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.136
	add	x3, x3, :lo12:.L.str.136
	mov	w1, #10556                      // =0x293c
	bl	ggml_abort
.LBB27_2670:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.137
	add	x3, x3, :lo12:.L.str.137
	mov	w1, #10557                      // =0x293d
	bl	ggml_abort
.LBB27_2671:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.139
	add	x3, x3, :lo12:.L.str.139
	mov	w1, #10562                      // =0x2942
	bl	ggml_abort
.LBB27_2672:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #10565                      // =0x2945
	bl	ggml_abort
.LBB27_2673:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	w1, #10566                      // =0x2946
	bl	ggml_abort
.LBB27_2674:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.33
	add	x3, x3, :lo12:.L.str.33
	mov	w1, #10567                      // =0x2947
	bl	ggml_abort
.LBB27_2675:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	w1, #10568                      // =0x2948
	bl	ggml_abort
.LBB27_2676:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.140
	add	x3, x3, :lo12:.L.str.140
	mov	w1, #10579                      // =0x2953
	bl	ggml_abort
.LBB27_2677:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #10913                      // =0x2aa1
	bl	ggml_abort
.LBB27_2678:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.141
	add	x3, x3, :lo12:.L.str.141
	mov	w1, #10865                      // =0x2a71
	bl	ggml_abort
.LBB27_2679:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #10866                      // =0x2a72
	bl	ggml_abort
.LBB27_2680:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.73
	add	x3, x3, :lo12:.L.str.73
	mov	w1, #10867                      // =0x2a73
	bl	ggml_abort
.LBB27_2681:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.142
	add	x3, x3, :lo12:.L.str.142
	mov	w1, #10868                      // =0x2a74
	bl	ggml_abort
.LBB27_2682:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11005                      // =0x2afd
	bl	ggml_abort
.LBB27_2683:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.143
	add	x3, x3, :lo12:.L.str.143
	mov	w1, #10938                      // =0x2aba
	bl	ggml_abort
.LBB27_2684:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #10939                      // =0x2abb
	bl	ggml_abort
.LBB27_2685:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.73
	add	x3, x3, :lo12:.L.str.73
	mov	w1, #10940                      // =0x2abc
	bl	ggml_abort
.LBB27_2686:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.144
	add	x3, x3, :lo12:.L.str.144
	mov	w1, #10941                      // =0x2abd
	bl	ggml_abort
.LBB27_2687:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.145
	add	x3, x3, :lo12:.L.str.145
	mov	w1, #10942                      // =0x2abe
	bl	ggml_abort
.LBB27_2688:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.146
	add	x3, x3, :lo12:.L.str.146
	mov	w1, #10943                      // =0x2abf
	bl	ggml_abort
.LBB27_2689:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.147
	add	x3, x3, :lo12:.L.str.147
	mov	w1, #10944                      // =0x2ac0
	bl	ggml_abort
.LBB27_2690:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.142
	add	x3, x3, :lo12:.L.str.142
	mov	w1, #10946                      // =0x2ac2
	bl	ggml_abort
.LBB27_2691:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.148
	add	x3, x3, :lo12:.L.str.148
	mov	w1, #10948                      // =0x2ac4
	bl	ggml_abort
.LBB27_2692:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.149
	add	x3, x3, :lo12:.L.str.149
	mov	w1, #10950                      // =0x2ac6
	bl	ggml_abort
.LBB27_2693:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11068                      // =0x2b3c
	bl	ggml_abort
.LBB27_2694:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11129                      // =0x2b79
	bl	ggml_abort
.LBB27_2695:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11329                      // =0x2c41
	bl	ggml_abort
.LBB27_2696:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11531                      // =0x2d0b
	bl	ggml_abort
.LBB27_2697:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11722                      // =0x2dca
	bl	ggml_abort
.LBB27_2698:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11900                      // =0x2e7c
	bl	ggml_abort
.LBB27_2699:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11946                      // =0x2eaa
	bl	ggml_abort
.LBB27_2700:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11995                      // =0x2edb
	bl	ggml_abort
.LBB27_2701:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #12187                      // =0x2f9b
	bl	ggml_abort
.LBB27_2702:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #12106                      // =0x2f4a
	bl	ggml_abort
.LBB27_2703:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.151
	add	x3, x3, :lo12:.L.str.151
	mov	w1, #12107                      // =0x2f4b
	bl	ggml_abort
.LBB27_2704:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.152
	add	x3, x3, :lo12:.L.str.152
	mov	w1, #12108                      // =0x2f4c
	bl	ggml_abort
.LBB27_2705:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.62
	add	x3, x3, :lo12:.L.str.62
	mov	w1, #12109                      // =0x2f4d
	bl	ggml_abort
.LBB27_2706:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.63
	add	x3, x3, :lo12:.L.str.63
	mov	w1, #12110                      // =0x2f4e
	bl	ggml_abort
.LBB27_2707:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #12111                      // =0x2f4f
	bl	ggml_abort
.LBB27_2708:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.153
	add	x3, x3, :lo12:.L.str.153
	mov	w1, #12124                      // =0x2f5c
	bl	ggml_abort
.LBB27_2709:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #12270                      // =0x2fee
	bl	ggml_abort
.LBB27_2710:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.90
	add	x3, x3, :lo12:.L.str.90
	mov	w1, #12202                      // =0x2faa
	bl	ggml_abort
.LBB27_2711:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.154
	add	x3, x3, :lo12:.L.str.154
	mov	w1, #12203                      // =0x2fab
	bl	ggml_abort
.LBB27_2712:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.155
	add	x3, x3, :lo12:.L.str.155
	mov	w1, #12204                      // =0x2fac
	bl	ggml_abort
.LBB27_2713:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.156
	add	x3, x3, :lo12:.L.str.156
	mov	w1, #12205                      // =0x2fad
	bl	ggml_abort
.LBB27_2714:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #12354                      // =0x3042
	bl	ggml_abort
.LBB27_2715:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.158
	add	x3, x3, :lo12:.L.str.158
	mov	w1, #12285                      // =0x2ffd
	bl	ggml_abort
.LBB27_2716:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.159
	add	x3, x3, :lo12:.L.str.159
	mov	w1, #12286                      // =0x2ffe
	bl	ggml_abort
.LBB27_2717:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.160
	add	x3, x3, :lo12:.L.str.160
	mov	w1, #12287                      // =0x2fff
	bl	ggml_abort
.LBB27_2718:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.161
	add	x3, x3, :lo12:.L.str.161
	mov	w1, #12288                      // =0x3000
	bl	ggml_abort
.LBB27_2719:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #12296                      // =0x3008
	bl	ggml_abort
.LBB27_2720:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.26
	add	x3, x3, :lo12:.L.str.26
	mov	w1, #7617                       // =0x1dc1
	bl	ggml_abort
.LBB27_2721:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.80
	add	x3, x3, :lo12:.L.str.80
	mov	w1, #7086                       // =0x1bae
	bl	ggml_abort
.LBB27_2722:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5054                       // =0x13be
	bl	ggml_abort
.LBB27_2723:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #5071                       // =0x13cf
	bl	ggml_abort
.LBB27_2724:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.55
	add	x3, x3, :lo12:.L.str.55
	mov	w1, #5072                       // =0x13d0
	bl	ggml_abort
.LBB27_2725:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.56
	add	x3, x3, :lo12:.L.str.56
	mov	w1, #5076                       // =0x13d4
	bl	ggml_abort
.LBB27_2726:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.57
	add	x3, x3, :lo12:.L.str.57
	mov	w1, #5077                       // =0x13d5
	bl	ggml_abort
.LBB27_2727:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.58
	add	x3, x3, :lo12:.L.str.58
	mov	w1, #5078                       // =0x13d6
	bl	ggml_abort
.LBB27_2728:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.59
	add	x3, x3, :lo12:.L.str.59
	mov	w1, #5079                       // =0x13d7
	bl	ggml_abort
.LBB27_2729:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.65
	add	x3, x3, :lo12:.L.str.65
	mov	w1, #5353                       // =0x14e9
	bl	ggml_abort
.LBB27_2730:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.44
	add	x3, x3, :lo12:.L.str.44
	mov	w1, #5364                       // =0x14f4
	bl	ggml_abort
.LBB27_2731:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #5365                       // =0x14f5
	bl	ggml_abort
.LBB27_2732:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.66
	add	x3, x3, :lo12:.L.str.66
	mov	w1, #5427                       // =0x1533
	bl	ggml_abort
.LBB27_2733:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #5438                       // =0x153e
	bl	ggml_abort
.LBB27_2734:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #5439                       // =0x153f
	bl	ggml_abort
.LBB27_2735:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.70
	add	x3, x3, :lo12:.L.str.70
	mov	w1, #5631                       // =0x15ff
	bl	ggml_abort
.LBB27_2736:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.68
	add	x3, x3, :lo12:.L.str.68
	mov	w1, #5640                       // =0x1608
	bl	ggml_abort
.LBB27_2737:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6194                       // =0x1832
	bl	ggml_abort
.LBB27_2738:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #6834                       // =0x1ab2
	bl	ggml_abort
.LBB27_2739:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #7721                       // =0x1e29
	bl	ggml_abort
.LBB27_2740:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #7545                       // =0x1d79
	bl	ggml_abort
.LBB27_2741:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.91
	add	x3, x3, :lo12:.L.str.91
	mov	w1, #7585                       // =0x1da1
	bl	ggml_abort
.LBB27_2742:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #7587                       // =0x1da3
	bl	ggml_abort
.LBB27_2743:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #8106                       // =0x1faa
	bl	ggml_abort
.LBB27_2744:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.90
	add	x3, x3, :lo12:.L.str.90
	mov	w1, #8034                       // =0x1f62
	bl	ggml_abort
.LBB27_2745:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.94
	add	x3, x3, :lo12:.L.str.94
	mov	w1, #8043                       // =0x1f6b
	bl	ggml_abort
.LBB27_2746:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.95
	add	x3, x3, :lo12:.L.str.95
	mov	w1, #8044                       // =0x1f6c
	bl	ggml_abort
.LBB27_2747:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.96
	add	x3, x3, :lo12:.L.str.96
	mov	w1, #8145                       // =0x1fd1
	bl	ggml_abort
.LBB27_2748:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.97
	add	x3, x3, :lo12:.L.str.97
	mov	w1, #8146                       // =0x1fd2
	bl	ggml_abort
.LBB27_2749:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.98
	add	x3, x3, :lo12:.L.str.98
	mov	w1, #8147                       // =0x1fd3
	bl	ggml_abort
.LBB27_2750:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.99
	add	x3, x3, :lo12:.L.str.99
	mov	w1, #8148                       // =0x1fd4
	bl	ggml_abort
.LBB27_2751:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.100
	add	x3, x3, :lo12:.L.str.100
	mov	w1, #8149                       // =0x1fd5
	bl	ggml_abort
.LBB27_2752:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #8151                       // =0x1fd7
	bl	ggml_abort
.LBB27_2753:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #8152                       // =0x1fd8
	bl	ggml_abort
.LBB27_2754:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9113                       // =0x2399
	bl	ggml_abort
.LBB27_2755:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9137                       // =0x23b1
	bl	ggml_abort
.LBB27_2756:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.44
	add	x3, x3, :lo12:.L.str.44
	mov	w1, #8561                       // =0x2171
	bl	ggml_abort
.LBB27_2757:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #8562                       // =0x2172
	bl	ggml_abort
.LBB27_2758:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9337                       // =0x2479
	bl	ggml_abort
.LBB27_2759:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #9152                       // =0x23c0
	bl	ggml_abort
.LBB27_2760:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #9153                       // =0x23c1
	bl	ggml_abort
.LBB27_2761:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #9162                       // =0x23ca
	bl	ggml_abort
.LBB27_2762:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #9163                       // =0x23cb
	bl	ggml_abort
.LBB27_2763:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #9509                       // =0x2525
	bl	ggml_abort
.LBB27_2764:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.41
	add	x3, x3, :lo12:.L.str.41
	mov	w1, #9429                       // =0x24d5
	bl	ggml_abort
.LBB27_2765:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #9430                       // =0x24d6
	bl	ggml_abort
.LBB27_2766:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #9460                       // =0x24f4
	bl	ggml_abort
.LBB27_2767:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #9461                       // =0x24f5
	bl	ggml_abort
.LBB27_2768:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.114
	add	x3, x3, :lo12:.L.str.114
	mov	w1, #9878                       // =0x2696
	bl	ggml_abort
.LBB27_2769:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6083                       // =0x17c3
	bl	ggml_abort
.LBB27_2770:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11248                      // =0x2bf0
	bl	ggml_abort
.LBB27_2771:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.150
	add	x3, x3, :lo12:.L.str.150
	mov	w1, #11368                      // =0x2c68
	bl	ggml_abort
.LBB27_2772:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.150
	add	x3, x3, :lo12:.L.str.150
	mov	w1, #11570                      // =0x2d32
	bl	ggml_abort
.LBB27_2773:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.150
	add	x3, x3, :lo12:.L.str.150
	mov	w1, #11762                      // =0x2df2
	bl	ggml_abort
.LBB27_2774:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #11201                      // =0x2bc1
	bl	ggml_abort
.LBB27_2775:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #7616                       // =0x1dc0
	bl	ggml_abort
.LBB27_2776:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.91
	add	x3, x3, :lo12:.L.str.91
	mov	w1, #7656                       // =0x1de8
	bl	ggml_abort
.LBB27_2777:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.92
	add	x3, x3, :lo12:.L.str.92
	mov	w1, #7658                       // =0x1dea
	bl	ggml_abort
.LBB27_2778:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.90
	add	x3, x3, :lo12:.L.str.90
	mov	w1, #8067                       // =0x1f83
	bl	ggml_abort
.LBB27_2779:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.94
	add	x3, x3, :lo12:.L.str.94
	mov	w1, #8076                       // =0x1f8c
	bl	ggml_abort
.LBB27_2780:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #8077                       // =0x1f8d
	bl	ggml_abort
.LBB27_2781:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #9240                       // =0x2418
	bl	ggml_abort
.LBB27_2782:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #9241                       // =0x2419
	bl	ggml_abort
.LBB27_2783:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #9250                       // =0x2422
	bl	ggml_abort
.LBB27_2784:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #9251                       // =0x2423
	bl	ggml_abort
.LBB27_2785:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #9353                       // =0x2489
	bl	ggml_abort
.LBB27_2786:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.31
	add	x3, x3, :lo12:.L.str.31
	mov	w1, #9383                       // =0x24a7
	bl	ggml_abort
.LBB27_2787:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #7097                       // =0x1bb9
	bl	ggml_abort
.LBB27_2788:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.67
	add	x3, x3, :lo12:.L.str.67
	mov	w1, #5588                       // =0x15d4
	bl	ggml_abort
.LBB27_2789:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.68
	add	x3, x3, :lo12:.L.str.68
	mov	w1, #5597                       // =0x15dd
	bl	ggml_abort
.LBB27_2790:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5410                       // =0x1522
	bl	ggml_abort
.LBB27_2791:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.65
	add	x3, x3, :lo12:.L.str.65
	mov	w1, #5309                       // =0x14bd
	bl	ggml_abort
.LBB27_2792:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #5320                       // =0x14c8
	bl	ggml_abort
.LBB27_2793:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #5321                       // =0x14c9
	bl	ggml_abort
.LBB27_2794:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #8525                       // =0x214d
	bl	ggml_abort
.LBB27_2795:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #8526                       // =0x214e
	bl	ggml_abort
.LBB27_2796:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.69
	add	x3, x3, :lo12:.L.str.69
	mov	w1, #5545                       // =0x15a9
	bl	ggml_abort
.LBB27_2797:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.68
	add	x3, x3, :lo12:.L.str.68
	mov	w1, #5554                       // =0x15b2
	bl	ggml_abort
.LBB27_2798:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.68
	add	x3, x3, :lo12:.L.str.68
	mov	w1, #5511                       // =0x1587
	bl	ggml_abort
.LBB27_2799:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4427                       // =0x114b
	bl	ggml_abort
.LBB27_2800:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4774                       // =0x12a6
	bl	ggml_abort
.LBB27_2801:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.93
	add	x3, x3, :lo12:.L.str.93
	mov	w1, #7902                       // =0x1ede
	bl	ggml_abort
.LBB27_2802:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #7998                       // =0x1f3e
	bl	ggml_abort
.LBB27_2803:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.93
	add	x3, x3, :lo12:.L.str.93
	mov	w1, #7861                       // =0x1eb5
	bl	ggml_abort
.LBB27_2804:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5794                       // =0x16a2
	bl	ggml_abort
.LBB27_2805:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #5897                       // =0x1709
	bl	ggml_abort
.LBB27_2806:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #6000                       // =0x1770
	bl	ggml_abort
.LBB27_2807:
	cmp	x19, #1
	b.ne	.LBB27_2825
// %bb.2808:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #7462                       // =0x1d26
	bl	ggml_abort
.LBB27_2809:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.85
	add	x3, x3, :lo12:.L.str.85
	mov	w1, #7228                       // =0x1c3c
	bl	ggml_abort
.LBB27_2810:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #7230                       // =0x1c3e
	bl	ggml_abort
.LBB27_2811:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.83
	add	x3, x3, :lo12:.L.str.83
	mov	w1, #7235                       // =0x1c43
	bl	ggml_abort
.LBB27_2812:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.84
	add	x3, x3, :lo12:.L.str.84
	mov	w1, #7236                       // =0x1c44
	bl	ggml_abort
.LBB27_2813:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.76
	add	x3, x3, :lo12:.L.str.76
	mov	w1, #7237                       // =0x1c45
	bl	ggml_abort
.LBB27_2814:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.77
	add	x3, x3, :lo12:.L.str.77
	mov	w1, #7238                       // =0x1c46
	bl	ggml_abort
.LBB27_2815:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.87
	add	x3, x3, :lo12:.L.str.87
	mov	w1, #7240                       // =0x1c48
	bl	ggml_abort
.LBB27_2816:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.88
	add	x3, x3, :lo12:.L.str.88
	mov	w1, #7241                       // =0x1c49
	bl	ggml_abort
.LBB27_2817:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #7244                       // =0x1c4c
	bl	ggml_abort
.LBB27_2818:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #7247                       // =0x1c4f
	bl	ggml_abort
.LBB27_2819:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4762                       // =0x129a
	bl	ggml_abort
.LBB27_2820:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4804                       // =0x12c4
	bl	ggml_abort
.LBB27_2821:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4441                       // =0x1159
	bl	ggml_abort
.LBB27_2822:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.38
	add	x3, x3, :lo12:.L.str.38
	mov	w1, #4442                       // =0x115a
	bl	ggml_abort
.LBB27_2823:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.39
	add	x3, x3, :lo12:.L.str.39
	mov	w1, #4451                       // =0x1163
	bl	ggml_abort
.LBB27_2824:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #4452                       // =0x1164
	bl	ggml_abort
.LBB27_2825:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #7471                       // =0x1d2f
	bl	ggml_abort
.Lfunc_end27:
	.size	ggml_graph_compute_thread, .Lfunc_end27-ggml_graph_compute_thread
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI27_0:
	.word	.LBB27_16-.Ltmp0
	.word	.LBB27_17-.Ltmp0
	.word	.LBB27_42-.Ltmp0
	.word	.LBB27_68-.Ltmp0
	.word	.LBB27_91-.Ltmp0
	.word	.LBB27_92-.Ltmp0
	.word	.LBB27_93-.Ltmp0
	.word	.LBB27_94-.Ltmp0
	.word	.LBB27_95-.Ltmp0
	.word	.LBB27_96-.Ltmp0
	.word	.LBB27_97-.Ltmp0
	.word	.LBB27_98-.Ltmp0
	.word	.LBB27_99-.Ltmp0
	.word	.LBB27_121-.Ltmp0
	.word	.LBB27_148-.Ltmp0
	.word	.LBB27_169-.Ltmp0
	.word	.LBB27_183-.Ltmp0
	.word	.LBB27_203-.Ltmp0
	.word	.LBB27_238-.Ltmp0
	.word	.LBB27_246-.Ltmp0
	.word	.LBB27_269-.Ltmp0
	.word	.LBB27_281-.Ltmp0
	.word	.LBB27_322-.Ltmp0
	.word	.LBB27_356-.Ltmp0
	.word	.LBB27_415-.Ltmp0
	.word	.LBB27_470-.Ltmp0
	.word	.LBB27_504-.Ltmp0
	.word	.LBB27_525-.Ltmp0
	.word	.LBB27_533-.Ltmp0
	.word	.LBB27_566-.Ltmp0
	.word	.LBB27_587-.Ltmp0
	.word	.LBB27_16-.Ltmp0
	.word	.LBB27_16-.Ltmp0
	.word	.LBB27_7-.Ltmp0
	.word	.LBB27_7-.Ltmp0
	.word	.LBB27_7-.Ltmp0
	.word	.LBB27_7-.Ltmp0
	.word	.LBB27_611-.Ltmp0
	.word	.LBB27_618-.Ltmp0
	.word	.LBB27_636-.Ltmp0
	.word	.LBB27_664-.Ltmp0
	.word	.LBB27_666-.Ltmp0
	.word	.LBB27_668-.Ltmp0
	.word	.LBB27_671-.Ltmp0
	.word	.LBB27_725-.Ltmp0
	.word	.LBB27_728-.Ltmp0
	.word	.LBB27_731-.Ltmp0
	.word	.LBB27_741-.Ltmp0
	.word	.LBB27_762-.Ltmp0
	.word	.LBB27_791-.Ltmp0
	.word	.LBB27_823-.Ltmp0
	.word	.LBB27_846-.Ltmp0
	.word	.LBB27_874-.Ltmp0
	.word	.LBB27_911-.Ltmp0
	.word	.LBB27_955-.Ltmp0
	.word	.LBB27_972-.Ltmp0
	.word	.LBB27_997-.Ltmp0
	.word	.LBB27_1030-.Ltmp0
	.word	.LBB27_1036-.Ltmp0
	.word	.LBB27_1046-.Ltmp0
	.word	.LBB27_1074-.Ltmp0
	.word	.LBB27_1088-.Ltmp0
	.word	.LBB27_1188-.Ltmp0
	.word	.LBB27_1386-.Ltmp0
	.word	.LBB27_1409-.Ltmp0
	.word	.LBB27_1439-.Ltmp0
	.word	.LBB27_1470-.Ltmp0
	.word	.LBB27_1485-.Ltmp0
	.word	.LBB27_1500-.Ltmp0
	.word	.LBB27_1524-.Ltmp0
	.word	.LBB27_1548-.Ltmp0
	.word	.LBB27_1572-.Ltmp0
	.word	.LBB27_1599-.Ltmp0
	.word	.LBB27_1602-.Ltmp0
	.word	.LBB27_1607-.Ltmp0
	.word	.LBB27_1612-.Ltmp0
	.word	.LBB27_1614-.Ltmp0
	.word	.LBB27_1616-.Ltmp0
	.word	.LBB27_1618-.Ltmp0
	.word	.LBB27_1619-.Ltmp0
	.word	.LBB27_1620-.Ltmp0
	.word	.LBB27_1621-.Ltmp0
	.word	.LBB27_1673-.Ltmp0
	.word	.LBB27_1727-.Ltmp0
	.word	.LBB27_2536-.Ltmp0
	.p2align	2, 0x0
.LJTI27_1:
	.word	.LBB27_1601-.Ltmp1
	.word	.LBB27_2360-.Ltmp1
	.word	.LBB27_2361-.Ltmp1
	.word	.LBB27_2362-.Ltmp1
	.word	.LBB27_2363-.Ltmp1
	.word	.LBB27_2364-.Ltmp1
	.word	.LBB27_2365-.Ltmp1
	.word	.LBB27_2366-.Ltmp1
	.word	.LBB27_2367-.Ltmp1
	.word	.LBB27_2379-.Ltmp1
	.word	.LBB27_2387-.Ltmp1
	.word	.LBB27_2400-.Ltmp1
	.word	.LBB27_2401-.Ltmp1
	.word	.LBB27_2402-.Ltmp1
                                        // -- End function
	.text
	.p2align	4                               // -- Begin function ggml_compute_forward_dup
	.type	ggml_compute_forward_dup,@function
ggml_compute_forward_dup:               // @ggml_compute_forward_dup
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #320
	.cfi_def_cfa_offset 320
	stp	x29, x30, [sp, #224]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #240]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #256]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #272]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #288]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #304]            // 16-byte Folded Spill
	add	x29, sp, #224
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	ldr	x19, [x1, #152]
	mov	x25, x0
	ldr	w8, [x1]
	stp	x1, x19, [x29, #-24]            // 16-byte Folded Spill
	ldr	w0, [x19]
	cmp	w0, w8
	b.ne	.LBB28_11
// %bb.1:
	mov	x0, x1
	mov	x20, x1
	bl	ggml_nelements
	mov	x21, x0
	mov	x0, x19
	bl	ggml_nelements
	cmp	x21, x0
	b.ne	.LBB28_563
// %bb.2:
	ldr	w8, [x19]
	ldr	w9, [x20]
	cmp	w8, w9
	b.ne	.LBB28_564
// %bb.3:
	ldp	x8, x27, [x19, #16]
	mov	x0, x19
	ldp	x10, x11, [x20, #48]
	stur	x8, [x29, #-88]                 // 8-byte Folded Spill
	ldp	x9, x8, [x19, #32]
	str	x9, [sp, #96]                   // 8-byte Folded Spill
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	ldp	x9, x8, [x19, #48]
	ldp	x24, x22, [x20, #16]
	stur	x9, [x29, #-32]                 // 8-byte Folded Spill
	stur	x8, [x29, #-96]                 // 8-byte Folded Spill
	ldp	x9, x8, [x19, #64]
	str	x9, [sp, #104]                  // 8-byte Folded Spill
	ldp	x19, x9, [x20, #32]
	str	x8, [sp, #32]                   // 8-byte Folded Spill
	stp	x9, x10, [x29, #-72]            // 16-byte Folded Spill
	ldp	x9, x8, [x20, #64]
	stur	x8, [x29, #-56]                 // 8-byte Folded Spill
	stp	x11, x9, [x29, #-48]            // 16-byte Folded Spill
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_21
// %bb.4:
	mov	x0, x20
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_21
// %bb.5:
	ldr	x19, [x20, #152]
	mov	x0, x20
	bl	ggml_nelements
	mov	x21, x0
	mov	x0, x19
	bl	ggml_nelements
	cmp	x21, x0
	b.ne	.LBB28_567
// %bb.6:
	mov	x0, x20
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_566
// %bb.7:
	mov	x0, x19
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_566
// %bb.8:
	ldur	x8, [x29, #-24]                 // 8-byte Folded Reload
	ldr	w0, [x19]
	ldr	w8, [x8]
	cmp	w0, w8
	b.ne	.LBB28_568
// %bb.9:
	bl	ggml_type_size
	mov	x21, x0
	mov	x0, x19
	ldp	w20, w23, [x25]
                                        // kill: def $w20 killed $w20 def $x20
	sxtw	x20, w20
	bl	ggml_nelements
	mov	x22, x0
	ldr	w0, [x19]
	bl	ggml_blck_size
	sdiv	x9, x22, x0
	add	w8, w23, w9
	sub	w8, w8, #1
	sdiv	w10, w8, w23
	smull	x8, w20, w10
	add	w10, w8, w10
	cmp	w10, w9
	csel	w9, w10, w9, lt
	subs	w9, w9, w8
	b.le	.LBB28_562
// %bb.10:
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	mul	x8, x21, x8
	sxtw	x9, w9
	ldr	x11, [x19, #248]
	mul	x2, x21, x9
	ldr	x10, [x10, #248]
	add	x0, x10, x8
	add	x1, x11, x8
	.cfi_def_cfa wsp, 320
	ldp	x20, x19, [sp, #304]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #288]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #272]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #256]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #240]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #224]            // 16-byte Folded Reload
	add	sp, sp, #320
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	b	memcpy
.LBB28_11:
	.cfi_restore_state
	.cfi_remember_state
	cbz	w0, .LBB28_96
// %bb.12:
	cmp	w0, #30
	b.eq	.LBB28_79
// %bb.13:
	cmp	w0, #1
	b.ne	.LBB28_113
// %bb.14:
	mov	x0, x1
	mov	x20, x19
	mov	x19, x1
	bl	ggml_nelements
	mov	x21, x0
	mov	x0, x20
	bl	ggml_nelements
	cmp	x21, x0
	b.ne	.LBB28_569
// %bb.15:
	ldp	x11, x21, [x20, #16]
	str	x25, [sp, #112]                 // 8-byte Folded Spill
	ldp	w12, w8, [x25]
                                        // kill: def $w12 killed $w12 def $x12
	sxtw	x12, w12
	ldr	x10, [x20, #32]
	add	w9, w21, w8
	stur	x10, [x29, #-48]                // 8-byte Folded Spill
	ldp	x10, x22, [x20, #40]
	ldr	w0, [x20]
	sub	w9, w9, #1
	ldp	x24, x28, [x19, #48]
	sdiv	w8, w9, w8
	ldp	x26, x27, [x19, #64]
	stur	x10, [x29, #-64]                // 8-byte Folded Spill
	ldr	x10, [x20, #56]
	stur	x10, [x29, #-72]                // 8-byte Folded Spill
	ldr	x10, [x20, #64]
	stur	x10, [x29, #-88]                // 8-byte Folded Spill
	ldr	x10, [x20, #72]
	str	x10, [sp, #72]                  // 8-byte Folded Spill
	ldp	x23, x10, [x19, #16]
	stp	x10, x11, [x29, #-40]           // 16-byte Folded Spill
	mul	w9, w8, w12
	ldp	x10, x25, [x19, #32]
	add	w8, w9, w8
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	stp	x12, x9, [x29, #-104]           // 16-byte Folded Spill
	cmp	w8, w21
	csel	w8, w8, w21, lt
	stur	x8, [x29, #-80]                 // 8-byte Folded Spill
	ldr	w8, [x19]
	cmp	w0, w8
	b.ne	.LBB28_150
// %bb.16:
	cmp	x11, x23
	b.ne	.LBB28_150
// %bb.17:
	bl	ggml_type_size
	ldur	x19, [x29, #-24]                // 8-byte Folded Reload
	cmp	x22, x0
	b.ne	.LBB28_150
// %bb.18:
	ldr	w0, [x19]
	bl	ggml_type_size
	ldp	x9, x19, [x29, #-32]            // 16-byte Folded Reload
	cmp	x24, x0
	b.ne	.LBB28_150
// %bb.19:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.20:                              // %.preheader.lr.ph.i32
	mul	x8, x22, x9
	stp	xzr, xzr, [sp, #8]              // 16-byte Folded Spill
	str	xzr, [sp]                       // 8-byte Folded Spill
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	sxtw	x9, w8
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	sxtw	x10, w8
	sub	x8, x10, x9
	str	x8, [sp, #88]                   // 8-byte Folded Spill
	mul	x8, x28, x9
	str	x8, [sp, #40]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	str	x9, [sp, #104]                  // 8-byte Folded Spill
	str	x10, [sp, #48]                  // 8-byte Folded Spill
	mul	x12, x8, x9
	add	x9, x9, #1
	stp	x9, x12, [sp, #24]              // 16-byte Folded Spill
	sub	x9, x10, #1
	str	x9, [sp, #80]                   // 8-byte Folded Spill
	lsl	x9, x8, #1
	lsl	x8, x28, #1
	stp	x8, x9, [x29, #-40]             // 16-byte Folded Spill
	b	.LBB28_38
.LBB28_21:
	stur	x19, [x29, #-80]                // 8-byte Folded Spill
	ldur	x19, [x29, #-16]                // 8-byte Folded Reload
	ldr	w0, [x19]
	bl	ggml_type_size
	ldp	w8, w9, [x25]
	mov	x21, x0
	add	w10, w27, w9
	sub	w10, w10, #1
	sdiv	w9, w10, w9
	mul	w8, w9, w8
	str	x8, [sp, #88]                   // 8-byte Folded Spill
	add	w8, w8, w9
	ldr	w9, [x20]
	cmp	w8, w27
	csel	w8, w8, w27, lt
	str	x8, [sp, #80]                   // 8-byte Folded Spill
	ldr	w8, [x19]
	cmp	w8, w9
	b.ne	.LBB28_47
// %bb.22:
	mov	x0, x19
	mov	x1, x20
	bl	ggml_are_same_shape
	ldp	x20, x8, [x29, #-24]            // 16-byte Folded Reload
	tbz	w0, #0, .LBB28_47
// %bb.23:
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x9, x21
	b.ne	.LBB28_47
// %bb.24:
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x9, x21
	b.ne	.LBB28_47
// %bb.25:
	ldr	w0, [x8]
	ldur	x1, [x29, #-88]                 // 8-byte Folded Reload
	bl	ggml_row_size
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.26:                              // %.preheader.lr.ph.i
	ldp	x8, x9, [sp, #80]               // 16-byte Folded Reload
	str	xzr, [sp, #40]                  // 8-byte Folded Spill
	stp	xzr, xzr, [sp, #8]              // 16-byte Folded Spill
	mov	x21, x0
	sxtw	x10, w9
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	sxtw	x12, w8
	sub	x8, x12, x10
	stur	x8, [x29, #-80]                 // 8-byte Folded Spill
	mul	x8, x9, x10
	lsl	x20, x9, #1
	str	x8, [sp, #64]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	mul	x13, x8, x10
	lsl	x19, x8, #1
	str	x13, [sp, #56]                  // 8-byte Folded Spill
	stur	x10, [x29, #-72]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x12, [sp, #72]                  // 8-byte Folded Spill
	str	x10, [sp, #48]                  // 8-byte Folded Spill
	sub	x10, x12, #1
	stur	x10, [x29, #-88]                // 8-byte Folded Spill
	b	.LBB28_28
	.p2align	5, , 16
.LBB28_27:                              // %._crit_edge406.i
                                        //   in Loop: Header=BB28_28 Depth=1
	ldp	x10, x9, [sp, #8]               // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x8, [sp, #32]                   // 8-byte Folded Reload
	add	x9, x9, x8
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	add	x9, x9, x8
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB28_562
.LBB28_28:                              // %.preheader.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_31 Depth 2
                                        //       Child Loop BB28_36 Depth 3
	ldr	x8, [sp, #96]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_27
// %bb.29:                              // %.lr.ph405.i
                                        //   in Loop: Header=BB28_28 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	mov	x24, xzr
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
	mul	x8, x9, x8
	stur	x8, [x29, #-104]                // 8-byte Folded Spill
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	stur	x8, [x29, #-32]                 // 8-byte Folded Spill
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	stur	x8, [x29, #-64]                 // 8-byte Folded Spill
	ldr	x8, [sp, #32]                   // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #112]                  // 8-byte Folded Spill
	b	.LBB28_31
	.p2align	5, , 16
.LBB28_30:                              // %._crit_edge403.i
                                        //   in Loop: Header=BB28_31 Depth=2
	ldr	x8, [sp, #104]                  // 8-byte Folded Reload
	add	x24, x24, #1
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	add	x9, x9, x8
	stur	x9, [x29, #-64]                 // 8-byte Folded Spill
	ldp	x8, x9, [x29, #-40]             // 16-byte Folded Reload
	add	x9, x9, x8
	stur	x9, [x29, #-32]                 // 8-byte Folded Spill
	ldr	x8, [sp, #96]                   // 8-byte Folded Reload
	cmp	x24, x8
	b.eq	.LBB28_27
.LBB28_31:                              //   Parent Loop BB28_28 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_36 Depth 3
	ldp	x9, x8, [sp, #80]               // 16-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_30
// %bb.32:                              // %.lr.ph402.i
                                        //   in Loop: Header=BB28_31 Depth=2
	ldp	x9, x8, [x29, #-80]             // 16-byte Folded Reload
	tbz	w9, #0, .LBB28_34
// %bb.33:                              // %.prol.loopexit650.unr-lcssa
                                        //   in Loop: Header=BB28_31 Depth=2
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	mov	x2, x21
	mul	x8, x24, x8
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	ldr	x12, [sp, #64]                  // 8-byte Folded Reload
	ldr	x9, [sp, #104]                  // 8-byte Folded Reload
	mul	x9, x24, x9
	add	x10, x10, x12
	add	x8, x10, x8
	ldr	x10, [x11, #248]
	ldr	x11, [sp, #56]                  // 8-byte Folded Reload
	add	x10, x10, x11
	add	x9, x10, x9
	ldur	x10, [x29, #-104]               // 8-byte Folded Reload
	add	x0, x8, x10
	ldr	x8, [sp, #112]                  // 8-byte Folded Reload
	add	x1, x9, x8
	bl	memcpy
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	ldr	x8, [sp, #48]                   // 8-byte Folded Reload
.LBB28_34:                              // %.prol.loopexit650
                                        //   in Loop: Header=BB28_31 Depth=2
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	ldur	x10, [x29, #-88]                // 8-byte Folded Reload
	ldur	x23, [x29, #-24]                // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_30
// %bb.35:                              // %.lr.ph402.i.new.preheader
                                        //   in Loop: Header=BB28_31 Depth=2
	ldr	x9, [sp, #72]                   // 8-byte Folded Reload
	sub	x22, x9, x8
	ldur	x10, [x29, #-96]                // 8-byte Folded Reload
	ldur	x14, [x29, #-64]                // 8-byte Folded Reload
	ldur	x12, [x29, #-48]                // 8-byte Folded Reload
	ldur	x13, [x29, #-32]                // 8-byte Folded Reload
	add	x9, x8, #1
	madd	x25, x12, x8, x13
	madd	x28, x10, x9, x14
	madd	x27, x12, x9, x13
	mul	x9, x10, x8
	add	x26, x14, x9
	.p2align	5, , 16
.LBB28_36:                              // %.lr.ph402.i.new
                                        //   Parent Loop BB28_28 Depth=1
                                        //     Parent Loop BB28_31 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x23, #248]
	mov	x2, x21
	add	x0, x8, x25
	ldr	x9, [x11, #248]
	add	x1, x9, x26
	bl	memcpy
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	mov	x2, x21
	ldr	x8, [x23, #248]
	add	x0, x8, x27
	ldr	x9, [x9, #248]
	add	x1, x9, x28
	bl	memcpy
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	subs	x22, x22, #2
	add	x28, x28, x19
	add	x27, x27, x20
	add	x26, x26, x19
	add	x25, x25, x20
	b.ne	.LBB28_36
	b	.LBB28_30
	.p2align	5, , 16
.LBB28_37:                              // %._crit_edge813.i
                                        //   in Loop: Header=BB28_38 Depth=1
	ldp	x10, x9, [sp]                   // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x8, x27
	stp	x9, x8, [sp, #8]                // 16-byte Folded Spill
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	str	x10, [sp]                       // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB28_562
.LBB28_38:                              // %.preheader.i33
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_41 Depth 2
                                        //       Child Loop BB28_46 Depth 3
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_37
// %bb.39:                              // %.lr.ph812.i
                                        //   in Loop: Header=BB28_38 Depth=1
	stur	xzr, [x29, #-56]                // 8-byte Folded Spill
	ldr	x9, [sp]                        // 8-byte Folded Reload
	mul	x8, x9, x27
	str	x8, [sp, #64]                   // 8-byte Folded Spill
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	stur	x8, [x29, #-104]                // 8-byte Folded Spill
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	str	x8, [sp, #112]                  // 8-byte Folded Spill
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #56]                   // 8-byte Folded Spill
	b	.LBB28_41
	.p2align	5, , 16
.LBB28_40:                              // %._crit_edge810.i
                                        //   in Loop: Header=BB28_41 Depth=2
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	ldr	x10, [sp, #112]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #112]                 // 8-byte Folded Spill
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	add	x8, x8, x26
	stur	x8, [x29, #-104]                // 8-byte Folded Spill
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB28_37
.LBB28_41:                              //   Parent Loop BB28_38 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_46 Depth 3
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_40
// %bb.42:                              // %.lr.ph809.i
                                        //   in Loop: Header=BB28_41 Depth=2
	ldr	x8, [sp, #104]                  // 8-byte Folded Reload
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_44
// %bb.43:                              // %.prol.loopexit635.unr-lcssa
                                        //   in Loop: Header=BB28_41 Depth=2
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	mul	x8, x10, x26
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	mul	x9, x10, x9
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	ldr	x2, [sp, #96]                   // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	add	x10, x10, x12
	add	x8, x10, x8
	ldr	x10, [x11, #248]
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x10, x11
	add	x9, x10, x9
	ldr	x10, [sp, #64]                  // 8-byte Folded Reload
	add	x0, x8, x10
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	add	x1, x9, x8
	bl	memcpy
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
.LBB28_44:                              // %.prol.loopexit635
                                        //   in Loop: Header=BB28_41 Depth=2
	ldp	x20, x9, [sp, #96]              // 16-byte Folded Reload
	ldr	x10, [sp, #80]                  // 8-byte Folded Reload
	ldur	x19, [x29, #-24]                // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_40
// %bb.45:                              // %.lr.ph809.i.new.preheader
                                        //   in Loop: Header=BB28_41 Depth=2
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	sub	x22, x9, x8
	ldur	x10, [x29, #-72]                // 8-byte Folded Reload
	ldr	x13, [sp, #112]                 // 8-byte Folded Reload
	ldur	x12, [x29, #-104]               // 8-byte Folded Reload
	add	x9, x8, #1
	madd	x21, x28, x8, x12
	madd	x25, x10, x9, x13
	madd	x24, x28, x9, x12
	mul	x9, x10, x8
	add	x23, x13, x9
	.p2align	5, , 16
.LBB28_46:                              // %.lr.ph809.i.new
                                        //   Parent Loop BB28_38 Depth=1
                                        //     Parent Loop BB28_41 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x19, #248]
	mov	x2, x20
	add	x0, x8, x21
	ldr	x9, [x11, #248]
	add	x1, x9, x23
	bl	memcpy
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	mov	x2, x20
	ldr	x8, [x19, #248]
	add	x0, x8, x24
	ldr	x9, [x9, #248]
	add	x1, x9, x25
	bl	memcpy
	ldp	x16, x15, [x29, #-40]           // 16-byte Folded Reload
	subs	x22, x22, #2
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	x25, x25, x15
	add	x24, x24, x16
	add	x23, x23, x15
	add	x21, x21, x16
	b.ne	.LBB28_46
	b	.LBB28_40
.LBB28_47:
	mov	x0, x20
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_61
// %bb.48:
	ldr	x8, [x20, #248]
	stur	x8, [x29, #-24]                 // 8-byte Folded Spill
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mul	x20, x21, x8
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, x21
	b.ne	.LBB28_166
// %bb.49:                              // %.preheader300.i
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.50:                              // %.preheader299.lr.ph.i
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	mov	x12, xzr
	mov	x8, xzr
	mov	x13, xzr
	sxtw	x11, w9
	mul	x9, x20, x11
	stur	x9, [x29, #-48]                 // 8-byte Folded Spill
	ldr	x9, [sp, #80]                   // 8-byte Folded Reload
	sxtw	x14, w9
	sub	x9, x27, x14
	mul	x9, x9, x20
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	sub	x9, x14, x11
	stur	x9, [x29, #-64]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	mul	x15, x9, x11
	lsl	x21, x9, #1
	str	x15, [sp, #112]                 // 8-byte Folded Spill
	stur	x11, [x29, #-40]                // 8-byte Folded Spill
	add	x11, x11, #1
	str	x11, [sp, #72]                  // 8-byte Folded Spill
	sub	x11, x14, #1
	stur	x14, [x29, #-104]               // 8-byte Folded Spill
	stur	x11, [x29, #-72]                // 8-byte Folded Spill
	ldur	x11, [x29, #-24]                // 8-byte Folded Reload
	add	x11, x11, x20
	mov	x27, x11
	stur	x11, [x29, #-80]                // 8-byte Folded Spill
	b	.LBB28_52
	.p2align	5, , 16
.LBB28_51:                              // %._crit_edge396.i
                                        //   in Loop: Header=BB28_52 Depth=1
	ldp	x13, x12, [sp, #56]             // 16-byte Folded Reload
	add	x13, x13, #1
	ldp	x9, x11, [sp, #24]              // 16-byte Folded Reload
	add	x12, x12, x11
	cmp	x13, x9
	b.eq	.LBB28_562
.LBB28_52:                              // %.preheader299.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_55 Depth 2
                                        //       Child Loop BB28_60 Depth 3
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	stp	x13, x12, [sp, #56]             // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_51
// %bb.53:                              // %.lr.ph395.i
                                        //   in Loop: Header=BB28_52 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	mov	x22, xzr
	stur	x12, [x29, #-32]                // 8-byte Folded Spill
	mul	x9, x13, x9
	stur	x9, [x29, #-88]                 // 8-byte Folded Spill
	b	.LBB28_55
	.p2align	5, , 16
.LBB28_54:                              // %._crit_edge390.i
                                        //   in Loop: Header=BB28_55 Depth=2
	ldr	x9, [sp, #104]                  // 8-byte Folded Reload
	add	x22, x22, #1
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	add	x11, x11, x9
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x28, x8
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	cmp	x22, x9
	b.eq	.LBB28_51
.LBB28_55:                              //   Parent Loop BB28_52 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_60 Depth 3
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	add	x28, x8, x9
	ldp	x9, x8, [sp, #80]               // 16-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_54
// %bb.56:                              // %.lr.ph389.i
                                        //   in Loop: Header=BB28_55 Depth=2
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_58
// %bb.57:                              // %.prol.loopexit646.unr-lcssa
                                        //   in Loop: Header=BB28_55 Depth=2
	ldr	x8, [sp, #104]                  // 8-byte Folded Reload
	mov	x2, x20
	mul	x8, x22, x8
	ldr	x9, [x10, #248]
	ldr	x10, [sp, #112]                 // 8-byte Folded Reload
	add	x9, x9, x10
	add	x8, x9, x8
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	add	x0, x9, x28
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	add	x1, x8, x9
	bl	memcpy
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x28, x20
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
.LBB28_58:                              // %.prol.loopexit646
                                        //   in Loop: Header=BB28_55 Depth=2
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-72]                // 8-byte Folded Reload
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	cmp	x11, x9
	b.eq	.LBB28_54
// %bb.59:                              // %.lr.ph389.i.new.preheader
                                        //   in Loop: Header=BB28_55 Depth=2
	ldp	x11, x9, [x29, #-104]           // 16-byte Folded Reload
	sub	x24, x11, x8
	mul	x8, x9, x8
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	add	x9, x9, x8
	add	x19, x11, x8
	add	x23, x11, x9
	.p2align	5, , 16
.LBB28_60:                              // %.lr.ph389.i.new
                                        //   Parent Loop BB28_52 Depth=1
                                        //     Parent Loop BB28_55 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x10, #248]
	add	x0, x25, x28
	mov	x2, x20
	add	x1, x8, x19
	bl	memcpy
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	add	x0, x27, x28
	mov	x2, x20
	add	x26, x28, x20
	ldr	x8, [x8, #248]
	add	x1, x8, x23
	bl	memcpy
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x26, x20
	subs	x24, x24, #2
	add	x23, x23, x21
	add	x19, x19, x21
	b.ne	.LBB28_60
	b	.LBB28_54
.LBB28_61:
	ldur	x19, [x29, #-16]                // 8-byte Folded Reload
	ldr	w0, [x19]
	bl	ggml_blck_size
	mov	x25, x0
	ldr	w0, [x20]
	bl	ggml_blck_size
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldp	x15, x16, [x29, #-80]           // 16-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.62:                              // %.preheader308.lr.ph.i
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	mov	x13, x19
	mov	x10, xzr
	mov	x20, xzr
	mov	x26, xzr
	sdiv	x11, x9, x25
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	mov	x23, xzr
	mov	x8, xzr
	sxtw	x12, w9
	mul	x9, x11, x12
	str	x9, [sp, #48]                   // 8-byte Folded Spill
	ldr	x9, [sp, #80]                   // 8-byte Folded Reload
	sxtw	x9, w9
	str	x9, [sp, #112]                  // 8-byte Folded Spill
	sub	x9, x27, x9
	sdiv	x27, x24, x0
	stur	x11, [x29, #-104]               // 8-byte Folded Spill
	mul	x9, x11, x9
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	str	x12, [sp, #56]                  // 8-byte Folded Spill
	mul	x11, x9, x12
	b	.LBB28_64
	.p2align	5, , 16
.LBB28_63:                              // %._crit_edge359.i
                                        //   in Loop: Header=BB28_64 Depth=1
	ldp	x11, x10, [sp, #8]              // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	add	x11, x11, x9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_562
.LBB28_64:                              // %.preheader308.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_67 Depth 2
                                        //       Child Loop BB28_68 Depth 3
                                        //       Child Loop BB28_73 Depth 3
                                        //         Child Loop BB28_76 Depth 4
                                        //       Child Loop BB28_71 Depth 3
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	stp	x11, x10, [sp, #8]              // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_63
// %bb.65:                              // %.lr.ph358.i
                                        //   in Loop: Header=BB28_64 Depth=1
	ldur	x14, [x29, #-24]                // 8-byte Folded Reload
	mov	x10, xzr
	mov	x24, x11
	b	.LBB28_67
	.p2align	5, , 16
.LBB28_66:                              // %._crit_edge348.i
                                        //   in Loop: Header=BB28_67 Depth=2
	ldp	x24, x10, [sp, #64]             // 16-byte Folded Reload
	add	x10, x10, #1
	ldp	x9, x11, [sp, #96]              // 16-byte Folded Reload
	add	x24, x24, x11
	cmp	x10, x9
	b.eq	.LBB28_63
.LBB28_67:                              //   Parent Loop BB28_64 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_68 Depth 3
                                        //       Child Loop BB28_73 Depth 3
                                        //         Child Loop BB28_76 Depth 4
                                        //       Child Loop BB28_71 Depth 3
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	str	x10, [sp, #72]                  // 8-byte Folded Spill
	add	x28, x8, x9
	cmp	x28, x27
	b.lt	.LBB28_69
	.p2align	5, , 16
.LBB28_68:                              // %.lr.ph.i
                                        //   Parent Loop BB28_64 Depth=1
                                        //     Parent Loop BB28_67 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x9, x20, #1
	add	x10, x26, #1
	add	x8, x23, #1
	cmp	x9, x16
	sub	x28, x28, x27
	csinc	x9, xzr, x20, eq
	cmp	x10, x15
	csel	x10, xzr, xzr, ne
	csinc	x11, xzr, x26, eq
	csel	x9, x20, x9, ne
	cmp	x8, x22
	csinc	x23, x10, x23, eq
	csel	x26, x26, x11, ne
	csel	x20, x20, x9, ne
	cmp	x28, x27
	b.ge	.LBB28_68
.LBB28_69:                              // %.preheader307.i
                                        //   in Loop: Header=BB28_67 Depth=2
	ldr	x25, [sp, #56]                  // 8-byte Folded Reload
	str	x24, [sp, #64]                  // 8-byte Folded Spill
	ldp	x9, x8, [sp, #80]               // 16-byte Folded Reload
	cmp	w8, w9
	b.lt	.LBB28_73
.LBB28_70:                              // %._crit_edge335.i
                                        //   in Loop: Header=BB28_67 Depth=2
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	add	x8, x28, x8
	ldp	x15, x16, [x29, #-80]           // 16-byte Folded Reload
	cmp	x8, x27
	b.lt	.LBB28_66
	.p2align	5, , 16
.LBB28_71:                              // %.lr.ph347.i
                                        //   Parent Loop BB28_64 Depth=1
                                        //     Parent Loop BB28_67 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x10, x20, #1
	add	x11, x26, #1
	add	x9, x23, #1
	cmp	x10, x16
	sub	x8, x8, x27
	csinc	x10, xzr, x20, eq
	cmp	x11, x15
	csel	x11, xzr, xzr, ne
	csinc	x12, xzr, x26, eq
	csel	x10, x20, x10, ne
	cmp	x9, x22
	csinc	x23, x11, x23, eq
	csel	x26, x26, x12, ne
	csel	x20, x20, x10, ne
	cmp	x8, x27
	b.ge	.LBB28_71
	b	.LBB28_66
	.p2align	5, , 16
.LBB28_72:                              // %._crit_edge.i
                                        //   in Loop: Header=BB28_73 Depth=3
	ldp	x8, x24, [x29, #-96]            // 16-byte Folded Reload
	add	x25, x25, #1
	add	x24, x24, x8
	ldr	x8, [sp, #112]                  // 8-byte Folded Reload
	cmp	x25, x8
	b.eq	.LBB28_70
.LBB28_73:                              // %.preheader306.i
                                        //   Parent Loop BB28_64 Depth=1
                                        //     Parent Loop BB28_67 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_76 Depth 4
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	stur	x24, [x29, #-88]                // 8-byte Folded Spill
	mov	x19, x8
	cmp	x8, #1
	b.ge	.LBB28_76
	b	.LBB28_72
	.p2align	5, , 16
.LBB28_74:                              //   in Loop: Header=BB28_76 Depth=4
	ldp	x10, x11, [x29, #-80]           // 16-byte Folded Reload
	add	x8, x20, #1
	add	x9, x26, #1
	cmp	x8, x11
	csinc	x8, xzr, x20, eq
	cmp	x9, x10
	csel	x28, xzr, xzr, ne
	csel	x23, xzr, xzr, ne
	csinc	x26, xzr, x26, eq
	csel	x20, x20, x8, ne
.LBB28_75:                              //   in Loop: Header=BB28_76 Depth=4
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	subs	x19, x19, #1
	add	x24, x24, x8
	ldp	x14, x13, [x29, #-24]           // 16-byte Folded Reload
	b.eq	.LBB28_72
.LBB28_76:                              //   Parent Loop BB28_64 Depth=1
                                        //     Parent Loop BB28_67 Depth=2
                                        //       Parent Loop BB28_73 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x9, [x14, #248]
	mov	x2, x21
	ldur	x10, [x29, #-64]                // 8-byte Folded Reload
	nop
	madd	x9, x28, x10, x9
	ldp	x11, x10, [x29, #-48]           // 16-byte Folded Reload
	ldr	x8, [x13, #248]
	add	x1, x8, x24
	madd	x9, x23, x11, x9
	madd	x9, x26, x10, x9
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	nop
	madd	x0, x20, x10, x9
	bl	memcpy
	add	x28, x28, #1
	cmp	x28, x27
	b.ne	.LBB28_75
// %bb.77:                              //   in Loop: Header=BB28_76 Depth=4
	add	x23, x23, #1
	cmp	x23, x22
	b.eq	.LBB28_74
// %bb.78:                              //   in Loop: Header=BB28_76 Depth=4
	mov	x28, xzr
	b	.LBB28_75
.LBB28_79:
	mov	x0, x1
	mov	x20, x1
	bl	ggml_nelements
	mov	x21, x0
	mov	x0, x19
	bl	ggml_nelements
	cmp	x21, x0
	b.ne	.LBB28_570
// %bb.80:
	ldp	x8, x11, [x19, #16]
	stur	x8, [x29, #-32]                 // 8-byte Folded Spill
	ldp	w12, w8, [x25]
	ldr	x10, [x19, #32]
	str	x25, [sp, #112]                 // 8-byte Folded Spill
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
                                        // kill: def $w12 killed $w12 def $x12
	sxtw	x12, w12
	ldp	x10, x22, [x19, #40]
	ldr	w0, [x19]
	add	w9, w11, w8
	stur	x10, [x29, #-64]                // 8-byte Folded Spill
	ldr	x10, [x19, #56]
	ldp	x23, x25, [x20, #16]
	sub	w9, w9, #1
	ldp	x24, x28, [x20, #48]
	sdiv	w8, w9, w8
	ldp	x26, x27, [x20, #64]
	stur	x10, [x29, #-48]                // 8-byte Folded Spill
	ldr	x10, [x19, #64]
	stur	x10, [x29, #-96]                // 8-byte Folded Spill
	ldr	x10, [x19, #72]
	str	x10, [sp, #72]                  // 8-byte Folded Spill
	ldp	x21, x10, [x20, #32]
	stur	x11, [x29, #-40]                // 8-byte Folded Spill
	stp	x12, x10, [x29, #-80]           // 16-byte Folded Spill
	mul	w9, w8, w12
	add	w8, w9, w8
	stur	x9, [x29, #-104]                // 8-byte Folded Spill
	cmp	w8, w11
	csel	w8, w8, w11, lt
	stur	x8, [x29, #-88]                 // 8-byte Folded Spill
	ldr	w8, [x20]
	cmp	w0, w8
	b.ne	.LBB28_121
// %bb.81:
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x9, x23
	b.ne	.LBB28_121
// %bb.82:
	bl	ggml_type_size
	ldur	x20, [x29, #-24]                // 8-byte Folded Reload
	cmp	x22, x0
	b.ne	.LBB28_121
// %bb.83:
	ldr	w0, [x20]
	bl	ggml_type_size
	ldur	x20, [x29, #-24]                // 8-byte Folded Reload
	cmp	x24, x0
	b.ne	.LBB28_121
// %bb.84:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.85:                              // %.preheader.lr.ph.i66
	stp	xzr, xzr, [sp, #8]              // 16-byte Folded Spill
	str	xzr, [sp]                       // 8-byte Folded Spill
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	mul	x8, x22, x8
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	sxtw	x9, w8
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	sxtw	x10, w8
	sub	x8, x10, x9
	str	x8, [sp, #88]                   // 8-byte Folded Spill
	mul	x8, x28, x9
	str	x8, [sp, #40]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	str	x9, [sp, #104]                  // 8-byte Folded Spill
	str	x10, [sp, #48]                  // 8-byte Folded Spill
	mul	x12, x8, x9
	add	x9, x9, #1
	stp	x9, x12, [sp, #24]              // 16-byte Folded Spill
	sub	x9, x10, #1
	str	x9, [sp, #80]                   // 8-byte Folded Spill
	lsl	x9, x8, #1
	lsl	x8, x28, #1
	stp	x8, x9, [x29, #-40]             // 16-byte Folded Spill
	b	.LBB28_87
	.p2align	5, , 16
.LBB28_86:                              // %._crit_edge1142.i
                                        //   in Loop: Header=BB28_87 Depth=1
	ldp	x10, x9, [sp]                   // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x8, x27
	stp	x9, x8, [sp, #8]                // 16-byte Folded Spill
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	str	x10, [sp]                       // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB28_562
.LBB28_87:                              // %.preheader.i67
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_90 Depth 2
                                        //       Child Loop BB28_95 Depth 3
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_86
// %bb.88:                              // %.lr.ph1141.i
                                        //   in Loop: Header=BB28_87 Depth=1
	stur	xzr, [x29, #-72]                // 8-byte Folded Spill
	ldr	x9, [sp]                        // 8-byte Folded Reload
	mul	x8, x9, x27
	str	x8, [sp, #64]                   // 8-byte Folded Spill
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	stur	x8, [x29, #-80]                 // 8-byte Folded Spill
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	str	x8, [sp, #112]                  // 8-byte Folded Spill
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #56]                   // 8-byte Folded Spill
	b	.LBB28_90
	.p2align	5, , 16
.LBB28_89:                              // %._crit_edge1139.i
                                        //   in Loop: Header=BB28_90 Depth=2
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	ldr	x10, [sp, #112]                 // 8-byte Folded Reload
	add	x10, x10, x8
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	add	x9, x9, #1
	str	x10, [sp, #112]                 // 8-byte Folded Spill
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	add	x8, x8, x26
	stp	x8, x9, [x29, #-80]             // 16-byte Folded Spill
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB28_86
.LBB28_90:                              //   Parent Loop BB28_87 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_95 Depth 3
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_89
// %bb.91:                              // %.lr.ph1138.i
                                        //   in Loop: Header=BB28_90 Depth=2
	ldr	x8, [sp, #104]                  // 8-byte Folded Reload
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_93
// %bb.92:                              // %.prol.loopexit602.unr-lcssa
                                        //   in Loop: Header=BB28_90 Depth=2
	ldur	x10, [x29, #-72]                // 8-byte Folded Reload
	mul	x8, x10, x26
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	mul	x9, x10, x9
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	ldr	x2, [sp, #96]                   // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	add	x10, x10, x12
	add	x8, x10, x8
	ldr	x10, [x11, #248]
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x10, x11
	add	x9, x10, x9
	ldr	x10, [sp, #64]                  // 8-byte Folded Reload
	add	x0, x8, x10
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	add	x1, x9, x8
	bl	memcpy
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
.LBB28_93:                              // %.prol.loopexit602
                                        //   in Loop: Header=BB28_90 Depth=2
	ldp	x20, x9, [sp, #96]              // 16-byte Folded Reload
	ldr	x10, [sp, #80]                  // 8-byte Folded Reload
	ldur	x19, [x29, #-24]                // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_89
// %bb.94:                              // %.lr.ph1138.i.new.preheader
                                        //   in Loop: Header=BB28_90 Depth=2
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	sub	x22, x9, x8
	ldur	x10, [x29, #-48]                // 8-byte Folded Reload
	ldr	x13, [sp, #112]                 // 8-byte Folded Reload
	ldur	x12, [x29, #-80]                // 8-byte Folded Reload
	add	x9, x8, #1
	madd	x21, x28, x8, x12
	madd	x25, x10, x9, x13
	madd	x24, x28, x9, x12
	mul	x9, x10, x8
	add	x23, x13, x9
	.p2align	5, , 16
.LBB28_95:                              // %.lr.ph1138.i.new
                                        //   Parent Loop BB28_87 Depth=1
                                        //     Parent Loop BB28_90 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x19, #248]
	mov	x2, x20
	add	x0, x8, x21
	ldr	x9, [x11, #248]
	add	x1, x9, x23
	bl	memcpy
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	mov	x2, x20
	ldr	x8, [x19, #248]
	add	x0, x8, x24
	ldr	x9, [x9, #248]
	add	x1, x9, x25
	bl	memcpy
	ldp	x16, x15, [x29, #-40]           // 16-byte Folded Reload
	subs	x22, x22, #2
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	x25, x25, x15
	add	x24, x24, x16
	add	x23, x23, x15
	add	x21, x21, x16
	b.ne	.LBB28_95
	b	.LBB28_89
.LBB28_96:
	mov	x0, x1
	mov	x20, x19
	mov	x19, x1
	bl	ggml_nelements
	mov	x21, x0
	mov	x0, x20
	bl	ggml_nelements
	cmp	x21, x0
	b.ne	.LBB28_571
// %bb.97:
	ldp	x8, x12, [x20, #16]
	stur	x8, [x29, #-40]                 // 8-byte Folded Spill
	ldp	w8, w9, [x25]
	ldr	x11, [x20, #32]
	stur	x11, [x29, #-72]                // 8-byte Folded Spill
	ldp	x11, x23, [x20, #40]
	ldp	x25, x24, [x19, #16]
	add	w10, w12, w9
	str	x11, [sp, #72]                  // 8-byte Folded Spill
	ldr	x11, [x20, #56]
	ldr	w0, [x20]
	ldp	x22, x26, [x19, #48]
	sub	w10, w10, #1
	ldp	x27, x28, [x19, #64]
	sdiv	w9, w10, w9
	stur	x11, [x29, #-48]                // 8-byte Folded Spill
	ldr	x11, [x20, #64]
	stur	x11, [x29, #-64]                // 8-byte Folded Spill
	ldr	x11, [x20, #72]
	str	x11, [sp, #80]                  // 8-byte Folded Spill
	mul	w8, w9, w8
	ldp	x21, x11, [x19, #32]
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	stur	x8, [x29, #-80]                 // 8-byte Folded Spill
	add	w8, w8, w9
	cmp	w8, w12
	csel	w8, w8, w12, lt
	stp	x12, x8, [x29, #-96]            // 16-byte Folded Spill
	ldr	w8, [x19]
	cmp	w0, w8
	b.ne	.LBB28_138
// %bb.98:
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	cmp	x9, x25
	b.ne	.LBB28_138
// %bb.99:
	bl	ggml_type_size
	ldur	x19, [x29, #-24]                // 8-byte Folded Reload
	cmp	x23, x0
	b.ne	.LBB28_138
// %bb.100:
	ldr	w0, [x19]
	bl	ggml_type_size
	ldur	x19, [x29, #-24]                // 8-byte Folded Reload
	cmp	x22, x0
	b.ne	.LBB28_138
// %bb.101:
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.102:                             // %.preheader.lr.ph.i125
	stp	xzr, xzr, [sp, #8]              // 16-byte Folded Spill
	str	xzr, [sp]                       // 8-byte Folded Spill
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	mul	x8, x23, x8
	str	x8, [sp, #104]                  // 8-byte Folded Spill
	ldp	x8, x10, [x29, #-88]            // 16-byte Folded Reload
	sxtw	x9, w10
	sxtw	x10, w8
	sub	x8, x10, x9
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	mul	x8, x26, x9
	str	x8, [sp, #40]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	str	x9, [sp, #112]                  // 8-byte Folded Spill
	str	x10, [sp, #48]                  // 8-byte Folded Spill
	mul	x12, x8, x9
	add	x9, x9, #1
	stp	x9, x12, [sp, #24]              // 16-byte Folded Spill
	sub	x9, x10, #1
	str	x9, [sp, #88]                   // 8-byte Folded Spill
	lsl	x9, x8, #1
	lsl	x8, x26, #1
	stp	x8, x9, [x29, #-40]             // 16-byte Folded Spill
	b	.LBB28_104
	.p2align	5, , 16
.LBB28_103:                             // %._crit_edge983.i
                                        //   in Loop: Header=BB28_104 Depth=1
	ldp	x10, x9, [sp]                   // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x8, [sp, #80]                   // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	str	x10, [sp]                       // 8-byte Folded Spill
	add	x8, x8, x28
	stp	x9, x8, [sp, #8]                // 16-byte Folded Spill
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x10, x8
	b.eq	.LBB28_562
.LBB28_104:                             // %.preheader.i126
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_107 Depth 2
                                        //       Child Loop BB28_112 Depth 3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_103
// %bb.105:                             // %.lr.ph982.i
                                        //   in Loop: Header=BB28_104 Depth=1
	stur	xzr, [x29, #-56]                // 8-byte Folded Spill
	ldr	x9, [sp]                        // 8-byte Folded Reload
	mul	x8, x9, x28
	str	x8, [sp, #64]                   // 8-byte Folded Spill
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	stur	x8, [x29, #-96]                 // 8-byte Folded Spill
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	stur	x8, [x29, #-104]                // 8-byte Folded Spill
	ldr	x8, [sp, #80]                   // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #56]                   // 8-byte Folded Spill
	b	.LBB28_107
	.p2align	5, , 16
.LBB28_106:                             // %._crit_edge980.i
                                        //   in Loop: Header=BB28_107 Depth=2
	ldp	x8, x9, [x29, #-64]             // 16-byte Folded Reload
	add	x9, x9, #1
	ldur	x10, [x29, #-104]               // 8-byte Folded Reload
	add	x10, x10, x8
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	add	x8, x8, x27
	stp	x10, x8, [x29, #-104]           // 16-byte Folded Spill
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x9, x8
	b.eq	.LBB28_103
.LBB28_107:                             //   Parent Loop BB28_104 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_112 Depth 3
	ldp	x9, x8, [x29, #-88]             // 16-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_106
// %bb.108:                             // %.lr.ph979.i
                                        //   in Loop: Header=BB28_107 Depth=2
	ldr	x8, [sp, #112]                  // 8-byte Folded Reload
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_110
// %bb.109:                             // %.prol.loopexit569.unr-lcssa
                                        //   in Loop: Header=BB28_107 Depth=2
	ldp	x9, x10, [x29, #-64]            // 16-byte Folded Reload
	mul	x8, x10, x27
	mul	x9, x10, x9
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	ldr	x2, [sp, #104]                  // 8-byte Folded Reload
	ldr	x10, [x10, #248]
	add	x10, x10, x12
	add	x8, x10, x8
	ldr	x10, [x11, #248]
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x10, x11
	add	x9, x10, x9
	ldr	x10, [sp, #64]                  // 8-byte Folded Reload
	add	x0, x8, x10
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	add	x1, x9, x8
	bl	memcpy
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
.LBB28_110:                             // %.prol.loopexit569
                                        //   in Loop: Header=BB28_107 Depth=2
	ldp	x20, x9, [sp, #104]             // 16-byte Folded Reload
	ldr	x10, [sp, #88]                  // 8-byte Folded Reload
	ldur	x19, [x29, #-24]                // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_106
// %bb.111:                             // %.lr.ph979.i.new.preheader
                                        //   in Loop: Header=BB28_107 Depth=2
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	sub	x23, x9, x8
	ldur	x10, [x29, #-48]                // 8-byte Folded Reload
	ldp	x13, x12, [x29, #-104]          // 16-byte Folded Reload
	add	x9, x8, #1
	madd	x21, x26, x8, x12
	madd	x25, x10, x9, x13
	madd	x24, x26, x9, x12
	mul	x9, x10, x8
	add	x22, x13, x9
	.p2align	5, , 16
.LBB28_112:                             // %.lr.ph979.i.new
                                        //   Parent Loop BB28_104 Depth=1
                                        //     Parent Loop BB28_107 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x19, #248]
	mov	x2, x20
	add	x0, x8, x21
	ldr	x9, [x11, #248]
	add	x1, x9, x22
	bl	memcpy
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	mov	x2, x20
	ldr	x8, [x19, #248]
	add	x0, x8, x24
	ldr	x9, [x9, #248]
	add	x1, x9, x25
	bl	memcpy
	ldp	x16, x15, [x29, #-40]           // 16-byte Folded Reload
	subs	x23, x23, #2
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	x25, x25, x15
	add	x24, x24, x16
	add	x22, x22, x15
	add	x21, x21, x16
	b.ne	.LBB28_112
	b	.LBB28_106
.LBB28_113:
	bl	ggml_is_quantized
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	tbz	w0, #0, .LBB28_565
// %bb.114:
	ldr	w8, [x9]
	cbnz	w8, .LBB28_565
// %bb.115:
	ldp	x24, x21, [x9, #152]
	mov	x23, x9
	ldp	x22, x10, [x24, #16]
	ldr	x8, [x24, #32]
	ldr	w19, [x24]
	stp	x8, x10, [x29, #-72]            // 16-byte Folded Spill
	ldp	x10, x26, [x24, #48]
	mov	w0, w19
	ldp	x28, x8, [x24, #64]
	stp	x8, x10, [x29, #-104]           // 16-byte Folded Spill
	ldr	x8, [x21, #32]
	ldp	x27, x10, [x21, #16]
	stp	x8, x10, [x29, #-88]            // 16-byte Folded Spill
	ldp	x20, x10, [x21, #48]
	ldp	x11, x8, [x21, #64]
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	stp	x11, x10, [sp, #104]            // 16-byte Folded Spill
	bl	ggml_get_type_traits
	ldr	x8, [x0, #40]
	mov	w0, w19
	str	x8, [sp, #88]                   // 8-byte Folded Spill
	bl	ggml_blck_size
	mov	x19, x0
	mov	x0, x21
	bl	ggml_nelements
	mov	x21, x0
	ldr	w0, [x23]
	bl	ggml_type_size
	cmp	x20, x0
	b.ne	.LBB28_572
// %bb.116:
	udiv	x8, x27, x19
	mov	x23, x20
	ldur	x20, [x29, #-96]                // 8-byte Folded Reload
	nop
	msub	x8, x8, x19, x27
	cbz	x8, .LBB28_118
// %bb.117:
	ldur	x0, [x29, #-24]                 // 8-byte Folded Reload
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_573
.LBB28_118:
	udiv	x9, x21, x19
	mov	x16, x24
	ldur	x24, [x29, #-104]               // 8-byte Folded Reload
	ldpsw	x8, x10, [x25]
	ldp	x21, x4, [sp, #104]             // 16-byte Folded Reload
	ldp	x7, x25, [sp, #88]              // 16-byte Folded Reload
	add	x11, x9, x10
	sub	x11, x11, #1
	sdiv	x10, x11, x10
	smull	x8, w8, w10
	add	w10, w8, w10
	cmp	x9, w10, sxtw
	csel	w9, w10, w9, gt
	cmp	w8, w9
	b.ge	.LBB28_562
// %bb.119:                             // %.lr.ph.i128
	ldur	x10, [x29, #-64]                // 8-byte Folded Reload
	mov	x0, x26
	mul	x26, x19, x8
	sxtw	x9, w9
	mov	x1, x28
	sub	x28, x9, x8
	stp	x22, x27, [x29, #-40]           // 16-byte Folded Spill
	stur	x19, [x29, #-16]                // 8-byte Folded Spill
	stp	x1, x0, [x29, #-56]             // 16-byte Folded Spill
	mul	x11, x10, x22
	ldur	x10, [x29, #-72]                // 8-byte Folded Reload
	mul	x10, x11, x10
	stp	x10, x11, [x29, #-72]           // 16-byte Folded Spill
	ldur	x10, [x29, #-80]                // 8-byte Folded Reload
	mul	x11, x10, x27
	ldur	x10, [x29, #-88]                // 8-byte Folded Reload
	mul	x10, x11, x10
	stp	x10, x11, [x29, #-88]           // 16-byte Folded Spill
	.p2align	5, , 16
.LBB28_120:                             // =>This Inner Loop Header: Depth=1
	ldp	x10, x12, [x29, #-72]           // 16-byte Folded Reload
	mov	w8, w26
	ldp	x14, x15, [x29, #-88]           // 16-byte Folded Reload
	sdiv	x9, x8, x10
	msub	x10, x10, x9, x8
	sdiv	x13, x8, x14
	msub	x8, x14, x13, x8
	sdiv	x11, x10, x12
	msub	x10, x11, x12, x10
	sdiv	x14, x8, x15
	msub	x8, x14, x15, x8
	sdiv	x12, x10, x22
	msub	x10, x12, x22, x10
	mov	x22, x16
	ldr	x16, [x16, #248]
	sdiv	x15, x8, x27
	msub	x8, x15, x27, x8
	mov	x27, x4
	udiv	x10, x10, x19
	mov	x19, x7
	madd	x10, x10, x20, x16
	madd	x10, x12, x0, x10
	madd	x10, x11, x1, x10
	madd	x0, x9, x24, x10
	ldp	x9, x2, [x29, #-24]             // 16-byte Folded Reload
	ldr	x9, [x9, #248]
	nop
	madd	x8, x8, x23, x9
	madd	x8, x15, x4, x8
	madd	x8, x14, x21, x8
	madd	x1, x13, x25, x8
	blr	x7
	mov	x7, x19
	ldur	x19, [x29, #-16]                // 8-byte Folded Reload
	mov	x4, x27
	ldp	x1, x0, [x29, #-56]             // 16-byte Folded Reload
	mov	x16, x22
	ldp	x22, x27, [x29, #-40]           // 16-byte Folded Reload
	subs	x28, x28, #1
	add	x26, x26, x19
	b.ne	.LBB28_120
	b	.LBB28_562
.LBB28_121:
	mov	x0, x20
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_181
// %bb.122:
	ldr	w0, [x20]
	cmp	x22, #2
	b.ne	.LBB28_246
// %bb.123:
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	cbz	w0, .LBB28_528
// %bb.124:
	cmp	w0, #1
	b.eq	.LBB28_517
// %bb.125:
	cmp	w0, #30
	b.ne	.LBB28_545
// %bb.126:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.127:                             // %.preheader774.lr.ph.i
	ldp	x11, x9, [x29, #-32]            // 16-byte Folded Reload
	mov	x27, xzr
	mov	x10, xzr
	mov	x8, xzr
	ldr	x19, [x9, #248]
	ldur	x9, [x29, #-104]                // 8-byte Folded Reload
	lsl	x21, x11, #1
	sxtw	x11, w9
	mul	x9, x21, x11
	stur	x9, [x29, #-72]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	sxtw	x12, w9
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	sub	x9, x9, x12
	mul	x9, x9, x21
	stur	x9, [x29, #-40]                 // 8-byte Folded Spill
	sub	x9, x12, x11
	stur	x9, [x29, #-80]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	mul	x13, x9, x11
	lsl	x25, x9, #1
	add	x9, x19, x21
	str	x13, [sp, #80]                  // 8-byte Folded Spill
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	add	x11, x11, #1
	str	x12, [sp, #88]                  // 8-byte Folded Spill
	str	x11, [sp, #64]                  // 8-byte Folded Spill
	sub	x11, x12, #1
	stp	x9, x11, [sp, #104]             // 16-byte Folded Spill
	b	.LBB28_129
.LBB28_128:                             // %._crit_edge1115.i
                                        //   in Loop: Header=BB28_129 Depth=1
	ldp	x10, x27, [sp, #48]             // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x9, [sp, #72]                   // 8-byte Folded Reload
	add	x27, x27, x9
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_562
.LBB28_129:                             // %.preheader774.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_132 Depth 2
                                        //       Child Loop BB28_137 Depth 3
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	stp	x10, x27, [sp, #48]             // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_128
// %bb.130:                             // %.lr.ph1114.i
                                        //   in Loop: Header=BB28_129 Depth=1
	ldr	x9, [sp, #72]                   // 8-byte Folded Reload
	mov	x20, xzr
	mul	x9, x10, x9
	str	x9, [sp, #96]                   // 8-byte Folded Spill
	stur	x27, [x29, #-24]                // 8-byte Folded Spill
	b	.LBB28_132
	.p2align	5, , 16
.LBB28_131:                             // %._crit_edge1110.i
                                        //   in Loop: Header=BB28_132 Depth=2
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	add	x20, x20, #1
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	add	x10, x10, x9
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x28, x8
	stur	x10, [x29, #-24]                // 8-byte Folded Spill
	cmp	x20, x9
	b.eq	.LBB28_128
.LBB28_132:                             //   Parent Loop BB28_129 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_137 Depth 3
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	add	x28, x8, x9
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_131
// %bb.133:                             // %.lr.ph1109.i
                                        //   in Loop: Header=BB28_132 Depth=2
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_135
// %bb.134:                             // %.prol.loopexit593.unr-lcssa
                                        //   in Loop: Header=BB28_132 Depth=2
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x0, x19, x28
	mov	x2, x21
	ldr	x9, [x30, #248]
	mul	x8, x20, x8
	ldr	x10, [sp, #80]                  // 8-byte Folded Reload
	add	x9, x9, x10
	add	x8, x9, x8
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	add	x1, x8, x9
	bl	memcpy
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x28, x21
	ldr	x8, [sp, #64]                   // 8-byte Folded Reload
.LBB28_135:                             // %.prol.loopexit593
                                        //   in Loop: Header=BB28_132 Depth=2
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	ldp	x27, x10, [sp, #104]            // 16-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_131
// %bb.136:                             // %.lr.ph1109.i.new.preheader
                                        //   in Loop: Header=BB28_132 Depth=2
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	sub	x24, x9, x8
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	mul	x8, x9, x8
	add	x9, x9, x8
	add	x26, x10, x8
	add	x23, x10, x9
	.p2align	5, , 16
.LBB28_137:                             // %.lr.ph1109.i.new
                                        //   Parent Loop BB28_129 Depth=1
                                        //     Parent Loop BB28_132 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x30, #248]
	add	x0, x19, x28
	mov	x2, x21
	add	x1, x8, x26
	bl	memcpy
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	add	x0, x27, x28
	mov	x2, x21
	add	x22, x28, x21
	ldr	x8, [x8, #248]
	add	x1, x8, x23
	bl	memcpy
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x22, x21
	subs	x24, x24, #2
	add	x23, x23, x25
	add	x26, x26, x25
	b.ne	.LBB28_137
	b	.LBB28_131
.LBB28_138:
	mov	x0, x19
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_199
// %bb.139:
	ldr	w0, [x19]
	cmp	x23, #4
	b.ne	.LBB28_266
// %bb.140:
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cbz	w0, .LBB28_418
// %bb.141:
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	lsl	x9, x0, #5
	ldr	x20, [x8, x9]
	cbz	x20, .LBB28_577
// %bb.142:
                                        // kill: def $w0 killed $w0 killed $x0
	bl	ggml_blck_size
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	ldur	x12, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.143:                             // %.preheader669.lr.ph.i
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	mov	x13, xzr
	mov	x8, xzr
	sdiv	x9, x9, x0
	mul	x22, x9, x22
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldr	x23, [x9, #248]
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	sxtw	x9, w9
	mul	x10, x22, x9
	stur	x10, [x29, #-24]                // 8-byte Folded Spill
	ldp	x11, x10, [x29, #-96]           // 16-byte Folded Reload
	sxtw	x10, w10
	sub	x11, x11, x10
	sub	x10, x10, x9
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	ldur	x10, [x29, #-48]                // 8-byte Folded Reload
	mul	x11, x22, x11
	mul	x26, x10, x9
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	b	.LBB28_145
	.p2align	5, , 16
.LBB28_144:                             // %._crit_edge960.i118
                                        //   in Loop: Header=BB28_145 Depth=1
	ldp	x26, x13, [x29, #-104]          // 16-byte Folded Reload
	add	x13, x13, #1
	ldp	x9, x10, [sp, #72]              // 16-byte Folded Reload
	add	x26, x26, x10
	cmp	x13, x9
	b.eq	.LBB28_562
.LBB28_145:                             // %.preheader669.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_148 Depth 2
                                        //       Child Loop BB28_149 Depth 3
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	stp	x26, x13, [x29, #-104]          // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_144
// %bb.146:                             // %.lr.ph959.i
                                        //   in Loop: Header=BB28_145 Depth=1
	mov	x27, xzr
	b	.LBB28_148
	.p2align	5, , 16
.LBB28_147:                             // %._crit_edge955.i
                                        //   in Loop: Header=BB28_148 Depth=2
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	add	x27, x27, #1
	add	x8, x21, x8
	ldp	x9, x10, [x29, #-72]            // 16-byte Folded Reload
	add	x26, x26, x10
	cmp	x27, x9
	b.eq	.LBB28_144
.LBB28_148:                             //   Parent Loop BB28_145 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_149 Depth 3
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	mov	x28, x26
	add	x21, x8, x9
	ldp	x25, x19, [x29, #-56]           // 16-byte Folded Reload
	ldur	x24, [x29, #-40]                // 8-byte Folded Reload
	ldp	x9, x8, [x29, #-88]             // 16-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_147
	.p2align	5, , 16
.LBB28_149:                             //   Parent Loop BB28_145 Depth=1
                                        //     Parent Loop BB28_148 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x12, #248]
	add	x1, x23, x21
	mov	x2, x24
	add	x0, x8, x28
	blr	x20
	ldur	x12, [x29, #-16]                // 8-byte Folded Reload
	add	x21, x21, x22
	subs	x25, x25, #1
	add	x28, x28, x19
	b.ne	.LBB28_149
	b	.LBB28_147
.LBB28_150:
	mov	x0, x19
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB28_224
// %bb.151:
	ldr	w0, [x19]
	cmp	x22, #2
	b.ne	.LBB28_286
// %bb.152:
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	ldur	x15, [x29, #-32]                // 8-byte Folded Reload
	cbz	w0, .LBB28_430
// %bb.153:
	cmp	w0, #1
	b.ne	.LBB28_447
// %bb.154:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.155:                             // %.preheader568.lr.ph.i
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	lsl	x22, x15, #1
	mov	x27, xzr
	mov	x10, xzr
	mov	x8, xzr
	ldr	x19, [x9, #248]
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	sxtw	x11, w9
	mul	x9, x22, x11
	stur	x9, [x29, #-40]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	sxtw	x12, w9
	sub	x9, x21, x12
	mul	x9, x9, x22
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	sub	x9, x12, x11
	stur	x9, [x29, #-104]                // 8-byte Folded Spill
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	mul	x13, x9, x11
	lsl	x26, x9, #1
	add	x9, x19, x22
	str	x13, [sp, #80]                  // 8-byte Folded Spill
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	add	x11, x11, #1
	str	x12, [sp, #88]                  // 8-byte Folded Spill
	str	x11, [sp, #64]                  // 8-byte Folded Spill
	sub	x11, x12, #1
	stp	x9, x11, [sp, #104]             // 16-byte Folded Spill
	b	.LBB28_157
.LBB28_156:                             // %._crit_edge786.i
                                        //   in Loop: Header=BB28_157 Depth=1
	ldp	x10, x27, [sp, #48]             // 16-byte Folded Reload
	add	x10, x10, #1
	ldr	x9, [sp, #72]                   // 8-byte Folded Reload
	add	x27, x27, x9
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_562
.LBB28_157:                             // %.preheader568.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_160 Depth 2
                                        //       Child Loop BB28_165 Depth 3
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	stp	x10, x27, [sp, #48]             // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_156
// %bb.158:                             // %.lr.ph785.i
                                        //   in Loop: Header=BB28_157 Depth=1
	ldr	x9, [sp, #72]                   // 8-byte Folded Reload
	mov	x20, xzr
	mul	x9, x10, x9
	str	x9, [sp, #96]                   // 8-byte Folded Spill
	stur	x27, [x29, #-24]                // 8-byte Folded Spill
	b	.LBB28_160
	.p2align	5, , 16
.LBB28_159:                             // %._crit_edge781.i
                                        //   in Loop: Header=BB28_160 Depth=2
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	add	x20, x20, #1
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	add	x10, x10, x9
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	add	x8, x28, x8
	stur	x10, [x29, #-24]                // 8-byte Folded Spill
	cmp	x20, x9
	b.eq	.LBB28_156
.LBB28_160:                             //   Parent Loop BB28_157 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_165 Depth 3
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	add	x28, x8, x9
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_159
// %bb.161:                             // %.lr.ph780.i
                                        //   in Loop: Header=BB28_160 Depth=2
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-104]                // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_163
// %bb.162:                             // %.prol.loopexit626.unr-lcssa
                                        //   in Loop: Header=BB28_160 Depth=2
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	add	x0, x19, x28
	mov	x2, x22
	ldr	x9, [x30, #248]
	mul	x8, x20, x8
	ldr	x10, [sp, #80]                  // 8-byte Folded Reload
	add	x9, x9, x10
	add	x8, x9, x8
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	add	x1, x8, x9
	bl	memcpy
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x28, x22
	ldr	x8, [sp, #64]                   // 8-byte Folded Reload
.LBB28_163:                             // %.prol.loopexit626
                                        //   in Loop: Header=BB28_160 Depth=2
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	ldp	x27, x10, [sp, #104]            // 16-byte Folded Reload
	cmp	x10, x9
	b.eq	.LBB28_159
// %bb.164:                             // %.lr.ph780.i.new.preheader
                                        //   in Loop: Header=BB28_160 Depth=2
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	sub	x25, x9, x8
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	mul	x8, x9, x8
	add	x9, x9, x8
	add	x21, x10, x8
	add	x24, x10, x9
	.p2align	5, , 16
.LBB28_165:                             // %.lr.ph780.i.new
                                        //   Parent Loop BB28_157 Depth=1
                                        //     Parent Loop BB28_160 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x30, #248]
	add	x0, x19, x28
	mov	x2, x22
	add	x1, x8, x21
	bl	memcpy
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	add	x0, x27, x28
	mov	x2, x22
	add	x23, x28, x22
	ldr	x8, [x8, #248]
	add	x1, x8, x24
	bl	memcpy
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x23, x22
	subs	x25, x25, #2
	add	x24, x24, x26
	add	x21, x21, x26
	b.ne	.LBB28_165
	b	.LBB28_159
.LBB28_166:                             // %.preheader304.i
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.167:                             // %.preheader303.lr.ph.i
	ldr	x9, [sp, #88]                   // 8-byte Folded Reload
	mov	x8, xzr
	mov	x11, xzr
	sxtw	x12, w9
	mul	x9, x20, x12
	str	x9, [sp, #56]                   // 8-byte Folded Spill
	ldr	x9, [sp, #80]                   // 8-byte Folded Reload
	sxtw	x9, w9
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	sub	x9, x27, x9
	mul	x9, x9, x20
	str	x9, [sp, #48]                   // 8-byte Folded Spill
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	and	x9, x9, #0x7ffffffffffffffe
	stur	x9, [x29, #-80]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	add	x9, x9, x21
	stur	x9, [x29, #-104]                // 8-byte Folded Spill
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	str	x12, [sp, #40]                  // 8-byte Folded Spill
	ldur	x26, [x29, #-104]               // 8-byte Folded Reload
	mul	x24, x9, x12
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	lsl	x22, x9, #1
	add	x13, x9, x24
	b	.LBB28_169
	.p2align	5, , 16
.LBB28_168:                             // %._crit_edge382.i
                                        //   in Loop: Header=BB28_169 Depth=1
	ldp	x24, x11, [sp, #8]              // 16-byte Folded Reload
	add	x11, x11, #1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x13, [sp]                       // 8-byte Folded Reload
	add	x13, x13, x9
	add	x24, x24, x9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	cmp	x11, x9
	b.eq	.LBB28_562
.LBB28_169:                             // %.preheader303.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_172 Depth 2
                                        //       Child Loop BB28_175 Depth 3
                                        //         Child Loop BB28_178 Depth 4
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	stp	x24, x11, [sp, #8]              // 16-byte Folded Spill
	str	x13, [sp]                       // 8-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_168
// %bb.170:                             // %.lr.ph381.i
                                        //   in Loop: Header=BB28_169 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	mov	x14, xzr
	mul	x9, x11, x9
	ldur	x27, [x29, #-24]                // 8-byte Folded Reload
	ldur	x20, [x29, #-88]                // 8-byte Folded Reload
	stur	x9, [x29, #-72]                 // 8-byte Folded Spill
	b	.LBB28_172
	.p2align	5, , 16
.LBB28_171:                             // %._crit_edge376.i
                                        //   in Loop: Header=BB28_172 Depth=2
	ldp	x9, x14, [sp, #104]             // 16-byte Folded Reload
	add	x14, x14, #1
	ldp	x13, x24, [sp, #64]             // 16-byte Folded Reload
	ldr	x8, [sp, #48]                   // 8-byte Folded Reload
	add	x13, x13, x9
	add	x24, x24, x9
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	add	x8, x23, x8
	cmp	x14, x9
	b.eq	.LBB28_168
.LBB28_172:                             //   Parent Loop BB28_169 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_175 Depth 3
                                        //         Child Loop BB28_178 Depth 4
	ldr	x9, [sp, #56]                   // 8-byte Folded Reload
	str	x14, [sp, #112]                 // 8-byte Folded Spill
	add	x23, x8, x9
	ldp	x9, x8, [sp, #80]               // 16-byte Folded Reload
	stp	x13, x24, [sp, #64]             // 16-byte Folded Spill
	cmp	w8, w9
	b.ge	.LBB28_171
// %bb.173:                             // %.preheader302.lr.ph.i
                                        //   in Loop: Header=BB28_172 Depth=2
	ldr	x8, [sp, #104]                  // 8-byte Folded Reload
	mov	x19, x13
	mul	x8, x14, x8
	stur	x8, [x29, #-64]                 // 8-byte Folded Spill
	ldr	x28, [sp, #40]                  // 8-byte Folded Reload
	b	.LBB28_175
	.p2align	5, , 16
.LBB28_174:                             // %._crit_edge372.i
                                        //   in Loop: Header=BB28_175 Depth=3
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x28, x28, #1
	add	x19, x19, x8
	add	x24, x24, x8
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x28, x8
	b.eq	.LBB28_171
.LBB28_175:                             // %.preheader302.i
                                        //   Parent Loop BB28_169 Depth=1
                                        //     Parent Loop BB28_172 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_178 Depth 4
	cmp	x20, #1
	b.lt	.LBB28_174
// %bb.176:                             // %.lr.ph371.i
                                        //   in Loop: Header=BB28_175 Depth=3
	mov	x25, xzr
	stp	x19, x24, [x29, #-48]           // 16-byte Folded Spill
	cmp	x20, #1
	b.eq	.LBB28_179
// %bb.177:                             // %.lr.ph371.i.new.preheader
                                        //   in Loop: Header=BB28_175 Depth=3
	mov	x20, x19
	ldur	x19, [x29, #-80]                // 8-byte Folded Reload
	.p2align	5, , 16
.LBB28_178:                             // %.lr.ph371.i.new
                                        //   Parent Loop BB28_169 Depth=1
                                        //     Parent Loop BB28_172 Depth=2
                                        //       Parent Loop BB28_175 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x8, [x10, #248]
	add	x0, x27, x23
	mov	x2, x21
	add	x1, x8, x24
	bl	memcpy
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	add	x0, x26, x23
	mov	x2, x21
	add	x27, x23, x21
	ldr	x8, [x8, #248]
	add	x1, x8, x20
	bl	memcpy
	add	x23, x27, x21
	ldp	x27, x10, [x29, #-24]           // 16-byte Folded Reload
	add	x25, x25, #2
	add	x20, x20, x22
	add	x24, x24, x22
	cmp	x19, x25
	b.ne	.LBB28_178
.LBB28_179:                             // %._crit_edge372.i.loopexit.unr-lcssa
                                        //   in Loop: Header=BB28_175 Depth=3
	ldur	x20, [x29, #-88]                // 8-byte Folded Reload
	ldp	x19, x24, [x29, #-48]           // 16-byte Folded Reload
	tbz	w20, #0, .LBB28_174
// %bb.180:                             // %._crit_edge372.i.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB28_175 Depth=3
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x0, x27, x23
	mov	x2, x21
	ldr	x9, [x10, #248]
	mul	x8, x28, x8
	ldur	x10, [x29, #-32]                // 8-byte Folded Reload
	mul	x10, x25, x10
	add	x8, x9, x8
	ldp	x9, x11, [x29, #-72]            // 16-byte Folded Reload
	add	x8, x8, x11
	add	x8, x8, x10
	add	x1, x8, x9
	bl	memcpy
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	add	x23, x23, x21
	b	.LBB28_174
.LBB28_181:
	ldr	w8, [x20]
	cmp	w8, #30
	b.eq	.LBB28_344
// %bb.182:
	ldur	x6, [x29, #-16]                 // 8-byte Folded Reload
	ldur	x19, [x29, #-72]                // 8-byte Folded Reload
	cmp	w8, #1
	b.eq	.LBB28_323
// %bb.183:
	cbnz	w8, .LBB28_575
// %bb.184:                             // %.preheader802.i
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.185:                             // %.preheader801.lr.ph.i
	ldur	x14, [x29, #-88]                // 8-byte Folded Reload
	mov	x17, xzr
	mov	x9, xzr
	ldur	x12, [x29, #-104]               // 8-byte Folded Reload
	mov	x10, xzr
	mov	x11, xzr
	ldp	x8, x16, [x29, #-40]            // 16-byte Folded Reload
	mov	x1, xzr
	sxtw	x14, w14
	sxtw	x12, w12
	sub	x15, x8, x14
	mul	x13, x16, x12
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	mul	x15, x15, x16
	ldur	x16, [x29, #-48]                // 8-byte Folded Reload
	mul	x0, x16, x12
	b	.LBB28_187
	.p2align	5, , 16
.LBB28_186:                             // %._crit_edge856.i
                                        //   in Loop: Header=BB28_187 Depth=1
	ldr	x16, [sp, #72]                  // 8-byte Folded Reload
	ldur	x0, [x29, #-80]                 // 8-byte Folded Reload
	add	x0, x0, x16
	ldur	x17, [x29, #-40]                // 8-byte Folded Reload
	ldur	x16, [x29, #-64]                // 8-byte Folded Reload
	add	x17, x17, #1
	cmp	x17, x16
	b.eq	.LBB28_562
.LBB28_187:                             // %.preheader801.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_190 Depth 2
                                        //       Child Loop BB28_191 Depth 3
                                        //       Child Loop BB28_196 Depth 3
                                        //         Child Loop BB28_198 Depth 4
                                        //       Child Loop BB28_194 Depth 3
	ldur	x16, [x29, #-56]                // 8-byte Folded Reload
	stur	x17, [x29, #-40]                // 8-byte Folded Spill
	stur	x0, [x29, #-80]                 // 8-byte Folded Spill
	cmp	x16, #1
	b.lt	.LBB28_186
// %bb.188:                             // %.lr.ph855.i
                                        //   in Loop: Header=BB28_187 Depth=1
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	mov	x17, xzr
	b	.LBB28_190
	.p2align	5, , 16
.LBB28_189:                             // %._crit_edge845.i
                                        //   in Loop: Header=BB28_190 Depth=2
	ldur	x16, [x29, #-96]                // 8-byte Folded Reload
	add	x17, x17, #1
	add	x0, x0, x16
	ldur	x16, [x29, #-56]                // 8-byte Folded Reload
	cmp	x17, x16
	b.eq	.LBB28_186
.LBB28_190:                             //   Parent Loop BB28_187 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_191 Depth 3
                                        //       Child Loop BB28_196 Depth 3
                                        //         Child Loop BB28_198 Depth 4
                                        //       Child Loop BB28_194 Depth 3
	add	x1, x1, x13
	cmp	x1, x23
	b.lt	.LBB28_192
	.p2align	5, , 16
.LBB28_191:                             // %.lr.ph.i35
                                        //   Parent Loop BB28_187 Depth=1
                                        //     Parent Loop BB28_190 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x11, #1
	cmp	x3, x19
	sub	x1, x1, x23
	csinc	x3, xzr, x9, eq
	cmp	x4, x21
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x25
	csinc	x11, x4, x11, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x23
	b.ge	.LBB28_191
.LBB28_192:                             // %.preheader800.i
                                        //   in Loop: Header=BB28_190 Depth=2
	ldur	x16, [x29, #-104]               // 8-byte Folded Reload
	mov	x2, x0
	mov	x3, x12
	ldur	x4, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w16, w4
	b.lt	.LBB28_196
.LBB28_193:                             // %._crit_edge832.i
                                        //   in Loop: Header=BB28_190 Depth=2
	ldur	x19, [x29, #-72]                // 8-byte Folded Reload
	add	x1, x1, x15
	cmp	x1, x23
	b.lt	.LBB28_189
	.p2align	5, , 16
.LBB28_194:                             // %.lr.ph844.i
                                        //   Parent Loop BB28_187 Depth=1
                                        //     Parent Loop BB28_190 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x2, x9, #1
	add	x3, x10, #1
	add	x16, x11, #1
	cmp	x2, x19
	sub	x1, x1, x23
	csinc	x2, xzr, x9, eq
	cmp	x3, x21
	csel	x3, xzr, xzr, ne
	csinc	x4, xzr, x10, eq
	csel	x2, x9, x2, ne
	cmp	x16, x25
	csinc	x11, x3, x11, eq
	csel	x10, x10, x4, ne
	csel	x9, x9, x2, ne
	cmp	x1, x23
	b.ge	.LBB28_194
	b	.LBB28_189
	.p2align	5, , 16
.LBB28_195:                             // %._crit_edge.i37
                                        //   in Loop: Header=BB28_196 Depth=3
	ldur	x16, [x29, #-48]                // 8-byte Folded Reload
	add	x3, x3, #1
	add	x2, x2, x16
	ldur	x6, [x29, #-16]                 // 8-byte Folded Reload
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x3, x14
	b.eq	.LBB28_193
.LBB28_196:                             // %.preheader799.i
                                        //   Parent Loop BB28_187 Depth=1
                                        //     Parent Loop BB28_190 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_198 Depth 4
	ldur	x16, [x29, #-24]                // 8-byte Folded Reload
	cmp	x7, #1
	b.lt	.LBB28_195
// %bb.197:                             // %.lr.ph819.i
                                        //   in Loop: Header=BB28_196 Depth=3
	ldr	x5, [x6, #248]
	mov	x6, x7
	add	x5, x5, x2
	ldr	x4, [x16, #248]
	.p2align	5, , 16
.LBB28_198:                             //   Parent Loop BB28_187 Depth=1
                                        //     Parent Loop BB28_190 Depth=2
                                        //       Parent Loop BB28_196 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	add	x30, x9, #1
	add	x20, x10, #1
	add	x19, x11, #1
	cmp	x30, x8
	add	x7, x1, #1
	csinc	x30, xzr, x9, eq
	cmp	x20, x21
	csel	x20, xzr, xzr, ne
	csinc	x16, xzr, x10, eq
	csel	x30, x9, x30, ne
	cmp	x19, x25
	csel	x19, xzr, x20, ne
	csinc	x20, x20, x11, eq
	csel	x16, x10, x16, ne
	csel	x30, x9, x30, ne
	cmp	x7, x23
	madd	x7, x1, x24, x4
	madd	x7, x11, x28, x7
	madd	x7, x10, x26, x7
	csinc	x1, x19, x1, eq
	mul	x19, x9, x27
	csel	x11, x11, x20, ne
	ldrh	w20, [x5]
	add	x5, x5, x22
	csel	x10, x10, x16, ne
	csel	x9, x9, x30, ne
	subs	x6, x6, #1
	lsl	w20, w20, #16
	str	w20, [x7, x19]
	b.ne	.LBB28_198
	b	.LBB28_195
.LBB28_199:
	ldr	w8, [x19]
	cbz	w8, .LBB28_383
// %bb.200:
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	cmp	w8, #1
	b.eq	.LBB28_362
// %bb.201:
	cmp	w8, #30
	b.ne	.LBB28_576
// %bb.202:                             // %.preheader693.i
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.203:                             // %.preheader692.lr.ph.i
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	mov	w17, #1                         // =0x1
	mov	x15, xzr
	ldur	x12, [x29, #-40]                // 8-byte Folded Reload
	mov	x9, xzr
	mov	x10, xzr
	mov	x16, xzr
	mov	x3, xzr
	movk	w17, #32640, lsl #16
	mov	w0, #32767                      // =0x7fff
	sxtw	x11, w8
	mul	x8, x12, x11
	stur	x8, [x29, #-56]                 // 8-byte Folded Spill
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	sxtw	x13, w8
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	sub	x14, x8, x13
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	mul	x14, x14, x12
	mul	x2, x8, x11
	b	.LBB28_205
	.p2align	5, , 16
.LBB28_204:                             // %._crit_edge747.i
                                        //   in Loop: Header=BB28_205 Depth=1
	ldp	x2, x15, [x29, #-104]           // 16-byte Folded Reload
	add	x15, x15, #1
	ldr	x8, [sp, #80]                   // 8-byte Folded Reload
	add	x2, x2, x8
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x15, x8
	b.eq	.LBB28_562
.LBB28_205:                             // %.preheader692.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_208 Depth 2
                                        //       Child Loop BB28_209 Depth 3
                                        //       Child Loop BB28_214 Depth 3
                                        //         Child Loop BB28_218 Depth 4
                                        //       Child Loop BB28_212 Depth 3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	stp	x2, x15, [x29, #-104]           // 16-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_204
// %bb.206:                             // %.lr.ph746.i
                                        //   in Loop: Header=BB28_205 Depth=1
	mov	x1, xzr
	b	.LBB28_208
	.p2align	5, , 16
.LBB28_207:                             // %._crit_edge736.i
                                        //   in Loop: Header=BB28_208 Depth=2
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x1, x1, #1
	add	x2, x2, x8
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x1, x8
	b.eq	.LBB28_204
.LBB28_208:                             //   Parent Loop BB28_205 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_209 Depth 3
                                        //       Child Loop BB28_214 Depth 3
                                        //         Child Loop BB28_218 Depth 4
                                        //       Child Loop BB28_212 Depth 3
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	add	x3, x3, x8
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x3, x25
	b.lt	.LBB28_210
	.p2align	5, , 16
.LBB28_209:                             // %.lr.ph.i70
                                        //   Parent Loop BB28_205 Depth=1
                                        //     Parent Loop BB28_208 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x5, x9, #1
	add	x6, x10, #1
	add	x4, x16, #1
	cmp	x5, x8
	sub	x3, x3, x25
	csinc	x5, xzr, x9, eq
	cmp	x6, x21
	csel	x6, xzr, xzr, ne
	csinc	x7, xzr, x10, eq
	csel	x5, x9, x5, ne
	cmp	x4, x24
	csinc	x16, x6, x16, eq
	csel	x10, x10, x7, ne
	csel	x9, x9, x5, ne
	cmp	x3, x25
	b.ge	.LBB28_209
.LBB28_210:                             // %.preheader691.i
                                        //   in Loop: Header=BB28_208 Depth=2
	ldp	x12, x8, [x29, #-88]            // 16-byte Folded Reload
	mov	x4, x2
	mov	x5, x11
	cmp	w8, w12
	b.lt	.LBB28_214
.LBB28_211:                             // %._crit_edge723.i74
                                        //   in Loop: Header=BB28_208 Depth=2
	ldur	x5, [x29, #-32]                 // 8-byte Folded Reload
	add	x3, x3, x14
	cmp	x3, x25
	b.lt	.LBB28_207
	.p2align	5, , 16
.LBB28_212:                             // %.lr.ph735.i
                                        //   Parent Loop BB28_205 Depth=1
                                        //     Parent Loop BB28_208 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x12, x9, #1
	add	x15, x10, #1
	add	x8, x16, #1
	cmp	x12, x5
	sub	x3, x3, x25
	csinc	x12, xzr, x9, eq
	cmp	x15, x21
	csel	x15, xzr, xzr, ne
	csinc	x4, xzr, x10, eq
	csel	x12, x9, x12, ne
	cmp	x8, x24
	csinc	x16, x15, x16, eq
	csel	x10, x10, x4, ne
	csel	x9, x9, x12, ne
	cmp	x3, x25
	b.ge	.LBB28_212
	b	.LBB28_207
	.p2align	5, , 16
.LBB28_213:                             // %._crit_edge.i79
                                        //   in Loop: Header=BB28_214 Depth=3
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	add	x5, x5, #1
	add	x4, x4, x8
	cmp	x5, x13
	b.eq	.LBB28_211
.LBB28_214:                             // %.preheader690.i
                                        //   Parent Loop BB28_205 Depth=1
                                        //     Parent Loop BB28_208 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_218 Depth 4
	ldur	x19, [x29, #-40]                // 8-byte Folded Reload
	cmp	x19, #1
	b.lt	.LBB28_213
// %bb.215:                             // %.lr.ph710.i
                                        //   in Loop: Header=BB28_214 Depth=3
	ldur	x8, [x29, #-24]                 // 8-byte Folded Reload
	ldr	x7, [x30, #248]
	add	x7, x7, x4
	ldr	x6, [x8, #248]
	b	.LBB28_218
	.p2align	5, , 16
.LBB28_216:                             //   in Loop: Header=BB28_218 Depth=4
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
.LBB28_217:                             //   in Loop: Header=BB28_218 Depth=4
	subs	x19, x19, #1
	add	x7, x7, x23
	b.eq	.LBB28_213
.LBB28_218:                             //   Parent Loop BB28_205 Depth=1
                                        //     Parent Loop BB28_208 Depth=2
                                        //       Parent Loop BB28_214 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	madd	x20, x3, x22, x6
	ldr	w30, [x7]
	add	x3, x3, #1
	mul	x15, x9, x28
	and	w8, w30, #0x7fffffff
	madd	x20, x16, x26, x20
	ubfx	w12, w30, #16, #1
	cmp	w8, w17
	add	w8, w30, w0
	lsr	w30, w30, #16
	add	w8, w8, w12
	madd	x12, x10, x27, x20
	orr	w20, w30, #0x40
	lsr	w8, w8, #16
	csel	w8, w8, w20, lo
	strh	w8, [x12, x15]
	cmp	x3, x25
	b.ne	.LBB28_216
// %bb.219:                             //   in Loop: Header=BB28_218 Depth=4
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	add	x16, x16, #1
	cmp	x16, x24
	b.ne	.LBB28_222
// %bb.220:                             //   in Loop: Header=BB28_218 Depth=4
	add	x10, x10, #1
	cmp	x10, x21
	b.ne	.LBB28_223
// %bb.221:                             //   in Loop: Header=BB28_218 Depth=4
	ldur	x12, [x29, #-32]                // 8-byte Folded Reload
	add	x8, x9, #1
	mov	x3, xzr
	mov	x16, xzr
	mov	x10, xzr
	cmp	x8, x12
	csinc	x9, xzr, x9, eq
	b	.LBB28_217
	.p2align	5, , 16
.LBB28_222:                             //   in Loop: Header=BB28_218 Depth=4
	mov	x3, xzr
	b	.LBB28_217
.LBB28_223:                             //   in Loop: Header=BB28_218 Depth=4
	mov	x3, xzr
	mov	x16, xzr
	b	.LBB28_217
.LBB28_224:
	ldr	w8, [x19]
	cmp	w8, #1
	b.eq	.LBB28_305
// %bb.225:
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	ldur	x19, [x29, #-56]                // 8-byte Folded Reload
	cbnz	w8, .LBB28_574
// %bb.226:                             // %.preheader586.i
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.227:                             // %.preheader585.lr.ph.i
	ldp	x13, x16, [x29, #-80]           // 16-byte Folded Reload
	adrp	x17, :got:ggml_table_f32_f16
	ldur	x11, [x29, #-96]                // 8-byte Folded Reload
	mov	x8, xzr
	mov	x9, xzr
	ldr	x17, [x17, :got_lo12:ggml_table_f32_f16]
	mov	x10, xzr
	mov	x14, xzr
	mov	x2, xzr
	sxtw	x13, w13
	sxtw	x11, w11
	sub	x15, x21, x13
	mul	x12, x7, x11
	mul	x16, x16, x11
	mul	x15, x15, x7
	b	.LBB28_229
	.p2align	5, , 16
.LBB28_228:                             // %._crit_edge639.i
                                        //   in Loop: Header=BB28_229 Depth=1
	ldr	x0, [sp, #72]                   // 8-byte Folded Reload
	add	x8, x8, #1
	add	x16, x16, x0
	ldur	x0, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, x0
	b.eq	.LBB28_562
.LBB28_229:                             // %.preheader585.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_232 Depth 2
                                        //       Child Loop BB28_233 Depth 3
                                        //       Child Loop BB28_238 Depth 3
                                        //         Child Loop BB28_242 Depth 4
                                        //       Child Loop BB28_236 Depth 3
	ldur	x0, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x0, #1
	b.lt	.LBB28_228
// %bb.230:                             // %.lr.ph638.i
                                        //   in Loop: Header=BB28_229 Depth=1
	mov	x0, xzr
	mov	x1, x16
	mov	x20, x25
	b	.LBB28_232
	.p2align	5, , 16
.LBB28_231:                             // %._crit_edge628.i
                                        //   in Loop: Header=BB28_232 Depth=2
	ldur	x3, [x29, #-88]                 // 8-byte Folded Reload
	add	x0, x0, #1
	add	x1, x1, x3
	ldur	x3, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x0, x3
	b.eq	.LBB28_228
.LBB28_232:                             //   Parent Loop BB28_229 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_233 Depth 3
                                        //       Child Loop BB28_238 Depth 3
                                        //         Child Loop BB28_242 Depth 4
                                        //       Child Loop BB28_236 Depth 3
	ldur	x21, [x29, #-40]                // 8-byte Folded Reload
	add	x2, x2, x12
	cmp	x2, x23
	b.lt	.LBB28_234
	.p2align	5, , 16
.LBB28_233:                             // %.lr.ph.i17
                                        //   Parent Loop BB28_229 Depth=1
                                        //     Parent Loop BB28_232 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x4, x9, #1
	add	x5, x10, #1
	add	x3, x14, #1
	cmp	x4, x20
	sub	x2, x2, x23
	csinc	x4, xzr, x9, eq
	cmp	x5, x19
	csel	x5, xzr, xzr, ne
	csinc	x6, xzr, x10, eq
	csel	x4, x9, x4, ne
	cmp	x3, x21
	csinc	x14, x5, x14, eq
	csel	x10, x10, x6, ne
	csel	x9, x9, x4, ne
	cmp	x2, x23
	b.ge	.LBB28_233
.LBB28_234:                             // %.preheader584.i
                                        //   in Loop: Header=BB28_232 Depth=2
	ldur	x5, [x29, #-96]                 // 8-byte Folded Reload
	mov	x3, x1
	mov	x4, x11
	ldur	x6, [x29, #-80]                 // 8-byte Folded Reload
	cmp	w5, w6
	b.lt	.LBB28_238
.LBB28_235:                             // %._crit_edge615.i
                                        //   in Loop: Header=BB28_232 Depth=2
	ldur	x19, [x29, #-56]                // 8-byte Folded Reload
	add	x2, x2, x15
	ldur	x21, [x29, #-40]                // 8-byte Folded Reload
	cmp	x2, x23
	b.lt	.LBB28_231
	.p2align	5, , 16
.LBB28_236:                             // %.lr.ph627.i
                                        //   Parent Loop BB28_229 Depth=1
                                        //     Parent Loop BB28_232 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x4, x9, #1
	add	x5, x10, #1
	add	x3, x14, #1
	cmp	x4, x20
	sub	x2, x2, x23
	csinc	x4, xzr, x9, eq
	cmp	x5, x19
	csel	x5, xzr, xzr, ne
	csinc	x6, xzr, x10, eq
	csel	x4, x9, x4, ne
	cmp	x3, x21
	csinc	x14, x5, x14, eq
	csel	x10, x10, x6, ne
	csel	x9, x9, x4, ne
	cmp	x2, x23
	b.ge	.LBB28_236
	b	.LBB28_231
	.p2align	5, , 16
.LBB28_237:                             // %._crit_edge.i19
                                        //   in Loop: Header=BB28_238 Depth=3
	ldur	x5, [x29, #-72]                 // 8-byte Folded Reload
	add	x4, x4, #1
	add	x3, x3, x5
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x4, x13
	b.eq	.LBB28_235
.LBB28_238:                             // %.preheader583.i
                                        //   Parent Loop BB28_229 Depth=1
                                        //     Parent Loop BB28_232 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_242 Depth 4
	cmp	x7, #1
	b.lt	.LBB28_237
// %bb.239:                             // %.lr.ph602.i
                                        //   in Loop: Header=BB28_238 Depth=3
	ldur	x5, [x29, #-24]                 // 8-byte Folded Reload
	ldr	x6, [x30, #248]
	add	x6, x6, x3
	ldr	x5, [x5, #248]
	b	.LBB28_242
	.p2align	5, , 16
.LBB28_240:                             //   in Loop: Header=BB28_242 Depth=4
	mov	x20, x25
.LBB28_241:                             //   in Loop: Header=BB28_242 Depth=4
	add	x6, x6, x22
	subs	x7, x7, #1
	b.eq	.LBB28_237
.LBB28_242:                             //   Parent Loop BB28_229 Depth=1
                                        //     Parent Loop BB28_232 Depth=2
                                        //       Parent Loop BB28_238 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	madd	x19, x2, x24, x5
	ldrh	w20, [x6]
	add	x2, x2, #1
	mul	x21, x9, x27
	ldr	s0, [x17, x20, lsl #2]
	nop
	madd	x19, x14, x28, x19
	madd	x19, x10, x26, x19
	str	s0, [x19, x21]
	cmp	x2, x23
	b.ne	.LBB28_240
// %bb.243:                             //   in Loop: Header=BB28_242 Depth=4
	ldur	x2, [x29, #-40]                 // 8-byte Folded Reload
	add	x14, x14, #1
	mov	x20, x25
	cmp	x14, x2
	b.ne	.LBB28_245
// %bb.244:                             //   in Loop: Header=BB28_242 Depth=4
	add	x14, x9, #1
	add	x2, x10, #1
	cmp	x14, x20
	ldur	x14, [x29, #-56]                // 8-byte Folded Reload
	csinc	x19, xzr, x9, eq
	cmp	x2, x14
	csel	x2, xzr, xzr, ne
	csel	x14, xzr, xzr, ne
	csinc	x10, xzr, x10, eq
	csel	x9, x9, x19, ne
	b	.LBB28_241
	.p2align	5, , 16
.LBB28_245:                             //   in Loop: Header=BB28_242 Depth=4
	mov	x2, xzr
	b	.LBB28_241
.LBB28_246:
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	cmp	w0, #30
	b.eq	.LBB28_476
// %bb.247:
	cmp	w0, #1
	b.eq	.LBB28_464
// %bb.248:
	cbnz	w0, .LBB28_579
// %bb.249:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.250:                             // %.preheader781.lr.ph.i
	ldp	x16, x8, [x29, #-32]            // 16-byte Folded Reload
	mov	x0, xzr
	mov	x21, xzr
	lsl	x1, x22, #2
	ldr	x9, [x8, #248]
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	sub	x14, x16, #1
	and	x15, x16, #0x3
	sxtw	x10, w8
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	add	x4, x9, #8
	mul	x11, x16, x10
	sxtw	x12, w8
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	sub	x8, x8, x12
	mul	x13, x8, x16
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	mul	x6, x8, x10
	and	x8, x16, #0x7ffffffffffffffc
	neg	x3, x8
	add	x17, x22, x6
	add	x2, x6, x22, lsl #1
	add	x20, x17, x22, lsl #1
	b	.LBB28_252
.LBB28_251:                             // %._crit_edge1056.i
                                        //   in Loop: Header=BB28_252 Depth=1
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x2, x2, x8
	ldur	x20, [x29, #-72]                // 8-byte Folded Reload
	ldur	x6, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x0, [x29, #-24]                 // 8-byte Folded Reload
	add	x20, x20, x8
	add	x17, x17, x8
	add	x6, x6, x8
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x0, x0, #1
	cmp	x0, x8
	b.eq	.LBB28_562
.LBB28_252:                             // %.preheader781.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_255 Depth 2
                                        //       Child Loop BB28_258 Depth 3
                                        //         Child Loop BB28_262 Depth 4
                                        //         Child Loop BB28_265 Depth 4
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	stur	x0, [x29, #-24]                 // 8-byte Folded Spill
	stur	x6, [x29, #-40]                 // 8-byte Folded Spill
	stur	x20, [x29, #-72]                // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_251
// %bb.253:                             // %.lr.ph1055.i
                                        //   in Loop: Header=BB28_252 Depth=1
	mov	x5, xzr
	mov	x7, x17
	mov	x19, x2
	b	.LBB28_255
	.p2align	5, , 16
.LBB28_254:                             // %._crit_edge1051.i
                                        //   in Loop: Header=BB28_255 Depth=2
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x21, x21, x13
	add	x5, x5, #1
	add	x20, x20, x8
	add	x19, x19, x8
	add	x7, x7, x8
	add	x6, x6, x8
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x5, x8
	b.eq	.LBB28_251
.LBB28_255:                             //   Parent Loop BB28_252 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_258 Depth 3
                                        //         Child Loop BB28_262 Depth 4
                                        //         Child Loop BB28_265 Depth 4
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	add	x21, x21, x11
	ldur	x16, [x29, #-88]                // 8-byte Folded Reload
	cmp	w8, w16
	b.ge	.LBB28_254
// %bb.256:                             // %.preheader780.lr.ph.i
                                        //   in Loop: Header=BB28_255 Depth=2
	mov	x23, x6
	mov	x24, x7
	mov	x25, x19
	mov	x26, x20
	mov	x27, x10
	b	.LBB28_258
	.p2align	5, , 16
.LBB28_257:                             // %._crit_edge1041.i
                                        //   in Loop: Header=BB28_258 Depth=3
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	add	x27, x27, #1
	add	x26, x26, x8
	add	x25, x25, x8
	add	x24, x24, x8
	add	x23, x23, x8
	cmp	x27, x12
	b.eq	.LBB28_254
.LBB28_258:                             // %.preheader780.i
                                        //   Parent Loop BB28_252 Depth=1
                                        //     Parent Loop BB28_255 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_262 Depth 4
                                        //         Child Loop BB28_265 Depth 4
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_257
// %bb.259:                             // %.lr.ph1040.i
                                        //   in Loop: Header=BB28_258 Depth=3
	ldr	x16, [x30, #248]
	cmp	x14, #3
	b.hs	.LBB28_261
// %bb.260:                             //   in Loop: Header=BB28_258 Depth=3
	mov	x8, xzr
	cbnz	x15, .LBB28_264
	b	.LBB28_257
	.p2align	5, , 16
.LBB28_261:                             // %.lr.ph1040.i.new.preheader
                                        //   in Loop: Header=BB28_258 Depth=3
	add	x8, x4, x21, lsl #2
	mov	x30, xzr
	mov	x28, x16
	.p2align	5, , 16
.LBB28_262:                             // %.lr.ph1040.i.new
                                        //   Parent Loop BB28_252 Depth=1
                                        //     Parent Loop BB28_255 Depth=2
                                        //       Parent Loop BB28_258 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w0, [x28, x23]
	sub	x30, x30, #4
	lsl	w0, w0, #16
	stur	w0, [x8, #-8]
	ldrh	w0, [x28, x24]
	lsl	w0, w0, #16
	stur	w0, [x8, #-4]
	ldrh	w0, [x28, x25]
	lsl	w0, w0, #16
	str	w0, [x8]
	ldrh	w0, [x28, x26]
	add	x28, x28, x1
	lsl	w0, w0, #16
	str	w0, [x8, #4]
	add	x8, x8, #16
	cmp	x3, x30
	b.ne	.LBB28_262
// %bb.263:                             // %._crit_edge1041.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_258 Depth=3
	neg	x8, x30
	sub	x21, x21, x30
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	cbz	x15, .LBB28_257
.LBB28_264:                             // %.epil.preheader579.preheader
                                        //   in Loop: Header=BB28_258 Depth=3
	mul	x8, x22, x8
	add	x8, x16, x8
	mov	x16, x15
	.p2align	5, , 16
.LBB28_265:                             // %.epil.preheader579
                                        //   Parent Loop BB28_252 Depth=1
                                        //     Parent Loop BB28_255 Depth=2
                                        //       Parent Loop BB28_258 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w28, [x8, x23]
	add	x8, x8, x22
	subs	x16, x16, #1
	lsl	w28, w28, #16
	str	w28, [x9, x21, lsl #2]
	add	x21, x21, #1
	b.ne	.LBB28_265
	b	.LBB28_257
.LBB28_266:
	ldur	x28, [x29, #-16]                // 8-byte Folded Reload
	cmp	w0, #30
	b.eq	.LBB28_505
// %bb.267:
	cmp	w0, #1
	b.eq	.LBB28_493
// %bb.268:
	cbnz	w0, .LBB28_580
// %bb.269:
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.270:                             // %.preheader672.lr.ph.i
	ldur	x8, [x29, #-24]                 // 8-byte Folded Reload
	mov	x4, xzr
	mov	x20, xzr
	ldur	x1, [x29, #-40]                 // 8-byte Folded Reload
	lsl	x0, x23, #2
	and	x14, x1, #0x3
	ldr	x9, [x8, #248]
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	sxtw	x10, w8
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	add	x3, x9, #8
	mul	x11, x1, x10
	sxtw	x12, w8
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	sub	x8, x8, x12
	mul	x13, x8, x1
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	mul	x15, x8, x10
	and	x8, x1, #0x7ffffffffffffffc
	neg	x2, x8
	add	x16, x23, x15
	add	x1, x15, x23, lsl #1
	add	x17, x16, x23, lsl #1
	b	.LBB28_272
.LBB28_271:                             // %._crit_edge947.i
                                        //   in Loop: Header=BB28_272 Depth=1
	ldr	x8, [sp, #80]                   // 8-byte Folded Reload
	add	x17, x17, x8
	ldur	x4, [x29, #-24]                 // 8-byte Folded Reload
	add	x1, x1, x8
	add	x16, x16, x8
	add	x15, x15, x8
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x4, x4, #1
	cmp	x4, x8
	b.eq	.LBB28_562
.LBB28_272:                             // %.preheader672.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_275 Depth 2
                                        //       Child Loop BB28_278 Depth 3
                                        //         Child Loop BB28_282 Depth 4
                                        //         Child Loop BB28_285 Depth 4
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	stur	x4, [x29, #-24]                 // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_271
// %bb.273:                             // %.lr.ph946.i
                                        //   in Loop: Header=BB28_272 Depth=1
	ldp	x30, x27, [x29, #-48]           // 16-byte Folded Reload
	mov	x4, xzr
	mov	x5, x15
	mov	x6, x16
	mov	x7, x1
	mov	x19, x17
	b	.LBB28_275
	.p2align	5, , 16
.LBB28_274:                             // %._crit_edge942.i
                                        //   in Loop: Header=BB28_275 Depth=2
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x20, x20, x13
	add	x4, x4, #1
	add	x19, x19, x8
	add	x7, x7, x8
	add	x6, x6, x8
	add	x5, x5, x8
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x4, x8
	b.eq	.LBB28_271
.LBB28_275:                             //   Parent Loop BB28_272 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_278 Depth 3
                                        //         Child Loop BB28_282 Depth 4
                                        //         Child Loop BB28_285 Depth 4
	ldp	x21, x8, [x29, #-88]            // 16-byte Folded Reload
	add	x20, x20, x11
	cmp	w8, w21
	b.ge	.LBB28_274
// %bb.276:                             // %.preheader671.lr.ph.i
                                        //   in Loop: Header=BB28_275 Depth=2
	mov	x21, x5
	mov	x22, x6
	mov	x24, x7
	mov	x25, x19
	mov	x26, x10
	b	.LBB28_278
	.p2align	5, , 16
.LBB28_277:                             // %._crit_edge932.i
                                        //   in Loop: Header=BB28_278 Depth=3
	ldur	x27, [x29, #-40]                // 8-byte Folded Reload
	add	x26, x26, #1
	add	x25, x25, x30
	add	x24, x24, x30
	add	x22, x22, x30
	add	x21, x21, x30
	cmp	x26, x12
	b.eq	.LBB28_274
.LBB28_278:                             // %.preheader671.i
                                        //   Parent Loop BB28_272 Depth=1
                                        //     Parent Loop BB28_275 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_282 Depth 4
                                        //         Child Loop BB28_285 Depth 4
	cmp	x27, #1
	b.lt	.LBB28_277
// %bb.279:                             // %.lr.ph931.i
                                        //   in Loop: Header=BB28_278 Depth=3
	ldr	x8, [x28, #248]
	cmp	x27, #4
	b.hs	.LBB28_281
// %bb.280:                             //   in Loop: Header=BB28_278 Depth=3
	mov	x27, xzr
	cbnz	x14, .LBB28_284
	b	.LBB28_277
	.p2align	5, , 16
.LBB28_281:                             // %.lr.ph931.i.new.preheader
                                        //   in Loop: Header=BB28_278 Depth=3
	add	x30, x3, x20, lsl #2
	mov	x28, xzr
	mov	x27, x8
	.p2align	5, , 16
.LBB28_282:                             // %.lr.ph931.i.new
                                        //   Parent Loop BB28_272 Depth=1
                                        //     Parent Loop BB28_275 Depth=2
                                        //       Parent Loop BB28_278 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x27, x21]
	sub	x28, x28, #4
	stur	s0, [x30, #-8]
	ldr	s0, [x27, x22]
	stur	s0, [x30, #-4]
	ldr	s0, [x27, x24]
	str	s0, [x30]
	ldr	s0, [x27, x25]
	add	x27, x27, x0
	str	s0, [x30, #4]
	add	x30, x30, #16
	cmp	x2, x28
	b.ne	.LBB28_282
// %bb.283:                             // %._crit_edge932.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_278 Depth=3
	neg	x27, x28
	sub	x20, x20, x28
	ldur	x28, [x29, #-16]                // 8-byte Folded Reload
	ldur	x30, [x29, #-48]                // 8-byte Folded Reload
	cbz	x14, .LBB28_277
.LBB28_284:                             // %.epil.preheader.preheader
                                        //   in Loop: Header=BB28_278 Depth=3
	mul	x27, x23, x27
	add	x8, x8, x27
	mov	x27, x14
	.p2align	5, , 16
.LBB28_285:                             // %.epil.preheader
                                        //   Parent Loop BB28_272 Depth=1
                                        //     Parent Loop BB28_275 Depth=2
                                        //       Parent Loop BB28_278 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x8, x21]
	add	x8, x8, x23
	subs	x27, x27, #1
	str	s0, [x9, x20, lsl #2]
	add	x20, x20, #1
	b.ne	.LBB28_285
	b	.LBB28_277
.LBB28_286:
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	ldur	x3, [x29, #-32]                 // 8-byte Folded Reload
	cmp	w0, #1
	b.eq	.LBB28_401
// %bb.287:
	cbnz	w0, .LBB28_578
// %bb.288:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.289:                             // %.preheader573.lr.ph.i
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	adrp	x5, :got:ggml_table_f32_f16
	mov	x0, xzr
	mov	x23, xzr
	sub	x13, x3, #1
	and	x14, x3, #0x3
	lsl	x15, x22, #2
	sxtw	x9, w8
	mul	x16, x3, x9
	ldp	x8, x10, [x29, #-80]            // 16-byte Folded Reload
	mul	x7, x10, x9
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	sxtw	x11, w8
	sub	x8, x21, x11
	mul	x17, x8, x3
	and	x8, x3, #0x7ffffffffffffffc
	neg	x3, x8
	ldr	x12, [x10, #248]
	ldr	x5, [x5, :got_lo12:ggml_table_f32_f16]
	add	x19, x22, x7
	add	x2, x7, x22, lsl #1
	add	x21, x19, x22, lsl #1
	add	x4, x12, #8
	b	.LBB28_291
	.p2align	5, , 16
.LBB28_290:                             // %._crit_edge750.i
                                        //   in Loop: Header=BB28_291 Depth=1
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x2, x2, x8
	ldur	x21, [x29, #-104]               // 8-byte Folded Reload
	ldur	x19, [x29, #-56]                // 8-byte Folded Reload
	ldur	x7, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x0, [x29, #-24]                 // 8-byte Folded Reload
	add	x21, x21, x8
	add	x19, x19, x8
	add	x7, x7, x8
	add	x0, x0, #1
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x0, x8
	b.eq	.LBB28_562
.LBB28_291:                             // %.preheader573.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_294 Depth 2
                                        //       Child Loop BB28_297 Depth 3
                                        //         Child Loop BB28_301 Depth 4
                                        //         Child Loop BB28_304 Depth 4
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	stur	x0, [x29, #-24]                 // 8-byte Folded Spill
	stur	x7, [x29, #-40]                 // 8-byte Folded Spill
	stur	x19, [x29, #-56]                // 8-byte Folded Spill
	stur	x21, [x29, #-104]               // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_290
// %bb.292:                             // %.lr.ph749.i
                                        //   in Loop: Header=BB28_291 Depth=1
	mov	x6, xzr
	mov	x20, x2
	b	.LBB28_294
	.p2align	5, , 16
.LBB28_293:                             // %._crit_edge745.i
                                        //   in Loop: Header=BB28_294 Depth=2
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	add	x23, x23, x17
	add	x6, x6, #1
	add	x21, x21, x8
	add	x20, x20, x8
	add	x19, x19, x8
	add	x7, x7, x8
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x6, x8
	b.eq	.LBB28_290
.LBB28_294:                             //   Parent Loop BB28_291 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_297 Depth 3
                                        //         Child Loop BB28_301 Depth 4
                                        //         Child Loop BB28_304 Depth 4
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x23, x23, x16
	ldur	x10, [x29, #-80]                // 8-byte Folded Reload
	cmp	w8, w10
	b.ge	.LBB28_293
// %bb.295:                             // %.preheader572.lr.ph.i
                                        //   in Loop: Header=BB28_294 Depth=2
	mov	x24, x7
	mov	x25, x19
	mov	x26, x20
	mov	x27, x21
	mov	x28, x9
	b	.LBB28_297
	.p2align	5, , 16
.LBB28_296:                             // %._crit_edge735.i
                                        //   in Loop: Header=BB28_297 Depth=3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	add	x28, x28, #1
	add	x27, x27, x8
	add	x26, x26, x8
	add	x25, x25, x8
	add	x24, x24, x8
	cmp	x28, x11
	b.eq	.LBB28_293
.LBB28_297:                             // %.preheader572.i
                                        //   Parent Loop BB28_291 Depth=1
                                        //     Parent Loop BB28_294 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_301 Depth 4
                                        //         Child Loop BB28_304 Depth 4
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_296
// %bb.298:                             // %.lr.ph734.i
                                        //   in Loop: Header=BB28_297 Depth=3
	ldr	x1, [x30, #248]
	cmp	x13, #3
	b.hs	.LBB28_300
// %bb.299:                             //   in Loop: Header=BB28_297 Depth=3
	mov	x10, xzr
	cbnz	x14, .LBB28_303
	b	.LBB28_296
	.p2align	5, , 16
.LBB28_300:                             // %.lr.ph734.i.new.preheader
                                        //   in Loop: Header=BB28_297 Depth=3
	add	x10, x4, x23, lsl #2
	mov	x8, xzr
	mov	x30, x1
	.p2align	5, , 16
.LBB28_301:                             // %.lr.ph734.i.new
                                        //   Parent Loop BB28_291 Depth=1
                                        //     Parent Loop BB28_294 Depth=2
                                        //       Parent Loop BB28_297 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w0, [x30, x24]
	sub	x8, x8, #4
	ldr	s0, [x5, x0, lsl #2]
	ldrh	w0, [x30, x25]
	stur	s0, [x10, #-8]
	ldr	s0, [x5, x0, lsl #2]
	stur	s0, [x10, #-4]
	ldrh	w0, [x30, x26]
	ldr	s0, [x5, x0, lsl #2]
	ldrh	w0, [x30, x27]
	add	x30, x30, x15
	str	s0, [x10]
	ldr	s0, [x5, x0, lsl #2]
	str	s0, [x10, #4]
	add	x10, x10, #16
	cmp	x3, x8
	b.ne	.LBB28_301
// %bb.302:                             // %._crit_edge735.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_297 Depth=3
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	neg	x10, x8
	sub	x23, x23, x8
	cbz	x14, .LBB28_296
.LBB28_303:                             // %.epil.preheader612.preheader
                                        //   in Loop: Header=BB28_297 Depth=3
	mul	x8, x22, x10
	mov	x10, x14
	add	x8, x1, x8
	.p2align	5, , 16
.LBB28_304:                             // %.epil.preheader612
                                        //   Parent Loop BB28_291 Depth=1
                                        //     Parent Loop BB28_294 Depth=2
                                        //       Parent Loop BB28_297 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w1, [x8, x24]
	add	x8, x8, x22
	subs	x10, x10, #1
	ldr	s0, [x5, x1, lsl #2]
	str	s0, [x12, x23, lsl #2]
	add	x23, x23, #1
	b.ne	.LBB28_304
	b	.LBB28_296
.LBB28_305:                             // %.preheader581.i
	ldp	x8, x6, [x29, #-64]             // 16-byte Folded Reload
	ldur	x20, [x29, #-16]                // 8-byte Folded Reload
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.306:                             // %.preheader580.lr.ph.i
	ldp	x13, x16, [x29, #-80]           // 16-byte Folded Reload
	mov	x8, xzr
	ldur	x11, [x29, #-96]                // 8-byte Folded Reload
	mov	x9, xzr
	mov	x10, xzr
	ldur	x30, [x29, #-24]                // 8-byte Folded Reload
	mov	x15, xzr
	mov	x1, xzr
	sxtw	x13, w13
	sxtw	x11, w11
	sub	x14, x21, x13
	mul	x12, x7, x11
	mul	x0, x16, x11
	mul	x14, x14, x7
	b	.LBB28_308
	.p2align	5, , 16
.LBB28_307:                             // %._crit_edge700.i
                                        //   in Loop: Header=BB28_308 Depth=1
	ldr	x17, [sp, #72]                  // 8-byte Folded Reload
	add	x8, x8, #1
	ldur	x0, [x29, #-104]                // 8-byte Folded Reload
	add	x0, x0, x17
	ldur	x17, [x29, #-64]                // 8-byte Folded Reload
	cmp	x8, x17
	b.eq	.LBB28_562
.LBB28_308:                             // %.preheader580.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_311 Depth 2
                                        //       Child Loop BB28_312 Depth 3
                                        //       Child Loop BB28_317 Depth 3
                                        //         Child Loop BB28_320 Depth 4
                                        //       Child Loop BB28_315 Depth 3
	ldur	x17, [x29, #-48]                // 8-byte Folded Reload
	stur	x0, [x29, #-104]                // 8-byte Folded Spill
	cmp	x17, #1
	b.lt	.LBB28_307
// %bb.309:                             // %.lr.ph699.i
                                        //   in Loop: Header=BB28_308 Depth=1
	mov	x17, xzr
	b	.LBB28_311
	.p2align	5, , 16
.LBB28_310:                             // %._crit_edge689.i
                                        //   in Loop: Header=BB28_311 Depth=2
	ldur	x2, [x29, #-88]                 // 8-byte Folded Reload
	add	x17, x17, #1
	add	x0, x0, x2
	ldur	x2, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x17, x2
	b.eq	.LBB28_307
.LBB28_311:                             //   Parent Loop BB28_308 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_312 Depth 3
                                        //       Child Loop BB28_317 Depth 3
                                        //         Child Loop BB28_320 Depth 4
                                        //       Child Loop BB28_315 Depth 3
	ldur	x16, [x29, #-40]                // 8-byte Folded Reload
	add	x1, x1, x12
	mov	x19, x25
	cmp	x1, x23
	b.lt	.LBB28_313
	.p2align	5, , 16
.LBB28_312:                             // %.lr.ph655.i
                                        //   Parent Loop BB28_308 Depth=1
                                        //     Parent Loop BB28_311 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x15, #1
	cmp	x3, x19
	sub	x1, x1, x23
	csinc	x3, xzr, x9, eq
	cmp	x4, x6
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x16
	csinc	x15, x4, x15, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x23
	b.ge	.LBB28_312
.LBB28_313:                             // %.preheader579.i
                                        //   in Loop: Header=BB28_311 Depth=2
	ldur	x4, [x29, #-96]                 // 8-byte Folded Reload
	mov	x2, x0
	mov	x3, x11
	ldur	x5, [x29, #-80]                 // 8-byte Folded Reload
	cmp	w4, w5
	b.lt	.LBB28_317
.LBB28_314:                             // %._crit_edge676.i
                                        //   in Loop: Header=BB28_311 Depth=2
	ldur	x6, [x29, #-56]                 // 8-byte Folded Reload
	add	x1, x1, x14
	mov	x19, x25
	ldur	x16, [x29, #-40]                // 8-byte Folded Reload
	cmp	x1, x23
	b.lt	.LBB28_310
	.p2align	5, , 16
.LBB28_315:                             // %.lr.ph688.i
                                        //   Parent Loop BB28_308 Depth=1
                                        //     Parent Loop BB28_311 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x15, #1
	cmp	x3, x19
	sub	x1, x1, x23
	csinc	x3, xzr, x9, eq
	cmp	x4, x6
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x16
	csinc	x15, x4, x15, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x23
	b.ge	.LBB28_315
	b	.LBB28_310
	.p2align	5, , 16
.LBB28_316:                             // %._crit_edge666.i
                                        //   in Loop: Header=BB28_317 Depth=3
	ldur	x4, [x29, #-72]                 // 8-byte Folded Reload
	add	x3, x3, #1
	add	x2, x2, x4
	cmp	x3, x13
	b.eq	.LBB28_314
.LBB28_317:                             // %.preheader578.i
                                        //   Parent Loop BB28_308 Depth=1
                                        //     Parent Loop BB28_311 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_320 Depth 4
	mov	x4, x2
	mov	x5, x7
	cmp	x7, #1
	b.ge	.LBB28_320
	b	.LBB28_316
	.p2align	5, , 16
.LBB28_318:                             //   in Loop: Header=BB28_320 Depth=4
	ldur	x6, [x29, #-64]                 // 8-byte Folded Reload
	add	x15, x9, #1
	add	x1, x10, #1
	cmp	x15, x6
	ldur	x15, [x29, #-48]                // 8-byte Folded Reload
	csinc	x6, xzr, x9, eq
	cmp	x1, x15
	csel	x1, xzr, xzr, ne
	csel	x15, xzr, xzr, ne
	csinc	x10, xzr, x10, eq
	csel	x9, x9, x6, ne
.LBB28_319:                             //   in Loop: Header=BB28_320 Depth=4
	add	x4, x4, x22
	subs	x5, x5, #1
	b.eq	.LBB28_316
.LBB28_320:                             //   Parent Loop BB28_308 Depth=1
                                        //     Parent Loop BB28_311 Depth=2
                                        //       Parent Loop BB28_317 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x6, [x30, #248]
	mul	x19, x9, x27
	madd	x6, x1, x24, x6
	ldr	x7, [x20, #248]
	ldrh	w7, [x7, x4]
	add	x1, x1, #1
	madd	x6, x15, x28, x6
	madd	x6, x10, x26, x6
	strh	w7, [x6, x19]
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x1, x7
	b.ne	.LBB28_319
// %bb.321:                             //   in Loop: Header=BB28_320 Depth=4
	add	x15, x15, #1
	cmp	x15, x21
	b.eq	.LBB28_318
// %bb.322:                             //   in Loop: Header=BB28_320 Depth=4
	mov	x1, xzr
	b	.LBB28_319
.LBB28_323:                             // %.preheader797.i
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.324:                             // %.preheader796.lr.ph.i
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	mov	x12, xzr
	mov	x9, xzr
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	mov	x10, xzr
	mov	x16, xzr
	mov	x7, xzr
	mov	w17, #2004877312                // =0x77800000
	mov	w0, #142606336                  // =0x8800000
	mov	w1, #125829120                  // =0x7800000
	mov	w2, #1073741824                 // =0x40000000
	mov	w3, #-16777216                  // =0xff000000
	sxtw	x13, w8
	mul	x8, x11, x13
	mov	w4, #32256                      // =0x7e00
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	sxtw	x14, w8
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	stur	x14, [x29, #-80]                // 8-byte Folded Spill
	sub	x8, x8, x14
	mul	x8, x8, x11
	str	x8, [sp, #88]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	str	x13, [sp, #104]                 // 8-byte Folded Spill
	mul	x11, x8, x13
	b	.LBB28_326
	.p2align	5, , 16
.LBB28_325:                             // %._crit_edge923.i
                                        //   in Loop: Header=BB28_326 Depth=1
	ldp	x8, x12, [sp, #72]              // 16-byte Folded Reload
	add	x12, x12, #1
	ldr	x11, [sp, #64]                  // 8-byte Folded Reload
	add	x11, x11, x8
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x12, x8
	b.eq	.LBB28_562
.LBB28_326:                             // %.preheader796.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_329 Depth 2
                                        //       Child Loop BB28_330 Depth 3
                                        //       Child Loop BB28_335 Depth 3
                                        //         Child Loop BB28_339 Depth 4
                                        //       Child Loop BB28_333 Depth 3
	str	x12, [sp, #80]                  // 8-byte Folded Spill
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	str	x11, [sp, #64]                  // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_325
// %bb.327:                             // %.lr.ph922.i
                                        //   in Loop: Header=BB28_326 Depth=1
	ldur	x14, [x29, #-24]                // 8-byte Folded Reload
	mov	x12, xzr
	mov	x13, x11
	b	.LBB28_329
	.p2align	5, , 16
.LBB28_328:                             // %._crit_edge912.i
                                        //   in Loop: Header=BB28_329 Depth=2
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	ldr	x13, [sp, #112]                 // 8-byte Folded Reload
	add	x13, x13, x8
	ldur	x12, [x29, #-40]                // 8-byte Folded Reload
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	add	x12, x12, #1
	cmp	x12, x8
	b.eq	.LBB28_325
.LBB28_329:                             //   Parent Loop BB28_326 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_330 Depth 3
                                        //       Child Loop BB28_335 Depth 3
                                        //         Child Loop BB28_339 Depth 4
                                        //       Child Loop BB28_333 Depth 3
	stur	x12, [x29, #-40]                // 8-byte Folded Spill
	mov	x11, x19
	ldr	x8, [sp, #96]                   // 8-byte Folded Reload
	add	x7, x7, x8
	cmp	x7, x23
	b.lt	.LBB28_331
	.p2align	5, , 16
.LBB28_330:                             // %.lr.ph872.i
                                        //   Parent Loop BB28_326 Depth=1
                                        //     Parent Loop BB28_329 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x15, x9, #1
	add	x19, x10, #1
	add	x8, x16, #1
	cmp	x15, x11
	sub	x7, x7, x23
	csinc	x15, xzr, x9, eq
	cmp	x19, x21
	csel	x19, xzr, xzr, ne
	csinc	x20, xzr, x10, eq
	csel	x15, x9, x15, ne
	cmp	x8, x25
	csinc	x16, x19, x16, eq
	csel	x10, x10, x20, ne
	csel	x9, x9, x15, ne
	cmp	x7, x23
	b.ge	.LBB28_330
.LBB28_331:                             // %.preheader795.i
                                        //   in Loop: Header=BB28_329 Depth=2
	str	x13, [sp, #112]                 // 8-byte Folded Spill
	ldr	x20, [sp, #104]                 // 8-byte Folded Reload
	mov	x19, x13
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	ldur	x11, [x29, #-88]                // 8-byte Folded Reload
	cmp	w8, w11
	b.lt	.LBB28_335
.LBB28_332:                             // %._crit_edge899.i
                                        //   in Loop: Header=BB28_329 Depth=2
	ldr	x8, [sp, #88]                   // 8-byte Folded Reload
	add	x7, x7, x8
	ldur	x19, [x29, #-72]                // 8-byte Folded Reload
	cmp	x7, x23
	b.lt	.LBB28_328
	.p2align	5, , 16
.LBB28_333:                             // %.lr.ph911.i
                                        //   Parent Loop BB28_326 Depth=1
                                        //     Parent Loop BB28_329 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x11, x9, #1
	add	x12, x10, #1
	add	x8, x16, #1
	cmp	x11, x19
	sub	x7, x7, x23
	csinc	x11, xzr, x9, eq
	cmp	x12, x21
	csel	x12, xzr, xzr, ne
	csinc	x13, xzr, x10, eq
	csel	x11, x9, x11, ne
	cmp	x8, x25
	csinc	x16, x12, x16, eq
	csel	x10, x10, x13, ne
	csel	x9, x9, x11, ne
	cmp	x7, x23
	b.ge	.LBB28_333
	b	.LBB28_328
	.p2align	5, , 16
.LBB28_334:                             // %._crit_edge883.i
                                        //   in Loop: Header=BB28_335 Depth=3
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	add	x20, x20, #1
	add	x19, x19, x8
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	ldp	x14, x6, [x29, #-24]            // 16-byte Folded Reload
	cmp	x20, x8
	b.eq	.LBB28_332
.LBB28_335:                             // %.preheader794.i
                                        //   Parent Loop BB28_326 Depth=1
                                        //     Parent Loop BB28_329 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_339 Depth 4
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	cmp	x11, #1
	b.lt	.LBB28_334
// %bb.336:                             // %.lr.ph882.i
                                        //   in Loop: Header=BB28_335 Depth=3
	ldr	x8, [x6, #248]
	add	x15, x8, x19
	ldr	x30, [x14, #248]
	mov	x8, x11
	b	.LBB28_339
	.p2align	5, , 16
.LBB28_337:                             //   in Loop: Header=BB28_339 Depth=4
	mov	x7, xzr
.LBB28_338:                             //   in Loop: Header=BB28_339 Depth=4
	add	x15, x15, x22
	subs	x8, x8, #1
	b.eq	.LBB28_334
.LBB28_339:                             //   Parent Loop BB28_326 Depth=1
                                        //     Parent Loop BB28_329 Depth=2
                                        //       Parent Loop BB28_335 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w12, [x15]
	mul	x5, x9, x27
	lsl	w11, w12, #16
	fmov	s0, w17
	lsl	w6, w12, #17
	and	w14, w11, #0x7fff0000
	and	w11, w11, #0x7f800000
	fmov	s1, w14
	ubfx	w14, w12, #7, #8
	add	w11, w11, w1
	and	w12, w12, #0x8000
	cmp	w14, #113
	csel	w11, w2, w11, lo
	cmp	w6, w3
	fmul	s0, s1, s0
	fmov	s1, w0
	fmul	s0, s0, s1
	fmov	s1, w11
	madd	x11, x7, x24, x30
	add	x7, x7, #1
	madd	x11, x16, x28, x11
	fadd	s0, s0, s1
	madd	x11, x10, x26, x11
	fmov	w14, s0
	lsr	w13, w14, #13
	and	w14, w14, #0xfff
	and	w13, w13, #0x7c00
	add	w13, w13, w14
	csel	w13, w4, w13, hi
	orr	w12, w13, w12
	strh	w12, [x11, x5]
	cmp	x7, x23
	b.ne	.LBB28_338
// %bb.340:                             //   in Loop: Header=BB28_339 Depth=4
	add	x16, x16, #1
	cmp	x16, x25
	b.ne	.LBB28_337
// %bb.341:                             //   in Loop: Header=BB28_339 Depth=4
	add	x10, x10, #1
	cmp	x10, x21
	b.ne	.LBB28_343
// %bb.342:                             //   in Loop: Header=BB28_339 Depth=4
	ldur	x12, [x29, #-72]                // 8-byte Folded Reload
	add	x11, x9, #1
	mov	x7, xzr
	mov	x16, xzr
	mov	x10, xzr
	cmp	x11, x12
	csinc	x9, xzr, x9, eq
	b	.LBB28_338
.LBB28_343:                             //   in Loop: Header=BB28_339 Depth=4
	mov	x7, xzr
	mov	x16, xzr
	b	.LBB28_338
.LBB28_344:                             // %.preheader792.i
	ldp	x6, x8, [x29, #-72]             // 16-byte Folded Reload
	ldur	x20, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.345:                             // %.preheader791.lr.ph.i
	ldur	x13, [x29, #-88]                // 8-byte Folded Reload
	mov	x8, xzr
	mov	x9, xzr
	ldur	x11, [x29, #-104]               // 8-byte Folded Reload
	mov	x10, xzr
	mov	x15, xzr
	ldp	x14, x16, [x29, #-40]           // 16-byte Folded Reload
	mov	x1, xzr
	ldur	x30, [x29, #-24]                // 8-byte Folded Reload
	sxtw	x13, w13
	sxtw	x11, w11
	sub	x14, x14, x13
	mul	x12, x16, x11
	mul	x14, x14, x16
	ldur	x16, [x29, #-48]                // 8-byte Folded Reload
	mul	x16, x16, x11
	b	.LBB28_347
	.p2align	5, , 16
.LBB28_346:                             // %._crit_edge984.i
                                        //   in Loop: Header=BB28_347 Depth=1
	ldr	x17, [sp, #72]                  // 8-byte Folded Reload
	add	x8, x8, #1
	add	x16, x16, x17
	ldur	x17, [x29, #-64]                // 8-byte Folded Reload
	cmp	x8, x17
	b.eq	.LBB28_562
.LBB28_347:                             // %.preheader791.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_350 Depth 2
                                        //       Child Loop BB28_351 Depth 3
                                        //       Child Loop BB28_356 Depth 3
                                        //         Child Loop BB28_359 Depth 4
                                        //       Child Loop BB28_354 Depth 3
	ldur	x17, [x29, #-56]                // 8-byte Folded Reload
	cmp	x17, #1
	b.lt	.LBB28_346
// %bb.348:                             // %.lr.ph983.i
                                        //   in Loop: Header=BB28_347 Depth=1
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	mov	x17, xzr
	mov	x0, x16
	b	.LBB28_350
	.p2align	5, , 16
.LBB28_349:                             // %._crit_edge973.i
                                        //   in Loop: Header=BB28_350 Depth=2
	ldur	x2, [x29, #-96]                 // 8-byte Folded Reload
	add	x17, x17, #1
	add	x0, x0, x2
	ldur	x2, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x17, x2
	b.eq	.LBB28_346
.LBB28_350:                             //   Parent Loop BB28_347 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_351 Depth 3
                                        //       Child Loop BB28_356 Depth 3
                                        //         Child Loop BB28_359 Depth 4
                                        //       Child Loop BB28_354 Depth 3
	add	x1, x1, x12
	cmp	x1, x23
	b.lt	.LBB28_352
	.p2align	5, , 16
.LBB28_351:                             // %.lr.ph939.i
                                        //   Parent Loop BB28_347 Depth=1
                                        //     Parent Loop BB28_350 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x15, #1
	cmp	x3, x6
	sub	x1, x1, x23
	csinc	x3, xzr, x9, eq
	cmp	x4, x21
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x25
	csinc	x15, x4, x15, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x23
	b.ge	.LBB28_351
.LBB28_352:                             // %.preheader790.i
                                        //   in Loop: Header=BB28_350 Depth=2
	ldur	x4, [x29, #-104]                // 8-byte Folded Reload
	mov	x2, x0
	mov	x3, x11
	ldur	x5, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w4, w5
	b.lt	.LBB28_356
.LBB28_353:                             // %._crit_edge960.i
                                        //   in Loop: Header=BB28_350 Depth=2
	ldur	x6, [x29, #-72]                 // 8-byte Folded Reload
	add	x1, x1, x14
	cmp	x1, x23
	b.lt	.LBB28_349
	.p2align	5, , 16
.LBB28_354:                             // %.lr.ph972.i
                                        //   Parent Loop BB28_347 Depth=1
                                        //     Parent Loop BB28_350 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x15, #1
	cmp	x3, x6
	sub	x1, x1, x23
	csinc	x3, xzr, x9, eq
	cmp	x4, x21
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x25
	csinc	x15, x4, x15, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x23
	b.ge	.LBB28_354
	b	.LBB28_349
	.p2align	5, , 16
.LBB28_355:                             // %._crit_edge950.i
                                        //   in Loop: Header=BB28_356 Depth=3
	ldur	x4, [x29, #-48]                 // 8-byte Folded Reload
	add	x3, x3, #1
	add	x2, x2, x4
	cmp	x3, x13
	b.eq	.LBB28_353
.LBB28_356:                             // %.preheader789.i
                                        //   Parent Loop BB28_347 Depth=1
                                        //     Parent Loop BB28_350 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_359 Depth 4
	mov	x4, x2
	mov	x5, x7
	cmp	x7, #1
	b.ge	.LBB28_359
	b	.LBB28_355
	.p2align	5, , 16
.LBB28_357:                             //   in Loop: Header=BB28_359 Depth=4
	ldur	x6, [x29, #-64]                 // 8-byte Folded Reload
	add	x15, x9, #1
	add	x1, x10, #1
	cmp	x15, x6
	ldur	x15, [x29, #-56]                // 8-byte Folded Reload
	csinc	x6, xzr, x9, eq
	cmp	x1, x15
	csel	x1, xzr, xzr, ne
	csel	x15, xzr, xzr, ne
	csinc	x10, xzr, x10, eq
	csel	x9, x9, x6, ne
.LBB28_358:                             //   in Loop: Header=BB28_359 Depth=4
	add	x4, x4, x22
	subs	x5, x5, #1
	b.eq	.LBB28_355
.LBB28_359:                             //   Parent Loop BB28_347 Depth=1
                                        //     Parent Loop BB28_350 Depth=2
                                        //       Parent Loop BB28_356 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x6, [x30, #248]
	mul	x19, x9, x27
	madd	x6, x1, x24, x6
	ldr	x7, [x20, #248]
	ldrh	w7, [x7, x4]
	add	x1, x1, #1
	madd	x6, x15, x28, x6
	madd	x6, x10, x26, x6
	strh	w7, [x6, x19]
	ldur	x7, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x1, x7
	b.ne	.LBB28_358
// %bb.360:                             //   in Loop: Header=BB28_359 Depth=4
	ldur	x1, [x29, #-40]                 // 8-byte Folded Reload
	add	x15, x15, #1
	cmp	x15, x1
	b.eq	.LBB28_357
// %bb.361:                             //   in Loop: Header=BB28_359 Depth=4
	mov	x1, xzr
	b	.LBB28_358
.LBB28_362:                             // %.preheader688.i
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.363:                             // %.preheader687.lr.ph.i
	str	xzr, [sp, #64]                  // 8-byte Folded Spill
	mov	x9, xzr
	mov	x10, xzr
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-40]                // 8-byte Folded Reload
	mov	x16, xzr
	mov	x7, xzr
	mov	w17, #2004877312                // =0x77800000
	mov	w0, #142606336                  // =0x8800000
	mov	w1, #125829120                  // =0x7800000
	mov	w2, #1073741824                 // =0x40000000
	mov	w3, #-16777216                  // =0xff000000
	mov	w4, #32256                      // =0x7e00
	sxtw	x12, w8
	mul	x8, x11, x12
	str	x8, [sp, #104]                  // 8-byte Folded Spill
	ldp	x13, x8, [x29, #-96]            // 16-byte Folded Reload
	sxtw	x8, w8
	stur	x8, [x29, #-56]                 // 8-byte Folded Spill
	sub	x8, x13, x8
	mul	x8, x8, x11
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	str	x12, [sp, #112]                 // 8-byte Folded Spill
	mul	x8, x8, x12
	str	x8, [sp, #88]                   // 8-byte Folded Spill
	b	.LBB28_365
	.p2align	5, , 16
.LBB28_364:                             // %._crit_edge814.i
                                        //   in Loop: Header=BB28_365 Depth=1
	ldp	x8, x12, [sp, #80]              // 16-byte Folded Reload
	add	x12, x12, x8
	ldr	x11, [sp, #64]                  // 8-byte Folded Reload
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x11, x11, #1
	str	x12, [sp, #88]                  // 8-byte Folded Spill
	str	x11, [sp, #64]                  // 8-byte Folded Spill
	cmp	x11, x8
	b.eq	.LBB28_562
.LBB28_365:                             // %.preheader687.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_368 Depth 2
                                        //       Child Loop BB28_369 Depth 3
                                        //       Child Loop BB28_374 Depth 3
                                        //         Child Loop BB28_378 Depth 4
                                        //       Child Loop BB28_372 Depth 3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_364
// %bb.366:                             // %.lr.ph813.i
                                        //   in Loop: Header=BB28_365 Depth=1
	ldr	x12, [sp, #88]                  // 8-byte Folded Reload
	mov	x11, xzr
	b	.LBB28_368
	.p2align	5, , 16
.LBB28_367:                             // %._crit_edge803.i96
                                        //   in Loop: Header=BB28_368 Depth=2
	ldp	x12, x11, [x29, #-104]          // 16-byte Folded Reload
	add	x11, x11, #1
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x12, x12, x8
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x11, x8
	b.eq	.LBB28_364
.LBB28_368:                             //   Parent Loop BB28_365 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_369 Depth 3
                                        //       Child Loop BB28_374 Depth 3
                                        //         Child Loop BB28_378 Depth 4
                                        //       Child Loop BB28_372 Depth 3
	stur	x11, [x29, #-96]                // 8-byte Folded Spill
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	ldr	x8, [sp, #104]                  // 8-byte Folded Reload
	add	x7, x7, x8
	cmp	x7, x25
	b.lt	.LBB28_370
	.p2align	5, , 16
.LBB28_369:                             // %.lr.ph763.i90
                                        //   Parent Loop BB28_365 Depth=1
                                        //     Parent Loop BB28_368 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x15, x9, #1
	add	x19, x10, #1
	add	x8, x16, #1
	cmp	x15, x11
	sub	x7, x7, x25
	csinc	x15, xzr, x9, eq
	cmp	x19, x21
	csel	x19, xzr, xzr, ne
	csinc	x20, xzr, x10, eq
	csel	x15, x9, x15, ne
	cmp	x8, x24
	csinc	x16, x19, x16, eq
	csel	x10, x10, x20, ne
	csel	x9, x9, x15, ne
	cmp	x7, x25
	b.ge	.LBB28_369
.LBB28_370:                             // %.preheader686.i
                                        //   in Loop: Header=BB28_368 Depth=2
	stur	x12, [x29, #-104]               // 8-byte Folded Spill
	ldp	x11, x8, [x29, #-88]            // 16-byte Folded Reload
	ldr	x20, [sp, #112]                 // 8-byte Folded Reload
	mov	x19, x12
	cmp	w8, w11
	b.lt	.LBB28_374
.LBB28_371:                             // %._crit_edge790.i
                                        //   in Loop: Header=BB28_368 Depth=2
	ldr	x8, [sp, #96]                   // 8-byte Folded Reload
	add	x7, x7, x8
	ldur	x14, [x29, #-32]                // 8-byte Folded Reload
	cmp	x7, x25
	b.lt	.LBB28_367
	.p2align	5, , 16
.LBB28_372:                             // %.lr.ph802.i94
                                        //   Parent Loop BB28_365 Depth=1
                                        //     Parent Loop BB28_368 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x11, x9, #1
	add	x12, x10, #1
	add	x8, x16, #1
	cmp	x11, x14
	sub	x7, x7, x25
	csinc	x11, xzr, x9, eq
	cmp	x12, x21
	csel	x12, xzr, xzr, ne
	csinc	x13, xzr, x10, eq
	csel	x11, x9, x11, ne
	cmp	x8, x24
	csinc	x16, x12, x16, eq
	csel	x10, x10, x13, ne
	csel	x9, x9, x11, ne
	cmp	x7, x25
	b.ge	.LBB28_372
	b	.LBB28_367
	.p2align	5, , 16
.LBB28_373:                             // %._crit_edge774.i
                                        //   in Loop: Header=BB28_374 Depth=3
	ldp	x8, x11, [x29, #-56]            // 16-byte Folded Reload
	add	x20, x20, #1
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	add	x19, x19, x11
	cmp	x20, x8
	b.eq	.LBB28_371
.LBB28_374:                             // %.preheader685.i
                                        //   Parent Loop BB28_365 Depth=1
                                        //     Parent Loop BB28_368 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_378 Depth 4
	ldur	x12, [x29, #-40]                // 8-byte Folded Reload
	cmp	x12, #1
	b.lt	.LBB28_373
// %bb.375:                             // %.lr.ph773.i
                                        //   in Loop: Header=BB28_374 Depth=3
	ldur	x11, [x29, #-24]                // 8-byte Folded Reload
	ldr	x8, [x30, #248]
	add	x15, x8, x19
	ldr	x30, [x11, #248]
	mov	x8, x12
	b	.LBB28_378
	.p2align	5, , 16
.LBB28_376:                             //   in Loop: Header=BB28_378 Depth=4
	mov	x7, xzr
.LBB28_377:                             //   in Loop: Header=BB28_378 Depth=4
	subs	x8, x8, #1
	add	x15, x15, x23
	b.eq	.LBB28_373
.LBB28_378:                             //   Parent Loop BB28_365 Depth=1
                                        //     Parent Loop BB28_368 Depth=2
                                        //       Parent Loop BB28_374 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x15]
	mul	x6, x9, x28
	fabs	s1, s0
	fmov	s2, w17
	fmov	w12, s0
	fmul	s1, s1, s2
	fmov	s2, w0
	and	w11, w12, #0x7f800000
	ubfx	w14, w12, #23, #8
	lsl	w13, w12, #1
	lsr	w12, w12, #31
	add	w11, w11, w1
	cmp	w14, #113
	csel	w11, w2, w11, lo
	cmp	w13, w3
	fmul	s0, s1, s2
	fmov	s1, w11
	madd	x11, x7, x22, x30
	add	x7, x7, #1
	madd	x11, x16, x26, x11
	fadd	s0, s0, s1
	madd	x11, x10, x27, x11
	fmov	w14, s0
	lsr	w5, w14, #13
	and	w14, w14, #0xfff
	and	w5, w5, #0x7c00
	add	w13, w5, w14
	csel	w13, w4, w13, hi
	orr	w12, w13, w12, lsl #15
	strh	w12, [x11, x6]
	cmp	x7, x25
	b.ne	.LBB28_377
// %bb.379:                             //   in Loop: Header=BB28_378 Depth=4
	add	x16, x16, #1
	cmp	x16, x24
	b.ne	.LBB28_376
// %bb.380:                             //   in Loop: Header=BB28_378 Depth=4
	add	x10, x10, #1
	cmp	x10, x21
	b.ne	.LBB28_382
// %bb.381:                             //   in Loop: Header=BB28_378 Depth=4
	ldur	x12, [x29, #-32]                // 8-byte Folded Reload
	add	x11, x9, #1
	mov	x7, xzr
	mov	x16, xzr
	mov	x10, xzr
	cmp	x11, x12
	csinc	x9, xzr, x9, eq
	b	.LBB28_377
.LBB28_382:                             //   in Loop: Header=BB28_378 Depth=4
	mov	x7, xzr
	mov	x16, xzr
	b	.LBB28_377
.LBB28_383:                             // %.preheader683.i
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	ldur	x20, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.384:                             // %.preheader682.lr.ph.i
	ldp	x13, x11, [x29, #-88]           // 16-byte Folded Reload
	mov	x8, xzr
	ldur	x14, [x29, #-96]                // 8-byte Folded Reload
	mov	x9, xzr
	mov	x10, xzr
	ldp	x16, x17, [x29, #-48]           // 16-byte Folded Reload
	mov	x15, xzr
	ldur	x30, [x29, #-24]                // 8-byte Folded Reload
	mov	x1, xzr
	sxtw	x13, w13
	sxtw	x11, w11
	sub	x14, x14, x13
	mul	x12, x17, x11
	mul	x16, x16, x11
	mul	x14, x14, x17
	b	.LBB28_386
	.p2align	5, , 16
.LBB28_385:                             // %._crit_edge875.i
                                        //   in Loop: Header=BB28_386 Depth=1
	ldr	x17, [sp, #80]                  // 8-byte Folded Reload
	add	x8, x8, #1
	add	x16, x16, x17
	ldr	x17, [sp, #72]                  // 8-byte Folded Reload
	cmp	x8, x17
	b.eq	.LBB28_562
.LBB28_386:                             // %.preheader682.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_389 Depth 2
                                        //       Child Loop BB28_390 Depth 3
                                        //       Child Loop BB28_395 Depth 3
                                        //         Child Loop BB28_398 Depth 4
                                        //       Child Loop BB28_393 Depth 3
	ldur	x17, [x29, #-72]                // 8-byte Folded Reload
	cmp	x17, #1
	b.lt	.LBB28_385
// %bb.387:                             // %.lr.ph874.i
                                        //   in Loop: Header=BB28_386 Depth=1
	mov	x17, xzr
	mov	x0, x16
	b	.LBB28_389
	.p2align	5, , 16
.LBB28_388:                             // %._crit_edge864.i
                                        //   in Loop: Header=BB28_389 Depth=2
	ldp	x2, x3, [x29, #-72]             // 16-byte Folded Reload
	add	x17, x17, #1
	add	x0, x0, x3
	cmp	x17, x2
	b.eq	.LBB28_385
.LBB28_389:                             //   Parent Loop BB28_386 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_390 Depth 3
                                        //       Child Loop BB28_395 Depth 3
                                        //         Child Loop BB28_398 Depth 4
                                        //       Child Loop BB28_393 Depth 3
	ldur	x6, [x29, #-32]                 // 8-byte Folded Reload
	add	x1, x1, x12
	cmp	x1, x25
	b.lt	.LBB28_391
	.p2align	5, , 16
.LBB28_390:                             // %.lr.ph830.i
                                        //   Parent Loop BB28_386 Depth=1
                                        //     Parent Loop BB28_389 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x15, #1
	cmp	x3, x6
	sub	x1, x1, x25
	csinc	x3, xzr, x9, eq
	cmp	x4, x21
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x24
	csinc	x15, x4, x15, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x25
	b.ge	.LBB28_390
.LBB28_391:                             // %.preheader681.i
                                        //   in Loop: Header=BB28_389 Depth=2
	ldp	x5, x4, [x29, #-88]             // 16-byte Folded Reload
	mov	x2, x0
	mov	x3, x11
	cmp	w4, w5
	b.lt	.LBB28_395
.LBB28_392:                             // %._crit_edge851.i
                                        //   in Loop: Header=BB28_389 Depth=2
	ldur	x6, [x29, #-32]                 // 8-byte Folded Reload
	add	x1, x1, x14
	cmp	x1, x25
	b.lt	.LBB28_388
	.p2align	5, , 16
.LBB28_393:                             // %.lr.ph863.i
                                        //   Parent Loop BB28_386 Depth=1
                                        //     Parent Loop BB28_389 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add	x3, x9, #1
	add	x4, x10, #1
	add	x2, x15, #1
	cmp	x3, x6
	sub	x1, x1, x25
	csinc	x3, xzr, x9, eq
	cmp	x4, x21
	csel	x4, xzr, xzr, ne
	csinc	x5, xzr, x10, eq
	csel	x3, x9, x3, ne
	cmp	x2, x24
	csinc	x15, x4, x15, eq
	csel	x10, x10, x5, ne
	csel	x9, x9, x3, ne
	cmp	x1, x25
	b.ge	.LBB28_393
	b	.LBB28_388
	.p2align	5, , 16
.LBB28_394:                             // %._crit_edge841.i
                                        //   in Loop: Header=BB28_395 Depth=3
	ldur	x4, [x29, #-48]                 // 8-byte Folded Reload
	add	x3, x3, #1
	add	x2, x2, x4
	cmp	x3, x13
	b.eq	.LBB28_392
.LBB28_395:                             // %.preheader680.i
                                        //   Parent Loop BB28_386 Depth=1
                                        //     Parent Loop BB28_389 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_398 Depth 4
	ldur	x6, [x29, #-40]                 // 8-byte Folded Reload
	mov	x4, x2
	mov	x5, x6
	cmp	x6, #1
	b.ge	.LBB28_398
	b	.LBB28_394
	.p2align	5, , 16
.LBB28_396:                             //   in Loop: Header=BB28_398 Depth=4
	ldur	x6, [x29, #-32]                 // 8-byte Folded Reload
	add	x15, x9, #1
	add	x1, x10, #1
	cmp	x15, x6
	csinc	x6, xzr, x9, eq
	cmp	x1, x21
	csel	x1, xzr, xzr, ne
	csel	x15, xzr, xzr, ne
	csinc	x10, xzr, x10, eq
	csel	x9, x9, x6, ne
.LBB28_397:                             //   in Loop: Header=BB28_398 Depth=4
	add	x4, x4, x23
	subs	x5, x5, #1
	b.eq	.LBB28_394
.LBB28_398:                             //   Parent Loop BB28_386 Depth=1
                                        //     Parent Loop BB28_389 Depth=2
                                        //       Parent Loop BB28_395 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x6, [x30, #248]
	mul	x19, x9, x28
	madd	x6, x1, x22, x6
	ldr	x7, [x20, #248]
	ldr	w7, [x7, x4]
	add	x1, x1, #1
	madd	x6, x15, x26, x6
	madd	x6, x10, x27, x6
	str	w7, [x6, x19]
	cmp	x1, x25
	b.ne	.LBB28_397
// %bb.399:                             //   in Loop: Header=BB28_398 Depth=4
	add	x15, x15, #1
	cmp	x15, x24
	b.eq	.LBB28_396
// %bb.400:                             //   in Loop: Header=BB28_398 Depth=4
	mov	x1, xzr
	b	.LBB28_397
.LBB28_401:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.402:                             // %.preheader576.lr.ph.i
	ldur	x8, [x29, #-24]                 // 8-byte Folded Reload
	mov	x16, xzr
	mov	x23, xzr
	sub	x14, x3, #1
	and	x15, x3, #0x3
	ldr	x9, [x8, #248]
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	lsl	x1, x22, #2
	sxtw	x10, w8
	ldur	x8, [x29, #-80]                 // 8-byte Folded Reload
	add	x4, x9, #4
	mul	x11, x3, x10
	sxtw	x12, w8
	sub	x8, x21, x12
	mul	x13, x8, x3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	mul	x6, x8, x10
	and	x8, x3, #0x7ffffffffffffffc
	neg	x3, x8
	add	x17, x22, x6
	add	x2, x6, x22, lsl #1
	add	x20, x17, x22, lsl #1
	b	.LBB28_404
	.p2align	5, , 16
.LBB28_403:                             // %._crit_edge728.i
                                        //   in Loop: Header=BB28_404 Depth=1
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x2, x2, x8
	ldur	x20, [x29, #-56]                // 8-byte Folded Reload
	ldur	x6, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x16, [x29, #-24]                // 8-byte Folded Reload
	add	x20, x20, x8
	add	x17, x17, x8
	add	x6, x6, x8
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x16, x16, #1
	cmp	x16, x8
	b.eq	.LBB28_562
.LBB28_404:                             // %.preheader576.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_407 Depth 2
                                        //       Child Loop BB28_410 Depth 3
                                        //         Child Loop BB28_414 Depth 4
                                        //         Child Loop BB28_417 Depth 4
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	stur	x16, [x29, #-24]                // 8-byte Folded Spill
	stur	x6, [x29, #-40]                 // 8-byte Folded Spill
	stur	x20, [x29, #-56]                // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_403
// %bb.405:                             // %.lr.ph727.i
                                        //   in Loop: Header=BB28_404 Depth=1
	mov	x5, xzr
	mov	x7, x17
	mov	x19, x2
	b	.LBB28_407
	.p2align	5, , 16
.LBB28_406:                             // %._crit_edge723.i
                                        //   in Loop: Header=BB28_407 Depth=2
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	add	x23, x21, x13
	add	x5, x5, #1
	add	x20, x20, x8
	add	x19, x19, x8
	add	x7, x7, x8
	add	x6, x6, x8
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x5, x8
	b.eq	.LBB28_403
.LBB28_407:                             //   Parent Loop BB28_404 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_410 Depth 3
                                        //         Child Loop BB28_414 Depth 4
                                        //         Child Loop BB28_417 Depth 4
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x21, x23, x11
	ldur	x16, [x29, #-80]                // 8-byte Folded Reload
	cmp	w8, w16
	b.ge	.LBB28_406
// %bb.408:                             // %.preheader575.lr.ph.i
                                        //   in Loop: Header=BB28_407 Depth=2
	mov	x23, x6
	mov	x24, x7
	mov	x25, x19
	mov	x26, x20
	mov	x27, x10
	b	.LBB28_410
	.p2align	5, , 16
.LBB28_409:                             // %._crit_edge713.i
                                        //   in Loop: Header=BB28_410 Depth=3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	add	x27, x27, #1
	add	x26, x26, x8
	add	x25, x25, x8
	add	x24, x24, x8
	add	x23, x23, x8
	cmp	x27, x12
	b.eq	.LBB28_406
.LBB28_410:                             // %.preheader575.i
                                        //   Parent Loop BB28_404 Depth=1
                                        //     Parent Loop BB28_407 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_414 Depth 4
                                        //         Child Loop BB28_417 Depth 4
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_409
// %bb.411:                             // %.lr.ph712.i
                                        //   in Loop: Header=BB28_410 Depth=3
	ldr	x16, [x30, #248]
	cmp	x14, #3
	b.hs	.LBB28_413
// %bb.412:                             //   in Loop: Header=BB28_410 Depth=3
	mov	x8, xzr
	cbnz	x15, .LBB28_416
	b	.LBB28_409
	.p2align	5, , 16
.LBB28_413:                             // %.lr.ph712.i.new.preheader
                                        //   in Loop: Header=BB28_410 Depth=3
	add	x8, x4, x21, lsl #1
	mov	x30, xzr
	mov	x28, x16
	.p2align	5, , 16
.LBB28_414:                             // %.lr.ph712.i.new
                                        //   Parent Loop BB28_404 Depth=1
                                        //     Parent Loop BB28_407 Depth=2
                                        //       Parent Loop BB28_410 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w0, [x28, x23]
	sub	x30, x30, #4
	sturh	w0, [x8, #-4]
	ldrh	w0, [x28, x24]
	sturh	w0, [x8, #-2]
	ldrh	w0, [x28, x25]
	strh	w0, [x8]
	ldrh	w0, [x28, x26]
	add	x28, x28, x1
	strh	w0, [x8, #2]
	add	x8, x8, #8
	cmp	x3, x30
	b.ne	.LBB28_414
// %bb.415:                             // %._crit_edge713.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_410 Depth=3
	neg	x8, x30
	sub	x21, x21, x30
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	cbz	x15, .LBB28_409
.LBB28_416:                             // %.epil.preheader605.preheader
                                        //   in Loop: Header=BB28_410 Depth=3
	mul	x8, x22, x8
	add	x8, x16, x8
	mov	x16, x15
	.p2align	5, , 16
.LBB28_417:                             // %.epil.preheader605
                                        //   Parent Loop BB28_404 Depth=1
                                        //     Parent Loop BB28_407 Depth=2
                                        //       Parent Loop BB28_410 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w28, [x8, x23]
	add	x8, x8, x22
	subs	x16, x16, #1
	strh	w28, [x9, x21, lsl #1]
	add	x21, x21, #1
	b.ne	.LBB28_417
	b	.LBB28_409
.LBB28_418:
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.419:                             // %.preheader667.lr.ph.i
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	mov	x27, xzr
	mov	x11, xzr
	mov	x8, xzr
	lsl	x21, x9, #2
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldr	x20, [x9, #248]
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	sxtw	x12, w9
	mul	x9, x21, x12
	stur	x9, [x29, #-40]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	sxtw	x13, w9
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	sub	x9, x9, x13
	mul	x9, x9, x21
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	sub	x9, x13, x12
	stur	x9, [x29, #-96]                 // 8-byte Folded Spill
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	mul	x14, x9, x12
	lsl	x26, x9, #1
	add	x9, x20, x21
	str	x14, [sp, #88]                  // 8-byte Folded Spill
	stur	x12, [x29, #-32]                // 8-byte Folded Spill
	add	x12, x12, #1
	str	x13, [sp, #96]                  // 8-byte Folded Spill
	str	x12, [sp, #64]                  // 8-byte Folded Spill
	sub	x12, x13, #1
	stur	x12, [x29, #-104]               // 8-byte Folded Spill
	str	x9, [sp, #112]                  // 8-byte Folded Spill
	b	.LBB28_421
	.p2align	5, , 16
.LBB28_420:                             // %._crit_edge973.i121
                                        //   in Loop: Header=BB28_421 Depth=1
	ldp	x11, x27, [sp, #48]             // 16-byte Folded Reload
	add	x11, x11, #1
	ldr	x9, [sp, #80]                   // 8-byte Folded Reload
	add	x27, x27, x9
	ldr	x9, [sp, #72]                   // 8-byte Folded Reload
	cmp	x11, x9
	b.eq	.LBB28_562
.LBB28_421:                             // %.preheader667.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_424 Depth 2
                                        //       Child Loop BB28_429 Depth 3
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	stp	x11, x27, [sp, #48]             // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_420
// %bb.422:                             // %.lr.ph972.i123
                                        //   in Loop: Header=BB28_421 Depth=1
	ldr	x9, [sp, #80]                   // 8-byte Folded Reload
	mov	x22, xzr
	mul	x9, x11, x9
	str	x9, [sp, #104]                  // 8-byte Folded Spill
	stur	x27, [x29, #-24]                // 8-byte Folded Spill
	b	.LBB28_424
	.p2align	5, , 16
.LBB28_423:                             // %._crit_edge968.i
                                        //   in Loop: Header=BB28_424 Depth=2
	ldp	x9, x8, [x29, #-64]             // 16-byte Folded Reload
	add	x22, x22, #1
	ldur	x11, [x29, #-24]                // 8-byte Folded Reload
	add	x11, x11, x9
	ldur	x9, [x29, #-72]                 // 8-byte Folded Reload
	add	x8, x28, x8
	stur	x11, [x29, #-24]                // 8-byte Folded Spill
	cmp	x22, x9
	b.eq	.LBB28_420
.LBB28_424:                             //   Parent Loop BB28_421 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_429 Depth 3
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	add	x28, x8, x9
	ldp	x9, x8, [x29, #-88]             // 16-byte Folded Reload
	cmp	w8, w9
	b.ge	.LBB28_423
// %bb.425:                             // %.lr.ph967.i
                                        //   in Loop: Header=BB28_424 Depth=2
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	tbz	w9, #0, .LBB28_427
// %bb.426:                             // %.prol.loopexit.unr-lcssa
                                        //   in Loop: Header=BB28_424 Depth=2
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x0, x20, x28
	mov	x2, x21
	ldr	x9, [x10, #248]
	mul	x8, x22, x8
	ldr	x10, [sp, #88]                  // 8-byte Folded Reload
	add	x9, x9, x10
	add	x8, x9, x8
	ldr	x9, [sp, #104]                  // 8-byte Folded Reload
	add	x1, x8, x9
	bl	memcpy
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x28, x21
	ldr	x8, [sp, #64]                   // 8-byte Folded Reload
.LBB28_427:                             // %.prol.loopexit
                                        //   in Loop: Header=BB28_424 Depth=2
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-104]               // 8-byte Folded Reload
	ldr	x27, [sp, #112]                 // 8-byte Folded Reload
	cmp	x11, x9
	b.eq	.LBB28_423
// %bb.428:                             // %.lr.ph967.i.new.preheader
                                        //   in Loop: Header=BB28_424 Depth=2
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	sub	x25, x9, x8
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-24]                // 8-byte Folded Reload
	mul	x8, x9, x8
	add	x9, x9, x8
	add	x19, x11, x8
	add	x24, x11, x9
	.p2align	5, , 16
.LBB28_429:                             // %.lr.ph967.i.new
                                        //   Parent Loop BB28_421 Depth=1
                                        //     Parent Loop BB28_424 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x10, #248]
	add	x0, x20, x28
	mov	x2, x21
	add	x1, x8, x19
	bl	memcpy
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	add	x0, x27, x28
	mov	x2, x21
	add	x23, x28, x21
	ldr	x8, [x8, #248]
	add	x1, x8, x24
	bl	memcpy
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	add	x28, x23, x21
	subs	x25, x25, #2
	add	x24, x24, x26
	add	x19, x19, x26
	b.ne	.LBB28_429
	b	.LBB28_423
.LBB28_430:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.431:                             // %.preheader570.lr.ph.i
	ldur	x10, [x29, #-96]                // 8-byte Folded Reload
	adrp	x1, :got:ggml_table_f32_f16
	and	x14, x15, #0x3
	ldp	x12, x17, [x29, #-80]           // 16-byte Folded Reload
	mov	x8, xzr
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	mov	x5, xzr
	sxtw	x10, w10
	sxtw	x12, w12
	ldr	x9, [x9, #248]
	ldr	x1, [x1, :got_lo12:ggml_table_f32_f16]
	sub	x13, x21, x12
	mul	x17, x17, x10
	mul	x11, x15, x10
	mul	x13, x13, x15
	and	x15, x15, #0x7ffffffffffffffc
	neg	x15, x15
	add	x16, x9, #8
	add	x0, x17, #4
	b	.LBB28_433
.LBB28_432:                             // %._crit_edge773.i
                                        //   in Loop: Header=BB28_433 Depth=1
	ldr	x2, [sp, #72]                   // 8-byte Folded Reload
	add	x8, x8, #1
	add	x0, x0, x2
	add	x17, x17, x2
	ldur	x2, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, x2
	b.eq	.LBB28_562
.LBB28_433:                             // %.preheader570.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_436 Depth 2
                                        //       Child Loop BB28_439 Depth 3
                                        //         Child Loop BB28_443 Depth 4
                                        //         Child Loop BB28_446 Depth 4
	ldur	x2, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x2, #1
	b.lt	.LBB28_432
// %bb.434:                             // %.lr.ph772.i
                                        //   in Loop: Header=BB28_433 Depth=1
	mov	x2, xzr
	mov	x3, x17
	mov	x4, x0
	b	.LBB28_436
	.p2align	5, , 16
.LBB28_435:                             // %._crit_edge764.i
                                        //   in Loop: Header=BB28_436 Depth=2
	ldur	x6, [x29, #-88]                 // 8-byte Folded Reload
	add	x5, x5, x13
	add	x2, x2, #1
	add	x4, x4, x6
	add	x3, x3, x6
	ldur	x6, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x2, x6
	b.eq	.LBB28_432
.LBB28_436:                             //   Parent Loop BB28_433 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_439 Depth 3
                                        //         Child Loop BB28_443 Depth 4
                                        //         Child Loop BB28_446 Depth 4
	ldur	x6, [x29, #-96]                 // 8-byte Folded Reload
	add	x5, x5, x11
	ldur	x7, [x29, #-80]                 // 8-byte Folded Reload
	cmp	w6, w7
	b.ge	.LBB28_435
// %bb.437:                             // %.lr.ph763.i
                                        //   in Loop: Header=BB28_436 Depth=2
	ldr	x7, [x30, #248]
	mov	x19, x10
	add	x6, x7, x4
	add	x7, x7, x3
	b	.LBB28_439
	.p2align	5, , 16
.LBB28_438:                             // %._crit_edge758.i
                                        //   in Loop: Header=BB28_439 Depth=3
	ldur	x20, [x29, #-72]                // 8-byte Folded Reload
	add	x19, x19, #1
	add	x6, x6, x20
	add	x7, x7, x20
	cmp	x19, x12
	b.eq	.LBB28_435
.LBB28_439:                             //   Parent Loop BB28_433 Depth=1
                                        //     Parent Loop BB28_436 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_443 Depth 4
                                        //         Child Loop BB28_446 Depth 4
	ldur	x20, [x29, #-32]                // 8-byte Folded Reload
	cmp	x20, #1
	b.lt	.LBB28_438
// %bb.440:                             // %.lr.ph757.i.preheader
                                        //   in Loop: Header=BB28_439 Depth=3
	cmp	x20, #4
	b.hs	.LBB28_442
// %bb.441:                             //   in Loop: Header=BB28_439 Depth=3
	mov	x20, xzr
	cbnz	x14, .LBB28_445
	b	.LBB28_438
	.p2align	5, , 16
.LBB28_442:                             // %.lr.ph757.i.preheader765
                                        //   in Loop: Header=BB28_439 Depth=3
	add	x21, x16, x5, lsl #2
	mov	x20, xzr
	mov	x22, x6
	.p2align	5, , 16
.LBB28_443:                             // %.lr.ph757.i
                                        //   Parent Loop BB28_433 Depth=1
                                        //     Parent Loop BB28_436 Depth=2
                                        //       Parent Loop BB28_439 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w23, [x22, #-4]
	sub	x20, x20, #4
	ldr	s0, [x1, x23, lsl #2]
	ldurh	w23, [x22, #-2]
	stur	s0, [x21, #-8]
	ldr	s0, [x1, x23, lsl #2]
	ldrh	w23, [x22]
	stur	s0, [x21, #-4]
	ldr	s0, [x1, x23, lsl #2]
	ldrh	w23, [x22, #2]
	add	x22, x22, #8
	str	s0, [x21]
	ldr	s0, [x1, x23, lsl #2]
	str	s0, [x21, #4]
	add	x21, x21, #16
	cmp	x15, x20
	b.ne	.LBB28_443
// %bb.444:                             // %._crit_edge758.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_439 Depth=3
	sub	x5, x5, x20
	neg	x20, x20
	cbz	x14, .LBB28_438
.LBB28_445:                             // %.lr.ph757.i.epil.preheader
                                        //   in Loop: Header=BB28_439 Depth=3
	add	x20, x7, x20, lsl #1
	mov	x21, x14
	.p2align	5, , 16
.LBB28_446:                             // %.lr.ph757.i.epil
                                        //   Parent Loop BB28_433 Depth=1
                                        //     Parent Loop BB28_436 Depth=2
                                        //       Parent Loop BB28_439 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	ldr	s0, [x1, x22, lsl #2]
	str	s0, [x9, x5, lsl #2]
	add	x5, x5, #1
	b.ne	.LBB28_446
	b	.LBB28_438
.LBB28_447:
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	lsl	x9, x0, #5
	ldr	x8, [x8, x9]
	stur	x8, [x29, #-40]                 // 8-byte Folded Spill
	cbz	x8, .LBB28_581
// %bb.448:
	ldr	x8, [sp, #112]                  // 8-byte Folded Reload
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	x20, [x8, #16]
	bl	ggml_blck_size
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	ldur	x2, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.449:                             // %.preheader566.lr.ph.i
	ldur	x10, [x29, #-104]               // 8-byte Folded Reload
	add	x9, x2, #16
	mov	x12, xzr
	mov	x8, xzr
	mul	x9, x9, x10
	and	x10, x2, #0x7ffffffffffffffc
	neg	x27, x10
	add	x22, x20, x9, lsl #2
	sdiv	x9, x2, x0
	adrp	x20, :got:ggml_table_f32_f16
	add	x14, x22, #8
	mul	x23, x9, x24
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldr	x24, [x9, #248]
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	sxtw	x13, w9
	mul	x9, x23, x13
	str	x9, [sp, #96]                   // 8-byte Folded Spill
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	ldur	x10, [x29, #-72]                // 8-byte Folded Reload
	str	x13, [sp, #104]                 // 8-byte Folded Spill
	stur	x14, [x29, #-24]                // 8-byte Folded Spill
	ldr	x20, [x20, :got_lo12:ggml_table_f32_f16]
	sub	x9, x21, w9, sxtw
	mul	x26, x10, x13
	and	x21, x2, #0x3
	mul	x9, x23, x9
	add	x28, x26, #4
	str	x9, [sp, #88]                   // 8-byte Folded Spill
	b	.LBB28_451
.LBB28_450:                             // %._crit_edge803.i
                                        //   in Loop: Header=BB28_451 Depth=1
	ldp	x9, x12, [sp, #72]              // 16-byte Folded Reload
	add	x12, x12, #1
	ldp	x28, x26, [sp, #56]             // 16-byte Folded Reload
	add	x28, x28, x9
	add	x26, x26, x9
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x12, x9
	b.eq	.LBB28_562
.LBB28_451:                             // %.preheader566.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_454 Depth 2
                                        //       Child Loop BB28_456 Depth 3
                                        //         Child Loop BB28_460 Depth 4
                                        //         Child Loop BB28_463 Depth 4
	str	x12, [sp, #80]                  // 8-byte Folded Spill
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	stp	x28, x26, [sp, #56]             // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_450
// %bb.452:                             // %.lr.ph802.i
                                        //   in Loop: Header=BB28_451 Depth=1
	mov	x12, xzr
	b	.LBB28_454
	.p2align	5, , 16
.LBB28_453:                             // %._crit_edge798.i
                                        //   in Loop: Header=BB28_454 Depth=2
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	ldr	x28, [sp, #112]                 // 8-byte Folded Reload
	add	x28, x28, x9
	ldur	x26, [x29, #-104]               // 8-byte Folded Reload
	ldr	x8, [sp, #88]                   // 8-byte Folded Reload
	ldur	x12, [x29, #-56]                // 8-byte Folded Reload
	add	x26, x26, x9
	add	x8, x25, x8
	add	x12, x12, #1
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	cmp	x12, x9
	b.eq	.LBB28_450
.LBB28_454:                             //   Parent Loop BB28_451 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_456 Depth 3
                                        //         Child Loop BB28_460 Depth 4
                                        //         Child Loop BB28_463 Depth 4
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	stur	x26, [x29, #-104]               // 8-byte Folded Spill
	ldr	x19, [sp, #104]                 // 8-byte Folded Reload
	str	x28, [sp, #112]                 // 8-byte Folded Spill
	add	x25, x8, x9
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	ldur	x9, [x29, #-80]                 // 8-byte Folded Reload
	cmp	w8, w9
	b.lt	.LBB28_456
	b	.LBB28_453
	.p2align	5, , 16
.LBB28_455:                             // %._crit_edge793.i
                                        //   in Loop: Header=BB28_456 Depth=3
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	add	x1, x24, x25
	mov	x0, x22
	blr	x8
	ldp	x8, x9, [x29, #-80]             // 16-byte Folded Reload
	add	x25, x25, x23
	ldur	x2, [x29, #-32]                 // 8-byte Folded Reload
	add	x19, x19, #1
	add	x28, x28, x9
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	x26, x26, x9
	cmp	w8, w19
	b.eq	.LBB28_453
.LBB28_456:                             //   Parent Loop BB28_451 Depth=1
                                        //     Parent Loop BB28_454 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_460 Depth 4
                                        //         Child Loop BB28_463 Depth 4
	cmp	x2, #1
	b.lt	.LBB28_455
// %bb.457:                             // %.lr.ph792.i.preheader
                                        //   in Loop: Header=BB28_456 Depth=3
	ldr	x8, [x11, #248]
	cmp	x2, #4
	b.hs	.LBB28_459
// %bb.458:                             //   in Loop: Header=BB28_456 Depth=3
	mov	x10, xzr
	cbnz	x21, .LBB28_462
	b	.LBB28_455
	.p2align	5, , 16
.LBB28_459:                             // %.lr.ph792.i.preheader762
                                        //   in Loop: Header=BB28_456 Depth=3
	ldur	x11, [x29, #-24]                // 8-byte Folded Reload
	mov	x9, xzr
	add	x10, x8, x28
	.p2align	5, , 16
.LBB28_460:                             // %.lr.ph792.i
                                        //   Parent Loop BB28_451 Depth=1
                                        //     Parent Loop BB28_454 Depth=2
                                        //       Parent Loop BB28_456 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w12, [x10, #-4]
	sub	x9, x9, #4
	ldr	s0, [x20, x12, lsl #2]
	ldurh	w12, [x10, #-2]
	stur	s0, [x11, #-8]
	ldr	s0, [x20, x12, lsl #2]
	ldrh	w12, [x10]
	stur	s0, [x11, #-4]
	ldr	s0, [x20, x12, lsl #2]
	ldrh	w12, [x10, #2]
	add	x10, x10, #8
	str	s0, [x11]
	ldr	s0, [x20, x12, lsl #2]
	str	s0, [x11, #4]
	add	x11, x11, #16
	cmp	x27, x9
	b.ne	.LBB28_460
// %bb.461:                             // %._crit_edge793.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_456 Depth=3
	neg	x10, x9
	cbz	x21, .LBB28_455
.LBB28_462:                             // %.lr.ph792.i.epil.preheader
                                        //   in Loop: Header=BB28_456 Depth=3
	add	x9, x22, x10, lsl #2
	add	x10, x26, x10, lsl #1
	add	x8, x8, x10
	mov	x10, x21
	.p2align	5, , 16
.LBB28_463:                             // %.lr.ph792.i.epil
                                        //   Parent Loop BB28_451 Depth=1
                                        //     Parent Loop BB28_454 Depth=2
                                        //       Parent Loop BB28_456 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w11, [x8], #2
	subs	x10, x10, #1
	ldr	s0, [x20, x11, lsl #2]
	str	s0, [x9], #4
	b.ne	.LBB28_463
	b	.LBB28_455
.LBB28_464:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.465:                             // %.preheader787.lr.ph.i
	ldur	x12, [x29, #-88]                // 8-byte Folded Reload
	mov	x8, xzr
	mov	x5, xzr
	ldur	x10, [x29, #-104]               // 8-byte Folded Reload
	mov	w15, #142606336                 // =0x8800000
	mov	w17, #125829120                 // =0x7800000
	ldp	x16, x13, [x29, #-48]           // 16-byte Folded Reload
	mov	w0, #1073741824                 // =0x40000000
	ldp	x14, x9, [x29, #-32]            // 16-byte Folded Reload
	mov	w1, #-16777216                  // =0xff000000
	sxtw	x12, w12
	sxtw	x10, w10
	ldr	x9, [x9, #248]
	sub	x13, x13, x12
	mul	x11, x14, x10
	mul	x16, x16, x10
	mul	x13, x13, x14
	mov	w14, #2004877312                // =0x77800000
	mov	w2, #32256                      // =0x7e00
	b	.LBB28_467
.LBB28_466:                             // %._crit_edge1012.i
                                        //   in Loop: Header=BB28_467 Depth=1
	ldr	x3, [sp, #72]                   // 8-byte Folded Reload
	add	x8, x8, #1
	add	x16, x16, x3
	ldur	x3, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, x3
	b.eq	.LBB28_562
.LBB28_467:                             // %.preheader787.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_470 Depth 2
                                        //       Child Loop BB28_473 Depth 3
                                        //         Child Loop BB28_475 Depth 4
	ldur	x3, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x3, #1
	b.lt	.LBB28_466
// %bb.468:                             // %.lr.ph1011.i
                                        //   in Loop: Header=BB28_467 Depth=1
	mov	x3, xzr
	mov	x4, x16
	b	.LBB28_470
	.p2align	5, , 16
.LBB28_469:                             // %._crit_edge1007.i
                                        //   in Loop: Header=BB28_470 Depth=2
	ldur	x6, [x29, #-96]                 // 8-byte Folded Reload
	add	x5, x5, x13
	add	x3, x3, #1
	add	x4, x4, x6
	ldur	x6, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x3, x6
	b.eq	.LBB28_466
.LBB28_470:                             //   Parent Loop BB28_467 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_473 Depth 3
                                        //         Child Loop BB28_475 Depth 4
	ldur	x6, [x29, #-104]                // 8-byte Folded Reload
	add	x5, x5, x11
	ldur	x7, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w6, w7
	b.ge	.LBB28_469
// %bb.471:                             // %.preheader786.lr.ph.i
                                        //   in Loop: Header=BB28_470 Depth=2
	mov	x6, x4
	mov	x7, x10
	b	.LBB28_473
	.p2align	5, , 16
.LBB28_472:                             // %._crit_edge997.i
                                        //   in Loop: Header=BB28_473 Depth=3
	ldur	x19, [x29, #-48]                // 8-byte Folded Reload
	add	x7, x7, #1
	add	x6, x6, x19
	cmp	x7, x12
	b.eq	.LBB28_469
.LBB28_473:                             // %.preheader786.i
                                        //   Parent Loop BB28_467 Depth=1
                                        //     Parent Loop BB28_470 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_475 Depth 4
	ldur	x20, [x29, #-32]                // 8-byte Folded Reload
	cmp	x20, #1
	b.lt	.LBB28_472
// %bb.474:                             // %.lr.ph996.i
                                        //   in Loop: Header=BB28_473 Depth=3
	ldr	x19, [x30, #248]
	add	x19, x19, x6
	.p2align	5, , 16
.LBB28_475:                             //   Parent Loop BB28_467 Depth=1
                                        //     Parent Loop BB28_470 Depth=2
                                        //       Parent Loop BB28_473 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w21, [x19]
	add	x19, x19, x22
	lsl	w23, w21, #16
	fmov	s0, w14
	lsl	w25, w21, #17
	and	w24, w23, #0x7fff0000
	and	w23, w23, #0x7f800000
	fmov	s1, w24
	ubfx	w24, w21, #7, #8
	add	w23, w23, w17
	and	w21, w21, #0x8000
	cmp	w24, #113
	csel	w23, w0, w23, lo
	cmp	w25, w1
	fmul	s0, s1, s0
	fmov	s1, w15
	fmul	s0, s0, s1
	fmov	s1, w23
	fadd	s0, s0, s1
	fmov	w23, s0
	lsr	w24, w23, #13
	and	w23, w23, #0xfff
	and	w24, w24, #0x7c00
	add	w23, w24, w23
	csel	w23, w2, w23, hi
	subs	x20, x20, #1
	orr	w21, w23, w21
	strh	w21, [x9, x5, lsl #1]
	add	x5, x5, #1
	b.ne	.LBB28_475
	b	.LBB28_472
.LBB28_476:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.477:                             // %.preheader784.lr.ph.i
	ldp	x16, x8, [x29, #-32]            // 16-byte Folded Reload
	mov	x0, xzr
	mov	x21, xzr
	lsl	x1, x22, #2
	ldr	x9, [x8, #248]
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	sub	x14, x16, #1
	and	x15, x16, #0x3
	sxtw	x10, w8
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	add	x4, x9, #4
	mul	x11, x16, x10
	sxtw	x12, w8
	ldur	x8, [x29, #-40]                 // 8-byte Folded Reload
	sub	x8, x8, x12
	mul	x13, x8, x16
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	mul	x6, x8, x10
	and	x8, x16, #0x7ffffffffffffffc
	neg	x3, x8
	add	x17, x22, x6
	add	x2, x6, x22, lsl #1
	add	x20, x17, x22, lsl #1
	b	.LBB28_479
.LBB28_478:                             // %._crit_edge1034.i
                                        //   in Loop: Header=BB28_479 Depth=1
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	add	x2, x2, x8
	ldur	x20, [x29, #-72]                // 8-byte Folded Reload
	ldur	x6, [x29, #-40]                 // 8-byte Folded Reload
	ldur	x0, [x29, #-24]                 // 8-byte Folded Reload
	add	x20, x20, x8
	add	x17, x17, x8
	add	x6, x6, x8
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	add	x0, x0, #1
	cmp	x0, x8
	b.eq	.LBB28_562
.LBB28_479:                             // %.preheader784.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_482 Depth 2
                                        //       Child Loop BB28_485 Depth 3
                                        //         Child Loop BB28_489 Depth 4
                                        //         Child Loop BB28_492 Depth 4
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	stur	x0, [x29, #-24]                 // 8-byte Folded Spill
	stur	x6, [x29, #-40]                 // 8-byte Folded Spill
	stur	x20, [x29, #-72]                // 8-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB28_478
// %bb.480:                             // %.lr.ph1033.i
                                        //   in Loop: Header=BB28_479 Depth=1
	mov	x5, xzr
	mov	x7, x17
	mov	x19, x2
	b	.LBB28_482
	.p2align	5, , 16
.LBB28_481:                             // %._crit_edge1029.i
                                        //   in Loop: Header=BB28_482 Depth=2
	ldur	x8, [x29, #-96]                 // 8-byte Folded Reload
	add	x21, x21, x13
	add	x5, x5, #1
	add	x20, x20, x8
	add	x19, x19, x8
	add	x7, x7, x8
	add	x6, x6, x8
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x5, x8
	b.eq	.LBB28_478
.LBB28_482:                             //   Parent Loop BB28_479 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_485 Depth 3
                                        //         Child Loop BB28_489 Depth 4
                                        //         Child Loop BB28_492 Depth 4
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	add	x21, x21, x11
	ldur	x16, [x29, #-88]                // 8-byte Folded Reload
	cmp	w8, w16
	b.ge	.LBB28_481
// %bb.483:                             // %.preheader783.lr.ph.i
                                        //   in Loop: Header=BB28_482 Depth=2
	mov	x23, x6
	mov	x24, x7
	mov	x25, x19
	mov	x26, x20
	mov	x27, x10
	b	.LBB28_485
	.p2align	5, , 16
.LBB28_484:                             // %._crit_edge1019.i
                                        //   in Loop: Header=BB28_485 Depth=3
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	add	x27, x27, #1
	add	x26, x26, x8
	add	x25, x25, x8
	add	x24, x24, x8
	add	x23, x23, x8
	cmp	x27, x12
	b.eq	.LBB28_481
.LBB28_485:                             // %.preheader783.i
                                        //   Parent Loop BB28_479 Depth=1
                                        //     Parent Loop BB28_482 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_489 Depth 4
                                        //         Child Loop BB28_492 Depth 4
	ldur	x8, [x29, #-32]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_484
// %bb.486:                             // %.lr.ph1018.i
                                        //   in Loop: Header=BB28_485 Depth=3
	ldr	x16, [x30, #248]
	cmp	x14, #3
	b.hs	.LBB28_488
// %bb.487:                             //   in Loop: Header=BB28_485 Depth=3
	mov	x8, xzr
	cbnz	x15, .LBB28_491
	b	.LBB28_484
	.p2align	5, , 16
.LBB28_488:                             // %.lr.ph1018.i.new.preheader
                                        //   in Loop: Header=BB28_485 Depth=3
	add	x8, x4, x21, lsl #1
	mov	x30, xzr
	mov	x28, x16
	.p2align	5, , 16
.LBB28_489:                             // %.lr.ph1018.i.new
                                        //   Parent Loop BB28_479 Depth=1
                                        //     Parent Loop BB28_482 Depth=2
                                        //       Parent Loop BB28_485 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w0, [x28, x23]
	sub	x30, x30, #4
	sturh	w0, [x8, #-4]
	ldrh	w0, [x28, x24]
	sturh	w0, [x8, #-2]
	ldrh	w0, [x28, x25]
	strh	w0, [x8]
	ldrh	w0, [x28, x26]
	add	x28, x28, x1
	strh	w0, [x8, #2]
	add	x8, x8, #8
	cmp	x3, x30
	b.ne	.LBB28_489
// %bb.490:                             // %._crit_edge1019.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_485 Depth=3
	neg	x8, x30
	sub	x21, x21, x30
	ldur	x30, [x29, #-16]                // 8-byte Folded Reload
	cbz	x15, .LBB28_484
.LBB28_491:                             // %.epil.preheader572.preheader
                                        //   in Loop: Header=BB28_485 Depth=3
	mul	x8, x22, x8
	add	x8, x16, x8
	mov	x16, x15
	.p2align	5, , 16
.LBB28_492:                             // %.epil.preheader572
                                        //   Parent Loop BB28_479 Depth=1
                                        //     Parent Loop BB28_482 Depth=2
                                        //       Parent Loop BB28_485 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w28, [x8, x23]
	add	x8, x8, x22
	subs	x16, x16, #1
	strh	w28, [x9, x21, lsl #1]
	add	x21, x21, #1
	b.ne	.LBB28_492
	b	.LBB28_484
.LBB28_493:
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.494:                             // %.preheader675.lr.ph.i
	ldp	x12, x10, [x29, #-88]           // 16-byte Folded Reload
	mov	x8, xzr
	ldur	x13, [x29, #-96]                // 8-byte Folded Reload
	mov	x5, xzr
	mov	w15, #142606336                 // =0x8800000
	ldp	x16, x14, [x29, #-48]           // 16-byte Folded Reload
	mov	w17, #125829120                 // =0x7800000
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	mov	w0, #1073741824                 // =0x40000000
	mov	w1, #-16777216                  // =0xff000000
	sxtw	x12, w12
	sxtw	x10, w10
	ldr	x9, [x9, #248]
	sub	x13, x13, x12
	mul	x11, x14, x10
	mul	x16, x16, x10
	mul	x13, x13, x14
	ldp	x26, x27, [x29, #-48]           // 16-byte Folded Reload
	mov	w14, #2004877312                // =0x77800000
	mov	w2, #32256                      // =0x7e00
	b	.LBB28_496
.LBB28_495:                             // %._crit_edge925.i
                                        //   in Loop: Header=BB28_496 Depth=1
	ldp	x3, x4, [sp, #72]               // 16-byte Folded Reload
	add	x8, x8, #1
	add	x16, x16, x4
	cmp	x8, x3
	b.eq	.LBB28_562
.LBB28_496:                             // %.preheader675.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_499 Depth 2
                                        //       Child Loop BB28_502 Depth 3
                                        //         Child Loop BB28_504 Depth 4
	ldur	x3, [x29, #-72]                 // 8-byte Folded Reload
	cmp	x3, #1
	b.lt	.LBB28_495
// %bb.497:                             // %.lr.ph924.i
                                        //   in Loop: Header=BB28_496 Depth=1
	mov	x3, xzr
	mov	x4, x16
	b	.LBB28_499
	.p2align	5, , 16
.LBB28_498:                             // %._crit_edge920.i
                                        //   in Loop: Header=BB28_499 Depth=2
	ldp	x6, x7, [x29, #-72]             // 16-byte Folded Reload
	add	x5, x5, x13
	add	x3, x3, #1
	add	x4, x4, x7
	cmp	x3, x6
	b.eq	.LBB28_495
.LBB28_499:                             //   Parent Loop BB28_496 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_502 Depth 3
                                        //         Child Loop BB28_504 Depth 4
	ldp	x7, x6, [x29, #-88]             // 16-byte Folded Reload
	add	x5, x5, x11
	cmp	w6, w7
	b.ge	.LBB28_498
// %bb.500:                             // %.preheader674.lr.ph.i
                                        //   in Loop: Header=BB28_499 Depth=2
	mov	x6, x4
	mov	x7, x10
	b	.LBB28_502
	.p2align	5, , 16
.LBB28_501:                             // %._crit_edge910.i
                                        //   in Loop: Header=BB28_502 Depth=3
	add	x7, x7, #1
	add	x6, x6, x26
	cmp	x7, x12
	b.eq	.LBB28_498
.LBB28_502:                             // %.preheader674.i
                                        //   Parent Loop BB28_496 Depth=1
                                        //     Parent Loop BB28_499 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_504 Depth 4
	cmp	x27, #1
	b.lt	.LBB28_501
// %bb.503:                             // %.lr.ph909.i
                                        //   in Loop: Header=BB28_502 Depth=3
	ldr	x19, [x28, #248]
	mov	x20, x27
	add	x19, x19, x6
	.p2align	5, , 16
.LBB28_504:                             //   Parent Loop BB28_496 Depth=1
                                        //     Parent Loop BB28_499 Depth=2
                                        //       Parent Loop BB28_502 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	s0, [x19]
	add	x19, x19, x23
	fabs	s1, s0
	fmov	s2, w14
	fmov	w21, s0
	fmul	s1, s1, s2
	fmov	s2, w15
	and	w22, w21, #0x7f800000
	ubfx	w24, w21, #23, #8
	lsl	w25, w21, #1
	lsr	w21, w21, #31
	add	w22, w22, w17
	cmp	w24, #113
	csel	w22, w0, w22, lo
	cmp	w25, w1
	fmul	s0, s1, s2
	fmov	s1, w22
	fadd	s0, s0, s1
	fmov	w22, s0
	lsr	w24, w22, #13
	and	w22, w22, #0xfff
	and	w24, w24, #0x7c00
	add	w22, w24, w22
	csel	w22, w2, w22, hi
	subs	x20, x20, #1
	orr	w21, w22, w21, lsl #15
	strh	w21, [x9, x5, lsl #1]
	add	x5, x5, #1
	b.ne	.LBB28_504
	b	.LBB28_501
.LBB28_505:
	ldr	x8, [sp, #72]                   // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.506:                             // %.preheader678.lr.ph.i
	ldp	x12, x10, [x29, #-88]           // 16-byte Folded Reload
	mov	x8, xzr
	ldur	x13, [x29, #-96]                // 8-byte Folded Reload
	mov	x1, xzr
	mov	w16, #32767                     // =0x7fff
	ldp	x14, x15, [x29, #-48]           // 16-byte Folded Reload
	sxtw	x12, w12
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	sxtw	x10, w10
	ldr	x9, [x9, #248]
	sub	x13, x13, x12
	mul	x11, x15, x10
	mul	x14, x14, x10
	ldp	x21, x22, [x29, #-48]           // 16-byte Folded Reload
	mul	x13, x13, x15
	mov	w15, #1                         // =0x1
	movk	w15, #32640, lsl #16
	b	.LBB28_508
.LBB28_507:                             // %._crit_edge903.i
                                        //   in Loop: Header=BB28_508 Depth=1
	ldr	x17, [sp, #80]                  // 8-byte Folded Reload
	add	x8, x8, #1
	add	x14, x14, x17
	ldr	x17, [sp, #72]                  // 8-byte Folded Reload
	cmp	x8, x17
	b.eq	.LBB28_562
.LBB28_508:                             // %.preheader678.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_511 Depth 2
                                        //       Child Loop BB28_514 Depth 3
                                        //         Child Loop BB28_516 Depth 4
	ldur	x17, [x29, #-72]                // 8-byte Folded Reload
	cmp	x17, #1
	b.lt	.LBB28_507
// %bb.509:                             // %.lr.ph902.i
                                        //   in Loop: Header=BB28_508 Depth=1
	mov	x17, xzr
	mov	x0, x14
	b	.LBB28_511
	.p2align	5, , 16
.LBB28_510:                             // %._crit_edge898.i
                                        //   in Loop: Header=BB28_511 Depth=2
	ldp	x2, x3, [x29, #-72]             // 16-byte Folded Reload
	add	x1, x1, x13
	add	x17, x17, #1
	add	x0, x0, x3
	cmp	x17, x2
	b.eq	.LBB28_507
.LBB28_511:                             //   Parent Loop BB28_508 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_514 Depth 3
                                        //         Child Loop BB28_516 Depth 4
	ldp	x3, x2, [x29, #-88]             // 16-byte Folded Reload
	add	x1, x1, x11
	cmp	w2, w3
	b.ge	.LBB28_510
// %bb.512:                             // %.preheader677.lr.ph.i
                                        //   in Loop: Header=BB28_511 Depth=2
	mov	x2, x0
	mov	x3, x10
	b	.LBB28_514
	.p2align	5, , 16
.LBB28_513:                             // %._crit_edge888.i
                                        //   in Loop: Header=BB28_514 Depth=3
	add	x3, x3, #1
	add	x2, x2, x21
	cmp	x3, x12
	b.eq	.LBB28_510
.LBB28_514:                             // %.preheader677.i
                                        //   Parent Loop BB28_508 Depth=1
                                        //     Parent Loop BB28_511 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_516 Depth 4
	cmp	x22, #1
	b.lt	.LBB28_513
// %bb.515:                             // %.lr.ph887.i
                                        //   in Loop: Header=BB28_514 Depth=3
	ldr	x4, [x28, #248]
	mov	x5, x22
	add	x4, x4, x2
	.p2align	5, , 16
.LBB28_516:                             //   Parent Loop BB28_508 Depth=1
                                        //     Parent Loop BB28_511 Depth=2
                                        //       Parent Loop BB28_514 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	w6, [x4]
	add	x4, x4, x23
	ubfx	w7, w6, #16, #1
	add	w19, w6, w16
	and	w20, w6, #0x7fffffff
	lsr	w6, w6, #16
	add	w7, w19, w7
	cmp	w20, w15
	orr	w6, w6, #0x40
	lsr	w7, w7, #16
	csel	w6, w7, w6, lo
	subs	x5, x5, #1
	strh	w6, [x9, x1, lsl #1]
	add	x1, x1, #1
	b.ne	.LBB28_516
	b	.LBB28_513
.LBB28_517:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.518:                             // %.preheader776.lr.ph.i
	ldur	x12, [x29, #-88]                // 8-byte Folded Reload
	mov	x8, xzr
	mov	x5, xzr
	ldur	x10, [x29, #-104]               // 8-byte Folded Reload
	mov	w15, #142606336                 // =0x8800000
	mov	w17, #125829120                 // =0x7800000
	ldp	x16, x13, [x29, #-48]           // 16-byte Folded Reload
	mov	w0, #1073741824                 // =0x40000000
	ldp	x14, x9, [x29, #-32]            // 16-byte Folded Reload
	mov	w1, #-16777216                  // =0xff000000
	sxtw	x12, w12
	sxtw	x10, w10
	ldr	x9, [x9, #248]
	sub	x13, x13, x12
	mul	x11, x14, x10
	mul	x16, x16, x10
	mul	x13, x13, x14
	mov	w14, #2004877312                // =0x77800000
	mov	w2, #32256                      // =0x7e00
	b	.LBB28_520
.LBB28_519:                             // %._crit_edge1102.i
                                        //   in Loop: Header=BB28_520 Depth=1
	ldr	x3, [sp, #72]                   // 8-byte Folded Reload
	add	x8, x8, #1
	add	x16, x16, x3
	ldur	x3, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, x3
	b.eq	.LBB28_562
.LBB28_520:                             // %.preheader776.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_523 Depth 2
                                        //       Child Loop BB28_526 Depth 3
                                        //         Child Loop BB28_527 Depth 4
	ldur	x3, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x3, #1
	b.lt	.LBB28_519
// %bb.521:                             // %.lr.ph1101.i
                                        //   in Loop: Header=BB28_520 Depth=1
	mov	x3, xzr
	mov	x4, x16
	b	.LBB28_523
	.p2align	5, , 16
.LBB28_522:                             // %._crit_edge1093.i
                                        //   in Loop: Header=BB28_523 Depth=2
	ldur	x6, [x29, #-96]                 // 8-byte Folded Reload
	add	x5, x5, x13
	add	x3, x3, #1
	add	x4, x4, x6
	ldur	x6, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x3, x6
	b.eq	.LBB28_519
.LBB28_523:                             //   Parent Loop BB28_520 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_526 Depth 3
                                        //         Child Loop BB28_527 Depth 4
	ldur	x6, [x29, #-104]                // 8-byte Folded Reload
	add	x5, x5, x11
	ldur	x7, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w6, w7
	b.ge	.LBB28_522
// %bb.524:                             // %.lr.ph1092.i
                                        //   in Loop: Header=BB28_523 Depth=2
	ldr	x6, [x30, #248]
	mov	x7, x10
	add	x6, x6, x4
	b	.LBB28_526
	.p2align	5, , 16
.LBB28_525:                             // %._crit_edge1087.i
                                        //   in Loop: Header=BB28_526 Depth=3
	ldur	x19, [x29, #-48]                // 8-byte Folded Reload
	add	x7, x7, #1
	add	x6, x6, x19
	cmp	x7, x12
	b.eq	.LBB28_522
.LBB28_526:                             //   Parent Loop BB28_520 Depth=1
                                        //     Parent Loop BB28_523 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_527 Depth 4
	ldur	x21, [x29, #-32]                // 8-byte Folded Reload
	mov	x19, x6
	mov	x20, x21
	cmp	x21, #1
	b.lt	.LBB28_525
	.p2align	5, , 16
.LBB28_527:                             // %.lr.ph1086.i
                                        //   Parent Loop BB28_520 Depth=1
                                        //     Parent Loop BB28_523 Depth=2
                                        //       Parent Loop BB28_526 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w21, [x19], #2
	lsl	w22, w21, #16
	fmov	s0, w14
	lsl	w24, w21, #17
	and	w23, w22, #0x7fff0000
	and	w22, w22, #0x7f800000
	fmov	s1, w23
	ubfx	w23, w21, #7, #8
	add	w22, w22, w17
	and	w21, w21, #0x8000
	cmp	w23, #113
	csel	w22, w0, w22, lo
	cmp	w24, w1
	fmul	s0, s1, s0
	fmov	s1, w15
	fmul	s0, s0, s1
	fmov	s1, w22
	fadd	s0, s0, s1
	fmov	w22, s0
	lsr	w23, w22, #13
	and	w22, w22, #0xfff
	and	w23, w23, #0x7c00
	add	w22, w23, w22
	csel	w22, w2, w22, hi
	subs	x20, x20, #1
	orr	w21, w22, w21
	strh	w21, [x9, x5, lsl #1]
	add	x5, x5, #1
	b.ne	.LBB28_527
	b	.LBB28_525
.LBB28_528:
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.529:                             // %.preheader778.lr.ph.i
	ldur	x10, [x29, #-104]               // 8-byte Folded Reload
	mov	x8, xzr
	mov	x5, xzr
	ldur	x12, [x29, #-88]                // 8-byte Folded Reload
	sxtw	x10, w10
	sxtw	x12, w12
	ldp	x0, x13, [x29, #-48]            // 16-byte Folded Reload
	sub	x13, x13, x12
	ldp	x16, x9, [x29, #-32]            // 16-byte Folded Reload
	mul	x0, x0, x10
	ldr	x9, [x9, #248]
	mul	x11, x16, x10
	sub	x14, x16, #1
	and	x15, x16, #0x3
	mul	x13, x13, x16
	and	x16, x16, #0x7ffffffffffffffc
	neg	x16, x16
	add	x17, x9, #8
	add	x1, x0, #4
	b	.LBB28_531
.LBB28_530:                             // %._crit_edge1079.i
                                        //   in Loop: Header=BB28_531 Depth=1
	ldr	x2, [sp, #72]                   // 8-byte Folded Reload
	add	x8, x8, #1
	add	x1, x1, x2
	add	x0, x0, x2
	ldur	x2, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x8, x2
	b.eq	.LBB28_562
.LBB28_531:                             // %.preheader778.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_534 Depth 2
                                        //       Child Loop BB28_537 Depth 3
                                        //         Child Loop BB28_541 Depth 4
                                        //         Child Loop BB28_544 Depth 4
	ldur	x2, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x2, #1
	b.lt	.LBB28_530
// %bb.532:                             // %.lr.ph1078.i
                                        //   in Loop: Header=BB28_531 Depth=1
	mov	x2, xzr
	mov	x3, x0
	mov	x4, x1
	b	.LBB28_534
	.p2align	5, , 16
.LBB28_533:                             // %._crit_edge1070.i
                                        //   in Loop: Header=BB28_534 Depth=2
	ldur	x6, [x29, #-96]                 // 8-byte Folded Reload
	add	x5, x5, x13
	add	x2, x2, #1
	add	x4, x4, x6
	add	x3, x3, x6
	ldur	x6, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x2, x6
	b.eq	.LBB28_530
.LBB28_534:                             //   Parent Loop BB28_531 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_537 Depth 3
                                        //         Child Loop BB28_541 Depth 4
                                        //         Child Loop BB28_544 Depth 4
	ldur	x6, [x29, #-104]                // 8-byte Folded Reload
	add	x5, x5, x11
	ldur	x7, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w6, w7
	b.ge	.LBB28_533
// %bb.535:                             // %.lr.ph1069.i
                                        //   in Loop: Header=BB28_534 Depth=2
	ldr	x7, [x30, #248]
	mov	x19, x10
	add	x6, x7, x4
	add	x7, x7, x3
	b	.LBB28_537
	.p2align	5, , 16
.LBB28_536:                             // %._crit_edge1064.i
                                        //   in Loop: Header=BB28_537 Depth=3
	ldur	x20, [x29, #-48]                // 8-byte Folded Reload
	add	x19, x19, #1
	add	x6, x6, x20
	add	x7, x7, x20
	cmp	x19, x12
	b.eq	.LBB28_533
.LBB28_537:                             //   Parent Loop BB28_531 Depth=1
                                        //     Parent Loop BB28_534 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_541 Depth 4
                                        //         Child Loop BB28_544 Depth 4
	ldur	x20, [x29, #-32]                // 8-byte Folded Reload
	cmp	x20, #1
	b.lt	.LBB28_536
// %bb.538:                             // %.lr.ph1063.i.preheader
                                        //   in Loop: Header=BB28_537 Depth=3
	cmp	x14, #3
	b.hs	.LBB28_540
// %bb.539:                             //   in Loop: Header=BB28_537 Depth=3
	mov	x20, xzr
	cbnz	x15, .LBB28_543
	b	.LBB28_536
	.p2align	5, , 16
.LBB28_540:                             // %.lr.ph1063.i.preheader776
                                        //   in Loop: Header=BB28_537 Depth=3
	add	x21, x17, x5, lsl #2
	mov	x20, xzr
	mov	x22, x6
	.p2align	5, , 16
.LBB28_541:                             // %.lr.ph1063.i
                                        //   Parent Loop BB28_531 Depth=1
                                        //     Parent Loop BB28_534 Depth=2
                                        //       Parent Loop BB28_537 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w23, [x22, #-4]
	sub	x20, x20, #4
	lsl	w23, w23, #16
	stur	w23, [x21, #-8]
	ldurh	w23, [x22, #-2]
	lsl	w23, w23, #16
	stur	w23, [x21, #-4]
	ldrh	w23, [x22]
	lsl	w23, w23, #16
	str	w23, [x21]
	ldrh	w23, [x22, #2]
	add	x22, x22, #8
	lsl	w23, w23, #16
	str	w23, [x21, #4]
	add	x21, x21, #16
	cmp	x16, x20
	b.ne	.LBB28_541
// %bb.542:                             // %._crit_edge1064.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_537 Depth=3
	sub	x5, x5, x20
	neg	x20, x20
	cbz	x15, .LBB28_536
.LBB28_543:                             // %.lr.ph1063.i.epil.preheader
                                        //   in Loop: Header=BB28_537 Depth=3
	add	x20, x7, x20, lsl #1
	mov	x21, x15
	.p2align	5, , 16
.LBB28_544:                             // %.lr.ph1063.i.epil
                                        //   Parent Loop BB28_531 Depth=1
                                        //     Parent Loop BB28_534 Depth=2
                                        //       Parent Loop BB28_537 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	lsl	w22, w22, #16
	str	w22, [x9, x5, lsl #2]
	add	x5, x5, #1
	b.ne	.LBB28_544
	b	.LBB28_536
.LBB28_545:
	adrp	x8, type_traits_cpu
	add	x8, x8, :lo12:type_traits_cpu
	lsl	x9, x0, #5
	ldr	x8, [x8, x9]
	stur	x8, [x29, #-72]                 // 8-byte Folded Spill
	cbz	x8, .LBB28_582
// %bb.546:
	ldr	x8, [sp, #112]                  // 8-byte Folded Reload
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	x21, [x8, #16]
	bl	ggml_blck_size
	ldur	x8, [x29, #-64]                 // 8-byte Folded Reload
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	cmp	x8, #1
	b.lt	.LBB28_562
// %bb.547:                             // %.preheader772.lr.ph.i
	ldur	x10, [x29, #-32]                // 8-byte Folded Reload
	mov	x13, xzr
	mov	x8, xzr
	ldur	x12, [x29, #-80]                // 8-byte Folded Reload
	add	x9, x10, #16
	and	x26, x10, #0x3
	mul	x9, x9, x12
	add	x22, x21, x9, lsl #2
	sdiv	x9, x10, x0
	and	x10, x10, #0x7ffffffffffffffc
	neg	x27, x10
	mul	x21, x9, x24
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldr	x23, [x9, #248]
	ldur	x9, [x29, #-104]                // 8-byte Folded Reload
	sxtw	x14, w9
	mul	x9, x21, x14
	str	x9, [sp, #96]                   // 8-byte Folded Spill
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	ldur	x12, [x29, #-40]                // 8-byte Folded Reload
	ldur	x10, [x29, #-48]                // 8-byte Folded Reload
	str	x14, [sp, #104]                 // 8-byte Folded Spill
	sub	x9, x12, w9, sxtw
	mul	x24, x10, x14
	add	x14, x22, #8
	stur	x14, [x29, #-24]                // 8-byte Folded Spill
	mul	x9, x21, x9
	add	x20, x24, #4
	str	x9, [sp, #88]                   // 8-byte Folded Spill
	b	.LBB28_549
.LBB28_548:                             // %._crit_edge1132.i
                                        //   in Loop: Header=BB28_549 Depth=1
	ldp	x9, x13, [sp, #72]              // 16-byte Folded Reload
	add	x13, x13, #1
	ldp	x20, x24, [sp, #56]             // 16-byte Folded Reload
	add	x20, x20, x9
	add	x24, x24, x9
	ldur	x9, [x29, #-64]                 // 8-byte Folded Reload
	cmp	x13, x9
	b.eq	.LBB28_562
.LBB28_549:                             // %.preheader772.i
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_552 Depth 2
                                        //       Child Loop BB28_554 Depth 3
                                        //         Child Loop BB28_558 Depth 4
                                        //         Child Loop BB28_561 Depth 4
	str	x13, [sp, #80]                  // 8-byte Folded Spill
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	stp	x20, x24, [sp, #56]             // 16-byte Folded Spill
	cmp	x9, #1
	b.lt	.LBB28_548
// %bb.550:                             // %.lr.ph1131.i
                                        //   in Loop: Header=BB28_549 Depth=1
	mov	x13, xzr
	b	.LBB28_552
	.p2align	5, , 16
.LBB28_551:                             // %._crit_edge1127.i
                                        //   in Loop: Header=BB28_552 Depth=2
	ldur	x9, [x29, #-96]                 // 8-byte Folded Reload
	ldr	x20, [sp, #112]                 // 8-byte Folded Reload
	add	x20, x20, x9
	ldur	x24, [x29, #-80]                // 8-byte Folded Reload
	ldr	x8, [sp, #88]                   // 8-byte Folded Reload
	ldur	x13, [x29, #-40]                // 8-byte Folded Reload
	add	x24, x24, x9
	add	x8, x28, x8
	add	x13, x13, #1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	cmp	x13, x9
	b.eq	.LBB28_548
.LBB28_552:                             //   Parent Loop BB28_549 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_554 Depth 3
                                        //         Child Loop BB28_558 Depth 4
                                        //         Child Loop BB28_561 Depth 4
	stur	x13, [x29, #-40]                // 8-byte Folded Spill
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	stur	x24, [x29, #-80]                // 8-byte Folded Spill
	ldr	x25, [sp, #104]                 // 8-byte Folded Reload
	str	x20, [sp, #112]                 // 8-byte Folded Spill
	ldur	x19, [x29, #-32]                // 8-byte Folded Reload
	add	x28, x8, x9
	ldur	x8, [x29, #-104]                // 8-byte Folded Reload
	ldur	x9, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w8, w9
	b.lt	.LBB28_554
	b	.LBB28_551
	.p2align	5, , 16
.LBB28_553:                             // %._crit_edge1122.i
                                        //   in Loop: Header=BB28_554 Depth=3
	ldur	x8, [x29, #-72]                 // 8-byte Folded Reload
	add	x1, x23, x28
	mov	x0, x22
	mov	x2, x19
	blr	x8
	ldur	x8, [x29, #-48]                 // 8-byte Folded Reload
	add	x28, x28, x21
	add	x25, x25, #1
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	x20, x20, x8
	add	x24, x24, x8
	ldur	x8, [x29, #-88]                 // 8-byte Folded Reload
	cmp	w8, w25
	b.eq	.LBB28_551
.LBB28_554:                             //   Parent Loop BB28_549 Depth=1
                                        //     Parent Loop BB28_552 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB28_558 Depth 4
                                        //         Child Loop BB28_561 Depth 4
	cmp	x19, #1
	b.lt	.LBB28_553
// %bb.555:                             // %.lr.ph1121.i.preheader
                                        //   in Loop: Header=BB28_554 Depth=3
	ldr	x8, [x11, #248]
	cmp	x19, #4
	b.hs	.LBB28_557
// %bb.556:                             //   in Loop: Header=BB28_554 Depth=3
	mov	x10, xzr
	cbnz	x26, .LBB28_560
	b	.LBB28_553
	.p2align	5, , 16
.LBB28_557:                             // %.lr.ph1121.i.preheader772
                                        //   in Loop: Header=BB28_554 Depth=3
	ldur	x11, [x29, #-24]                // 8-byte Folded Reload
	mov	x9, xzr
	add	x10, x8, x20
	.p2align	5, , 16
.LBB28_558:                             // %.lr.ph1121.i
                                        //   Parent Loop BB28_549 Depth=1
                                        //     Parent Loop BB28_552 Depth=2
                                        //       Parent Loop BB28_554 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w12, [x10, #-4]
	sub	x9, x9, #4
	lsl	w12, w12, #16
	stur	w12, [x11, #-8]
	ldurh	w12, [x10, #-2]
	lsl	w12, w12, #16
	stur	w12, [x11, #-4]
	ldrh	w12, [x10]
	lsl	w12, w12, #16
	str	w12, [x11]
	ldrh	w12, [x10, #2]
	add	x10, x10, #8
	lsl	w12, w12, #16
	str	w12, [x11, #4]
	add	x11, x11, #16
	cmp	x27, x9
	b.ne	.LBB28_558
// %bb.559:                             // %._crit_edge1122.i.loopexit.unr-lcssa.loopexit
                                        //   in Loop: Header=BB28_554 Depth=3
	neg	x10, x9
	cbz	x26, .LBB28_553
.LBB28_560:                             // %.lr.ph1121.i.epil.preheader
                                        //   in Loop: Header=BB28_554 Depth=3
	add	x9, x22, x10, lsl #2
	add	x10, x24, x10, lsl #1
	add	x8, x8, x10
	mov	x10, x26
	.p2align	5, , 16
.LBB28_561:                             // %.lr.ph1121.i.epil
                                        //   Parent Loop BB28_549 Depth=1
                                        //     Parent Loop BB28_552 Depth=2
                                        //       Parent Loop BB28_554 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w11, [x8], #2
	subs	x10, x10, #1
	lsl	w11, w11, #16
	str	w11, [x9], #4
	b.ne	.LBB28_561
	b	.LBB28_553
.LBB28_562:                             // %ggml_compute_forward_dup_bytes.exit
	.cfi_def_cfa wsp, 320
	ldp	x20, x19, [sp, #304]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #288]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #272]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #256]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #240]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #224]            // 16-byte Folded Reload
	add	sp, sp, #320
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB28_563:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.24
	add	x3, x3, :lo12:.L.str.24
	mov	w1, #4080                       // =0xff0
	bl	ggml_abort
.LBB28_564:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.25
	add	x3, x3, :lo12:.L.str.25
	mov	w1, #4081                       // =0xff1
	bl	ggml_abort
.LBB28_565:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4305                       // =0x10d1
	bl	ggml_abort
.LBB28_566:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.26
	add	x3, x3, :lo12:.L.str.26
	mov	w1, #3125                       // =0xc35
	bl	ggml_abort
.LBB28_567:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.24
	add	x3, x3, :lo12:.L.str.24
	mov	w1, #3124                       // =0xc34
	bl	ggml_abort
.LBB28_568:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.25
	add	x3, x3, :lo12:.L.str.25
	mov	w1, #3126                       // =0xc36
	bl	ggml_abort
.LBB28_569:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.24
	add	x3, x3, :lo12:.L.str.24
	mov	w1, #3153                       // =0xc51
	bl	ggml_abort
.LBB28_570:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.24
	add	x3, x3, :lo12:.L.str.24
	mov	w1, #3417                       // =0xd59
	bl	ggml_abort
.LBB28_571:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.24
	add	x3, x3, :lo12:.L.str.24
	mov	w1, #3768                       // =0xeb8
	bl	ggml_abort
.LBB28_572:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.27
	add	x3, x3, :lo12:.L.str.27
	mov	w1, #4240                       // =0x1090
	bl	ggml_abort
.LBB28_573:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.28
	add	x3, x3, :lo12:.L.str.28
	mov	w1, #4242                       // =0x1092
	bl	ggml_abort
.LBB28_574:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3407                       // =0xd4f
	bl	ggml_abort
.LBB28_575:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3758                       // =0xeae
	bl	ggml_abort
.LBB28_576:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #4070                       // =0xfe6
	bl	ggml_abort
.LBB28_577:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3839                       // =0xeff
	bl	ggml_abort
.LBB28_578:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3290                       // =0xcda
	bl	ggml_abort
.LBB28_579:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3589                       // =0xe05
	bl	ggml_abort
.LBB28_580:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3899                       // =0xf3b
	bl	ggml_abort
.LBB28_581:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3248                       // =0xcb0
	bl	ggml_abort
.LBB28_582:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.4
	add	x2, x2, :lo12:.L.str.4
	mov	w1, #3529                       // =0xdc9
	bl	ggml_abort
.Lfunc_end28:
	.size	ggml_compute_forward_dup, .Lfunc_end28-ggml_compute_forward_dup
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_add1_f16_f16
	.type	ggml_compute_forward_add1_f16_f16,@function
ggml_compute_forward_add1_f16_f16:      // @ggml_compute_forward_add1_f16_f16
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-112]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	ldp	x19, x21, [x1, #152]
	mov	x22, x0
	mov	x20, x1
	mov	x0, x19
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB29_14
// %bb.1:
	mov	x0, x21
	bl	ggml_is_scalar
	tbz	w0, #0, .LBB29_15
// %bb.2:
	ldr	x8, [x21, #248]
	adrp	x23, :got:ggml_table_f32_f16
	mov	x0, x19
	ldrh	w8, [x8]
	ldr	x23, [x23, :got_lo12:ggml_table_f32_f16]
	ldr	s8, [x23, x8, lsl #2]
	ldp	w24, w22, [x22]
                                        // kill: def $w24 killed $w24 def $x24
	sxtw	x24, w24
	bl	ggml_nrows
	ldr	w8, [x19]
	cmp	w8, #1
	b.ne	.LBB29_16
// %bb.3:
	ldr	w8, [x21]
	cmp	w8, #1
	b.ne	.LBB29_17
// %bb.4:
	ldr	w8, [x20]
	cmp	w8, #1
	b.ne	.LBB29_18
// %bb.5:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB29_19
// %bb.6:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB29_20
// %bb.7:
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w22
	smull	x8, w24, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w15, w9, w0, lt
	cmp	w8, w15
	b.ge	.LBB29_13
// %bb.8:                               // %.lr.ph103
	ldp	x12, x13, [x20, #16]
	sxtw	x15, w15
	ldr	x0, [x20, #32]
	mov	w1, #2004877312                 // =0x77800000
	mov	w3, #142606336                  // =0x8800000
	ldp	x9, x10, [x19, #56]
	mov	w4, #125829120                  // =0x7800000
	ldr	x11, [x19, #72]
	mov	w6, #1073741824                 // =0x40000000
	mov	w7, #-16777216                  // =0xff000000
	mul	x14, x0, x13
	ldp	x16, x17, [x20, #56]
	ldr	x2, [x20, #72]
	neg	w0, w0
	ldr	x5, [x20, #248]
	mov	w20, #32256                     // =0x7e00
	ldr	x19, [x19, #248]
	b	.LBB29_10
	.p2align	5, , 16
.LBB29_9:                               // %._crit_edge
                                        //   in Loop: Header=BB29_10 Depth=1
	add	x8, x8, #1
	cmp	x8, x15
	b.eq	.LBB29_13
.LBB29_10:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB29_12 Depth 2
	cmp	x12, #1
	b.lt	.LBB29_9
// %bb.11:                              // %.lr.ph.preheader
                                        //   in Loop: Header=BB29_10 Depth=1
	sdiv	x21, x8, x14
	sxtw	x22, w21
	mul	w21, w0, w21
	msub	x24, x14, x22, x8
	mul	x26, x22, x2
	mul	x22, x22, x11
	add	x22, x19, x22
	sdiv	x24, x24, x13
	sub	w21, w21, w24
	sxtw	x24, w24
	madd	w21, w13, w21, w8
	mul	x25, x24, x17
	mul	x24, x24, x10
	sxtw	x27, w21
	add	x21, x5, x26
	madd	x25, x16, x27, x25
	madd	x24, x9, x27, x24
	add	x21, x21, x25
	add	x22, x22, x24
	mov	x24, x12
	.p2align	5, , 16
.LBB29_12:                              // %.lr.ph
                                        //   Parent Loop BB29_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w25, [x22], #2
	fmov	s2, w1
	ldr	s0, [x23, x25, lsl #2]
	fadd	s0, s8, s0
	fabs	s1, s0
	fmov	w25, s0
	fmul	s1, s1, s2
	fmov	s2, w3
	and	w26, w25, #0x7f800000
	ubfx	w27, w25, #23, #8
	lsl	w28, w25, #1
	lsr	w25, w25, #31
	add	w26, w26, w4
	cmp	w27, #113
	csel	w26, w6, w26, lo
	cmp	w28, w7
	fmul	s0, s1, s2
	fmov	s1, w26
	fadd	s0, s0, s1
	fmov	w26, s0
	lsr	w27, w26, #13
	and	w26, w26, #0xfff
	and	w27, w27, #0x7c00
	add	w26, w27, w26
	csel	w26, w20, w26, hi
	subs	x24, x24, #1
	orr	w25, w26, w25, lsl #15
	strh	w25, [x21], #2
	b.ne	.LBB29_12
	b	.LBB29_9
.LBB29_13:                              // %._crit_edge104
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #112                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB29_14:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4539                       // =0x11bb
	bl	ggml_abort
.LBB29_15:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.38
	add	x3, x3, :lo12:.L.str.38
	mov	w1, #4540                       // =0x11bc
	bl	ggml_abort
.LBB29_16:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.41
	add	x3, x3, :lo12:.L.str.41
	mov	w1, #4552                       // =0x11c8
	bl	ggml_abort
.LBB29_17:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.42
	add	x3, x3, :lo12:.L.str.42
	mov	w1, #4553                       // =0x11c9
	bl	ggml_abort
.LBB29_18:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.43
	add	x3, x3, :lo12:.L.str.43
	mov	w1, #4554                       // =0x11ca
	bl	ggml_abort
.LBB29_19:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.44
	add	x3, x3, :lo12:.L.str.44
	mov	w1, #4556                       // =0x11cc
	bl	ggml_abort
.LBB29_20:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #4557                       // =0x11cd
	bl	ggml_abort
.Lfunc_end29:
	.size	ggml_compute_forward_add1_f16_f16, .Lfunc_end29-ggml_compute_forward_add1_f16_f16
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_add1_f16_f32
	.type	ggml_compute_forward_add1_f16_f32,@function
ggml_compute_forward_add1_f16_f32:      // @ggml_compute_forward_add1_f16_f32
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-112]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	ldp	x19, x21, [x1, #152]
	mov	x22, x0
	mov	x20, x1
	mov	x0, x19
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB30_14
// %bb.1:
	mov	x0, x21
	bl	ggml_is_scalar
	tbz	w0, #0, .LBB30_15
// %bb.2:
	ldr	x8, [x21, #248]
	mov	x0, x19
	ldr	s8, [x8]
	ldp	w23, w22, [x22]
                                        // kill: def $w23 killed $w23 def $x23
	sxtw	x23, w23
	bl	ggml_nrows
	ldr	w8, [x19]
	cmp	w8, #1
	b.ne	.LBB30_16
// %bb.3:
	ldr	w8, [x21]
	cbnz	w8, .LBB30_17
// %bb.4:
	ldr	w8, [x20]
	cmp	w8, #1
	b.ne	.LBB30_18
// %bb.5:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB30_19
// %bb.6:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB30_20
// %bb.7:
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w22
	smull	x8, w23, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w17, w9, w0, lt
	cmp	w8, w17
	b.ge	.LBB30_13
// %bb.8:                               // %.lr.ph103
	ldp	x12, x13, [x20, #16]
	adrp	x21, :got:ggml_table_f32_f16
	ldr	x0, [x20, #32]
	sxtw	x17, w17
	mov	w2, #2004877312                 // =0x77800000
	ldp	x9, x10, [x19, #56]
	mov	w3, #142606336                  // =0x8800000
	ldr	x11, [x19, #72]
	mov	w5, #125829120                  // =0x7800000
	mov	w6, #1073741824                 // =0x40000000
	mul	x14, x0, x13
	ldp	x15, x16, [x20, #56]
	ldr	x1, [x20, #72]
	neg	w0, w0
	ldr	x4, [x20, #248]
	mov	w20, #32256                     // =0x7e00
	ldr	x7, [x19, #248]
	mov	w19, #-16777216                 // =0xff000000
	ldr	x21, [x21, :got_lo12:ggml_table_f32_f16]
	b	.LBB30_10
	.p2align	5, , 16
.LBB30_9:                               // %._crit_edge
                                        //   in Loop: Header=BB30_10 Depth=1
	add	x8, x8, #1
	cmp	x8, x17
	b.eq	.LBB30_13
.LBB30_10:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB30_12 Depth 2
	cmp	x12, #1
	b.lt	.LBB30_9
// %bb.11:                              // %.lr.ph.preheader
                                        //   in Loop: Header=BB30_10 Depth=1
	sdiv	x22, x8, x14
	sxtw	x23, w22
	mul	w22, w0, w22
	msub	x24, x14, x23, x8
	mul	x26, x23, x1
	mul	x23, x23, x11
	add	x23, x7, x23
	sdiv	x24, x24, x13
	sub	w22, w22, w24
	sxtw	x24, w24
	madd	w22, w13, w22, w8
	mul	x25, x24, x16
	mul	x24, x24, x10
	sxtw	x27, w22
	add	x22, x4, x26
	madd	x25, x15, x27, x25
	madd	x24, x9, x27, x24
	add	x22, x22, x25
	add	x23, x23, x24
	mov	x24, x12
	.p2align	5, , 16
.LBB30_12:                              // %.lr.ph
                                        //   Parent Loop BB30_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w25, [x23], #2
	fmov	s2, w2
	ldr	s0, [x21, x25, lsl #2]
	fadd	s0, s8, s0
	fabs	s1, s0
	fmov	w25, s0
	fmul	s1, s1, s2
	fmov	s2, w3
	and	w26, w25, #0x7f800000
	ubfx	w27, w25, #23, #8
	lsl	w28, w25, #1
	lsr	w25, w25, #31
	add	w26, w26, w5
	cmp	w27, #113
	csel	w26, w6, w26, lo
	cmp	w28, w19
	fmul	s0, s1, s2
	fmov	s1, w26
	fadd	s0, s0, s1
	fmov	w26, s0
	lsr	w27, w26, #13
	and	w26, w26, #0xfff
	and	w27, w27, #0x7c00
	add	w26, w27, w26
	csel	w26, w20, w26, hi
	subs	x24, x24, #1
	orr	w25, w26, w25, lsl #15
	strh	w25, [x22], #2
	b.ne	.LBB30_12
	b	.LBB30_9
.LBB30_13:                              // %._crit_edge104
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #112                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB30_14:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4491                       // =0x118b
	bl	ggml_abort
.LBB30_15:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.38
	add	x3, x3, :lo12:.L.str.38
	mov	w1, #4492                       // =0x118c
	bl	ggml_abort
.LBB30_16:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.41
	add	x3, x3, :lo12:.L.str.41
	mov	w1, #4504                       // =0x1198
	bl	ggml_abort
.LBB30_17:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #4505                       // =0x1199
	bl	ggml_abort
.LBB30_18:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.43
	add	x3, x3, :lo12:.L.str.43
	mov	w1, #4506                       // =0x119a
	bl	ggml_abort
.LBB30_19:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.44
	add	x3, x3, :lo12:.L.str.44
	mov	w1, #4508                       // =0x119c
	bl	ggml_abort
.LBB30_20:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	w1, #4509                       // =0x119d
	bl	ggml_abort
.Lfunc_end30:
	.size	ggml_compute_forward_add1_f16_f32, .Lfunc_end30-ggml_compute_forward_add1_f16_f32
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_add1_bf16_bf16
	.type	ggml_compute_forward_add1_bf16_bf16,@function
ggml_compute_forward_add1_bf16_bf16:    // @ggml_compute_forward_add1_bf16_bf16
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	ldp	x19, x21, [x1, #152]
	mov	x22, x0
	mov	x20, x1
	mov	x0, x19
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB31_14
// %bb.1:
	mov	x0, x21
	bl	ggml_is_scalar
	tbz	w0, #0, .LBB31_15
// %bb.2:
	ldr	x8, [x21, #248]
	mov	x0, x19
	ldrh	w23, [x8]
	ldp	w24, w22, [x22]
                                        // kill: def $w24 killed $w24 def $x24
	sxtw	x24, w24
	bl	ggml_nrows
	ldr	w8, [x19]
	cmp	w8, #30
	b.ne	.LBB31_16
// %bb.3:
	ldr	w8, [x21]
	cmp	w8, #30
	b.ne	.LBB31_17
// %bb.4:
	ldr	w8, [x20]
	cmp	w8, #30
	b.ne	.LBB31_18
// %bb.5:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB31_19
// %bb.6:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB31_20
// %bb.7:
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w22
	smull	x8, w24, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w0, w9, w0, lt
	cmp	w8, w0
	b.ge	.LBB31_13
// %bb.8:                               // %.lr.ph103
	ldp	x12, x13, [x20, #16]
	lsl	w9, w23, #16
	ldr	x2, [x20, #32]
	mov	w3, #1                          // =0x1
	sxtw	x0, w0
	fmov	s0, w9
	movk	w3, #32640, lsl #16
	mov	w4, #32767                      // =0x7fff
	ldp	x9, x10, [x19, #56]
	mul	x17, x2, x13
	ldr	x11, [x19, #72]
	neg	w2, w2
	ldr	x16, [x20, #72]
	ldp	x14, x15, [x20, #56]
	ldr	x1, [x20, #248]
	ldr	x5, [x19, #248]
	b	.LBB31_10
	.p2align	5, , 16
.LBB31_9:                               // %._crit_edge
                                        //   in Loop: Header=BB31_10 Depth=1
	add	x8, x8, #1
	cmp	x8, x0
	b.eq	.LBB31_13
.LBB31_10:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB31_12 Depth 2
	cmp	x12, #1
	b.lt	.LBB31_9
// %bb.11:                              // %.lr.ph.preheader
                                        //   in Loop: Header=BB31_10 Depth=1
	sdiv	x6, x8, x17
	sxtw	x7, w6
	mul	w6, w2, w6
	msub	x19, x17, x7, x8
	mul	x21, x7, x16
	mul	x7, x7, x11
	sdiv	x19, x19, x13
	sub	w6, w6, w19
	sxtw	x19, w19
	madd	w6, w13, w6, w8
	mul	x20, x19, x15
	mul	x19, x19, x10
	sxtw	x22, w6
	add	x6, x5, x7
	add	x7, x1, x21
	madd	x19, x9, x22, x19
	add	x6, x6, x19
	madd	x19, x14, x22, x20
	add	x7, x7, x19
	mov	x19, x12
	.p2align	5, , 16
.LBB31_12:                              // %.lr.ph
                                        //   Parent Loop BB31_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w20, [x6], #2
	lsl	w20, w20, #16
	fmov	s1, w20
	fadd	s1, s0, s1
	fmov	w20, s1
	and	w21, w20, #0x7fffffff
	ubfx	w22, w20, #16, #1
	cmp	w21, w3
	add	w21, w20, w4
	lsr	w20, w20, #16
	add	w21, w21, w22
	orr	w20, w20, #0x40
	lsr	w21, w21, #16
	csel	w20, w21, w20, lo
	subs	x19, x19, #1
	strh	w20, [x7], #2
	b.ne	.LBB31_12
	b	.LBB31_9
.LBB31_13:                              // %._crit_edge104
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB31_14:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4700                       // =0x125c
	bl	ggml_abort
.LBB31_15:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.38
	add	x3, x3, :lo12:.L.str.38
	mov	w1, #4701                       // =0x125d
	bl	ggml_abort
.LBB31_16:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.46
	add	x3, x3, :lo12:.L.str.46
	mov	w1, #4713                       // =0x1269
	bl	ggml_abort
.LBB31_17:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.47
	add	x3, x3, :lo12:.L.str.47
	mov	w1, #4714                       // =0x126a
	bl	ggml_abort
.LBB31_18:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.48
	add	x3, x3, :lo12:.L.str.48
	mov	w1, #4715                       // =0x126b
	bl	ggml_abort
.LBB31_19:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.49
	add	x3, x3, :lo12:.L.str.49
	mov	w1, #4717                       // =0x126d
	bl	ggml_abort
.LBB31_20:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.50
	add	x3, x3, :lo12:.L.str.50
	mov	w1, #4718                       // =0x126e
	bl	ggml_abort
.Lfunc_end31:
	.size	ggml_compute_forward_add1_bf16_bf16, .Lfunc_end31-ggml_compute_forward_add1_bf16_bf16
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_add1_bf16_f32
	.type	ggml_compute_forward_add1_bf16_f32,@function
ggml_compute_forward_add1_bf16_f32:     // @ggml_compute_forward_add1_bf16_f32
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-64]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #8]              // 16-byte Folded Spill
	str	x23, [sp, #24]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #8
	.cfi_def_cfa w29, 56
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	.cfi_offset w29, -56
	.cfi_offset b8, -64
	.cfi_remember_state
	ldp	x19, x21, [x1, #152]
	mov	x22, x0
	mov	x20, x1
	mov	x0, x19
	bl	ggml_are_same_shape
	tbz	w0, #0, .LBB32_14
// %bb.1:
	mov	x0, x21
	bl	ggml_is_scalar
	tbz	w0, #0, .LBB32_15
// %bb.2:
	ldr	x8, [x21, #248]
	mov	x0, x19
	ldr	s8, [x8]
	ldp	w23, w22, [x22]
                                        // kill: def $w23 killed $w23 def $x23
	sxtw	x23, w23
	bl	ggml_nrows
	ldr	w8, [x19]
	cmp	w8, #30
	b.ne	.LBB32_16
// %bb.3:
	ldr	w8, [x21]
	cbnz	w8, .LBB32_17
// %bb.4:
	ldr	w8, [x20]
	cmp	w8, #30
	b.ne	.LBB32_18
// %bb.5:
	ldr	x8, [x20, #48]
	cmp	x8, #2
	b.ne	.LBB32_19
// %bb.6:
	ldr	x8, [x19, #48]
	cmp	x8, #2
	b.ne	.LBB32_20
// %bb.7:
	add	w8, w22, w0
	sub	w8, w8, #1
	sdiv	w9, w8, w22
	smull	x8, w23, w9
	add	w9, w8, w9
	cmp	w9, w0
	csel	w0, w9, w0, lt
	cmp	w8, w0
	b.ge	.LBB32_13
// %bb.8:                               // %.lr.ph103
	ldp	x12, x13, [x20, #16]
	mov	w3, #1                          // =0x1
	ldr	x2, [x20, #32]
	sxtw	x0, w0
	movk	w3, #32640, lsl #16
	ldp	x9, x10, [x19, #56]
	mov	w4, #32767                      // =0x7fff
	ldr	x11, [x19, #72]
	mul	x17, x2, x13
	ldr	x16, [x20, #72]
	neg	w2, w2
	ldp	x14, x15, [x20, #56]
	ldr	x1, [x20, #248]
	ldr	x5, [x19, #248]
	b	.LBB32_10
	.p2align	5, , 16
.LBB32_9:                               // %._crit_edge
                                        //   in Loop: Header=BB32_10 Depth=1
	add	x8, x8, #1
	cmp	x8, x0
	b.eq	.LBB32_13
.LBB32_10:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB32_12 Depth 2
	cmp	x12, #1
	b.lt	.LBB32_9
// %bb.11:                              // %.lr.ph.preheader
                                        //   in Loop: Header=BB32_10 Depth=1
	sdiv	x6, x8, x17
	sxtw	x7, w6
	mul	w6, w2, w6
	msub	x19, x17, x7, x8
	mul	x21, x7, x16
	mul	x7, x7, x11
	sdiv	x19, x19, x13
	sub	w6, w6, w19
	sxtw	x19, w19
	madd	w6, w13, w6, w8
	mul	x20, x19, x15
	mul	x19, x19, x10
	sxtw	x22, w6
	add	x6, x5, x7
	add	x7, x1, x21
	madd	x19, x9, x22, x19
	add	x6, x6, x19
	madd	x19, x14, x22, x20
	add	x7, x7, x19
	mov	x19, x12
	.p2align	5, , 16
.LBB32_12:                              // %.lr.ph
                                        //   Parent Loop BB32_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w20, [x6], #2
	lsl	w20, w20, #16
	fmov	s0, w20
	fadd	s0, s8, s0
	fmov	w20, s0
	and	w21, w20, #0x7fffffff
	ubfx	w22, w20, #16, #1
	cmp	w21, w3
	add	w21, w20, w4
	lsr	w20, w20, #16
	add	w21, w21, w22
	orr	w20, w20, #0x40
	lsr	w21, w21, #16
	csel	w20, w21, w20, lo
	subs	x19, x19, #1
	strh	w20, [x7], #2
	b.ne	.LBB32_12
	b	.LBB32_9
.LBB32_13:                              // %._crit_edge104
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldr	x23, [sp, #24]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #8]              // 16-byte Folded Reload
	ldr	d8, [sp], #64                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB32_14:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	w1, #4652                       // =0x122c
	bl	ggml_abort
.LBB32_15:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.38
	add	x3, x3, :lo12:.L.str.38
	mov	w1, #4653                       // =0x122d
	bl	ggml_abort
.LBB32_16:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.46
	add	x3, x3, :lo12:.L.str.46
	mov	w1, #4665                       // =0x1239
	bl	ggml_abort
.LBB32_17:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.36
	add	x3, x3, :lo12:.L.str.36
	mov	w1, #4666                       // =0x123a
	bl	ggml_abort
.LBB32_18:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.48
	add	x3, x3, :lo12:.L.str.48
	mov	w1, #4667                       // =0x123b
	bl	ggml_abort
.LBB32_19:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.49
	add	x3, x3, :lo12:.L.str.49
	mov	w1, #4669                       // =0x123d
	bl	ggml_abort
.LBB32_20:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.50
	add	x3, x3, :lo12:.L.str.50
	mov	w1, #4670                       // =0x123e
	bl	ggml_abort
.Lfunc_end32:
	.size	ggml_compute_forward_add1_bf16_f32, .Lfunc_end32-ggml_compute_forward_add1_bf16_f32
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_diag_mask_f32
	.type	ggml_compute_forward_diag_mask_f32,@function
ggml_compute_forward_diag_mask_f32:     // @ggml_compute_forward_diag_mask_f32
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-96]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -96
	.cfi_remember_state
	ldr	w23, [x1, #84]
	tbnz	w23, #31, .LBB33_28
// %bb.1:
	ldr	x20, [x1, #152]
	fmov	s8, s0
	mov	x19, x1
	ldpsw	x24, x25, [x0]
	ldr	x9, [x1, #248]
	ldr	x8, [x20, #248]
	cmp	x8, x9
	b.eq	.LBB33_9
// %bb.2:
	cbnz	w24, .LBB33_7
// %bb.3:
	mov	x26, x0
	mov	x0, x19
	bl	ggml_nelements
	mov	x21, x0
	mov	x0, x20
	bl	ggml_nelements
	cmp	x21, x0
	b.ne	.LBB33_32
// %bb.4:
	mov	x0, x19
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB33_31
// %bb.5:
	mov	x0, x20
	bl	ggml_is_contiguous
	tbz	w0, #0, .LBB33_31
// %bb.6:
	ldr	x21, [x19, #248]
	mov	x0, x19
	ldr	x22, [x20, #248]
	bl	ggml_nbytes
	mov	x2, x0
	mov	x0, x21
	mov	x1, x22
	bl	memcpy
	mov	x0, x26
.LBB33_7:
	ldr	x21, [x0, #24]
	adrp	x0, .L__unnamed_1
	add	x0, x0, :lo12:.L__unnamed_1
	bl	__kmpc_global_thread_num
	ldr	w8, [x21, #284]
	cmp	w8, #1
	b.eq	.LBB33_9
// %bb.8:
	mov	w1, w0
	adrp	x0, .L__unnamed_2
	add	x0, x0, :lo12:.L__unnamed_2
	bl	__kmpc_barrier
.LBB33_9:                               // %ggml_barrier.exit
	mov	x0, x20
	bl	ggml_nrows
	ldr	x8, [x19, #48]
	cmp	x8, #4
	b.ne	.LBB33_29
// %bb.10:
	ldr	x8, [x20, #48]
	cmp	x8, #4
	b.ne	.LBB33_30
// %bb.11:                              // %.preheader50
	ldr	x8, [x20, #24]
	sdiv	w9, w0, w8
	cmp	w9, #1
	b.lt	.LBB33_27
// %bb.12:                              // %.preheader49.lr.ph
	ldr	w12, [x20, #16]
	mov	x10, xzr
	sxtw	x11, w8
	add	x13, x23, #1
	mov	x16, #4294967296                // =0x100000000
	mov	x17, #8589934592                // =0x200000000
	sub	w14, w12, w23
	sub	w15, w12, #1
	b	.LBB33_14
	.p2align	5, , 16
.LBB33_13:                              // %._crit_edge53
                                        //   in Loop: Header=BB33_14 Depth=1
	add	x10, x10, #1
	cmp	x10, x9
	b.eq	.LBB33_27
.LBB33_14:                              // %.preheader49
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB33_16 Depth 2
                                        //       Child Loop BB33_23 Depth 3
	mov	x0, x24
	cmp	w24, w8
	b.lt	.LBB33_16
	b	.LBB33_13
	.p2align	5, , 16
.LBB33_15:                              // %._crit_edge
                                        //   in Loop: Header=BB33_16 Depth=2
	add	x0, x0, x25
	cmp	x0, x11
	b.ge	.LBB33_13
.LBB33_16:                              // %.preheader
                                        //   Parent Loop BB33_14 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB33_23 Depth 3
	cmp	w23, w12
	b.ge	.LBB33_15
// %bb.17:                              // %.lr.ph
                                        //   in Loop: Header=BB33_16 Depth=2
	add	x1, x0, x23
	mov	x2, x23
	tbz	w14, #0, .LBB33_20
// %bb.18:                              // %.prol.preheader
                                        //   in Loop: Header=BB33_16 Depth=2
	mov	x2, x13
	cmp	x1, x23
	b.ge	.LBB33_20
// %bb.19:                              //   in Loop: Header=BB33_16 Depth=2
	ldr	x2, [x19, #248]
	ldp	x4, x3, [x19, #56]
	nop
	madd	x2, x3, x10, x2
	madd	x2, x4, x0, x2
	str	s8, [x2, x23, lsl #2]
	mov	x2, x13
.LBB33_20:                              // %.prol.loopexit
                                        //   in Loop: Header=BB33_16 Depth=2
	cmp	w23, w15
	b.eq	.LBB33_15
// %bb.21:                              // %.lr.ph.new.preheader
                                        //   in Loop: Header=BB33_16 Depth=2
	lsl	x3, x2, #2
	lsl	x4, x2, #32
	b	.LBB33_23
	.p2align	5, , 16
.LBB33_22:                              //   in Loop: Header=BB33_23 Depth=3
	add	w2, w2, #2
	add	x3, x3, #8
	add	x4, x4, x17
	cmp	w2, w12
	b.ge	.LBB33_15
.LBB33_23:                              // %.lr.ph.new
                                        //   Parent Loop BB33_14 Depth=1
                                        //     Parent Loop BB33_16 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	cmp	x1, x4, asr #32
	b.ge	.LBB33_25
// %bb.24:                              //   in Loop: Header=BB33_23 Depth=3
	ldp	x7, x6, [x19, #56]
	mul	x7, x0, x7
	ldr	x5, [x19, #248]
	nop
	madd	x6, x10, x6, x7
	add	x5, x5, x6
	str	s8, [x5, x3]
.LBB33_25:                              //   in Loop: Header=BB33_23 Depth=3
	add	x5, x4, x16
	cmp	x1, x5, asr #32
	b.ge	.LBB33_22
// %bb.26:                              //   in Loop: Header=BB33_23 Depth=3
	ldp	x7, x6, [x19, #56]
	mul	x7, x0, x7
	ldr	x5, [x19, #248]
	add	x5, x5, x3
	madd	x6, x10, x6, x7
	add	x5, x5, x6
	str	s8, [x5, #4]
	b	.LBB33_22
.LBB33_27:                              // %._crit_edge55
	.cfi_def_cfa wsp, 96
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #96                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB33_28:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.101
	add	x3, x3, :lo12:.L.str.101
	mov	w1, #8204                       // =0x200c
	bl	ggml_abort
.LBB33_29:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.55
	add	x3, x3, :lo12:.L.str.55
	mov	w1, #8227                       // =0x2023
	bl	ggml_abort
.LBB33_30:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.54
	add	x3, x3, :lo12:.L.str.54
	mov	w1, #8228                       // =0x2024
	bl	ggml_abort
.LBB33_31:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.26
	add	x3, x3, :lo12:.L.str.26
	mov	w1, #8211                       // =0x2013
	bl	ggml_abort
.LBB33_32:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.24
	add	x3, x3, :lo12:.L.str.24
	mov	w1, #8210                       // =0x2012
	bl	ggml_abort
.Lfunc_end33:
	.size	ggml_compute_forward_diag_mask_f32, .Lfunc_end33-ggml_compute_forward_diag_mask_f32
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_rope_f16
	.type	ggml_compute_forward_rope_f16,@function
ggml_compute_forward_rope_f16:          // @ggml_compute_forward_rope_f16
	.cfi_startproc
// %bb.0:
	stp	d15, d14, [sp, #-160]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 160
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	.cfi_remember_state
	sub	sp, sp, #512
	ldp	x28, x8, [x1, #152]
	stur	x8, [x29, #-128]                // 8-byte Folded Spill
	ldr	q0, [x1, #128]
	ldp	w21, w8, [x1, #88]
	ldp	s12, s8, [x1, #104]
	ldr	x20, [x1, #168]
                                        // kill: def $w21 killed $w21 def $x21
	sxtw	x21, w21
	stur	q0, [x29, #-96]
	ldp	s9, s0, [x1, #112]
	stur	w8, [x29, #-188]                // 4-byte Folded Spill
	ldp	s13, s14, [x1, #120]
	ldr	w23, [x1, #100]
	ldr	x8, [x1, #48]
	stur	s0, [x29, #-236]                // 4-byte Folded Spill
	cmp	x8, #2
	b.ne	.LBB34_56
// %bb.1:
	ldp	x9, x8, [x28, #48]
	mov	x27, x0
	ldp	w25, w22, [x0]
	mov	x0, x1
	mov	w24, w2
	mov	x26, x1
                                        // kill: def $w25 killed $w25 def $x25
	sxtw	x25, w25
	stur	x9, [x29, #-120]                // 8-byte Folded Spill
	stur	x8, [x29, #-152]                // 8-byte Folded Spill
	ldp	x9, x8, [x28, #64]
	str	x8, [sp, #32]                   // 8-byte Folded Spill
	ldp	x19, x8, [x1, #16]
	str	x9, [sp, #224]                  // 8-byte Folded Spill
	stur	x8, [x29, #-160]                // 8-byte Folded Spill
	ldp	x9, x8, [x1, #32]
	str	x9, [sp, #216]                  // 8-byte Folded Spill
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	ldp	x9, x8, [x1, #56]
	str	x8, [sp, #184]                  // 8-byte Folded Spill
	ldr	x8, [x1, #72]
	stur	x9, [x29, #-176]                // 8-byte Folded Spill
	str	x8, [sp, #16]                   // 8-byte Folded Spill
	bl	ggml_nrows
	stur	x19, [x29, #-144]               // 8-byte Folded Spill
	cmp	x19, x21
	b.lt	.LBB34_57
// %bb.2:
	tbnz	w21, #0, .LBB34_58
// %bb.3:
	add	w8, w22, w0
	scvtf	s0, w21
	sub	w8, w8, #1
	fmov	s1, #-2.00000000
	sdiv	w8, w8, w22
	fdiv	s1, s1, s0
	fmov	s0, s12
	mul	w9, w8, w25
	add	w8, w9, w8
	stur	w9, [x29, #-164]                // 4-byte Folded Spill
	cmp	w8, w0
	csel	w8, w8, w0, lt
	stur	w8, [x29, #-220]                // 4-byte Folded Spill
	bl	powf
	fmov	s11, s0
	fmov	s0, s12
	sub	x2, x29, #104
	fmov	s1, s13
	fmov	s2, s14
	mov	w0, w21
	mov	w1, w23
	bl	ggml_rope_yarn_corr_dims
	ldur	w8, [x29, #-188]                // 4-byte Folded Reload
	tbz	w8, #3, .LBB34_7
// %bb.4:
	ldur	w8, [x29, #-96]
	cmp	w8, #0
	b.gt	.LBB34_7
// %bb.5:
	ldur	w8, [x29, #-92]
	cmp	w8, #0
	b.gt	.LBB34_7
// %bb.6:
	ldur	w8, [x29, #-88]
	cmp	w8, #0
	b.le	.LBB34_62
.LBB34_7:
	ldur	w8, [x29, #-188]                // 4-byte Folded Reload
	cmp	w8, #24
	b.ne	.LBB34_9
// %bb.8:
	ldur	x8, [x29, #-144]                // 8-byte Folded Reload
	add	x8, x8, x8, lsr #63
	asr	x8, x8, #1
	cmp	x8, x21
	b.ne	.LBB34_59
.LBB34_9:
	stur	x26, [x29, #-208]               // 8-byte Folded Spill
	str	x27, [sp, #192]                 // 8-byte Folded Spill
	stur	x28, [x29, #-216]               // 8-byte Folded Spill
	cbz	x20, .LBB34_13
// %bb.10:
	ldr	w8, [x20]
	cbnz	w8, .LBB34_60
// %bb.11:
	ldr	x8, [x20, #16]
	asr	w9, w21, #1
	cmp	x8, w9, sxtw
	b.lt	.LBB34_61
// %bb.12:
	ldr	x8, [x20, #248]
	stur	x8, [x29, #-184]                // 8-byte Folded Spill
	b	.LBB34_14
.LBB34_13:
	stur	xzr, [x29, #-184]               // 8-byte Folded Spill
.LBB34_14:
	fmov	s0, #-1.00000000
	fmov	s13, #1.00000000
	tst	w24, #0x1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldur	x27, [x29, #-144]               // 8-byte Folded Reload
	fcsel	s12, s13, s0, ne
	cmp	x8, #1
	b.lt	.LBB34_55
// %bb.15:                              // %.preheader366.lr.ph
	fdiv	s0, s13, s8
	ldur	x8, [x29, #-128]                // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	str	x8, [sp, #168]                  // 8-byte Folded Spill
	add	x8, x27, #16
	mul	x19, x8, x25
	ldr	x8, [sp, #216]                  // 8-byte Folded Reload
	lsl	x9, x8, #3
	add	x8, x8, x8, lsl #1
	lsl	x8, x8, #2
	stp	x8, x9, [sp, #128]              // 16-byte Folded Spill
	bl	logf
	mov	w8, #52429                      // =0xcccd
	ldur	x13, [x29, #-120]               // 8-byte Folded Reload
	asr	w9, w21, #1
	movk	w8, #15820, lsl #16
	ldur	w12, [x29, #-188]               // 4-byte Folded Reload
	lsl	x10, x19, #2
	fmov	s1, w8
	mov	w8, #10                         // =0xa
	lsl	x14, x21, #1
	stp	xzr, xzr, [sp, #112]            // 16-byte Folded Spill
	stur	wzr, [x29, #-132]               // 4-byte Folded Spill
	lsl	x11, x13, #1
	and	w8, w12, w8
	add	x12, x14, #2
	stur	x11, [x29, #-128]               // 8-byte Folded Spill
	mov	x11, #2                         // =0x2
	stur	w8, [x29, #-224]                // 4-byte Folded Spill
	nop
	madd	x11, x13, x21, x11
	sbfiz	x8, x9, #1, #32
	add	x9, x10, #4
	fmadd	s0, s0, s1, s13
	ldur	s1, [x29, #-236]                // 4-byte Folded Reload
	str	x9, [sp, #152]                  // 8-byte Folded Spill
	add	x9, x9, x21, lsl #2
	str	x9, [sp, #144]                  // 8-byte Folded Spill
	mov	w9, #2                          // =0x2
	str	xzr, [sp, #104]                 // 8-byte Folded Spill
	str	x19, [sp, #176]                 // 8-byte Folded Spill
	str	x14, [sp, #208]                 // 8-byte Folded Spill
	str	x9, [sp, #72]                   // 8-byte Folded Spill
	adrp	x19, :got:ggml_table_f32_f16
	add	x15, x21, x21, lsl #1
	stp	x11, x12, [sp, #80]             // 16-byte Folded Spill
	mov	x10, x15
	ldr	x19, [x19, :got_lo12:ggml_table_f32_f16]
	mov	w28, #125829120                 // =0x7800000
	mov	w25, #1073741824                // =0x40000000
	mov	w20, #-16777216                 // =0xff000000
	mov	w26, #32256                     // =0x7e00
	mov	x9, x21
	mov	w11, #2                         // =0x2
	stp	x8, x11, [sp, #56]              // 16-byte Folded Spill
	str	x8, [sp, #96]                   // 8-byte Folded Spill
	fmul	s10, s1, s0
	b	.LBB34_17
	.p2align	5, , 16
.LBB34_16:                              // %._crit_edge384
                                        //   in Loop: Header=BB34_17 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	add	x8, x8, x9
	ldp	x11, x10, [sp, #104]            // 16-byte Folded Reload
	add	x11, x11, #1
	str	x8, [sp, #56]                   // 8-byte Folded Spill
	ldr	x8, [sp, #32]                   // 8-byte Folded Reload
	str	x11, [sp, #104]                 // 8-byte Folded Spill
	add	x10, x10, x8
	str	x10, [sp, #112]                 // 8-byte Folded Spill
	ldr	x10, [sp, #96]                  // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #96]                  // 8-byte Folded Spill
	ldr	x10, [sp, #120]                 // 8-byte Folded Reload
	add	x10, x10, x9
	str	x10, [sp, #120]                 // 8-byte Folded Spill
	ldr	x10, [sp, #64]                  // 8-byte Folded Reload
	add	x10, x10, x9
	str	x10, [sp, #64]                  // 8-byte Folded Spill
	ldr	x10, [sp, #72]                  // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #72]                  // 8-byte Folded Spill
	ldr	x10, [sp, #88]                  // 8-byte Folded Reload
	add	x10, x10, x9
	str	x10, [sp, #88]                  // 8-byte Folded Spill
	ldr	x10, [sp, #80]                  // 8-byte Folded Reload
	add	x10, x10, x8
	str	x10, [sp, #80]                  // 8-byte Folded Spill
	ldp	x8, x10, [sp, #40]              // 16-byte Folded Reload
	add	x10, x10, x9
	add	x9, x8, x9
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x11, x8
	b.eq	.LBB34_55
.LBB34_17:                              // %.preheader366
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB34_21 Depth 2
                                        //       Child Loop BB34_26 Depth 3
                                        //       Child Loop BB34_35 Depth 3
                                        //         Child Loop BB34_47 Depth 4
                                        //         Child Loop BB34_41 Depth 4
                                        //         Child Loop BB34_44 Depth 4
                                        //         Child Loop BB34_54 Depth 4
                                        //         Child Loop BB34_51 Depth 4
	ldr	x8, [sp, #216]                  // 8-byte Folded Reload
	stp	x9, x10, [sp, #40]              // 16-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB34_16
// %bb.18:                              // %.lr.ph383
                                        //   in Loop: Header=BB34_17 Depth=1
	stp	x9, xzr, [x29, #-256]           // 16-byte Folded Spill
	ldr	x8, [sp, #32]                   // 8-byte Folded Reload
	ldr	x9, [sp, #104]                  // 8-byte Folded Reload
	mul	x8, x9, x8
	str	x8, [sp, #160]                  // 8-byte Folded Spill
	ldp	x9, x11, [sp, #80]              // 16-byte Folded Reload
	ldr	x8, [sp, #120]                  // 8-byte Folded Reload
	stp	x9, x10, [sp, #304]             // 16-byte Folded Spill
	ldp	x10, x9, [sp, #64]              // 16-byte Folded Reload
	stp	x9, x11, [sp, #288]             // 16-byte Folded Spill
	ldr	x9, [sp, #96]                   // 8-byte Folded Reload
	stp	x8, x10, [sp, #272]             // 16-byte Folded Spill
	ldr	x8, [sp, #112]                  // 8-byte Folded Reload
	stp	x8, x9, [sp, #256]              // 16-byte Folded Spill
	ldr	x8, [sp, #56]                   // 8-byte Folded Reload
	str	x8, [sp, #248]                  // 8-byte Folded Spill
	b	.LBB34_21
	.p2align	5, , 16
.LBB34_19:                              //   in Loop: Header=BB34_21 Depth=2
	ldr	w8, [sp, #204]                  // 4-byte Folded Reload
	stur	w8, [x29, #-132]                // 4-byte Folded Spill
.LBB34_20:                              // %._crit_edge
                                        //   in Loop: Header=BB34_21 Depth=2
	ldr	x9, [sp, #184]                  // 8-byte Folded Reload
	ldp	x8, x11, [sp, #248]             // 16-byte Folded Reload
	add	x8, x8, x9
	ldur	x10, [x29, #-248]               // 8-byte Folded Reload
	add	x10, x10, #1
	str	x8, [sp, #248]                  // 8-byte Folded Spill
	ldr	x8, [sp, #224]                  // 8-byte Folded Reload
	stur	x10, [x29, #-248]               // 8-byte Folded Spill
	add	x11, x11, x8
	str	x11, [sp, #256]                 // 8-byte Folded Spill
	ldr	x11, [sp, #264]                 // 8-byte Folded Reload
	add	x11, x11, x8
	str	x11, [sp, #264]                 // 8-byte Folded Spill
	ldr	x11, [sp, #272]                 // 8-byte Folded Reload
	add	x11, x11, x9
	str	x11, [sp, #272]                 // 8-byte Folded Spill
	ldr	x11, [sp, #280]                 // 8-byte Folded Reload
	add	x11, x11, x9
	str	x11, [sp, #280]                 // 8-byte Folded Spill
	ldr	x11, [sp, #288]                 // 8-byte Folded Reload
	add	x11, x11, x8
	str	x11, [sp, #288]                 // 8-byte Folded Spill
	ldr	x11, [sp, #296]                 // 8-byte Folded Reload
	add	x11, x11, x9
	str	x11, [sp, #296]                 // 8-byte Folded Spill
	ldr	x11, [sp, #304]                 // 8-byte Folded Reload
	add	x11, x11, x8
	ldr	x8, [sp, #312]                  // 8-byte Folded Reload
	add	x8, x8, x9
	stp	x11, x8, [sp, #304]             // 16-byte Folded Spill
	ldur	x8, [x29, #-256]                // 8-byte Folded Reload
	add	x8, x8, x9
	stur	x8, [x29, #-256]                // 8-byte Folded Spill
	ldr	x8, [sp, #216]                  // 8-byte Folded Reload
	cmp	x10, x8
	b.eq	.LBB34_16
.LBB34_21:                              //   Parent Loop BB34_17 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB34_26 Depth 3
                                        //       Child Loop BB34_35 Depth 3
                                        //         Child Loop BB34_47 Depth 4
                                        //         Child Loop BB34_41 Depth 4
                                        //         Child Loop BB34_44 Depth 4
                                        //         Child Loop BB34_54 Depth 4
                                        //         Child Loop BB34_51 Depth 4
	ldr	x8, [sp, #192]                  // 8-byte Folded Reload
	ldr	x9, [x8, #16]
	ldr	x8, [sp, #176]                  // 8-byte Folded Reload
	add	x24, x9, x8, lsl #2
	ldur	w8, [x29, #-188]                // 4-byte Folded Reload
	stur	x9, [x29, #-200]                // 8-byte Folded Spill
	tbnz	w8, #3, .LBB34_31
// %bb.22:                              //   in Loop: Header=BB34_21 Depth=2
	cmp	x27, #1
	b.lt	.LBB34_32
// %bb.23:                              // %.lr.ph.i
                                        //   in Loop: Header=BB34_21 Depth=2
	ldr	x8, [sp, #168]                  // 8-byte Folded Reload
	mov	x23, xzr
	ldur	x9, [x29, #-248]                // 8-byte Folded Reload
	ldur	x22, [x29, #-184]               // 8-byte Folded Reload
	ldr	w8, [x8, x9, lsl #2]
	scvtf	s15, w8
	b	.LBB34_26
	.p2align	5, , 16
.LBB34_24:                              //   in Loop: Header=BB34_26 Depth=3
	asr	w8, w23, #1
	ldp	s2, s3, [x29, #-104]
	scvtf	s4, w8
	mov	w8, #4719                       // =0x126f
	movk	w8, #14979, lsl #16
	fmov	s14, s10
	fsub	s4, s4, s2
	fsub	s2, s3, s2
	fmov	s3, w8
	fcmp	s2, s3
	fcsel	s2, s3, s2, mi
	fmov	s3, wzr
	fdiv	s2, s4, s2
	fcmp	s2, #0.0
	fcsel	s2, s3, s2, mi
	fcmp	s2, s13
	fcsel	s2, s13, s2, gt
	fsub	s2, s13, s2
	fmul	s2, s9, s2
	fsub	s3, s13, s2
	fmul	s1, s1, s2
	fmadd	s0, s0, s3, s1
.LBB34_25:                              // %rope_yarn.exit.i
                                        //   in Loop: Header=BB34_26 Depth=3
	sub	x0, x29, #108
	sub	x1, x29, #112
	add	x27, x24, x23, lsl #2
	bl	sincosf
	ldp	s1, s0, [x29, #-112]
	fmul	s15, s11, s15
	add	x22, x22, #4
	fmul	s0, s0, s14
	fmul	s1, s1, s14
	fmul	s0, s12, s0
	str	s1, [x24, x23, lsl #2]
	add	x23, x23, #2
	str	s0, [x27, #4]
	ldur	x27, [x29, #-144]               // 8-byte Folded Reload
	cmp	x23, x27
	b.ge	.LBB34_32
.LBB34_26:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	x8, [x29, #-184]                // 8-byte Folded Reload
	cbz	x8, .LBB34_28
// %bb.27:                              //   in Loop: Header=BB34_26 Depth=3
	ldr	s0, [x22]
	b	.LBB34_29
	.p2align	5, , 16
.LBB34_28:                              //   in Loop: Header=BB34_26 Depth=3
	fmov	s0, #1.00000000
.LBB34_29:                              //   in Loop: Header=BB34_26 Depth=3
	fdiv	s1, s15, s0
	fcmp	s9, #0.0
	fmul	s0, s8, s1
	b.ne	.LBB34_24
// %bb.30:                              //   in Loop: Header=BB34_26 Depth=3
	ldur	s14, [x29, #-236]               // 4-byte Folded Reload
	b	.LBB34_25
	.p2align	5, , 16
.LBB34_31:                              //   in Loop: Header=BB34_21 Depth=2
	mov	w12, w8
	ldr	x8, [sp, #168]                  // 8-byte Folded Reload
	fmov	s4, s8
	ldur	x9, [x29, #-248]                // 8-byte Folded Reload
	fmov	s5, s9
	fmov	s7, s12
	ldp	x11, x10, [sp, #128]            // 16-byte Folded Reload
	cmp	w12, #24
	ldur	s6, [x29, #-236]                // 4-byte Folded Reload
	cset	w1, eq
	sub	x0, x29, #96
	add	x8, x8, x9, lsl #2
	ldr	x9, [sp, #216]                  // 8-byte Folded Reload
	sub	x3, x29, #104
	ldur	x2, [x29, #-184]                // 8-byte Folded Reload
	mov	x4, x27
	mov	x5, x24
	ldr	w10, [x8, x10]
	ldr	w11, [x8, x11]
	ldr	w9, [x8, x9, lsl #2]
	ldr	w8, [x8]
	str	s11, [sp]
	scvtf	s2, w10
	scvtf	s3, w11
	scvtf	s0, w8
	scvtf	s1, w9
	bl	ggml_mrope_cache_init
.LBB34_32:                              // %ggml_rope_cache_init.exit
                                        //   in Loop: Header=BB34_21 Depth=2
	ldur	x9, [x29, #-160]                // 8-byte Folded Reload
	cmp	x9, #1
	b.lt	.LBB34_20
// %bb.33:                              // %.lr.ph378
                                        //   in Loop: Header=BB34_21 Depth=2
	ldur	w10, [x29, #-132]               // 4-byte Folded Reload
	mov	x8, xzr
	add	w9, w10, w9
	ldur	x10, [x29, #-248]               // 8-byte Folded Reload
	ldur	x11, [x29, #-200]               // 8-byte Folded Reload
	ldur	x12, [x29, #-256]               // 8-byte Folded Reload
	ldp	x14, x13, [sp, #304]            // 16-byte Folded Reload
	str	w9, [sp, #204]                  // 4-byte Folded Spill
	ldr	x9, [sp, #224]                  // 8-byte Folded Reload
	mul	x9, x10, x9
	ldr	x10, [sp, #152]                 // 8-byte Folded Reload
	ldp	x16, x15, [sp, #288]            // 16-byte Folded Reload
	ldr	x4, [sp, #248]                  // 8-byte Folded Reload
	ldp	x0, x17, [sp, #272]             // 16-byte Folded Reload
	add	x10, x11, x10
	ldp	x3, x2, [sp, #256]              // 16-byte Folded Reload
	stur	x10, [x29, #-232]               // 8-byte Folded Spill
	ldr	x10, [sp, #144]                 // 8-byte Folded Reload
	add	x10, x11, x10
	str	x10, [sp, #240]                 // 8-byte Folded Spill
	ldr	x10, [sp, #160]                 // 8-byte Folded Reload
	add	x9, x10, x9
	str	x9, [sp, #232]                  // 8-byte Folded Spill
	b	.LBB34_35
	.p2align	5, , 16
.LBB34_34:                              // %.loopexit
                                        //   in Loop: Header=BB34_35 Depth=3
	ldur	x10, [x29, #-176]               // 8-byte Folded Reload
	add	x8, x8, #1
	add	x4, x4, x10
	ldp	x9, x11, [x29, #-160]           // 16-byte Folded Reload
	add	x3, x3, x11
	add	x2, x2, x11
	add	x0, x0, x10
	add	x17, x17, x10
	add	x16, x16, x11
	add	x15, x15, x10
	add	x14, x14, x11
	add	x13, x13, x10
	add	x12, x12, x10
	cmp	x8, x9
	b.eq	.LBB34_19
.LBB34_35:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB34_47 Depth 4
                                        //         Child Loop BB34_41 Depth 4
                                        //         Child Loop BB34_44 Depth 4
                                        //         Child Loop BB34_54 Depth 4
                                        //         Child Loop BB34_51 Depth 4
	ldur	w9, [x29, #-132]                // 4-byte Folded Reload
	add	w10, w9, #1
	stur	w10, [x29, #-132]               // 4-byte Folded Spill
	ldur	w10, [x29, #-164]               // 4-byte Folded Reload
	cmp	w9, w10
	b.lt	.LBB34_34
// %bb.36:                              //   in Loop: Header=BB34_35 Depth=3
	ldur	w10, [x29, #-220]               // 4-byte Folded Reload
	cmp	w9, w10
	b.ge	.LBB34_20
// %bb.37:                              //   in Loop: Header=BB34_35 Depth=3
	ldur	w9, [x29, #-224]                // 4-byte Folded Reload
	cbz	w9, .LBB34_42
// %bb.38:                              //   in Loop: Header=BB34_35 Depth=3
	ldur	w9, [x29, #-188]                // 4-byte Folded Reload
	cmp	w9, #24
	b.ne	.LBB34_45
// %bb.39:                              // %.preheader362
                                        //   in Loop: Header=BB34_35 Depth=3
	cmp	w21, #1
	b.lt	.LBB34_49
// %bb.40:                              // %.lr.ph369
                                        //   in Loop: Header=BB34_35 Depth=3
	ldur	x9, [x29, #-208]                // 8-byte Folded Reload
	stur	x12, [x29, #-200]               // 8-byte Folded Spill
	mov	x5, xzr
	ldr	x10, [sp, #208]                 // 8-byte Folded Reload
	mov	w27, #2004877312                // =0x77800000
	mov	w12, #142606336                 // =0x8800000
	ldr	x9, [x9, #248]
	add	x6, x9, x0
	ldur	x9, [x29, #-216]                // 8-byte Folded Reload
	add	x7, x6, x10
	ldr	x24, [x9, #248]
	add	x9, x10, x3
	ldur	x10, [x29, #-232]               // 8-byte Folded Reload
	.p2align	5, , 16
.LBB34_41:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        //       Parent Loop BB34_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w22, [x24, x3]
	fmov	s6, w27
	ldrh	w23, [x24, x9]
	fmov	s7, w12
	ldp	s0, s1, [x10, #-4]
	add	x10, x10, #8
	ldur	x11, [x29, #-120]               // 8-byte Folded Reload
	add	x24, x24, x11
	ldr	s2, [x19, x22, lsl #2]
	ldr	s3, [x19, x23, lsl #2]
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	fabs	s5, s4
	fmov	w22, s4
	fabs	s1, s0
	fmul	s4, s5, s6
	fmul	s1, s1, s6
	and	w27, w22, #0x7f800000
	ubfx	w30, w22, #23, #8
	lsl	w23, w22, #1
	lsr	w22, w22, #31
	add	w27, w27, w28
	cmp	w30, #113
	fmov	w30, s0
	csel	w27, w25, w27, lo
	cmp	w23, w20
	fmul	s4, s4, s7
	fmov	s5, w27
	fmul	s1, s1, s7
	and	w1, w30, #0x7f800000
	add	w1, w1, w28
	fadd	s4, s4, s5
	fmov	w27, s4
	lsr	w23, w27, #13
	and	w27, w27, #0xfff
	and	w23, w23, #0x7c00
	add	w23, w23, w27
	ubfx	w27, w30, #23, #8
	csel	w23, w26, w23, hi
	cmp	w27, #113
	csel	w1, w25, w1, lo
	orr	w22, w23, w22, lsl #15
	fmov	s0, w1
	strh	w22, [x6, x5]
	fadd	s0, s1, s0
	fmov	w1, s0
	lsr	w27, w1, #13
	and	w1, w1, #0xfff
	and	w27, w27, #0x7c00
	add	w1, w27, w1
	lsl	w27, w30, #1
	cmp	w27, w20
	lsr	w27, w30, #31
	csel	w1, w26, w1, hi
	orr	w1, w1, w27, lsl #15
	mov	w27, #2004877312                // =0x77800000
	strh	w1, [x7, x5]
	add	x5, x5, #2
	cmp	x5, x21
	b.lt	.LBB34_41
	b	.LBB34_48
.LBB34_42:                              // %.preheader360
                                        //   in Loop: Header=BB34_35 Depth=3
	mov	w27, #2004877312                // =0x77800000
	mov	w30, #142606336                 // =0x8800000
	stur	x12, [x29, #-200]               // 8-byte Folded Spill
	cmp	w21, #1
	b.lt	.LBB34_48
// %bb.43:                              // %.lr.ph371
                                        //   in Loop: Header=BB34_35 Depth=3
	ldur	x9, [x29, #-208]                // 8-byte Folded Reload
	mov	x5, xzr
	ldur	x24, [x29, #-232]               // 8-byte Folded Reload
	ldr	x9, [x9, #248]
	add	x6, x9, x17
	ldur	x9, [x29, #-216]                // 8-byte Folded Reload
	ldr	x9, [x9, #248]
	add	x7, x9, x16
	.p2align	5, , 16
.LBB34_44:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        //       Parent Loop BB34_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w9, [x7, #-2]
	add	x5, x5, #2
	fmov	s6, w27
	ldp	s0, s1, [x24, #-4]
	add	x24, x24, #8
	fmov	s7, w30
	ldr	s2, [x19, x9, lsl #2]
	ldrh	w9, [x7]
	ldr	s3, [x19, x9, lsl #2]
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	fabs	s5, s4
	fmov	w9, s4
	fabs	s1, s0
	fmul	s4, s5, s6
	fmul	s1, s1, s6
	and	w11, w9, #0x7f800000
	ubfx	w1, w9, #23, #8
	lsl	w10, w9, #1
	lsr	w9, w9, #31
	add	w11, w11, w28
	cmp	w1, #113
	fmov	w1, s0
	csel	w11, w25, w11, lo
	cmp	w10, w20
	fmul	s4, s4, s7
	fmov	s5, w11
	fmul	s1, s1, s7
	ubfx	w22, w1, #23, #8
	fadd	s4, s4, s5
	fmov	w11, s4
	lsr	w10, w11, #13
	and	w11, w11, #0xfff
	and	w10, w10, #0x7c00
	add	w10, w10, w11
	and	w11, w1, #0x7f800000
	add	w11, w11, w28
	csel	w10, w26, w10, hi
	cmp	w22, #113
	csel	w11, w25, w11, lo
	orr	w9, w10, w9, lsl #15
	fmov	s0, w11
	lsl	w11, w1, #1
	lsr	w1, w1, #31
	cmp	w11, w20
	sturh	w9, [x6, #-2]
	fadd	s0, s1, s0
	fmov	w22, s0
	lsr	w23, w22, #13
	and	w22, w22, #0xfff
	and	w11, w23, #0x7c00
	add	w11, w11, w22
	csel	w10, w26, w11, hi
	orr	w9, w10, w1, lsl #15
	strh	w9, [x6], #4
	ldur	x9, [x29, #-128]                // 8-byte Folded Reload
	add	x7, x7, x9
	cmp	x5, x21
	b.lt	.LBB34_44
	b	.LBB34_48
.LBB34_45:                              // %.preheader364
                                        //   in Loop: Header=BB34_35 Depth=3
	cmp	w21, #1
	b.lt	.LBB34_52
// %bb.46:                              // %.lr.ph
                                        //   in Loop: Header=BB34_35 Depth=3
	ldp	x10, x9, [x29, #-216]           // 16-byte Folded Reload
	stur	x12, [x29, #-200]               // 8-byte Folded Spill
	mov	x5, xzr
	mov	x6, xzr
	mov	w27, #2004877312                // =0x77800000
	mov	w12, #142606336                 // =0x8800000
	ldr	x10, [x10, #248]
	ldr	x9, [x9, #248]
	add	x24, x10, x3
	add	x30, x10, x2
	ldur	x10, [x29, #-232]               // 8-byte Folded Reload
	add	x7, x9, x4
	add	x9, x9, x0
	.p2align	5, , 16
.LBB34_47:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        //       Parent Loop BB34_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldrh	w1, [x24, x5]
	fmov	s6, w27
	ldrh	w22, [x30, x5]
	fmov	s7, w12
	ldp	s0, s1, [x10, #-4]
	add	x10, x10, #8
	ldr	s2, [x19, x1, lsl #2]
	ldr	s3, [x19, x22, lsl #2]
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	fabs	s5, s4
	fmov	w1, s4
	fabs	s1, s0
	fmul	s4, s5, s6
	fmul	s1, s1, s6
	and	w23, w1, #0x7f800000
	ubfx	w27, w1, #23, #8
	lsl	w22, w1, #1
	lsr	w1, w1, #31
	add	w23, w23, w28
	cmp	w27, #113
	fmov	w27, s0
	csel	w23, w25, w23, lo
	cmp	w22, w20
	fmul	s4, s4, s7
	fmov	s5, w23
	fmul	s1, s1, s7
	and	w11, w27, #0x7f800000
	add	w11, w11, w28
	fadd	s4, s4, s5
	fmov	w23, s4
	lsr	w22, w23, #13
	and	w23, w23, #0xfff
	and	w22, w22, #0x7c00
	add	w22, w22, w23
	ubfx	w23, w27, #23, #8
	csel	w22, w26, w22, hi
	cmp	w23, #113
	csel	w11, w25, w11, lo
	orr	w1, w22, w1, lsl #15
	fmov	s0, w11
	strh	w1, [x9, x6]
	fadd	s0, s1, s0
	fmov	w11, s0
	lsr	w23, w11, #13
	and	w11, w11, #0xfff
	and	w23, w23, #0x7c00
	add	w11, w23, w11
	lsl	w23, w27, #1
	cmp	w23, w20
	lsr	w23, w27, #31
	mov	w27, #2004877312                // =0x77800000
	csel	w11, w26, w11, hi
	orr	w11, w11, w23, lsl #15
	strh	w11, [x7, x6]
	ldur	x11, [x29, #-120]               // 8-byte Folded Reload
	add	x6, x6, #2
	add	x5, x5, x11
	cmp	x6, x21
	b.lt	.LBB34_47
.LBB34_48:                              // %.loopexit361
                                        //   in Loop: Header=BB34_35 Depth=3
	ldur	w9, [x29, #-188]                // 4-byte Folded Reload
	ldur	x27, [x29, #-144]               // 8-byte Folded Reload
	ldur	x12, [x29, #-200]               // 8-byte Folded Reload
	cmp	w9, #24
	b.ne	.LBB34_52
.LBB34_49:                              // %.preheader
                                        //   in Loop: Header=BB34_35 Depth=3
	mov	w30, #142606336                 // =0x8800000
	cmp	x27, x21
	b.le	.LBB34_34
// %bb.50:                              // %.lr.ph375
                                        //   in Loop: Header=BB34_35 Depth=3
	ldp	x9, x10, [x29, #-216]           // 16-byte Folded Reload
	ldr	x9, [x9, #248]
	ldp	x11, x24, [sp, #232]            // 16-byte Folded Reload
	ldr	x10, [x10, #248]
	add	x9, x9, x11
	ldur	x11, [x29, #-152]               // 8-byte Folded Reload
	add	x5, x10, x13
	add	x7, x10, x12
	mul	x11, x8, x11
	add	x6, x9, x11
	mov	x9, x21
	.p2align	5, , 16
.LBB34_51:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        //       Parent Loop BB34_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldur	x11, [x29, #-120]               // 8-byte Folded Reload
	asr	x10, x9, #1
	add	x9, x9, #2
	ldp	s0, s1, [x24, #-4]
	add	x24, x24, #8
	fmov	s7, w30
	mul	x10, x10, x11
	add	x10, x6, x10
	ldrh	w11, [x10]
	ldrh	w10, [x10, x21, lsl #1]
	ldr	s2, [x19, x11, lsl #2]
	ldr	s3, [x19, x10, lsl #2]
	mov	w10, #2004877312                // =0x77800000
	fmov	s6, w10
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	fabs	s5, s4
	fmov	w10, s4
	fabs	s1, s0
	fmul	s4, s5, s6
	fmul	s1, s1, s6
	and	w1, w10, #0x7f800000
	ubfx	w22, w10, #23, #8
	lsl	w11, w10, #1
	lsr	w10, w10, #31
	add	w1, w1, w28
	cmp	w22, #113
	csel	w1, w25, w1, lo
	cmp	w11, w20
	fmov	s5, w1
	fmul	s4, s4, s7
	fmul	s1, s1, s7
	fadd	s4, s4, s5
	fmov	w1, s4
	lsr	w22, w1, #13
	and	w11, w1, #0xfff
	and	w1, w22, #0x7c00
	add	w11, w1, w11
	fmov	w1, s0
	csel	w11, w26, w11, hi
	orr	w10, w11, w10, lsl #15
	strh	w10, [x7], #2
	and	w22, w1, #0x7f800000
	ubfx	w23, w1, #23, #8
	add	w22, w22, w28
	cmp	w23, #113
	csel	w22, w25, w22, lo
	fmov	s0, w22
	lsl	w22, w1, #1
	lsr	w1, w1, #31
	cmp	w22, w20
	fadd	s0, s1, s0
	fmov	w10, s0
	lsr	w11, w10, #13
	and	w10, w10, #0xfff
	and	w11, w11, #0x7c00
	add	w10, w11, w10
	csel	w10, w26, w10, hi
	orr	w10, w10, w1, lsl #15
	strh	w10, [x5], #2
	cmp	x9, x27
	b.lt	.LBB34_51
	b	.LBB34_34
	.p2align	5, , 16
.LBB34_52:                              // %.preheader358
                                        //   in Loop: Header=BB34_35 Depth=3
	cmp	x27, x21
	b.le	.LBB34_34
// %bb.53:                              // %.lr.ph373
                                        //   in Loop: Header=BB34_35 Depth=3
	ldp	x10, x9, [x29, #-216]           // 16-byte Folded Reload
	mov	x5, x21
	ldr	x9, [x9, #248]
	ldr	x10, [x10, #248]
	add	x9, x9, x15
	add	x10, x10, x14
	.p2align	5, , 16
.LBB34_54:                              //   Parent Loop BB34_17 Depth=1
                                        //     Parent Loop BB34_21 Depth=2
                                        //       Parent Loop BB34_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldurh	w11, [x10, #-2]
	add	x5, x5, #2
	sturh	w11, [x9, #-2]
	ldrh	w11, [x10]
	strh	w11, [x9], #4
	ldur	x11, [x29, #-128]               // 8-byte Folded Reload
	add	x10, x10, x11
	cmp	x5, x27
	b.lt	.LBB34_54
	b	.LBB34_34
.LBB34_55:                              // %._crit_edge388
	add	sp, sp, #512
	.cfi_def_cfa wsp, 160
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d15, d14, [sp], #160            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB34_56:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.44
	add	x3, x3, :lo12:.L.str.44
	mov	w1, #8943                       // =0x22ef
	bl	ggml_abort
.LBB34_57:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.105
	add	x3, x3, :lo12:.L.str.105
	mov	w1, #8950                       // =0x22f6
	bl	ggml_abort
.LBB34_58:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.106
	add	x3, x3, :lo12:.L.str.106
	mov	w1, #8951                       // =0x22f7
	bl	ggml_abort
.LBB34_59:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.108
	add	x3, x3, :lo12:.L.str.108
	mov	w1, #8977                       // =0x2311
	bl	ggml_abort
.LBB34_60:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.109
	add	x3, x3, :lo12:.L.str.109
	mov	w1, #8982                       // =0x2316
	bl	ggml_abort
.LBB34_61:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.110
	add	x3, x3, :lo12:.L.str.110
	mov	w1, #8983                       // =0x2317
	bl	ggml_abort
.LBB34_62:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.107
	add	x3, x3, :lo12:.L.str.107
	mov	w1, #8973                       // =0x230d
	bl	ggml_abort
.Lfunc_end34:
	.size	ggml_compute_forward_rope_f16, .Lfunc_end34-ggml_compute_forward_rope_f16
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_compute_forward_rope_f32
	.type	ggml_compute_forward_rope_f32,@function
ggml_compute_forward_rope_f32:          // @ggml_compute_forward_rope_f32
	.cfi_startproc
// %bb.0:
	stp	d15, d14, [sp, #-160]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 160
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	.cfi_remember_state
	sub	sp, sp, #480
	ldp	x9, x8, [x1, #152]
	stur	x8, [x29, #-120]                // 8-byte Folded Spill
	ldr	q0, [x1, #128]
	ldp	w21, w8, [x1, #88]
	ldp	s12, s8, [x1, #104]
	ldr	x20, [x1, #168]
                                        // kill: def $w21 killed $w21 def $x21
	sxtw	x21, w21
	stur	q0, [x29, #-96]
	ldp	s9, s0, [x1, #112]
	stur	w8, [x29, #-148]                // 4-byte Folded Spill
	ldp	s13, s14, [x1, #120]
	ldr	w23, [x1, #100]
	ldr	x8, [x9, #48]
	stur	s0, [x29, #-180]                // 4-byte Folded Spill
	cmp	x8, #4
	b.ne	.LBB35_60
// %bb.1:
	ldp	x27, x8, [x9, #56]
	stur	x9, [x29, #-168]                // 8-byte Folded Spill
	ldp	x28, x25, [x1, #48]
	str	x0, [sp, #200]                  // 8-byte Folded Spill
	ldp	w26, w19, [x0]
	mov	x0, x1
	mov	w24, w2
                                        // kill: def $w26 killed $w26 def $x26
	sxtw	x26, w26
	stur	x1, [x29, #-160]                // 8-byte Folded Spill
	str	x8, [sp, #264]                  // 8-byte Folded Spill
	ldr	x8, [x9, #72]
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	ldp	x22, x8, [x1, #16]
	stur	x8, [x29, #-144]                // 8-byte Folded Spill
	ldp	x9, x10, [x1, #32]
	str	x9, [sp, #240]                  // 8-byte Folded Spill
	ldp	x9, x8, [x1, #64]
	str	x9, [sp, #256]                  // 8-byte Folded Spill
	stp	x10, x8, [sp, #8]               // 16-byte Folded Spill
	bl	ggml_nrows
	cmp	x22, x21
	b.lt	.LBB35_61
// %bb.2:
	tbnz	w21, #0, .LBB35_62
// %bb.3:
	add	w8, w19, w0
	scvtf	s0, w21
	sub	w8, w8, #1
	fmov	s1, #-2.00000000
	sdiv	w8, w8, w19
	fdiv	s1, s1, s0
	fmov	s0, s12
	mul	w9, w8, w26
	add	w8, w9, w8
	stur	w9, [x29, #-124]                // 4-byte Folded Spill
	cmp	w8, w0
	csel	w8, w8, w0, lt
	stur	w8, [x29, #-172]                // 4-byte Folded Spill
	bl	powf
	fmov	s11, s0
	fmov	s0, s12
	sub	x2, x29, #104
	fmov	s1, s13
	fmov	s2, s14
	mov	w0, w21
	mov	w1, w23
	bl	ggml_rope_yarn_corr_dims
	ldur	w9, [x29, #-148]                // 4-byte Folded Reload
	tbz	w9, #3, .LBB35_7
// %bb.4:
	ldur	w8, [x29, #-96]
	cmp	w8, #0
	b.gt	.LBB35_7
// %bb.5:
	ldur	w8, [x29, #-92]
	cmp	w8, #0
	b.gt	.LBB35_7
// %bb.6:
	ldur	w8, [x29, #-88]
	cmp	w8, #0
	b.le	.LBB35_66
.LBB35_7:
	cmp	w9, #24
	b.ne	.LBB35_9
// %bb.8:
	add	x8, x22, x22, lsr #63
	asr	x8, x8, #1
	cmp	x8, x21
	b.ne	.LBB35_63
.LBB35_9:
	cbz	x20, .LBB35_13
// %bb.10:
	ldr	w8, [x20]
	cbnz	w8, .LBB35_64
// %bb.11:
	ldr	x8, [x20, #16]
	asr	w9, w21, #1
	cmp	x8, w9, sxtw
	b.lt	.LBB35_65
// %bb.12:
	ldr	x8, [x20, #248]
	stur	x8, [x29, #-136]                // 8-byte Folded Spill
	b	.LBB35_14
.LBB35_13:
	stur	xzr, [x29, #-136]               // 8-byte Folded Spill
.LBB35_14:
	fmov	s0, #-1.00000000
	fmov	s13, #1.00000000
	tst	w24, #0x1
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	fcsel	s12, s13, s0, ne
	cmp	x8, #1
	b.lt	.LBB35_59
// %bb.15:                              // %.preheader366.lr.ph
	fdiv	s0, s13, s8
	ldur	x8, [x29, #-120]                // 8-byte Folded Reload
	ldr	x8, [x8, #248]
	str	x8, [sp, #184]                  // 8-byte Folded Spill
	add	x8, x22, #16
	mul	x19, x8, x26
	ldr	x8, [sp, #240]                  // 8-byte Folded Reload
	lsl	x9, x8, #3
	add	x8, x8, x8, lsl #1
	lsl	x8, x8, #2
	stp	x8, x9, [sp, #112]              // 16-byte Folded Spill
	bl	logf
	mov	w8, #52429                      // =0xcccd
	ldur	w11, [x29, #-148]               // 4-byte Folded Reload
	sub	x15, x21, #1
	movk	w8, #15820, lsl #16
	asr	w9, w21, #1
	str	x15, [sp, #232]                 // 8-byte Folded Spill
	fmov	s1, w8
	mov	w8, #10                         // =0xa
	lsl	x10, x19, #2
	lsl	x16, x21, #2
	str	x16, [sp, #216]                 // 8-byte Folded Spill
	mov	x12, xzr
	and	w8, w11, w8
	sbfiz	x11, x9, #2, #32
	str	x19, [sp, #192]                 // 8-byte Folded Spill
	stur	w8, [x29, #-176]                // 4-byte Folded Spill
	lsr	x8, x15, #1
	add	x9, x10, #4
	add	x8, x8, #1
	add	x10, x10, #8
	stur	wzr, [x29, #-120]               // 4-byte Folded Spill
	fmadd	s0, s0, s1, s13
	ldur	s1, [x29, #-180]                // 4-byte Folded Reload
	and	x8, x8, #0xfffffffffffffffe
	stp	x10, x9, [sp, #136]             // 16-byte Folded Spill
	lsl	x10, x28, #2
	stp	x10, x8, [sp, #168]             // 16-byte Folded Spill
	lsl	x8, x8, #1
	str	x8, [sp, #160]                  // 8-byte Folded Spill
	mov	x8, #4                          // =0x4
	madd	x10, x28, x21, x8
	add	x8, x21, x21, lsl #1
	add	x15, x16, #4
	mov	x13, xzr
	lsl	x16, x8, #1
	add	x8, x9, x21, lsl #2
	mov	x14, xzr
	lsl	x19, x28, #1
	lsl	x9, x21, #1
	mov	w17, #8                         // =0x8
	mov	x0, x11
	str	x8, [sp, #128]                  // 8-byte Folded Spill
	fmul	s10, s1, s0
	b	.LBB35_17
	.p2align	5, , 16
.LBB35_16:                              // %._crit_edge384
                                        //   in Loop: Header=BB35_17 Depth=1
	ldp	x14, x13, [sp, #88]             // 16-byte Folded Reload
	add	x14, x14, #1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	ldp	x10, x11, [sp, #72]             // 16-byte Folded Reload
	ldp	x8, x0, [sp, #24]               // 16-byte Folded Reload
	add	x13, x13, x9
	add	x11, x11, x9
	ldr	x12, [sp, #104]                 // 8-byte Folded Reload
	add	x10, x10, x9
	add	x0, x0, x8
	add	x12, x12, x8
	ldr	x17, [sp, #40]                  // 8-byte Folded Reload
	add	x17, x17, x8
	ldp	x16, x15, [sp, #56]             // 16-byte Folded Reload
	add	x15, x15, x8
	add	x16, x16, x8
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #8]                    // 8-byte Folded Reload
	cmp	x14, x8
	b.eq	.LBB35_59
.LBB35_17:                              // %.preheader366
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB35_21 Depth 2
                                        //       Child Loop BB35_26 Depth 3
                                        //       Child Loop BB35_35 Depth 3
                                        //         Child Loop BB35_47 Depth 4
                                        //         Child Loop BB35_41 Depth 4
                                        //         Child Loop BB35_49 Depth 4
                                        //         Child Loop BB35_58 Depth 4
                                        //         Child Loop BB35_55 Depth 4
	ldr	x8, [sp, #240]                  // 8-byte Folded Reload
	stp	x13, x12, [sp, #96]             // 16-byte Folded Spill
	stp	x11, x14, [sp, #80]             // 16-byte Folded Spill
	stp	x15, x10, [sp, #64]             // 16-byte Folded Spill
	stp	x9, x16, [sp, #48]              // 16-byte Folded Spill
	stp	x0, x17, [sp, #32]              // 16-byte Folded Spill
	cmp	x8, #1
	b.lt	.LBB35_16
// %bb.18:                              // %.lr.ph383
                                        //   in Loop: Header=BB35_17 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	stur	xzr, [x29, #-192]               // 8-byte Folded Spill
	stur	x15, [x29, #-216]               // 8-byte Folded Spill
	ldur	x26, [x29, #-144]               // 8-byte Folded Reload
	mul	x8, x14, x8
	stur	x13, [x29, #-256]               // 8-byte Folded Spill
	stp	x16, x9, [x29, #-208]           // 16-byte Folded Spill
	str	x0, [sp, #280]                  // 8-byte Folded Spill
	str	x8, [sp, #152]                  // 8-byte Folded Spill
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
	mul	x8, x14, x8
	stp	x17, x10, [x29, #-232]          // 16-byte Folded Spill
	str	x8, [sp, #272]                  // 8-byte Folded Spill
	stp	x11, x12, [x29, #-248]          // 16-byte Folded Spill
	b	.LBB35_21
	.p2align	5, , 16
.LBB35_19:                              //   in Loop: Header=BB35_21 Depth=2
	ldr	w8, [sp, #212]                  // 4-byte Folded Reload
	stur	w8, [x29, #-120]                // 4-byte Folded Spill
.LBB35_20:                              // %._crit_edge
                                        //   in Loop: Header=BB35_21 Depth=2
	ldr	x8, [sp, #264]                  // 8-byte Folded Reload
	ldr	x9, [sp, #280]                  // 8-byte Folded Reload
	add	x9, x9, x8
	ldur	x11, [x29, #-256]               // 8-byte Folded Reload
	ldur	x10, [x29, #-192]               // 8-byte Folded Reload
	add	x10, x10, #1
	str	x9, [sp, #280]                  // 8-byte Folded Spill
	ldr	x9, [sp, #256]                  // 8-byte Folded Reload
	stur	x10, [x29, #-192]               // 8-byte Folded Spill
	add	x11, x11, x9
	stur	x11, [x29, #-256]               // 8-byte Folded Spill
	ldur	x11, [x29, #-248]               // 8-byte Folded Reload
	add	x11, x11, x9
	stur	x11, [x29, #-248]               // 8-byte Folded Spill
	ldur	x11, [x29, #-240]               // 8-byte Folded Reload
	add	x11, x11, x8
	stur	x11, [x29, #-240]               // 8-byte Folded Spill
	ldur	x11, [x29, #-232]               // 8-byte Folded Reload
	add	x11, x11, x8
	stur	x11, [x29, #-232]               // 8-byte Folded Spill
	ldur	x11, [x29, #-224]               // 8-byte Folded Reload
	add	x11, x11, x9
	ldur	x9, [x29, #-216]                // 8-byte Folded Reload
	add	x9, x9, x8
	stp	x11, x9, [x29, #-224]           // 16-byte Folded Spill
	ldur	x9, [x29, #-208]                // 8-byte Folded Reload
	add	x9, x9, x8
	stur	x9, [x29, #-208]                // 8-byte Folded Spill
	ldur	x9, [x29, #-200]                // 8-byte Folded Reload
	add	x9, x9, x8
	ldr	x8, [sp, #240]                  // 8-byte Folded Reload
	stur	x9, [x29, #-200]                // 8-byte Folded Spill
	cmp	x10, x8
	b.eq	.LBB35_16
.LBB35_21:                              //   Parent Loop BB35_17 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB35_26 Depth 3
                                        //       Child Loop BB35_35 Depth 3
                                        //         Child Loop BB35_47 Depth 4
                                        //         Child Loop BB35_41 Depth 4
                                        //         Child Loop BB35_49 Depth 4
                                        //         Child Loop BB35_58 Depth 4
                                        //         Child Loop BB35_55 Depth 4
	ldp	x8, x10, [sp, #192]             // 16-byte Folded Reload
	ldur	w12, [x29, #-148]               // 4-byte Folded Reload
	ldr	x9, [x10, #16]
	add	x24, x9, x8, lsl #2
	str	x9, [sp, #248]                  // 8-byte Folded Spill
	tbnz	w12, #3, .LBB35_31
// %bb.22:                              //   in Loop: Header=BB35_21 Depth=2
	cmp	x22, #1
	b.lt	.LBB35_32
// %bb.23:                              // %.lr.ph.i
                                        //   in Loop: Header=BB35_21 Depth=2
	ldr	x8, [sp, #184]                  // 8-byte Folded Reload
	mov	x20, xzr
	ldur	x9, [x29, #-192]                // 8-byte Folded Reload
	ldur	x23, [x29, #-136]               // 8-byte Folded Reload
	ldr	w8, [x8, x9, lsl #2]
	scvtf	s15, w8
	b	.LBB35_26
	.p2align	5, , 16
.LBB35_24:                              //   in Loop: Header=BB35_26 Depth=3
	asr	w8, w20, #1
	ldp	s2, s3, [x29, #-104]
	scvtf	s4, w8
	mov	w8, #4719                       // =0x126f
	movk	w8, #14979, lsl #16
	fmov	s14, s10
	fsub	s4, s4, s2
	fsub	s2, s3, s2
	fmov	s3, w8
	fcmp	s2, s3
	fcsel	s2, s3, s2, mi
	fmov	s3, wzr
	fdiv	s2, s4, s2
	fcmp	s2, #0.0
	fcsel	s2, s3, s2, mi
	fcmp	s2, s13
	fcsel	s2, s13, s2, gt
	fsub	s2, s13, s2
	fmul	s2, s9, s2
	fsub	s3, s13, s2
	fmul	s1, s1, s2
	fmadd	s0, s0, s3, s1
.LBB35_25:                              // %rope_yarn.exit.i
                                        //   in Loop: Header=BB35_26 Depth=3
	sub	x0, x29, #108
	sub	x1, x29, #112
	add	x26, x24, x20, lsl #2
	bl	sincosf
	ldp	s1, s0, [x29, #-112]
	fmul	s15, s11, s15
	add	x23, x23, #4
	fmul	s0, s0, s14
	fmul	s1, s1, s14
	fmul	s0, s12, s0
	str	s1, [x24, x20, lsl #2]
	add	x20, x20, #2
	str	s0, [x26, #4]
	ldur	x26, [x29, #-144]               // 8-byte Folded Reload
	cmp	x20, x22
	b.ge	.LBB35_32
.LBB35_26:                              //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	x8, [x29, #-136]                // 8-byte Folded Reload
	cbz	x8, .LBB35_28
// %bb.27:                              //   in Loop: Header=BB35_26 Depth=3
	ldr	s0, [x23]
	b	.LBB35_29
	.p2align	5, , 16
.LBB35_28:                              //   in Loop: Header=BB35_26 Depth=3
	fmov	s0, #1.00000000
.LBB35_29:                              //   in Loop: Header=BB35_26 Depth=3
	fdiv	s1, s15, s0
	fcmp	s9, #0.0
	fmul	s0, s8, s1
	b.ne	.LBB35_24
// %bb.30:                              //   in Loop: Header=BB35_26 Depth=3
	ldur	s14, [x29, #-180]               // 4-byte Folded Reload
	b	.LBB35_25
	.p2align	5, , 16
.LBB35_31:                              //   in Loop: Header=BB35_21 Depth=2
	ldr	x8, [sp, #184]                  // 8-byte Folded Reload
	fmov	s4, s8
	fmov	s5, s9
	ldur	x9, [x29, #-192]                // 8-byte Folded Reload
	fmov	s7, s12
	cmp	w12, #24
	ldp	x11, x10, [sp, #112]            // 16-byte Folded Reload
	cset	w1, eq
	ldur	s6, [x29, #-180]                // 4-byte Folded Reload
	sub	x0, x29, #96
	sub	x3, x29, #104
	add	x8, x8, x9, lsl #2
	ldr	x9, [sp, #240]                  // 8-byte Folded Reload
	mov	x4, x22
	ldur	x2, [x29, #-136]                // 8-byte Folded Reload
	mov	x5, x24
	ldr	w10, [x8, x10]
	ldr	w11, [x8, x11]
	ldr	w9, [x8, x9, lsl #2]
	ldr	w8, [x8]
	str	s11, [sp]
	scvtf	s2, w10
	scvtf	s3, w11
	scvtf	s0, w8
	scvtf	s1, w9
	bl	ggml_mrope_cache_init
.LBB35_32:                              // %ggml_rope_cache_init.exit
                                        //   in Loop: Header=BB35_21 Depth=2
	cmp	x26, #1
	b.lt	.LBB35_20
// %bb.33:                              // %.lr.ph378
                                        //   in Loop: Header=BB35_21 Depth=2
	ldr	x10, [sp, #144]                 // 8-byte Folded Reload
	mov	x8, xzr
	ldr	x13, [sp, #248]                 // 8-byte Folded Reload
	add	x11, x13, x10
	ldur	w9, [x29, #-120]                // 4-byte Folded Reload
	ldr	x10, [sp, #136]                 // 8-byte Folded Reload
	add	w9, w9, w26
	ldur	x12, [x29, #-192]               // 8-byte Folded Reload
	str	w9, [sp, #212]                  // 4-byte Folded Spill
	ldr	x9, [sp, #264]                  // 8-byte Folded Reload
	add	x10, x13, x10
	ldr	x5, [sp, #280]                  // 8-byte Folded Reload
	ldp	x15, x14, [x29, #-208]          // 16-byte Folded Reload
	str	x10, [sp, #224]                 // 8-byte Folded Spill
	ldr	x10, [sp, #256]                 // 8-byte Folded Reload
	mul	x9, x12, x9
	mul	x12, x12, x10
	ldr	x10, [sp, #128]                 // 8-byte Folded Reload
	ldp	x17, x16, [x29, #-224]          // 16-byte Folded Reload
	ldp	x1, x0, [x29, #-240]            // 16-byte Folded Reload
	add	x13, x13, x10
	ldr	x10, [sp, #152]                 // 8-byte Folded Reload
	ldp	x4, x3, [x29, #-256]            // 16-byte Folded Reload
	add	x2, x10, x9
	b	.LBB35_35
	.p2align	5, , 16
.LBB35_34:                              // %.loopexit
                                        //   in Loop: Header=BB35_35 Depth=3
	add	x8, x8, #1
	add	x5, x5, x27
	add	x4, x4, x25
	add	x3, x3, x25
	add	x1, x1, x27
	add	x0, x0, x27
	add	x17, x17, x25
	add	x16, x16, x27
	add	x15, x15, x27
	add	x14, x14, x27
	cmp	x8, x26
	b.eq	.LBB35_19
.LBB35_35:                              //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB35_47 Depth 4
                                        //         Child Loop BB35_41 Depth 4
                                        //         Child Loop BB35_49 Depth 4
                                        //         Child Loop BB35_58 Depth 4
                                        //         Child Loop BB35_55 Depth 4
	ldur	w9, [x29, #-120]                // 4-byte Folded Reload
	add	w10, w9, #1
	stur	w10, [x29, #-120]               // 4-byte Folded Spill
	ldur	w10, [x29, #-124]               // 4-byte Folded Reload
	cmp	w9, w10
	b.lt	.LBB35_34
// %bb.36:                              //   in Loop: Header=BB35_35 Depth=3
	ldur	w10, [x29, #-172]               // 4-byte Folded Reload
	cmp	w9, w10
	b.ge	.LBB35_20
// %bb.37:                              //   in Loop: Header=BB35_35 Depth=3
	ldur	w9, [x29, #-176]                // 4-byte Folded Reload
	cbz	w9, .LBB35_42
// %bb.38:                              //   in Loop: Header=BB35_35 Depth=3
	ldur	w9, [x29, #-148]                // 4-byte Folded Reload
	cmp	w9, #24
	b.ne	.LBB35_45
// %bb.39:                              // %.preheader362
                                        //   in Loop: Header=BB35_35 Depth=3
	cmp	w21, #1
	b.lt	.LBB35_53
// %bb.40:                              // %.lr.ph369
                                        //   in Loop: Header=BB35_35 Depth=3
	ldp	x9, x20, [x29, #-168]           // 16-byte Folded Reload
	mov	x6, xzr
	ldr	x10, [sp, #216]                 // 8-byte Folded Reload
	mov	x23, x11
	add	x7, x10, x1
	ldr	x9, [x9, #248]
	ldr	x20, [x20, #248]
	add	x10, x10, x4
	.p2align	5, , 16
.LBB35_41:                              //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        //       Parent Loop BB35_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s0, s1, [x23, #-4]
	add	x6, x6, #2
	ldr	s2, [x9, x1]
	add	x23, x23, #8
	ldr	s3, [x9, x7]
	add	x9, x9, #4
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	str	s4, [x20, x4]
	str	s0, [x20, x10]
	add	x20, x20, x28
	cmp	x6, x21
	b.lt	.LBB35_41
	b	.LBB35_52
.LBB35_42:                              // %.preheader360
                                        //   in Loop: Header=BB35_35 Depth=3
	cmp	w21, #1
	b.lt	.LBB35_52
// %bb.43:                              // %.lr.ph371
                                        //   in Loop: Header=BB35_35 Depth=3
	ldp	x10, x9, [x29, #-168]           // 16-byte Folded Reload
	ldr	x7, [x10, #248]
	ldr	x6, [x9, #248]
	cmp	w21, #3
	b.hs	.LBB35_48
// %bb.44:                              //   in Loop: Header=BB35_35 Depth=3
	mov	x9, xzr
	ldr	x10, [sp, #232]                 // 8-byte Folded Reload
	tbz	w10, #1, .LBB35_51
	b	.LBB35_52
.LBB35_45:                              // %.preheader364
                                        //   in Loop: Header=BB35_35 Depth=3
	cmp	w21, #1
	b.lt	.LBB35_56
// %bb.46:                              // %.lr.ph
                                        //   in Loop: Header=BB35_35 Depth=3
	ldp	x9, x10, [x29, #-168]           // 16-byte Folded Reload
	mov	x6, xzr
	mov	x7, xzr
	ldr	x9, [x9, #248]
	ldr	x10, [x10, #248]
	add	x20, x9, x5
	add	x23, x10, x4
	add	x30, x10, x3
	add	x9, x9, x1
	mov	x10, x11
	.p2align	5, , 16
.LBB35_47:                              //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        //       Parent Loop BB35_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s1, s2, [x10, #-4]
	add	x7, x7, #2
	ldr	s0, [x9], #4
	add	x10, x10, #8
	ldr	s3, [x20], #4
	fnmul	s4, s3, s2
	fmadd	s4, s0, s1, s4
	fmul	s1, s1, s3
	fmadd	s0, s0, s2, s1
	str	s4, [x23, x6]
	str	s0, [x30, x6]
	add	x6, x6, x28
	cmp	x7, x21
	b.lt	.LBB35_47
	b	.LBB35_52
.LBB35_48:                              // %.lr.ph371.new.preheader
                                        //   in Loop: Header=BB35_35 Depth=3
	ldr	x23, [sp, #224]                 // 8-byte Folded Reload
	add	x9, x7, x0
	mov	x20, x6
	ldp	x30, x10, [sp, #168]            // 16-byte Folded Reload
	.p2align	5, , 16
.LBB35_49:                              // %.lr.ph371.new
                                        //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        //       Parent Loop BB35_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s0, s1, [x23, #-8]
	add	x26, x20, x4
	ldp	s2, s3, [x9, #-8]
	subs	x10, x10, #2
	add	x20, x20, x30
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	stp	s4, s0, [x26]
	add	x26, x26, x19
	ldp	s0, s1, [x23], #16
	ldp	s2, s3, [x9], #16
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	stp	s4, s0, [x26]
	b.ne	.LBB35_49
// %bb.50:                              //   in Loop: Header=BB35_35 Depth=3
	ldr	x9, [sp, #160]                  // 8-byte Folded Reload
	ldur	x26, [x29, #-144]               // 8-byte Folded Reload
	ldr	x10, [sp, #232]                 // 8-byte Folded Reload
	tbnz	w10, #1, .LBB35_52
.LBB35_51:                              // %.loopexit361.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB35_35 Depth=3
	add	x10, x7, x2
	mul	x7, x8, x27
	add	x10, x10, x7
	ldr	x7, [sp, #272]                  // 8-byte Folded Reload
	add	x10, x10, x9, lsl #2
	add	x7, x7, x12
	ldp	s2, s3, [x10]
	add	x6, x6, x7
	add	x7, x24, x9, lsl #2
	madd	x6, x8, x25, x6
	madd	x9, x9, x28, x6
	ldp	s0, s1, [x7]
	fnmul	s4, s3, s1
	fmadd	s4, s2, s0, s4
	fmul	s0, s0, s3
	fmadd	s0, s2, s1, s0
	stp	s4, s0, [x9]
	.p2align	5, , 16
.LBB35_52:                              // %.loopexit361
                                        //   in Loop: Header=BB35_35 Depth=3
	ldur	w9, [x29, #-148]                // 4-byte Folded Reload
	cmp	w9, #24
	b.ne	.LBB35_56
.LBB35_53:                              // %.preheader
                                        //   in Loop: Header=BB35_35 Depth=3
	cmp	x22, x21
	b.le	.LBB35_34
// %bb.54:                              // %.lr.ph375
                                        //   in Loop: Header=BB35_35 Depth=3
	ldur	x9, [x29, #-168]                // 8-byte Folded Reload
	mov	x7, x13
	mov	x20, x21
	ldr	x6, [sp, #272]                  // 8-byte Folded Reload
	add	x6, x6, x12
	ldr	x10, [x9, #248]
	ldur	x9, [x29, #-160]                // 8-byte Folded Reload
	ldr	x9, [x9, #248]
	add	x6, x9, x6
	add	x9, x10, x15
	add	x10, x10, x14
	madd	x6, x8, x25, x6
	.p2align	5, , 16
.LBB35_55:                              //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        //       Parent Loop BB35_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldp	s1, s2, [x7, #-4]
	asr	x23, x20, #1
	ldr	s0, [x10], #4
	nop
	madd	x23, x23, x28, x6
	ldr	s3, [x9], #4
	add	x20, x20, #2
	add	x7, x7, #8
	fnmul	s4, s3, s2
	fmadd	s4, s0, s1, s4
	fmul	s1, s1, s3
	fmadd	s0, s0, s2, s1
	str	s4, [x23]
	str	s0, [x23, x21, lsl #2]
	cmp	x20, x22
	b.lt	.LBB35_55
	b	.LBB35_34
	.p2align	5, , 16
.LBB35_56:                              // %.preheader358
                                        //   in Loop: Header=BB35_35 Depth=3
	cmp	x22, x21
	b.le	.LBB35_34
// %bb.57:                              // %.lr.ph373
                                        //   in Loop: Header=BB35_35 Depth=3
	ldp	x10, x9, [x29, #-168]           // 16-byte Folded Reload
	mov	x6, x21
	ldr	x9, [x9, #248]
	ldr	x10, [x10, #248]
	add	x9, x9, x17
	add	x10, x10, x16
	.p2align	5, , 16
.LBB35_58:                              //   Parent Loop BB35_17 Depth=1
                                        //     Parent Loop BB35_21 Depth=2
                                        //       Parent Loop BB35_35 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldur	s0, [x10, #-4]
	add	x6, x6, #2
	stur	s0, [x9, #-4]
	ldr	s0, [x10], #8
	str	s0, [x9]
	add	x9, x9, x19
	cmp	x6, x22
	b.lt	.LBB35_58
	b	.LBB35_34
.LBB35_59:                              // %._crit_edge388
	add	sp, sp, #480
	.cfi_def_cfa wsp, 160
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d15, d14, [sp], #160            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB35_60:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.40
	add	x3, x3, :lo12:.L.str.40
	mov	w1, #8757                       // =0x2235
	bl	ggml_abort
.LBB35_61:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.105
	add	x3, x3, :lo12:.L.str.105
	mov	w1, #8764                       // =0x223c
	bl	ggml_abort
.LBB35_62:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.106
	add	x3, x3, :lo12:.L.str.106
	mov	w1, #8765                       // =0x223d
	bl	ggml_abort
.LBB35_63:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.108
	add	x3, x3, :lo12:.L.str.108
	mov	w1, #8791                       // =0x2257
	bl	ggml_abort
.LBB35_64:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.109
	add	x3, x3, :lo12:.L.str.109
	mov	w1, #8796                       // =0x225c
	bl	ggml_abort
.LBB35_65:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.110
	add	x3, x3, :lo12:.L.str.110
	mov	w1, #8797                       // =0x225d
	bl	ggml_abort
.LBB35_66:
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.107
	add	x3, x3, :lo12:.L.str.107
	mov	w1, #8787                       // =0x2253
	bl	ggml_abort
.Lfunc_end35:
	.size	ggml_compute_forward_rope_f32, .Lfunc_end35-ggml_compute_forward_rope_f32
	.cfi_endproc
                                        // -- End function
	.p2align	4                               // -- Begin function ggml_mrope_cache_init
	.type	ggml_mrope_cache_init,@function
ggml_mrope_cache_init:                  // @ggml_mrope_cache_init
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d15, d14, [sp, #64]             // 16-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	.cfi_remember_state
	ldpsw	x24, x8, [x0]
	stp	s7, s4, [sp, #48]               // 8-byte Folded Spill
	stp	s0, s6, [sp, #20]               // 8-byte Folded Spill
	stp	s2, s3, [sp, #8]                // 8-byte Folded Spill
	add	x25, x8, x24
	str	s1, [sp, #16]                   // 4-byte Folded Spill
	ldpsw	x8, x9, [x0, #8]
	add	x8, x25, x8
	add	x27, x8, x9
	stp	x8, x5, [sp, #32]               // 16-byte Folded Spill
	cmp	x27, x4
	b.gt	.LBB36_21
// %bb.1:                               // %.preheader
	mov	x20, x4
	cmp	x4, #1
	b.lt	.LBB36_20
// %bb.2:                               // %.lr.ph
	ldr	s0, [sp, #52]                   // 4-byte Folded Reload
	fmov	s13, #1.00000000
	fmov	s10, s5
	ldr	s12, [x29, #96]
	mov	x21, x3
	mov	x22, x2
	mov	w23, w1
	fdiv	s0, s13, s0
	bl	logf
	mov	w8, #52429                      // =0xcccd
	ldp	s15, s14, [sp, #12]             // 8-byte Folded Reload
	movk	w8, #15820, lsl #16
	ldr	s8, [sp, #8]                    // 4-byte Folded Reload
	mov	x28, xzr
	fmov	s1, w8
	mov	x26, xzr
	fmadd	s0, s0, s1, s13
	ldp	s9, s1, [sp, #20]               // 8-byte Folded Reload
	fmul	s0, s0, s1
	str	s0, [sp, #28]                   // 4-byte Folded Spill
	b	.LBB36_6
	.p2align	5, , 16
.LBB36_3:                               //   in Loop: Header=BB36_6 Depth=1
	fdiv	s1, s1, s0
	ldr	s0, [sp, #52]                   // 4-byte Folded Reload
	fcmp	s10, #0.0
	fmul	s0, s1, s0
	b.eq	.LBB36_12
// %bb.4:                               //   in Loop: Header=BB36_6 Depth=1
	asr	w8, w26, #1
	ldp	s2, s3, [x21]
	scvtf	s4, w8
	mov	w8, #4719                       // =0x126f
	movk	w8, #14979, lsl #16
	ldr	s11, [sp, #28]                  // 4-byte Folded Reload
	fsub	s4, s4, s2
	fsub	s2, s3, s2
	fmov	s3, w8
	fcmp	s2, s3
	fcsel	s2, s3, s2, mi
	fmov	s3, wzr
	fdiv	s2, s4, s2
	fcmp	s2, #0.0
	fcsel	s2, s3, s2, mi
	fcmp	s2, s13
	fcsel	s2, s13, s2, gt
	fsub	s2, s13, s2
	fmul	s2, s2, s10
	fsub	s3, s13, s2
	fmul	s1, s1, s2
	fmadd	s0, s0, s3, s1
.LBB36_5:                               // %rope_yarn.exit
                                        //   in Loop: Header=BB36_6 Depth=1
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	add	x0, sp, #60
	add	x1, sp, #56
	add	x19, x8, x26, lsl #2
	bl	sincosf
	ldp	s1, s0, [sp, #56]
	fmul	s9, s9, s12
	ldr	s2, [sp, #48]                   // 4-byte Folded Reload
	fmul	s8, s8, s12
	fmul	s14, s14, s12
	fmul	s15, s15, s12
	add	x26, x26, #2
	add	x28, x28, #1
	fmul	s0, s0, s11
	fmul	s1, s1, s11
	fmul	s0, s0, s2
	stp	s1, s0, [x19]
	cmp	x26, x20
	b.ge	.LBB36_20
.LBB36_6:                               // =>This Inner Loop Header: Depth=1
	fmov	s0, #1.00000000
	cbz	x22, .LBB36_8
// %bb.7:                               //   in Loop: Header=BB36_6 Depth=1
	ldr	s0, [x22, x28, lsl #2]
.LBB36_8:                               // %._crit_edge97
                                        //   in Loop: Header=BB36_6 Depth=1
	sdiv	x8, x28, x27
	msub	x8, x8, x27, x28
	tbz	w23, #0, .LBB36_17
// %bb.9:                               //   in Loop: Header=BB36_6 Depth=1
	cbz	x8, .LBB36_13
// %bb.10:                              //   in Loop: Header=BB36_6 Depth=1
	cmp	w24, w8
	b.ne	.LBB36_14
// %bb.11:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	s14, [sp, #16]                  // 4-byte Folded Reload
	b	.LBB36_17
	.p2align	5, , 16
.LBB36_12:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	s11, [sp, #24]                  // 4-byte Folded Reload
	b	.LBB36_5
.LBB36_13:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	s9, [sp, #20]                   // 4-byte Folded Reload
	b	.LBB36_17
.LBB36_14:                              //   in Loop: Header=BB36_6 Depth=1
	cmp	w25, w8
	b.ne	.LBB36_16
// %bb.15:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	s8, [sp, #8]                    // 4-byte Folded Reload
	b	.LBB36_17
.LBB36_16:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	cmp	w9, w8
	ldr	s1, [sp, #12]                   // 4-byte Folded Reload
	fcsel	s15, s1, s15, eq
	.p2align	5, , 16
.LBB36_17:                              //   in Loop: Header=BB36_6 Depth=1
	fmov	s1, s14
	cmp	w24, w8
	ccmp	w25, w8, #4, le
	b.gt	.LBB36_3
// %bb.18:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	fmov	s1, s8
	cmp	w9, w8
	ccmp	w25, w8, #0, gt
	b.le	.LBB36_3
// %bb.19:                              //   in Loop: Header=BB36_6 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	cmp	w9, w8
	fcsel	s1, s9, s15, gt
	b	.LBB36_3
.LBB36_20:                              // %._crit_edge
	.cfi_def_cfa wsp, 224
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	ldp	d15, d14, [sp, #64]             // 16-byte Folded Reload
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB36_21:
	.cfi_restore_state
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	adrp	x2, .L.str.2
	add	x2, x2, :lo12:.L.str.2
	adrp	x3, .L.str.111
	add	x3, x3, :lo12:.L.str.111
	mov	w1, #8680                       // =0x21e8
	bl	ggml_abort
.Lfunc_end36:
	.size	ggml_mrope_cache_init, .Lfunc_end36-ggml_mrope_cache_init
	.cfi_endproc
                                        // -- End function
	.globl	ggml_graph_compute_with_ctx     // -- Begin function ggml_graph_compute_with_ctx
	.p2align	4
	.type	ggml_graph_compute_with_ctx,@function
ggml_graph_compute_with_ctx:            // @ggml_graph_compute_with_ctx
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x1
	mov	x20, x0
	mov	x8, sp
	mov	x0, x1
	mov	w1, w2
	mov	x2, xzr
	bl	ggml_graph_plan
	ldr	x1, [sp]
	mov	x0, x20
	bl	ggml_new_buffer
	str	x0, [sp, #8]
	mov	x1, sp
	mov	x0, x19
	bl	ggml_graph_compute
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end37:
	.size	ggml_graph_compute_with_ctx, .Lfunc_end37-ggml_graph_compute_with_ctx
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx                // -- Begin function ggml_cpu_has_avx
	.p2align	4
	.type	ggml_cpu_has_avx,@function
ggml_cpu_has_avx:                       // @ggml_cpu_has_avx
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end38:
	.size	ggml_cpu_has_avx, .Lfunc_end38-ggml_cpu_has_avx
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx_vnni           // -- Begin function ggml_cpu_has_avx_vnni
	.p2align	4
	.type	ggml_cpu_has_avx_vnni,@function
ggml_cpu_has_avx_vnni:                  // @ggml_cpu_has_avx_vnni
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end39:
	.size	ggml_cpu_has_avx_vnni, .Lfunc_end39-ggml_cpu_has_avx_vnni
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx2               // -- Begin function ggml_cpu_has_avx2
	.p2align	4
	.type	ggml_cpu_has_avx2,@function
ggml_cpu_has_avx2:                      // @ggml_cpu_has_avx2
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end40:
	.size	ggml_cpu_has_avx2, .Lfunc_end40-ggml_cpu_has_avx2
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx512             // -- Begin function ggml_cpu_has_avx512
	.p2align	4
	.type	ggml_cpu_has_avx512,@function
ggml_cpu_has_avx512:                    // @ggml_cpu_has_avx512
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end41:
	.size	ggml_cpu_has_avx512, .Lfunc_end41-ggml_cpu_has_avx512
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx512_vbmi        // -- Begin function ggml_cpu_has_avx512_vbmi
	.p2align	4
	.type	ggml_cpu_has_avx512_vbmi,@function
ggml_cpu_has_avx512_vbmi:               // @ggml_cpu_has_avx512_vbmi
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end42:
	.size	ggml_cpu_has_avx512_vbmi, .Lfunc_end42-ggml_cpu_has_avx512_vbmi
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx512_vnni        // -- Begin function ggml_cpu_has_avx512_vnni
	.p2align	4
	.type	ggml_cpu_has_avx512_vnni,@function
ggml_cpu_has_avx512_vnni:               // @ggml_cpu_has_avx512_vnni
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end43:
	.size	ggml_cpu_has_avx512_vnni, .Lfunc_end43-ggml_cpu_has_avx512_vnni
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_avx512_bf16        // -- Begin function ggml_cpu_has_avx512_bf16
	.p2align	4
	.type	ggml_cpu_has_avx512_bf16,@function
ggml_cpu_has_avx512_bf16:               // @ggml_cpu_has_avx512_bf16
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end44:
	.size	ggml_cpu_has_avx512_bf16, .Lfunc_end44-ggml_cpu_has_avx512_bf16
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_amx_int8           // -- Begin function ggml_cpu_has_amx_int8
	.p2align	4
	.type	ggml_cpu_has_amx_int8,@function
ggml_cpu_has_amx_int8:                  // @ggml_cpu_has_amx_int8
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end45:
	.size	ggml_cpu_has_amx_int8, .Lfunc_end45-ggml_cpu_has_amx_int8
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_bmi2               // -- Begin function ggml_cpu_has_bmi2
	.p2align	4
	.type	ggml_cpu_has_bmi2,@function
ggml_cpu_has_bmi2:                      // @ggml_cpu_has_bmi2
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end46:
	.size	ggml_cpu_has_bmi2, .Lfunc_end46-ggml_cpu_has_bmi2
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_fma                // -- Begin function ggml_cpu_has_fma
	.p2align	4
	.type	ggml_cpu_has_fma,@function
ggml_cpu_has_fma:                       // @ggml_cpu_has_fma
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end47:
	.size	ggml_cpu_has_fma, .Lfunc_end47-ggml_cpu_has_fma
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_arm_fma            // -- Begin function ggml_cpu_has_arm_fma
	.p2align	4
	.type	ggml_cpu_has_arm_fma,@function
ggml_cpu_has_arm_fma:                   // @ggml_cpu_has_arm_fma
	.cfi_startproc
// %bb.0:
	mov	w0, #1                          // =0x1
	ret
.Lfunc_end48:
	.size	ggml_cpu_has_arm_fma, .Lfunc_end48-ggml_cpu_has_arm_fma
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_riscv_v            // -- Begin function ggml_cpu_has_riscv_v
	.p2align	4
	.type	ggml_cpu_has_riscv_v,@function
ggml_cpu_has_riscv_v:                   // @ggml_cpu_has_riscv_v
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end49:
	.size	ggml_cpu_has_riscv_v, .Lfunc_end49-ggml_cpu_has_riscv_v
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_f16c               // -- Begin function ggml_cpu_has_f16c
	.p2align	4
	.type	ggml_cpu_has_f16c,@function
ggml_cpu_has_f16c:                      // @ggml_cpu_has_f16c
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end50:
	.size	ggml_cpu_has_f16c, .Lfunc_end50-ggml_cpu_has_f16c
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_fp16_va            // -- Begin function ggml_cpu_has_fp16_va
	.p2align	4
	.type	ggml_cpu_has_fp16_va,@function
ggml_cpu_has_fp16_va:                   // @ggml_cpu_has_fp16_va
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end51:
	.size	ggml_cpu_has_fp16_va, .Lfunc_end51-ggml_cpu_has_fp16_va
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_wasm_simd          // -- Begin function ggml_cpu_has_wasm_simd
	.p2align	4
	.type	ggml_cpu_has_wasm_simd,@function
ggml_cpu_has_wasm_simd:                 // @ggml_cpu_has_wasm_simd
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end52:
	.size	ggml_cpu_has_wasm_simd, .Lfunc_end52-ggml_cpu_has_wasm_simd
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_llamafile          // -- Begin function ggml_cpu_has_llamafile
	.p2align	4
	.type	ggml_cpu_has_llamafile,@function
ggml_cpu_has_llamafile:                 // @ggml_cpu_has_llamafile
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end53:
	.size	ggml_cpu_has_llamafile, .Lfunc_end53-ggml_cpu_has_llamafile
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_sse3               // -- Begin function ggml_cpu_has_sse3
	.p2align	4
	.type	ggml_cpu_has_sse3,@function
ggml_cpu_has_sse3:                      // @ggml_cpu_has_sse3
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end54:
	.size	ggml_cpu_has_sse3, .Lfunc_end54-ggml_cpu_has_sse3
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_ssse3              // -- Begin function ggml_cpu_has_ssse3
	.p2align	4
	.type	ggml_cpu_has_ssse3,@function
ggml_cpu_has_ssse3:                     // @ggml_cpu_has_ssse3
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end55:
	.size	ggml_cpu_has_ssse3, .Lfunc_end55-ggml_cpu_has_ssse3
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_vsx                // -- Begin function ggml_cpu_has_vsx
	.p2align	4
	.type	ggml_cpu_has_vsx,@function
ggml_cpu_has_vsx:                       // @ggml_cpu_has_vsx
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end56:
	.size	ggml_cpu_has_vsx, .Lfunc_end56-ggml_cpu_has_vsx
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_vxe                // -- Begin function ggml_cpu_has_vxe
	.p2align	4
	.type	ggml_cpu_has_vxe,@function
ggml_cpu_has_vxe:                       // @ggml_cpu_has_vxe
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end57:
	.size	ggml_cpu_has_vxe, .Lfunc_end57-ggml_cpu_has_vxe
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_neon               // -- Begin function ggml_cpu_has_neon
	.p2align	4
	.type	ggml_cpu_has_neon,@function
ggml_cpu_has_neon:                      // @ggml_cpu_has_neon
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end58:
	.size	ggml_cpu_has_neon, .Lfunc_end58-ggml_cpu_has_neon
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_dotprod            // -- Begin function ggml_cpu_has_dotprod
	.p2align	4
	.type	ggml_cpu_has_dotprod,@function
ggml_cpu_has_dotprod:                   // @ggml_cpu_has_dotprod
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end59:
	.size	ggml_cpu_has_dotprod, .Lfunc_end59-ggml_cpu_has_dotprod
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_sve                // -- Begin function ggml_cpu_has_sve
	.p2align	4
	.type	ggml_cpu_has_sve,@function
ggml_cpu_has_sve:                       // @ggml_cpu_has_sve
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end60:
	.size	ggml_cpu_has_sve, .Lfunc_end60-ggml_cpu_has_sve
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_matmul_int8        // -- Begin function ggml_cpu_has_matmul_int8
	.p2align	4
	.type	ggml_cpu_has_matmul_int8,@function
ggml_cpu_has_matmul_int8:               // @ggml_cpu_has_matmul_int8
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end61:
	.size	ggml_cpu_has_matmul_int8, .Lfunc_end61-ggml_cpu_has_matmul_int8
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_get_sve_cnt            // -- Begin function ggml_cpu_get_sve_cnt
	.p2align	4
	.type	ggml_cpu_get_sve_cnt,@function
ggml_cpu_get_sve_cnt:                   // @ggml_cpu_get_sve_cnt
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end62:
	.size	ggml_cpu_get_sve_cnt, .Lfunc_end62-ggml_cpu_get_sve_cnt
	.cfi_endproc
                                        // -- End function
	.globl	ggml_cpu_has_sme                // -- Begin function ggml_cpu_has_sme
	.p2align	4
	.type	ggml_cpu_has_sme,@function
ggml_cpu_has_sme:                       // @ggml_cpu_has_sme
	.cfi_startproc
// %bb.0:
	mov	w0, wzr
	ret
.Lfunc_end63:
	.size	ggml_cpu_has_sme, .Lfunc_end63-ggml_cpu_has_sme
	.cfi_endproc
                                        // -- End function
	.type	ggml_arm_arch_features,@object  // @ggml_arm_arch_features
	.data
	.globl	ggml_arm_arch_features
	.p2align	2, 0x0
ggml_arm_arch_features:
	.word	4294967295                      // 0xffffffff
	.word	4294967295                      // 0xffffffff
	.word	4294967295                      // 0xffffffff
	.word	4294967295                      // 0xffffffff
	.word	0                               // 0x0
	.word	4294967295                      // 0xffffffff
	.size	ggml_arm_arch_features, 24

	.type	type_traits_cpu,@object         // @type_traits_cpu
	.section	.data.rel.ro,"aw",@progbits
	.p2align	3, 0x0
type_traits_cpu:
	.xword	0
	.xword	ggml_vec_dot_f32
	.word	0                               // 0x0
	.zero	4
	.xword	1                               // 0x1
	.xword	ggml_fp32_to_fp16_row
	.xword	ggml_vec_dot_f16
	.word	1                               // 0x1
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q4_0
	.xword	ggml_vec_dot_q4_0_q8_0
	.word	8                               // 0x8
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q4_1
	.xword	ggml_vec_dot_q4_1_q8_1
	.word	9                               // 0x9
	.zero	4
	.xword	1                               // 0x1
	.zero	32
	.zero	32
	.xword	quantize_row_q5_0
	.xword	ggml_vec_dot_q5_0_q8_0
	.word	8                               // 0x8
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q5_1
	.xword	ggml_vec_dot_q5_1_q8_1
	.word	9                               // 0x9
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q8_0
	.xword	ggml_vec_dot_q8_0_q8_0
	.word	8                               // 0x8
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q8_1
	.xword	0
	.word	9                               // 0x9
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q2_K
	.xword	ggml_vec_dot_q2_K_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q3_K
	.xword	ggml_vec_dot_q3_K_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q4_K
	.xword	ggml_vec_dot_q4_K_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q5_K
	.xword	ggml_vec_dot_q5_K_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q6_K
	.xword	ggml_vec_dot_q6_K_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_q8_K
	.xword	0
	.word	0                               // 0x0
	.zero	4
	.xword	0                               // 0x0
	.xword	0
	.xword	ggml_vec_dot_iq2_xxs_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	0
	.xword	ggml_vec_dot_iq2_xs_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	0
	.xword	ggml_vec_dot_iq3_xxs_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	0
	.xword	ggml_vec_dot_iq1_s_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_iq4_nl
	.xword	ggml_vec_dot_iq4_nl_q8_0
	.word	8                               // 0x8
	.zero	4
	.xword	1                               // 0x1
	.xword	0
	.xword	ggml_vec_dot_iq3_s_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	0
	.xword	ggml_vec_dot_iq2_s_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_iq4_xs
	.xword	ggml_vec_dot_iq4_xs_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.zero	32
	.zero	32
	.zero	32
	.zero	32
	.zero	32
	.xword	0
	.xword	ggml_vec_dot_iq1_m_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	ggml_fp32_to_bf16_row
	.xword	ggml_vec_dot_bf16
	.word	30                              // 0x1e
	.zero	4
	.xword	1                               // 0x1
	.zero	32
	.zero	32
	.zero	32
	.xword	quantize_row_tq1_0
	.xword	ggml_vec_dot_tq1_0_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.xword	quantize_row_tq2_0
	.xword	ggml_vec_dot_tq2_0_q8_K
	.word	15                              // 0xf
	.zero	4
	.xword	1                               // 0x1
	.zero	32
	.zero	32
	.zero	32
	.size	type_traits_cpu, 1248

	.type	.L__unnamed_4,@object           // @0
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__unnamed_4:
	.asciz	";unknown;unknown;0;0;;"
	.size	.L__unnamed_4, 23

	.type	.L__unnamed_2,@object           // @1
	.section	.data.rel.ro,"aw",@progbits
	.p2align	3, 0x0
.L__unnamed_2:
	.word	0                               // 0x0
	.word	34                              // 0x22
	.word	0                               // 0x0
	.word	22                              // 0x16
	.xword	.L__unnamed_4
	.size	.L__unnamed_2, 24

	.type	.L__unnamed_1,@object           // @2
	.p2align	3, 0x0
.L__unnamed_1:
	.word	0                               // 0x0
	.word	2                               // 0x2
	.word	0                               // 0x0
	.word	22                              // 0x16
	.xword	.L__unnamed_4
	.size	.L__unnamed_1, 24

	.type	.L.str.1,@object                // @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"/data/data/com.termux/files/home/llama.cpp/ggml/src/ggml-cpu/ggml-cpu.c"
	.size	.L.str.1, 72

	.type	.L.str.2,@object                // @.str.2
.L.str.2:
	.asciz	"GGML_ASSERT(%s) failed"
	.size	.L.str.2, 23

	.type	.L.str.3,@object                // @.str.3
.L.str.3:
	.asciz	"!ggml_get_no_alloc(ctx)"
	.size	.L.str.3, 24

	.type	.L.str.4,@object                // @.str.4
.L.str.4:
	.asciz	"fatal error"
	.size	.L.str.4, 12

	.type	.L.str.5,@object                // @.str.5
.L.str.5:
	.asciz	"tensor->nb[0] == sizeof(int8_t)"
	.size	.L.str.5, 32

	.type	.L.str.6,@object                // @.str.6
.L.str.6:
	.asciz	"tensor->nb[0] == sizeof(int16_t)"
	.size	.L.str.6, 33

	.type	.L.str.7,@object                // @.str.7
.L.str.7:
	.asciz	"tensor->nb[0] == sizeof(int32_t)"
	.size	.L.str.7, 33

	.type	.L.str.8,@object                // @.str.8
.L.str.8:
	.asciz	"tensor->nb[0] == sizeof(ggml_fp16_t)"
	.size	.L.str.8, 37

	.type	.L.str.9,@object                // @.str.9
.L.str.9:
	.asciz	"tensor->nb[0] == sizeof(ggml_bf16_t)"
	.size	.L.str.9, 37

	.type	.L.str.10,@object               // @.str.10
.L.str.10:
	.asciz	"tensor->nb[0] == sizeof(float)"
	.size	.L.str.10, 31

	.type	.L.str.11,@object               // @.str.11
.L.str.11:
	.asciz	"node->src[0]->ne[3] == 1"
	.size	.L.str.11, 25

	.type	.L.str.12,@object               // @.str.12
.L.str.12:
	.asciz	"node->src[1]->ne[2] == 1"
	.size	.L.str.12, 25

	.type	.L.str.13,@object               // @.str.13
.L.str.13:
	.asciz	"node->src[1]->ne[3] == 1"
	.size	.L.str.13, 25

	.type	.L.str.14,@object               // @.str.14
.L.str.14:
	.asciz	"%s: op not implemented: "
	.size	.L.str.14, 25

	.type	.L__func__.ggml_get_n_tasks,@object // @__func__.ggml_get_n_tasks
.L__func__.ggml_get_n_tasks:
	.asciz	"ggml_get_n_tasks"
	.size	.L__func__.ggml_get_n_tasks, 17

	.type	.L.str.15,@object               // @.str.15
.L.str.15:
	.asciz	"%s\n"
	.size	.L.str.15, 4

	.type	.L.str.16,@object               // @.str.16
.L.str.16:
	.asciz	"%d\n"
	.size	.L.str.16, 4

	.type	.L.str.19,@object               // @.str.19
.L.str.19:
	.asciz	"cplan"
	.size	.L.str.19, 6

	.type	.L.str.20,@object               // @.str.20
.L.str.20:
	.asciz	"cplan->n_threads > 0"
	.size	.L.str.20, 21

	.type	.L.str.21,@object               // @.str.21
.L.str.21:
	.asciz	"cplan->work_size == 0 || cplan->work_data != NULL"
	.size	.L.str.21, 50

	.type	.L__unnamed_3,@object           // @3
	.section	.data.rel.ro,"aw",@progbits
	.p2align	3, 0x0
.L__unnamed_3:
	.word	0                               // 0x0
	.word	322                             // 0x142
	.word	0                               // 0x0
	.word	22                              // 0x16
	.xword	.L__unnamed_4
	.size	.L__unnamed_3, 24

	.type	.L.str.23,@object               // @.str.23
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.23:
	.asciz	"t == 0 || t == 1"
	.size	.L.str.23, 17

	.type	.L.str.24,@object               // @.str.24
.L.str.24:
	.asciz	"ggml_nelements(dst) == ggml_nelements(src0)"
	.size	.L.str.24, 44

	.type	.L.str.25,@object               // @.str.25
.L.str.25:
	.asciz	"src0->type == dst->type"
	.size	.L.str.25, 24

	.type	.L.str.26,@object               // @.str.26
.L.str.26:
	.asciz	"ggml_is_contiguous(dst) && ggml_is_contiguous(src0)"
	.size	.L.str.26, 52

	.type	.L.str.27,@object               // @.str.27
.L.str.27:
	.asciz	"nb10 == ggml_type_size(dst->type)"
	.size	.L.str.27, 34

	.type	.L.str.28,@object               // @.str.28
.L.str.28:
	.asciz	"(ne10 % qk) == 0 || ggml_is_contiguous(dst)"
	.size	.L.str.28, 44

	.type	.L.str.29,@object               // @.str.29
.L.str.29:
	.asciz	"ggml_are_same_shape(src0, src1) && ggml_are_same_shape(src0, dst)"
	.size	.L.str.29, 66

	.type	.L.str.30,@object               // @.str.30
.L.str.30:
	.asciz	"nb00 == ggml_type_size(type)"
	.size	.L.str.30, 29

	.type	.L.str.31,@object               // @.str.31
.L.str.31:
	.asciz	"nb10 == sizeof(float)"
	.size	.L.str.31, 22

	.type	.L.str.32,@object               // @.str.32
.L.str.32:
	.asciz	"nb0 <= nb1"
	.size	.L.str.32, 11

	.type	.L.str.33,@object               // @.str.33
.L.str.33:
	.asciz	"nb1 <= nb2"
	.size	.L.str.33, 11

	.type	.L.str.34,@object               // @.str.34
.L.str.34:
	.asciz	"nb2 <= nb3"
	.size	.L.str.34, 11

	.type	.L.str.35,@object               // @.str.35
.L.str.35:
	.asciz	"ggml_is_quantized(src0->type)"
	.size	.L.str.35, 30

	.type	.L.str.36,@object               // @.str.36
.L.str.36:
	.asciz	"src1->type == GGML_TYPE_F32"
	.size	.L.str.36, 28

	.type	.L.str.37,@object               // @.str.37
.L.str.37:
	.asciz	"ggml_are_same_shape(src0, dst)"
	.size	.L.str.37, 31

	.type	.L.str.38,@object               // @.str.38
.L.str.38:
	.asciz	"ggml_is_scalar(src1)"
	.size	.L.str.38, 21

	.type	.L.str.39,@object               // @.str.39
.L.str.39:
	.asciz	"nb0 == sizeof(float)"
	.size	.L.str.39, 21

	.type	.L.str.40,@object               // @.str.40
.L.str.40:
	.asciz	"nb00 == sizeof(float)"
	.size	.L.str.40, 22

	.type	.L.str.41,@object               // @.str.41
.L.str.41:
	.asciz	"src0->type == GGML_TYPE_F16"
	.size	.L.str.41, 28

	.type	.L.str.42,@object               // @.str.42
.L.str.42:
	.asciz	"src1->type == GGML_TYPE_F16"
	.size	.L.str.42, 28

	.type	.L.str.43,@object               // @.str.43
.L.str.43:
	.asciz	"dst->type == GGML_TYPE_F16"
	.size	.L.str.43, 27

	.type	.L.str.44,@object               // @.str.44
.L.str.44:
	.asciz	"nb0 == sizeof(ggml_fp16_t)"
	.size	.L.str.44, 27

	.type	.L.str.45,@object               // @.str.45
.L.str.45:
	.asciz	"nb00 == sizeof(ggml_fp16_t)"
	.size	.L.str.45, 28

	.type	.L.str.46,@object               // @.str.46
.L.str.46:
	.asciz	"src0->type == GGML_TYPE_BF16"
	.size	.L.str.46, 29

	.type	.L.str.47,@object               // @.str.47
.L.str.47:
	.asciz	"src1->type == GGML_TYPE_BF16"
	.size	.L.str.47, 29

	.type	.L.str.48,@object               // @.str.48
.L.str.48:
	.asciz	"dst->type == GGML_TYPE_BF16"
	.size	.L.str.48, 28

	.type	.L.str.49,@object               // @.str.49
.L.str.49:
	.asciz	"nb0 == sizeof(ggml_bf16_t)"
	.size	.L.str.49, 27

	.type	.L.str.50,@object               // @.str.50
.L.str.50:
	.asciz	"nb00 == sizeof(ggml_bf16_t)"
	.size	.L.str.50, 28

	.type	.L.str.51,@object               // @.str.51
.L.str.51:
	.asciz	"dst->type == src0->type"
	.size	.L.str.51, 24

	.type	.L.str.52,@object               // @.str.52
.L.str.52:
	.asciz	"offset + (ne10 == 0 ? 0 : ne10-1)*nb0 + (ne11 == 0 ? 0 : ne11-1)*nb1 + (ne12 == 0 ? 0 : ne12-1)*nb2 + (ne13 == 0 ? 0 : ne13-1)*nb3 < ggml_nbytes(dst)"
	.size	.L.str.52, 150

	.type	.L.str.53,@object               // @.str.53
.L.str.53:
	.asciz	"offset + (ne10 == 0 ? 0 : ne10-1)*nb00 + (ne11 == 0 ? 0 : ne11-1)*nb01 + (ne12 == 0 ? 0 : ne12-1)*nb02 + (ne13 == 0 ? 0 : ne13-1)*nb03 < ggml_nbytes(src0)"
	.size	.L.str.53, 155

	.type	.L.str.54,@object               // @.str.54
.L.str.54:
	.asciz	"src0->nb[0] == sizeof(float)"
	.size	.L.str.54, 29

	.type	.L.str.55,@object               // @.str.55
.L.str.55:
	.asciz	"dst->nb[0] == sizeof(float)"
	.size	.L.str.55, 28

	.type	.L.str.56,@object               // @.str.56
.L.str.56:
	.asciz	"ne0 == 1"
	.size	.L.str.56, 9

	.type	.L.str.57,@object               // @.str.57
.L.str.57:
	.asciz	"ne1 == ne01"
	.size	.L.str.57, 12

	.type	.L.str.58,@object               // @.str.58
.L.str.58:
	.asciz	"ne2 == ne02"
	.size	.L.str.58, 12

	.type	.L.str.59,@object               // @.str.59
.L.str.59:
	.asciz	"ne3 == ne03"
	.size	.L.str.59, 12

	.type	.L.str.61,@object               // @.str.61
.L.str.61:
	.asciz	"src1->type == GGML_TYPE_I32"
	.size	.L.str.61, 28

	.type	.L.str.62,@object               // @.str.62
.L.str.62:
	.asciz	"ggml_are_same_shape(src0, src1)"
	.size	.L.str.62, 32

	.type	.L.str.63,@object               // @.str.63
.L.str.63:
	.asciz	"ggml_is_scalar(dst)"
	.size	.L.str.63, 20

	.type	.L.str.64,@object               // @.str.64
.L.str.64:
	.asciz	"dst->type == GGML_TYPE_I64"
	.size	.L.str.64, 27

	.type	.L.str.65,@object               // @.str.65
.L.str.65:
	.asciz	"ggml_can_repeat(src0, dst)"
	.size	.L.str.65, 27

	.type	.L.str.66,@object               // @.str.66
.L.str.66:
	.asciz	"ggml_can_repeat(dst, src0)"
	.size	.L.str.66, 27

	.type	.L.str.67,@object               // @.str.67
.L.str.67:
	.asciz	"ggml_type_size(src0->type) == sizeof(ggml_fp16_t)"
	.size	.L.str.67, 50

	.type	.L.str.68,@object               // @.str.68
.L.str.68:
	.asciz	"dim >= 0 && dim < 4"
	.size	.L.str.68, 20

	.type	.L.str.69,@object               // @.str.69
.L.str.69:
	.asciz	"ggml_type_size(src0->type) == sizeof(int8_t)"
	.size	.L.str.69, 45

	.type	.L.str.70,@object               // @.str.70
.L.str.70:
	.asciz	"ggml_type_size(src0->type) == sizeof(float)"
	.size	.L.str.70, 44

	.type	.L.str.71,@object               // @.str.71
.L.str.71:
	.asciz	"eps >= 0.0f"
	.size	.L.str.71, 12

	.type	.L.str.72,@object               // @.str.72
.L.str.72:
	.asciz	"ggml_are_same_shape(src0, dst) && ggml_are_same_shape(src0, src1)"
	.size	.L.str.72, 66

	.type	.L.str.73,@object               // @.str.73
.L.str.73:
	.asciz	"src1->nb[0] == sizeof(float)"
	.size	.L.str.73, 29

	.type	.L.str.74,@object               // @.str.74
.L.str.74:
	.asciz	"ne0 == ne01"
	.size	.L.str.74, 12

	.type	.L.str.75,@object               // @.str.75
.L.str.75:
	.asciz	"ne1 == ne11"
	.size	.L.str.75, 12

	.type	.L.str.76,@object               // @.str.76
.L.str.76:
	.asciz	"ne2 == ne12"
	.size	.L.str.76, 12

	.type	.L.str.77,@object               // @.str.77
.L.str.77:
	.asciz	"ne3 == ne13"
	.size	.L.str.77, 12

	.type	.L.str.78,@object               // @.str.78
.L.str.78:
	.asciz	"nb00 == ggml_type_size(src0->type)"
	.size	.L.str.78, 35

	.type	.L.str.79,@object               // @.str.79
.L.str.79:
	.asciz	"nb10 == ggml_type_size(src1->type)"
	.size	.L.str.79, 35

	.type	.L.str.80,@object               // @.str.80
.L.str.80:
	.asciz	"params->wsize >= (size_t)((char *) wdata_cur - (char *) params->wdata)"
	.size	.L.str.80, 71

	.type	.L.str.81,@object               // @.str.81
.L.str.81:
	.asciz	"ne02 == ne12"
	.size	.L.str.81, 13

	.type	.L.str.82,@object               // @.str.82
.L.str.82:
	.asciz	"ne03 == ne13"
	.size	.L.str.82, 13

	.type	.L.str.83,@object               // @.str.83
.L.str.83:
	.asciz	"ne0 == ne00"
	.size	.L.str.83, 12

	.type	.L.str.84,@object               // @.str.84
.L.str.84:
	.asciz	"ne1 == ne10"
	.size	.L.str.84, 12

	.type	.L.str.85,@object               // @.str.85
.L.str.85:
	.asciz	"dst->type == GGML_TYPE_F32"
	.size	.L.str.85, 27

	.type	.L.str.86,@object               // @.str.86
.L.str.86:
	.asciz	"src0->type == GGML_TYPE_F32"
	.size	.L.str.86, 28

	.type	.L.str.87,@object               // @.str.87
.L.str.87:
	.asciz	"ne2 % ne02 == 0"
	.size	.L.str.87, 16

	.type	.L.str.88,@object               // @.str.88
.L.str.88:
	.asciz	"ne3 % ne03 == 0"
	.size	.L.str.88, 16

	.type	.L.str.89,@object               // @.str.89
.L.str.89:
	.asciz	"ggml_is_contiguous(src0)"
	.size	.L.str.89, 25

	.type	.L.str.90,@object               // @.str.90
.L.str.90:
	.asciz	"ggml_is_contiguous(dst)"
	.size	.L.str.90, 24

	.type	.L.str.91,@object               // @.str.91
.L.str.91:
	.asciz	"offset + im0*nb0 + im1*nb1 + im2*nb2 + im3*nb3 <= ggml_nbytes(dst)"
	.size	.L.str.91, 67

	.type	.L.str.92,@object               // @.str.92
.L.str.92:
	.asciz	"nb10 == sizeof(int32_t)"
	.size	.L.str.92, 24

	.type	.L.str.93,@object               // @.str.93
.L.str.93:
	.asciz	"i01 >= 0 && i01 < ne01"
	.size	.L.str.93, 23

	.type	.L.str.94,@object               // @.str.94
.L.str.94:
	.asciz	"dst->ne[0] == nc"
	.size	.L.str.94, 17

	.type	.L.str.95,@object               // @.str.95
.L.str.95:
	.asciz	"src0->nb[0] == sizeof(ggml_fp16_t)"
	.size	.L.str.95, 35

	.type	.L.str.96,@object               // @.str.96
.L.str.96:
	.asciz	"ne00 == ne0"
	.size	.L.str.96, 12

	.type	.L.str.97,@object               // @.str.97
.L.str.97:
	.asciz	"ne00 == ne1"
	.size	.L.str.97, 12

	.type	.L.str.98,@object               // @.str.98
.L.str.98:
	.asciz	"ne01 == 1"
	.size	.L.str.98, 10

	.type	.L.str.99,@object               // @.str.99
.L.str.99:
	.asciz	"ne02 == ne2"
	.size	.L.str.99, 12

	.type	.L.str.100,@object              // @.str.100
.L.str.100:
	.asciz	"ne03 == ne3"
	.size	.L.str.100, 12

	.type	.L.str.101,@object              // @.str.101
.L.str.101:
	.asciz	"n_past >= 0"
	.size	.L.str.101, 12

	.type	.L.str.102,@object              // @.str.102
.L.str.102:
	.asciz	"ggml_is_contiguous(src1)"
	.size	.L.str.102, 25

	.type	.L.str.103,@object              // @.str.103
.L.str.103:
	.asciz	"ggml_are_same_shape(src1, dst)"
	.size	.L.str.103, 31

	.type	.L.str.104,@object              // @.str.104
.L.str.104:
	.asciz	"max_bias == 0.0f"
	.size	.L.str.104, 17

	.type	.L.str.105,@object              // @.str.105
.L.str.105:
	.asciz	"n_dims <= ne0"
	.size	.L.str.105, 14

	.type	.L.str.106,@object              // @.str.106
.L.str.106:
	.asciz	"n_dims % 2 == 0"
	.size	.L.str.106, 16

	.type	.L.str.107,@object              // @.str.107
.L.str.107:
	.asciz	"sections[0] > 0 || sections[1] > 0 || sections[2] > 0"
	.size	.L.str.107, 54

	.type	.L.str.108,@object              // @.str.108
.L.str.108:
	.asciz	"n_dims == ne0/2"
	.size	.L.str.108, 16

	.type	.L.str.109,@object              // @.str.109
.L.str.109:
	.asciz	"src2->type == GGML_TYPE_F32"
	.size	.L.str.109, 28

	.type	.L.str.110,@object              // @.str.110
.L.str.110:
	.asciz	"src2->ne[0] >= n_dims / 2"
	.size	.L.str.110, 26

	.type	.L.str.111,@object              // @.str.111
.L.str.111:
	.asciz	"sect_dims <= ne0"
	.size	.L.str.111, 17

	.type	.L.str.112,@object              // @.str.112
.L.str.112:
	.asciz	"p0 == 0"
	.size	.L.str.112, 8

	.type	.L.str.113,@object              // @.str.113
.L.str.113:
	.asciz	"k0 == s0"
	.size	.L.str.113, 9

	.type	.L.str.114,@object              // @.str.114
.L.str.114:
	.asciz	"params->ith == 0"
	.size	.L.str.114, 17

	.type	.L.str.115,@object              // @.str.115
.L.str.115:
	.asciz	"false"
	.size	.L.str.115, 6

	.type	.L.str.116,@object              // @.str.116
.L.str.116:
	.asciz	"ggml_nelements(dst) == steps"
	.size	.L.str.116, 29

	.type	.L.str.117,@object              // @.str.117
.L.str.117:
	.asciz	"ne0 == DV"
	.size	.L.str.117, 10

	.type	.L.str.118,@object              // @.str.118
.L.str.118:
	.asciz	"ne2 == N"
	.size	.L.str.118, 9

	.type	.L.str.119,@object              // @.str.119
.L.str.119:
	.asciz	"nbq0 == ggml_type_size(q->type)"
	.size	.L.str.119, 32

	.type	.L.str.120,@object              // @.str.120
.L.str.120:
	.asciz	"nbk0 == ggml_type_size(k->type)"
	.size	.L.str.120, 32

	.type	.L.str.121,@object              // @.str.121
.L.str.121:
	.asciz	"nbv0 == ggml_type_size(v->type)"
	.size	.L.str.121, 32

	.type	.L.str.122,@object              // @.str.122
.L.str.122:
	.asciz	"neq0 == DK"
	.size	.L.str.122, 11

	.type	.L.str.127,@object              // @.str.127
.L.str.127:
	.asciz	"q_to_vec_dot && \"fattn: unsupported K-type\""
	.size	.L.str.127, 44

	.type	.L.str.129,@object              // @.str.129
.L.str.129:
	.asciz	"v_to_float && \"fattn: unsupported V-type\""
	.size	.L.str.129, 42

	.type	.L.str.130,@object              // @.str.130
.L.str.130:
	.asciz	"P >= 0"
	.size	.L.str.130, 7

	.type	.L.str.131,@object              // @.str.131
.L.str.131:
	.asciz	"nbq0 == sizeof(float)"
	.size	.L.str.131, 22

	.type	.L.str.132,@object              // @.str.132
.L.str.132:
	.asciz	"nbk0 == sizeof(float)"
	.size	.L.str.132, 22

	.type	.L.str.133,@object              // @.str.133
.L.str.133:
	.asciz	"nbv0 == sizeof(float)"
	.size	.L.str.133, 22

	.type	.L.str.135,@object              // @.str.135
.L.str.135:
	.asciz	"nek0 == D"
	.size	.L.str.135, 10

	.type	.L.str.136,@object              // @.str.136
.L.str.136:
	.asciz	"nev1 == D"
	.size	.L.str.136, 10

	.type	.L.str.137,@object              // @.str.137
.L.str.137:
	.asciz	"ned0 == D"
	.size	.L.str.137, 10

	.type	.L.str.139,@object              // @.str.139
.L.str.139:
	.asciz	"ned1 == N"
	.size	.L.str.139, 10

	.type	.L.str.140,@object              // @.str.140
.L.str.140:
	.asciz	"ggml_blck_size(result_type) == 1"
	.size	.L.str.140, 33

	.type	.L.str.141,@object              // @.str.141
.L.str.141:
	.asciz	"dst->ne[0] == nr"
	.size	.L.str.141, 17

	.type	.L.str.142,@object              // @.str.142
.L.str.142:
	.asciz	"src0->nb[1] == src0->ne[0]*sizeof(float)"
	.size	.L.str.142, 41

	.type	.L.str.143,@object              // @.str.143
.L.str.143:
	.asciz	"ggml_nelements(src1) + ggml_nelements(src0) == ggml_nelements(dst)"
	.size	.L.str.143, 67

	.type	.L.str.144,@object              // @.str.144
.L.str.144:
	.asciz	"src2->nb[0] == sizeof(float)"
	.size	.L.str.144, 29

	.type	.L.str.145,@object              // @.str.145
.L.str.145:
	.asciz	"src3->nb[0] == sizeof(float)"
	.size	.L.str.145, 29

	.type	.L.str.146,@object              // @.str.146
.L.str.146:
	.asciz	"src4->nb[0] == sizeof(float)"
	.size	.L.str.146, 29

	.type	.L.str.147,@object              // @.str.147
.L.str.147:
	.asciz	"src5->nb[0] == sizeof(float)"
	.size	.L.str.147, 29

	.type	.L.str.148,@object              // @.str.148
.L.str.148:
	.asciz	"src0->nb[2] == src0->ne[0]*src0->ne[1]*sizeof(float)"
	.size	.L.str.148, 53

	.type	.L.str.149,@object              // @.str.149
.L.str.149:
	.asciz	"src1->nb[3] == src1->ne[0]*src1->ne[1]*src1->ne[2]*sizeof(float)"
	.size	.L.str.149, 65

	.type	ggml_table_gelu_f16,@object     // @ggml_table_gelu_f16
	.local	ggml_table_gelu_f16
	.comm	ggml_table_gelu_f16,131072,2
	.type	ggml_table_gelu_quick_f16,@object // @ggml_table_gelu_quick_f16
	.local	ggml_table_gelu_quick_f16
	.comm	ggml_table_gelu_quick_f16,131072,2
	.type	.L.str.150,@object              // @.str.150
.L.str.150:
	.asciz	"C % HEADS == 0"
	.size	.L.str.150, 15

	.type	.L.str.151,@object              // @.str.151
.L.str.151:
	.asciz	"src0->nb[0] == ggml_type_size(src0->type)"
	.size	.L.str.151, 42

	.type	.L.str.152,@object              // @.str.152
.L.str.152:
	.asciz	"src1->nb[0] == ggml_type_size(src1->type)"
	.size	.L.str.152, 42

	.type	.L.str.153,@object              // @.str.153
.L.str.153:
	.asciz	"params->wsize >= sizeof(float) * (nth + nth * nc)"
	.size	.L.str.153, 50

	.type	.L.str.154,@object              // @.str.154
.L.str.154:
	.asciz	"ggml_is_contiguous(src0f)"
	.size	.L.str.154, 26

	.type	.L.str.155,@object              // @.str.155
.L.str.155:
	.asciz	"ggml_is_contiguous(src1f)"
	.size	.L.str.155, 26

	.type	.L.str.156,@object              // @.str.156
.L.str.156:
	.asciz	"ggml_is_contiguous(grad)"
	.size	.L.str.156, 25

	.type	.L.str.157,@object              // @.str.157
.L.str.157:
	.asciz	"ggml_are_same_shape(src0f, src1f) && ggml_are_same_shape(src0f, dst)"
	.size	.L.str.157, 69

	.type	.L.str.158,@object              // @.str.158
.L.str.158:
	.asciz	"ggml_are_same_shape(src0, src0_grad)"
	.size	.L.str.158, 37

	.type	.L.str.159,@object              // @.str.159
.L.str.159:
	.asciz	"ggml_are_same_shape(src0, src0_grad_m)"
	.size	.L.str.159, 39

	.type	.L.str.160,@object              // @.str.160
.L.str.160:
	.asciz	"ggml_are_same_shape(src0, src0_grad_v)"
	.size	.L.str.160, 39

	.type	.L.str.161,@object              // @.str.161
.L.str.161:
	.asciz	"ggml_nelements(adamw_params) == 7"
	.size	.L.str.161, 34

	.type	ggml_cpu_init.is_first_call,@object // @ggml_cpu_init.is_first_call
	.local	ggml_cpu_init.is_first_call
	.comm	ggml_cpu_init.is_first_call,1,1
	.ident	"clang version 19.1.7"
	.section	".note.GNU-stack","",@progbits
